
===============================================================================
Notice: Installing ConfigurationOfDictoPHP development
===============================================================================
THERE_BE_DRAGONS_HERE
PrimitiveFailed: primitive #basicNew: in ByteString class failed
18 February 2015 10:14:57.210394 am

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
NBCogit NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
https://github.com/pharo-project/pharo-vm.git Commit: 4a0d556150d478ff2de3c9624d2f18e6eaa3fa5c Date: 2014-12-18 18:42:53 +0100 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14893

Image: Pharo3.0 [Latest update: #30863]

ByteString class(Object)>>primitiveFailed:
	Receiver: ByteString
	Arguments and temporary variables: 
		selector: 	#basicNew:
	Receiver's instance variables: 
		superclass: 	String
		methodDict: 	a MethodDictionary(#asByteArray->ByteString>>#asByteArray #asKeyCom...etc...
		format: 	23554
		layout: 	a ByteLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#ByteString
		classPool: 	a Dictionary(#NonAsciiMap->#[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Collections-Strings'
		traitComposition: 	{}
		localSelectors: 	nil


ByteString class(Object)>>primitiveFailed
	Receiver: ByteString
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	String
		methodDict: 	a MethodDictionary(#asByteArray->ByteString>>#asByteArray #asKeyCom...etc...
		format: 	23554
		layout: 	a ByteLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#ByteString
		classPool: 	a Dictionary(#NonAsciiMap->#[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Collections-Strings'
		traitComposition: 	{}
		localSelectors: 	nil


ByteString class(Behavior)>>basicNew:
	Receiver: ByteString
	Arguments and temporary variables: 
		sizeRequested: 	-2
	Receiver's instance variables: 
		superclass: 	String
		methodDict: 	a MethodDictionary(#asByteArray->ByteString>>#asByteArray #asKeyCom...etc...
		format: 	23554
		layout: 	a ByteLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#ByteString
		classPool: 	a Dictionary(#NonAsciiMap->#[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Collections-Strings'
		traitComposition: 	{}
		localSelectors: 	nil


ByteString class(String class)>>new:
	Receiver: ByteString
	Arguments and temporary variables: 
		sizeRequested: 	-2
	Receiver's instance variables: 
		superclass: 	String
		methodDict: 	a MethodDictionary(#asByteArray->ByteString>>#asByteArray #asKeyCom...etc...
		format: 	23554
		layout: 	a ByteLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#ByteString
		classPool: 	a Dictionary(#NonAsciiMap->#[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Collections-Strings'
		traitComposition: 	{}
		localSelectors: 	nil


ByteString(SequenceableCollection)>>copyFrom:to:
	Receiver: ''
	Arguments and temporary variables: 
		start: 	1
		stop: 	-2
		newSize: 	-2
	Receiver's instance variables: 
''

DIPhpDependencies>>testInput
	Receiver: a DIPhpDependencies
	Arguments and temporary variables: 
		strRules: 	''
	Receiver's instance variables: 
		output: 	''
		commandOutput: 	''
		NEWLINE: 	'
'
		rules: 	a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalker m...etc...
		varSynonyms: 	nil
		sessionId: 	'1424250897'
		TIMESTAMP: 	'1424250897'
		TOOLNAME: 	'DIPhpDependencies'
		PROJECTROOT: 	'/home/otruffer/DictoCLI/'
		PROJECTSRC: 	'./'
		PROJECTBIN: 	'./'
		RESULTFILE: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/meta/1424250897/...etc...
		TESTFILE: 	nil
		testInputFileExt: 	'.st'
		SYSTEM: 	SYSTEM


DITestGroup>>build
	Receiver: a DITestGroup
	Arguments and temporary variables: 

	Receiver's instance variables: 
		rules: 	an OrderedCollection(RuleResult cannot depend on DictoTalker DictoTalker...etc...
		adapter: 	a DIPhpDependencies
		runCommandText: 	nil
		testSpecification: 	nil
		adapterID: 	'DIPhpDependencies'
		resultFile: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/meta/1424250897/...etc...
		specificationFile: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/meta/1424...etc...
		commandFile: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/meta/1424250897...etc...


[ :testGroup | testGroup build ] in DIDicto>>dictoBuild:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = ...etc...
		adapterTestGroups: 	a Dictionary(DIGrepFileContent->a DITestGroup DIJMeterLoadTe...etc...
		testGroup: 	a DITestGroup
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424250897'
		singleShotTask: 	false


Array(SequenceableCollection)>>do:
	Receiver: an Array(a DITestGroup a DITestGroup a DITestGroup a DITestGroup a DITestGroup)
	Arguments and temporary variables: 
		aBlock: 	[ :testGroup | testGroup build ]
		index: 	4
	Receiver's instance variables: 
an Array(a DITestGroup a DITestGroup a DITestGroup a DITestGroup a DITestGroup)

DIDicto>>dictoBuild:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = ...etc...
		adapterTestGroups: 	a Dictionary(DIGrepFileContent->a DITestGroup DIJMeterLoadTe...etc...
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424250897'
		singleShotTask: 	false


DIDicto>>dictoRun:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = ...etc...
		adapterTestGroups: 	nil
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424250897'
		singleShotTask: 	false


DIDicto>>dictoAll:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = ...etc...
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424250897'
		singleShotTask: 	false


[ DIDicto new dictoAll: input ] in DIWebServiceAPI>>getRun
	Receiver: a DIWebServiceAPI
	Arguments and temporary variables: 
		in: 	'/home/otruffer/dicto/bin/analysis/meta/dicto.rules'
		input: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = PhpCl...etc...
		rulesFailed: 	nil
		rulesTotal: 	nil
	Receiver's instance variables: 
		request: 	nil
		response: 	nil
		variables: 	nil
		delegate: 	nil
		principal: 	nil
		credentials: 	nil


BlockClosure>>on:do:
	Receiver: [ DIDicto new dictoAll: input ]
	Arguments and temporary variables: 
		exception: 	DIException
		handlerAction: 	[ :ex | ^ self error: ex description ]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	DIWebServiceAPI>>getRun
		startpc: 	138
		numArgs: 	0


DIWebServiceAPI>>getRun
	Receiver: a DIWebServiceAPI
	Arguments and temporary variables: 
		in: 	'/home/otruffer/dicto/bin/analysis/meta/dicto.rules'
		input: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = PhpCl...etc...
		rulesFailed: 	nil
		rulesTotal: 	nil
	Receiver's instance variables: 
		request: 	nil
		response: 	nil
		variables: 	nil
		delegate: 	nil
		principal: 	nil
		credentials: 	nil


DIWebServiceHandler>>post
	Receiver: a DIWebServiceHandler
	Arguments and temporary variables: 
		api: 	a DIWebServiceAPI
	Receiver's instance variables: 
		request: 	a ZnRequest(POST /meta/run)
		response: 	nil
		variables: 	an OrderedCollection('meta' 'run')
		delegate: 	a ZnJSONRestServerDelegate
		principal: 	nil
		credentials: 	nil
		dicto: 	a DIDicto


DIWebServiceHandler(ZnRestCall)>>execute
	Receiver: a DIWebServiceHandler
	Arguments and temporary variables: 

	Receiver's instance variables: 
		request: 	a ZnRequest(POST /meta/run)
		response: 	nil
		variables: 	an OrderedCollection('meta' 'run')
		delegate: 	a ZnJSONRestServerDelegate
		principal: 	nil
		credentials: 	nil
		dicto: 	a DIDicto


[ call execute ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


BlockClosure>>on:do:
	Receiver: [ call execute ]
	Arguments and temporary variables: 
		exception: 	ZnRestCallUnauthorized
		handlerAction: 	[ :exception | self unauthorized: exception request ]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
		startpc: 	38
		numArgs: 	0


ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


[ self execute: call ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /meta/run)
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


BlockClosure>>on:do:
	Receiver: [ self execute: call ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :exception | 
request server debugMode
	ifTrue: [ exception pa...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
		startpc: 	99
		numArgs: 	0


ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /meta/run)
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ :delegate | delegate handleRequest: request ] ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /meta/run)
		delegate: 	a ZnJSONRestServerDelegate
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateRequest:do:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /meta/run)
		block: 	[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ ...etc...
		authenticator: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /meta/run)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream)


[ self authenticateAndDelegateRequest: request ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /meta/run)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream)


BlockClosure>>on:do:
	Receiver: [ self authenticateAndDelegateRequest: request ]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :exception | 
self debugMode
	ifTrue: [ exception pass ]
	ifFa...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequ...etc...
		startpc: 	58
		numArgs: 	0


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /meta/run)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /meta/run)
		response: 	nil
		initialMilliseconds: 	727433
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeOneRequestResponseOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		stream: 	a ZdcSocketStream
		request: 	a ZnRequest(POST /meta/run)
		response: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream)


[ self executeOneRequestResponseOn: stream ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		stream: 	a ZdcSocketStream
		request: 	nil
		response: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream)


[ 
p psValueAt: index put: anObject.
aBlock value ] in ZnCurrentServer(DynamicVariable)>>value:during:
	Receiver: a ZnCurrentServer
	Arguments and temporary variables: 
		anObject: 	a ZnManagingMultiThreadedServer(running 8010)
		aBlock: 	[ self executeOneRequestResponseOn: stream ]
		p: 	a Process in nil
		oldValue: 	nil
	Receiver's instance variables: 
		index: 	5


BlockClosure>>ensure:
	Receiver: [ 
p psValueAt: index put: anObject.
aBlock value ]
	Arguments and temporary variables: 
		aBlock: 	[ p psValueAt: index put: oldValue ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ZnCurrentServer(DynamicVariable)>>value:during:
		startpc: 	62
		numArgs: 	0


ZnCurrentServer(DynamicVariable)>>value:during:
	Receiver: a ZnCurrentServer
	Arguments and temporary variables: 
		anObject: 	a ZnManagingMultiThreadedServer(running 8010)
		aBlock: 	[ self executeOneRequestResponseOn: stream ]
		p: 	a Process in nil
		oldValue: 	nil
	Receiver's instance variables: 
		index: 	5


ZnCurrentServer class(DynamicVariable class)>>value:during:
	Receiver: ZnCurrentServer
	Arguments and temporary variables: 
		anObject: 	a ZnManagingMultiThreadedServer(running 8010)
		aBlock: 	[ self executeOneRequestResponseOn: stream ]
	Receiver's instance variables: 
		superclass: 	DynamicVariable
		methodDict: 	a MethodDictionary()
		format: 	132
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#ZnCurrentServer
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Zinc-HTTP-Variables'
		traitComposition: 	{}
		localSelectors: 	nil
		hash: 	nil
		soleInstance: 	a ZnCurrentServer


ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		stream: 	a ZdcSocketStream
		request: 	nil
		response: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream)


[ self executeRequestResponseLoopOn: stream ] in [ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ] in [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		listeningSocket: 	a Socket[waitingForConnection]
		stream: 	a ZdcSocketStream
		socket: 	a Socket[connected]
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream)


BlockClosure>>ensure:
	Receiver: [ self executeRequestResponseLoopOn: stream ]
	Arguments and temporary variables: 
		aBlock: 	[ 
self log debug: 'Closing stream'.
self closeSocketStream: stream ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		se...etc...
		startpc: 	118
		numArgs: 	0



--- The full stack ---
ByteString class(Object)>>primitiveFailed:
ByteString class(Object)>>primitiveFailed
ByteString class(Behavior)>>basicNew:
ByteString class(String class)>>new:
ByteString(SequenceableCollection)>>copyFrom:to:
DIPhpDependencies>>testInput
DITestGroup>>build
[ :testGroup | testGroup build ] in DIDicto>>dictoBuild:
Array(SequenceableCollection)>>do:
DIDicto>>dictoBuild:
DIDicto>>dictoRun:
DIDicto>>dictoAll:
[ DIDicto new dictoAll: input ] in DIWebServiceAPI>>getRun
BlockClosure>>on:do:
DIWebServiceAPI>>getRun
DIWebServiceHandler>>post
DIWebServiceHandler(ZnRestCall)>>execute
[ call execute ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
BlockClosure>>on:do:
ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
[ self execute: call ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
BlockClosure>>on:do:
ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ :delegate | delegate handleRequest: request ] ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateRequest:do:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
[ self authenticateAndDelegateRequest: request ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
BlockClosure>>on:do:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequest:
ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeOneRequestResponseOn:
[ self executeOneRequestResponseOn: stream ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
[ 
p psValueAt: index put: anObject.
aBlock value ] in ZnCurrentServer(DynamicVariable)>>value:during:
BlockClosure>>ensure:
ZnCurrentServer(DynamicVariable)>>value:during:
ZnCurrentServer class(DynamicVariable class)>>value:during:
ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
[ self executeRequestResponseLoopOn: stream ] in [ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ] in [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
BlockClosure>>ensure:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ] in [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
BlockClosure>>ifCurtailed:
[ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
PrimitiveFailed: primitive #basicNew: in ByteString class failed
18 February 2015 10:17:03.220464 am

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
NBCogit NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
https://github.com/pharo-project/pharo-vm.git Commit: 4a0d556150d478ff2de3c9624d2f18e6eaa3fa5c Date: 2014-12-18 18:42:53 +0100 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14893

Image: Pharo3.0 [Latest update: #30863]

ByteString class(Object)>>primitiveFailed:
	Receiver: ByteString
	Arguments and temporary variables: 
		selector: 	#basicNew:
	Receiver's instance variables: 
		superclass: 	String
		methodDict: 	a MethodDictionary(#asByteArray->ByteString>>#asByteArray #asKeyCom...etc...
		format: 	23554
		layout: 	a ByteLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#ByteString
		classPool: 	a Dictionary(#NonAsciiMap->#[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Collections-Strings'
		traitComposition: 	{}
		localSelectors: 	nil


ByteString class(Object)>>primitiveFailed
	Receiver: ByteString
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	String
		methodDict: 	a MethodDictionary(#asByteArray->ByteString>>#asByteArray #asKeyCom...etc...
		format: 	23554
		layout: 	a ByteLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#ByteString
		classPool: 	a Dictionary(#NonAsciiMap->#[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Collections-Strings'
		traitComposition: 	{}
		localSelectors: 	nil


ByteString class(Behavior)>>basicNew:
	Receiver: ByteString
	Arguments and temporary variables: 
		sizeRequested: 	-2
	Receiver's instance variables: 
		superclass: 	String
		methodDict: 	a MethodDictionary(#asByteArray->ByteString>>#asByteArray #asKeyCom...etc...
		format: 	23554
		layout: 	a ByteLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#ByteString
		classPool: 	a Dictionary(#NonAsciiMap->#[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Collections-Strings'
		traitComposition: 	{}
		localSelectors: 	nil


ByteString class(String class)>>new:
	Receiver: ByteString
	Arguments and temporary variables: 
		sizeRequested: 	-2
	Receiver's instance variables: 
		superclass: 	String
		methodDict: 	a MethodDictionary(#asByteArray->ByteString>>#asByteArray #asKeyCom...etc...
		format: 	23554
		layout: 	a ByteLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#ByteString
		classPool: 	a Dictionary(#NonAsciiMap->#[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Collections-Strings'
		traitComposition: 	{}
		localSelectors: 	nil


ByteString(SequenceableCollection)>>copyFrom:to:
	Receiver: ''
	Arguments and temporary variables: 
		start: 	1
		stop: 	-2
		newSize: 	-2
	Receiver's instance variables: 
''

DIPhpDependencies>>testInput
	Receiver: a DIPhpDependencies
	Arguments and temporary variables: 
		strRules: 	''
	Receiver's instance variables: 
		output: 	''
		commandOutput: 	''
		NEWLINE: 	'
'
		rules: 	a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalker m...etc...
		varSynonyms: 	nil
		sessionId: 	'1424251023'
		TIMESTAMP: 	'1424251023'
		TOOLNAME: 	'DIPhpDependencies'
		PROJECTROOT: 	'/home/otruffer/DictoCLI/'
		PROJECTSRC: 	'./'
		PROJECTBIN: 	'./'
		RESULTFILE: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/meta/1424250897/...etc...
		TESTFILE: 	nil
		testInputFileExt: 	'.st'
		SYSTEM: 	SYSTEM


DITestGroup>>build
	Receiver: a DITestGroup
	Arguments and temporary variables: 

	Receiver's instance variables: 
		rules: 	an OrderedCollection(RuleResult cannot depend on DictoTalker DictoTalker...etc...
		adapter: 	a DIPhpDependencies
		runCommandText: 	nil
		testSpecification: 	nil
		adapterID: 	'DIPhpDependencies'
		resultFile: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/meta/1424251023/...etc...
		specificationFile: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/meta/1424...etc...
		commandFile: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/meta/1424251023...etc...


[ :testGroup | testGroup build ] in DIDicto>>dictoBuild:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = ...etc...
		adapterTestGroups: 	a Dictionary(DIGrepFileContent->a DITestGroup DIJMeterLoadTe...etc...
		testGroup: 	a DITestGroup
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424251023'
		singleShotTask: 	false


Array(SequenceableCollection)>>do:
	Receiver: an Array(a DITestGroup a DITestGroup a DITestGroup a DITestGroup a DITestGroup)
	Arguments and temporary variables: 
		aBlock: 	[ :testGroup | testGroup build ]
		index: 	4
	Receiver's instance variables: 
an Array(a DITestGroup a DITestGroup a DITestGroup a DITestGroup a DITestGroup)

DIDicto>>dictoBuild:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = ...etc...
		adapterTestGroups: 	a Dictionary(DIGrepFileContent->a DITestGroup DIJMeterLoadTe...etc...
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424251023'
		singleShotTask: 	false


DIDicto>>dictoRun:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = ...etc...
		adapterTestGroups: 	nil
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424251023'
		singleShotTask: 	false


DIDicto>>dictoAll:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = ...etc...
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424251023'
		singleShotTask: 	false


[ DIDicto new dictoAll: input ] in DIWebServiceAPI>>getRun
	Receiver: a DIWebServiceAPI
	Arguments and temporary variables: 
		in: 	'/home/otruffer/dicto/bin/analysis/meta/dicto.rules'
		input: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = PhpCl...etc...
		rulesFailed: 	nil
		rulesTotal: 	nil
	Receiver's instance variables: 
		request: 	nil
		response: 	nil
		variables: 	nil
		delegate: 	nil
		principal: 	nil
		credentials: 	nil


BlockClosure>>on:do:
	Receiver: [ DIDicto new dictoAll: input ]
	Arguments and temporary variables: 
		exception: 	DIException
		handlerAction: 	[ :ex | ^ self error: ex description ]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	DIWebServiceAPI>>getRun
		startpc: 	138
		numArgs: 	0


DIWebServiceAPI>>getRun
	Receiver: a DIWebServiceAPI
	Arguments and temporary variables: 
		in: 	'/home/otruffer/dicto/bin/analysis/meta/dicto.rules'
		input: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = PhpCl...etc...
		rulesFailed: 	nil
		rulesTotal: 	nil
	Receiver's instance variables: 
		request: 	nil
		response: 	nil
		variables: 	nil
		delegate: 	nil
		principal: 	nil
		credentials: 	nil


DIWebServiceHandler>>post
	Receiver: a DIWebServiceHandler
	Arguments and temporary variables: 
		api: 	a DIWebServiceAPI
	Receiver's instance variables: 
		request: 	a ZnRequest(POST /meta/run)
		response: 	nil
		variables: 	an OrderedCollection('meta' 'run')
		delegate: 	a ZnJSONRestServerDelegate
		principal: 	nil
		credentials: 	nil
		dicto: 	a DIDicto


DIWebServiceHandler(ZnRestCall)>>execute
	Receiver: a DIWebServiceHandler
	Arguments and temporary variables: 

	Receiver's instance variables: 
		request: 	a ZnRequest(POST /meta/run)
		response: 	nil
		variables: 	an OrderedCollection('meta' 'run')
		delegate: 	a ZnJSONRestServerDelegate
		principal: 	nil
		credentials: 	nil
		dicto: 	a DIDicto


[ call execute ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


BlockClosure>>on:do:
	Receiver: [ call execute ]
	Arguments and temporary variables: 
		exception: 	ZnRestCallUnauthorized
		handlerAction: 	[ :exception | self unauthorized: exception request ]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
		startpc: 	38
		numArgs: 	0


ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


[ self execute: call ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /meta/run)
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


BlockClosure>>on:do:
	Receiver: [ self execute: call ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :exception | 
request server debugMode
	ifTrue: [ exception pa...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
		startpc: 	99
		numArgs: 	0


ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /meta/run)
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ :delegate | delegate handleRequest: request ] ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /meta/run)
		delegate: 	a ZnJSONRestServerDelegate
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateRequest:do:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /meta/run)
		block: 	[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ ...etc...
		authenticator: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /meta/run)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


[ self authenticateAndDelegateRequest: request ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /meta/run)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


BlockClosure>>on:do:
	Receiver: [ self authenticateAndDelegateRequest: request ]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :exception | 
self debugMode
	ifTrue: [ exception pass ]
	ifFa...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequ...etc...
		startpc: 	58
		numArgs: 	0


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /meta/run)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /meta/run)
		response: 	nil
		initialMilliseconds: 	853445
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeOneRequestResponseOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		stream: 	a ZdcSocketStream
		request: 	a ZnRequest(POST /meta/run)
		response: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


[ self executeOneRequestResponseOn: stream ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		stream: 	a ZdcSocketStream
		request: 	nil
		response: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


[ 
p psValueAt: index put: anObject.
aBlock value ] in ZnCurrentServer(DynamicVariable)>>value:during:
	Receiver: a ZnCurrentServer
	Arguments and temporary variables: 
		anObject: 	a ZnManagingMultiThreadedServer(running 8010)
		aBlock: 	[ self executeOneRequestResponseOn: stream ]
		p: 	a Process in nil
		oldValue: 	nil
	Receiver's instance variables: 
		index: 	5


BlockClosure>>ensure:
	Receiver: [ 
p psValueAt: index put: anObject.
aBlock value ]
	Arguments and temporary variables: 
		aBlock: 	[ p psValueAt: index put: oldValue ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ZnCurrentServer(DynamicVariable)>>value:during:
		startpc: 	62
		numArgs: 	0


ZnCurrentServer(DynamicVariable)>>value:during:
	Receiver: a ZnCurrentServer
	Arguments and temporary variables: 
		anObject: 	a ZnManagingMultiThreadedServer(running 8010)
		aBlock: 	[ self executeOneRequestResponseOn: stream ]
		p: 	a Process in nil
		oldValue: 	nil
	Receiver's instance variables: 
		index: 	5


ZnCurrentServer class(DynamicVariable class)>>value:during:
	Receiver: ZnCurrentServer
	Arguments and temporary variables: 
		anObject: 	a ZnManagingMultiThreadedServer(running 8010)
		aBlock: 	[ self executeOneRequestResponseOn: stream ]
	Receiver's instance variables: 
		superclass: 	DynamicVariable
		methodDict: 	a MethodDictionary()
		format: 	132
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#ZnCurrentServer
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Zinc-HTTP-Variables'
		traitComposition: 	{}
		localSelectors: 	nil
		hash: 	nil
		soleInstance: 	a ZnCurrentServer


ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		stream: 	a ZdcSocketStream
		request: 	nil
		response: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


[ self executeRequestResponseLoopOn: stream ] in [ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ] in [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		listeningSocket: 	a Socket[waitingForConnection]
		stream: 	a ZdcSocketStream
		socket: 	a Socket[connected]
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


BlockClosure>>ensure:
	Receiver: [ self executeRequestResponseLoopOn: stream ]
	Arguments and temporary variables: 
		aBlock: 	[ 
self log debug: 'Closing stream'.
self closeSocketStream: stream ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		se...etc...
		startpc: 	118
		numArgs: 	0



--- The full stack ---
ByteString class(Object)>>primitiveFailed:
ByteString class(Object)>>primitiveFailed
ByteString class(Behavior)>>basicNew:
ByteString class(String class)>>new:
ByteString(SequenceableCollection)>>copyFrom:to:
DIPhpDependencies>>testInput
DITestGroup>>build
[ :testGroup | testGroup build ] in DIDicto>>dictoBuild:
Array(SequenceableCollection)>>do:
DIDicto>>dictoBuild:
DIDicto>>dictoRun:
DIDicto>>dictoAll:
[ DIDicto new dictoAll: input ] in DIWebServiceAPI>>getRun
BlockClosure>>on:do:
DIWebServiceAPI>>getRun
DIWebServiceHandler>>post
DIWebServiceHandler(ZnRestCall)>>execute
[ call execute ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
BlockClosure>>on:do:
ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
[ self execute: call ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
BlockClosure>>on:do:
ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ :delegate | delegate handleRequest: request ] ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateRequest:do:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
[ self authenticateAndDelegateRequest: request ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
BlockClosure>>on:do:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequest:
ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeOneRequestResponseOn:
[ self executeOneRequestResponseOn: stream ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
[ 
p psValueAt: index put: anObject.
aBlock value ] in ZnCurrentServer(DynamicVariable)>>value:during:
BlockClosure>>ensure:
ZnCurrentServer(DynamicVariable)>>value:during:
ZnCurrentServer class(DynamicVariable class)>>value:during:
ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
[ self executeRequestResponseLoopOn: stream ] in [ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ] in [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
BlockClosure>>ensure:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ] in [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
BlockClosure>>ifCurtailed:
[ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
PrimitiveFailed: primitive #basicNew: in ByteString class failed
18 February 2015 10:18:34.329657 am

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
NBCogit NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
https://github.com/pharo-project/pharo-vm.git Commit: 4a0d556150d478ff2de3c9624d2f18e6eaa3fa5c Date: 2014-12-18 18:42:53 +0100 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14893

Image: Pharo3.0 [Latest update: #30863]

ByteString class(Object)>>primitiveFailed:
	Receiver: ByteString
	Arguments and temporary variables: 
		selector: 	#basicNew:
	Receiver's instance variables: 
		superclass: 	String
		methodDict: 	a MethodDictionary(#asByteArray->ByteString>>#asByteArray #asKeyCom...etc...
		format: 	23554
		layout: 	a ByteLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#ByteString
		classPool: 	a Dictionary(#NonAsciiMap->#[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Collections-Strings'
		traitComposition: 	{}
		localSelectors: 	nil


ByteString class(Object)>>primitiveFailed
	Receiver: ByteString
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	String
		methodDict: 	a MethodDictionary(#asByteArray->ByteString>>#asByteArray #asKeyCom...etc...
		format: 	23554
		layout: 	a ByteLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#ByteString
		classPool: 	a Dictionary(#NonAsciiMap->#[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Collections-Strings'
		traitComposition: 	{}
		localSelectors: 	nil


ByteString class(Behavior)>>basicNew:
	Receiver: ByteString
	Arguments and temporary variables: 
		sizeRequested: 	-2
	Receiver's instance variables: 
		superclass: 	String
		methodDict: 	a MethodDictionary(#asByteArray->ByteString>>#asByteArray #asKeyCom...etc...
		format: 	23554
		layout: 	a ByteLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#ByteString
		classPool: 	a Dictionary(#NonAsciiMap->#[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Collections-Strings'
		traitComposition: 	{}
		localSelectors: 	nil


ByteString class(String class)>>new:
	Receiver: ByteString
	Arguments and temporary variables: 
		sizeRequested: 	-2
	Receiver's instance variables: 
		superclass: 	String
		methodDict: 	a MethodDictionary(#asByteArray->ByteString>>#asByteArray #asKeyCom...etc...
		format: 	23554
		layout: 	a ByteLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#ByteString
		classPool: 	a Dictionary(#NonAsciiMap->#[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Collections-Strings'
		traitComposition: 	{}
		localSelectors: 	nil


ByteString(SequenceableCollection)>>copyFrom:to:
	Receiver: ''
	Arguments and temporary variables: 
		start: 	1
		stop: 	-2
		newSize: 	-2
	Receiver's instance variables: 
''

DIPhpDependencies>>testInput
	Receiver: a DIPhpDependencies
	Arguments and temporary variables: 
		strRules: 	''
	Receiver's instance variables: 
		output: 	''
		commandOutput: 	''
		NEWLINE: 	'
'
		rules: 	a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalker m...etc...
		varSynonyms: 	nil
		sessionId: 	'1424251114'
		TIMESTAMP: 	'1424251114'
		TOOLNAME: 	'DIPhpDependencies'
		PROJECTROOT: 	'/home/otruffer/DictoCLI/'
		PROJECTSRC: 	'./'
		PROJECTBIN: 	'./'
		RESULTFILE: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/meta/1424250897/...etc...
		TESTFILE: 	nil
		testInputFileExt: 	'.st'
		SYSTEM: 	SYSTEM


DITestGroup>>build
	Receiver: a DITestGroup
	Arguments and temporary variables: 

	Receiver's instance variables: 
		rules: 	an OrderedCollection(RuleResult cannot depend on DictoTalker DictoTalker...etc...
		adapter: 	a DIPhpDependencies
		runCommandText: 	nil
		testSpecification: 	nil
		adapterID: 	'DIPhpDependencies'
		resultFile: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/meta/1424251114/...etc...
		specificationFile: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/meta/1424...etc...
		commandFile: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/meta/1424251114...etc...


[ :testGroup | testGroup build ] in DIDicto>>dictoBuild:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = ...etc...
		adapterTestGroups: 	a Dictionary(DIGrepFileContent->a DITestGroup DIJMeterLoadTe...etc...
		testGroup: 	a DITestGroup
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424251114'
		singleShotTask: 	false


Array(SequenceableCollection)>>do:
	Receiver: an Array(a DITestGroup a DITestGroup a DITestGroup a DITestGroup a DITestGroup)
	Arguments and temporary variables: 
		aBlock: 	[ :testGroup | testGroup build ]
		index: 	4
	Receiver's instance variables: 
an Array(a DITestGroup a DITestGroup a DITestGroup a DITestGroup a DITestGroup)

DIDicto>>dictoBuild:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = ...etc...
		adapterTestGroups: 	a Dictionary(DIGrepFileContent->a DITestGroup DIJMeterLoadTe...etc...
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424251114'
		singleShotTask: 	false


DIDicto>>dictoRun:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = ...etc...
		adapterTestGroups: 	nil
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424251114'
		singleShotTask: 	false


DIDicto>>dictoAll:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = ...etc...
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424251114'
		singleShotTask: 	false


[ DIDicto new dictoAll: input ] in DIWebServiceAPI>>getRun
	Receiver: a DIWebServiceAPI
	Arguments and temporary variables: 
		in: 	'/home/otruffer/dicto/bin/analysis/meta/dicto.rules'
		input: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = PhpCl...etc...
		rulesFailed: 	nil
		rulesTotal: 	nil
	Receiver's instance variables: 
		request: 	nil
		response: 	nil
		variables: 	nil
		delegate: 	nil
		principal: 	nil
		credentials: 	nil


BlockClosure>>on:do:
	Receiver: [ DIDicto new dictoAll: input ]
	Arguments and temporary variables: 
		exception: 	DIException
		handlerAction: 	[ :ex | ^ self error: ex description ]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	DIWebServiceAPI>>getRun
		startpc: 	138
		numArgs: 	0


DIWebServiceAPI>>getRun
	Receiver: a DIWebServiceAPI
	Arguments and temporary variables: 
		in: 	'/home/otruffer/dicto/bin/analysis/meta/dicto.rules'
		input: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = PhpCl...etc...
		rulesFailed: 	nil
		rulesTotal: 	nil
	Receiver's instance variables: 
		request: 	nil
		response: 	nil
		variables: 	nil
		delegate: 	nil
		principal: 	nil
		credentials: 	nil


DIWebServiceHandler>>post
	Receiver: a DIWebServiceHandler
	Arguments and temporary variables: 
		api: 	a DIWebServiceAPI
	Receiver's instance variables: 
		request: 	a ZnRequest(POST /meta/run)
		response: 	nil
		variables: 	an OrderedCollection('meta' 'run')
		delegate: 	a ZnJSONRestServerDelegate
		principal: 	nil
		credentials: 	nil
		dicto: 	a DIDicto


DIWebServiceHandler(ZnRestCall)>>execute
	Receiver: a DIWebServiceHandler
	Arguments and temporary variables: 

	Receiver's instance variables: 
		request: 	a ZnRequest(POST /meta/run)
		response: 	nil
		variables: 	an OrderedCollection('meta' 'run')
		delegate: 	a ZnJSONRestServerDelegate
		principal: 	nil
		credentials: 	nil
		dicto: 	a DIDicto


[ call execute ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


BlockClosure>>on:do:
	Receiver: [ call execute ]
	Arguments and temporary variables: 
		exception: 	ZnRestCallUnauthorized
		handlerAction: 	[ :exception | self unauthorized: exception request ]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
		startpc: 	38
		numArgs: 	0


ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


[ self execute: call ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /meta/run)
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


BlockClosure>>on:do:
	Receiver: [ self execute: call ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :exception | 
request server debugMode
	ifTrue: [ exception pa...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
		startpc: 	99
		numArgs: 	0


ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /meta/run)
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ :delegate | delegate handleRequest: request ] ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /meta/run)
		delegate: 	a ZnJSONRestServerDelegate
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateRequest:do:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /meta/run)
		block: 	[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ ...etc...
		authenticator: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /meta/run)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


[ self authenticateAndDelegateRequest: request ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /meta/run)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


BlockClosure>>on:do:
	Receiver: [ self authenticateAndDelegateRequest: request ]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :exception | 
self debugMode
	ifTrue: [ exception pass ]
	ifFa...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequ...etc...
		startpc: 	58
		numArgs: 	0


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /meta/run)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /meta/run)
		response: 	nil
		initialMilliseconds: 	944559
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeOneRequestResponseOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		stream: 	a ZdcSocketStream
		request: 	a ZnRequest(POST /meta/run)
		response: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


[ self executeOneRequestResponseOn: stream ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		stream: 	a ZdcSocketStream
		request: 	nil
		response: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


[ 
p psValueAt: index put: anObject.
aBlock value ] in ZnCurrentServer(DynamicVariable)>>value:during:
	Receiver: a ZnCurrentServer
	Arguments and temporary variables: 
		anObject: 	a ZnManagingMultiThreadedServer(running 8010)
		aBlock: 	[ self executeOneRequestResponseOn: stream ]
		p: 	a Process in nil
		oldValue: 	nil
	Receiver's instance variables: 
		index: 	5


BlockClosure>>ensure:
	Receiver: [ 
p psValueAt: index put: anObject.
aBlock value ]
	Arguments and temporary variables: 
		aBlock: 	[ p psValueAt: index put: oldValue ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ZnCurrentServer(DynamicVariable)>>value:during:
		startpc: 	62
		numArgs: 	0


ZnCurrentServer(DynamicVariable)>>value:during:
	Receiver: a ZnCurrentServer
	Arguments and temporary variables: 
		anObject: 	a ZnManagingMultiThreadedServer(running 8010)
		aBlock: 	[ self executeOneRequestResponseOn: stream ]
		p: 	a Process in nil
		oldValue: 	nil
	Receiver's instance variables: 
		index: 	5


ZnCurrentServer class(DynamicVariable class)>>value:during:
	Receiver: ZnCurrentServer
	Arguments and temporary variables: 
		anObject: 	a ZnManagingMultiThreadedServer(running 8010)
		aBlock: 	[ self executeOneRequestResponseOn: stream ]
	Receiver's instance variables: 
		superclass: 	DynamicVariable
		methodDict: 	a MethodDictionary()
		format: 	132
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#ZnCurrentServer
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Zinc-HTTP-Variables'
		traitComposition: 	{}
		localSelectors: 	nil
		hash: 	nil
		soleInstance: 	a ZnCurrentServer


ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		stream: 	a ZdcSocketStream
		request: 	nil
		response: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


[ self executeRequestResponseLoopOn: stream ] in [ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ] in [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		listeningSocket: 	a Socket[waitingForConnection]
		stream: 	a ZdcSocketStream
		socket: 	a Socket[connected]
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


BlockClosure>>ensure:
	Receiver: [ self executeRequestResponseLoopOn: stream ]
	Arguments and temporary variables: 
		aBlock: 	[ 
self log debug: 'Closing stream'.
self closeSocketStream: stream ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		se...etc...
		startpc: 	118
		numArgs: 	0



--- The full stack ---
ByteString class(Object)>>primitiveFailed:
ByteString class(Object)>>primitiveFailed
ByteString class(Behavior)>>basicNew:
ByteString class(String class)>>new:
ByteString(SequenceableCollection)>>copyFrom:to:
DIPhpDependencies>>testInput
DITestGroup>>build
[ :testGroup | testGroup build ] in DIDicto>>dictoBuild:
Array(SequenceableCollection)>>do:
DIDicto>>dictoBuild:
DIDicto>>dictoRun:
DIDicto>>dictoAll:
[ DIDicto new dictoAll: input ] in DIWebServiceAPI>>getRun
BlockClosure>>on:do:
DIWebServiceAPI>>getRun
DIWebServiceHandler>>post
DIWebServiceHandler(ZnRestCall)>>execute
[ call execute ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
BlockClosure>>on:do:
ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
[ self execute: call ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
BlockClosure>>on:do:
ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ :delegate | delegate handleRequest: request ] ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateRequest:do:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
[ self authenticateAndDelegateRequest: request ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
BlockClosure>>on:do:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequest:
ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeOneRequestResponseOn:
[ self executeOneRequestResponseOn: stream ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
[ 
p psValueAt: index put: anObject.
aBlock value ] in ZnCurrentServer(DynamicVariable)>>value:during:
BlockClosure>>ensure:
ZnCurrentServer(DynamicVariable)>>value:during:
ZnCurrentServer class(DynamicVariable class)>>value:during:
ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
[ self executeRequestResponseLoopOn: stream ] in [ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ] in [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
BlockClosure>>ensure:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ] in [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
BlockClosure>>ifCurtailed:
[ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: ByteString>>length
18 February 2015 10:22:25.191629 am

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
NBCogit NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
https://github.com/pharo-project/pharo-vm.git Commit: 4a0d556150d478ff2de3c9624d2f18e6eaa3fa5c Date: 2014-12-18 18:42:53 +0100 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14893

Image: Pharo3.0 [Latest update: #30863]

ByteString(Object)>>doesNotUnderstand: #length
	Receiver: ''
	Arguments and temporary variables: 
		aMessage: 	length
		exception: 	MessageNotUnderstood: ByteString>>length
		resumeValue: 	nil
	Receiver's instance variables: 
''

DIPhpDependencies>>testInput
	Receiver: a DIPhpDependencies
	Arguments and temporary variables: 
		strRules: 	''
	Receiver's instance variables: 
		output: 	''
		commandOutput: 	''
		NEWLINE: 	'
'
		rules: 	a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalker m...etc...
		varSynonyms: 	nil
		sessionId: 	'1424251345'
		TIMESTAMP: 	'1424251345'
		TOOLNAME: 	'DIPhpDependencies'
		PROJECTROOT: 	'/home/otruffer/DictoCLI/'
		PROJECTSRC: 	'./'
		PROJECTBIN: 	'./'
		RESULTFILE: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/meta/1424250897/...etc...
		TESTFILE: 	nil
		testInputFileExt: 	'.st'
		SYSTEM: 	SYSTEM


DITestGroup>>build
	Receiver: a DITestGroup
	Arguments and temporary variables: 

	Receiver's instance variables: 
		rules: 	an OrderedCollection(RuleResult cannot depend on DictoTalker DictoTalker...etc...
		adapter: 	a DIPhpDependencies
		runCommandText: 	nil
		testSpecification: 	nil
		adapterID: 	'DIPhpDependencies'
		resultFile: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/meta/1424251345/...etc...
		specificationFile: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/meta/1424...etc...
		commandFile: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/meta/1424251345...etc...


[ :testGroup | testGroup build ] in DIDicto>>dictoBuild:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = ...etc...
		adapterTestGroups: 	a Dictionary(DIGrepFileContent->a DITestGroup DIJMeterLoadTe...etc...
		testGroup: 	a DITestGroup
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424251345'
		singleShotTask: 	false


Array(SequenceableCollection)>>do:
	Receiver: an Array(a DITestGroup a DITestGroup a DITestGroup a DITestGroup a DITestGroup)
	Arguments and temporary variables: 
		aBlock: 	[ :testGroup | testGroup build ]
		index: 	4
	Receiver's instance variables: 
an Array(a DITestGroup a DITestGroup a DITestGroup a DITestGroup a DITestGroup)

DIDicto>>dictoBuild:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = ...etc...
		adapterTestGroups: 	a Dictionary(DIGrepFileContent->a DITestGroup DIJMeterLoadTe...etc...
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424251345'
		singleShotTask: 	false


DIDicto>>dictoRun:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = ...etc...
		adapterTestGroups: 	nil
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424251345'
		singleShotTask: 	false


DIDicto>>dictoAll:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = ...etc...
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424251345'
		singleShotTask: 	false


[ DIDicto new dictoAll: input ] in DIWebServiceAPI>>getRun
	Receiver: a DIWebServiceAPI
	Arguments and temporary variables: 
		in: 	'/home/otruffer/dicto/bin/analysis/meta/dicto.rules'
		input: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = PhpCl...etc...
		rulesFailed: 	nil
		rulesTotal: 	nil
	Receiver's instance variables: 
		request: 	nil
		response: 	nil
		variables: 	nil
		delegate: 	nil
		principal: 	nil
		credentials: 	nil


BlockClosure>>on:do:
	Receiver: [ DIDicto new dictoAll: input ]
	Arguments and temporary variables: 
		exception: 	DIException
		handlerAction: 	[ :ex | ^ self error: ex description ]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	DIWebServiceAPI>>getRun
		startpc: 	138
		numArgs: 	0


DIWebServiceAPI>>getRun
	Receiver: a DIWebServiceAPI
	Arguments and temporary variables: 
		in: 	'/home/otruffer/dicto/bin/analysis/meta/dicto.rules'
		input: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = PhpCl...etc...
		rulesFailed: 	nil
		rulesTotal: 	nil
	Receiver's instance variables: 
		request: 	nil
		response: 	nil
		variables: 	nil
		delegate: 	nil
		principal: 	nil
		credentials: 	nil


DIWebServiceHandler>>post
	Receiver: a DIWebServiceHandler
	Arguments and temporary variables: 
		api: 	a DIWebServiceAPI
	Receiver's instance variables: 
		request: 	a ZnRequest(POST /meta/run)
		response: 	nil
		variables: 	an OrderedCollection('meta' 'run')
		delegate: 	a ZnJSONRestServerDelegate
		principal: 	nil
		credentials: 	nil
		dicto: 	a DIDicto


DIWebServiceHandler(ZnRestCall)>>execute
	Receiver: a DIWebServiceHandler
	Arguments and temporary variables: 

	Receiver's instance variables: 
		request: 	a ZnRequest(POST /meta/run)
		response: 	nil
		variables: 	an OrderedCollection('meta' 'run')
		delegate: 	a ZnJSONRestServerDelegate
		principal: 	nil
		credentials: 	nil
		dicto: 	a DIDicto


[ call execute ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


BlockClosure>>on:do:
	Receiver: [ call execute ]
	Arguments and temporary variables: 
		exception: 	ZnRestCallUnauthorized
		handlerAction: 	[ :exception | self unauthorized: exception request ]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
		startpc: 	38
		numArgs: 	0


ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


[ self execute: call ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /meta/run)
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


BlockClosure>>on:do:
	Receiver: [ self execute: call ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :exception | 
request server debugMode
	ifTrue: [ exception pa...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
		startpc: 	99
		numArgs: 	0


ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /meta/run)
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ :delegate | delegate handleRequest: request ] ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /meta/run)
		delegate: 	a ZnJSONRestServerDelegate
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateRequest:do:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /meta/run)
		block: 	[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ ...etc...
		authenticator: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /meta/run)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


[ self authenticateAndDelegateRequest: request ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /meta/run)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


BlockClosure>>on:do:
	Receiver: [ self authenticateAndDelegateRequest: request ]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :exception | 
self debugMode
	ifTrue: [ exception pass ]
	ifFa...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequ...etc...
		startpc: 	58
		numArgs: 	0


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /meta/run)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /meta/run)
		response: 	nil
		initialMilliseconds: 	1175413
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeOneRequestResponseOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		stream: 	a ZdcSocketStream
		request: 	a ZnRequest(POST /meta/run)
		response: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


[ self executeOneRequestResponseOn: stream ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		stream: 	a ZdcSocketStream
		request: 	nil
		response: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


[ 
p psValueAt: index put: anObject.
aBlock value ] in ZnCurrentServer(DynamicVariable)>>value:during:
	Receiver: a ZnCurrentServer
	Arguments and temporary variables: 
		anObject: 	a ZnManagingMultiThreadedServer(running 8010)
		aBlock: 	[ self executeOneRequestResponseOn: stream ]
		p: 	a Process in nil
		oldValue: 	nil
	Receiver's instance variables: 
		index: 	5


BlockClosure>>ensure:
	Receiver: [ 
p psValueAt: index put: anObject.
aBlock value ]
	Arguments and temporary variables: 
		aBlock: 	[ p psValueAt: index put: oldValue ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ZnCurrentServer(DynamicVariable)>>value:during:
		startpc: 	62
		numArgs: 	0


ZnCurrentServer(DynamicVariable)>>value:during:
	Receiver: a ZnCurrentServer
	Arguments and temporary variables: 
		anObject: 	a ZnManagingMultiThreadedServer(running 8010)
		aBlock: 	[ self executeOneRequestResponseOn: stream ]
		p: 	a Process in nil
		oldValue: 	nil
	Receiver's instance variables: 
		index: 	5


ZnCurrentServer class(DynamicVariable class)>>value:during:
	Receiver: ZnCurrentServer
	Arguments and temporary variables: 
		anObject: 	a ZnManagingMultiThreadedServer(running 8010)
		aBlock: 	[ self executeOneRequestResponseOn: stream ]
	Receiver's instance variables: 
		superclass: 	DynamicVariable
		methodDict: 	a MethodDictionary()
		format: 	132
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#ZnCurrentServer
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Zinc-HTTP-Variables'
		traitComposition: 	{}
		localSelectors: 	nil
		hash: 	nil
		soleInstance: 	a ZnCurrentServer


ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		stream: 	a ZdcSocketStream
		request: 	nil
		response: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


[ self executeRequestResponseLoopOn: stream ] in [ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ] in [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		listeningSocket: 	a Socket[waitingForConnection]
		stream: 	a ZdcSocketStream
		socket: 	a Socket[connected]
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


BlockClosure>>ensure:
	Receiver: [ self executeRequestResponseLoopOn: stream ]
	Arguments and temporary variables: 
		aBlock: 	[ 
self log debug: 'Closing stream'.
self closeSocketStream: stream ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		se...etc...
		startpc: 	118
		numArgs: 	0


[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ] in [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		listeningSocket: 	a Socket[waitingForConnection]
		stream: 	a ZdcSocketStream
		socket: 	a Socket[connected]
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


BlockClosure>>ifCurtailed:
	Receiver: [ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing st...etc...
	Arguments and temporary variables: 
		aBlock: 	[ 
self log debug: 'Destroying socket'.
socket destroy ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	[ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
	...etc...
		startpc: 	113
		numArgs: 	0


[ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		listeningSocket: 	a Socket[waitingForConnection]
		stream: 	a ZdcSocketStream
		socket: 	a Socket[connected]
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnec...etc...
		startpc: 	108
		numArgs: 	0



--- The full stack ---
ByteString(Object)>>doesNotUnderstand: #length
DIPhpDependencies>>testInput
DITestGroup>>build
[ :testGroup | testGroup build ] in DIDicto>>dictoBuild:
Array(SequenceableCollection)>>do:
DIDicto>>dictoBuild:
DIDicto>>dictoRun:
DIDicto>>dictoAll:
[ DIDicto new dictoAll: input ] in DIWebServiceAPI>>getRun
BlockClosure>>on:do:
DIWebServiceAPI>>getRun
DIWebServiceHandler>>post
DIWebServiceHandler(ZnRestCall)>>execute
[ call execute ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
BlockClosure>>on:do:
ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
[ self execute: call ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
BlockClosure>>on:do:
ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ :delegate | delegate handleRequest: request ] ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateRequest:do:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
[ self authenticateAndDelegateRequest: request ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
BlockClosure>>on:do:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequest:
ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeOneRequestResponseOn:
[ self executeOneRequestResponseOn: stream ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
[ 
p psValueAt: index put: anObject.
aBlock value ] in ZnCurrentServer(DynamicVariable)>>value:during:
BlockClosure>>ensure:
ZnCurrentServer(DynamicVariable)>>value:during:
ZnCurrentServer class(DynamicVariable class)>>value:during:
ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
[ self executeRequestResponseLoopOn: stream ] in [ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ] in [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
BlockClosure>>ensure:
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ] in [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
BlockClosure>>ifCurtailed:
[ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
NeoJSONParseError: invalid input: nil
18 February 2015 10:39:10.862691 am

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
NBCogit NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
https://github.com/pharo-project/pharo-vm.git Commit: 4a0d556150d478ff2de3c9624d2f18e6eaa3fa5c Date: 2014-12-18 18:42:53 +0100 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14893

Image: Pharo3.0 [Latest update: #30863]

NeoJSONReader>>error:
	Receiver: a NeoJSONReader
	Arguments and temporary variables: 
		text: 	'invalid input: nil'
	Receiver's instance variables: 
		mappings: 	nil
		readStream: 	a ReadStream
		stringStream: 	nil
		listClass: 	nil
		mapClass: 	nil
		propertyNamesAsSymbols: 	false


NeoJSONReader>>parseValue
	Receiver: a NeoJSONReader
	Arguments and temporary variables: 
		char: 	nil
	Receiver's instance variables: 
		mappings: 	nil
		readStream: 	a ReadStream
		stringStream: 	nil
		listClass: 	nil
		mapClass: 	nil
		propertyNamesAsSymbols: 	false


NeoJSONReader>>next
	Receiver: a NeoJSONReader
	Arguments and temporary variables: 

	Receiver's instance variables: 
		mappings: 	nil
		readStream: 	a ReadStream
		stringStream: 	nil
		listClass: 	nil
		mapClass: 	nil
		propertyNamesAsSymbols: 	false


NeoJSONReader class>>fromString:
	Receiver: NeoJSONReader
	Arguments and temporary variables: 
		string: 	''
	Receiver's instance variables: 
		superclass: 	NeoJSONMapper
		methodDict: 	a MethodDictionary(#atEnd->NeoJSONReader>>#atEnd #close->NeoJSONRea...etc...
		format: 	142
		layout: 	a FixedLayout
		instanceVariables: 	#(#readStream #stringStream #listClass #mapClass #propertyNa...etc...
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#NeoJSONReader
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Neo-JSON-Core'
		traitComposition: 	{}
		localSelectors: 	nil


DIPhpModel>>_loadPhpModel
	Receiver: a DIPhpModel
	Arguments and temporary variables: 

	Receiver's instance variables: 
		defRules: 	a DICollectionRule()
		defVars: 	a DICollectionVar(SYSTEM)
		analysisID: 	'1424252351'
		additionalProperties: 	a Dictionary()
		ruleCounter: 	0
		varCounter: 	0
		defVarElements: 	a DICollectionVarElements()
		defVarInvertedElements: 	a DICollectionVarElements()
		model: 	nil


DIPhpModel>>model
	Receiver: a DIPhpModel
	Arguments and temporary variables: 

	Receiver's instance variables: 
		defRules: 	a DICollectionRule()
		defVars: 	a DICollectionVar(SYSTEM)
		analysisID: 	'1424252351'
		additionalProperties: 	a Dictionary()
		ruleCounter: 	0
		varCounter: 	0
		defVarElements: 	a DICollectionVarElements()
		defVarInvertedElements: 	a DICollectionVarElements()
		model: 	nil


DIVarPhpClass>>allElements
	Receiver: RuleResult
	Arguments and temporary variables: 

	Receiver's instance variables: 
		isFirst: 	false
		dslText: 	'RuleResult=PhpClass with name:"Dicto\RuleResult"'
		type: 	'PhpClass'
		id: 	1
		entity: 	nil
		name: 	'RuleResult'
		specifiers: 	an OrderedCollection(name=Dicto\RuleResult)
		isInverted: 	false
		elements: 	a DICollectionVarElements()
		invertedElements: 	a DICollectionVarElements()


DIVarPhpClass(DIVar)>>elements
	Receiver: RuleResult
	Arguments and temporary variables: 
		valid: 	nil
	Receiver's instance variables: 
		isFirst: 	false
		dslText: 	'RuleResult=PhpClass with name:"Dicto\RuleResult"'
		type: 	'PhpClass'
		id: 	1
		entity: 	nil
		name: 	'RuleResult'
		specifiers: 	an OrderedCollection(name=Dicto\RuleResult)
		isInverted: 	false
		elements: 	a DICollectionVarElements()
		invertedElements: 	a DICollectionVarElements()


DISimpleRule>>subjectElements
	Receiver: RuleResult cannot depend on DictoTalker
	Arguments and temporary variables: 
		subjectElements: 	nil
	Receiver's instance variables: 
		isFirst: 	nil
		dslText: 	'RuleResult cannot depend on DictoTalker'
		type: 	#cannot
		id: 	1001
		entity: 	nil
		subjects: 	an Array(RuleResult)
		predicates: 	an Array(depend on DictoTalker)
		subRules: 	nil
		candidateAdapters: 	a SortedCollection(DIPhpDependencies)
		chosenAdapter: 	DIPhpDependencies
		hasFailed: 	false
		failureMessage: 	''
		failingPredicates: 	a Set()
		hasSubjectInverted: 	false
		hasPredicateInverted: 	false


DITestGroup>>_failingPredicatesFor:
	Receiver: a DITestGroup
	Arguments and temporary variables: 
		rule: 	RuleResult cannot depend on DictoTalker
		allPredicates: 	a Set()
		mustFindPassing: 	nil
		failingPredicates: 	nil
		predicateReadableValue: 	''
		predName: 	'dependOn'
	Receiver's instance variables: 
		rules: 	an OrderedCollection(RuleResult cannot depend on DictoTalker DictoTalker...etc...
		adapter: 	a DIPhpDependencies
		runCommandText: 	nil
		testSpecification: 	nil
		adapterID: 	'DIPhpDependencies'
		resultFile: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/meta/1424251359/...etc...
		specificationFile: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/meta/1424...etc...
		commandFile: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/meta/1424251359...etc...


[ :rule | 
| failingPredicates |
failingPredicates := self _failingPredicatesFor: rule.
failingPredicates size > 0
	ifTrue: [ 
		rule setFailed.
		rule errorPredicates: failingPredicates ] ] in DITestGroup>>read
	Receiver: a DITestGroup
	Arguments and temporary variables: 
		rule: 	RuleResult cannot depend on DictoTalker
		failingPredicates: 	nil
	Receiver's instance variables: 
		rules: 	an OrderedCollection(RuleResult cannot depend on DictoTalker DictoTalker...etc...
		adapter: 	a DIPhpDependencies
		runCommandText: 	nil
		testSpecification: 	nil
		adapterID: 	'DIPhpDependencies'
		resultFile: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/meta/1424251359/...etc...
		specificationFile: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/meta/1424...etc...
		commandFile: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/meta/1424251359...etc...


OrderedCollection>>do:
	Receiver: an OrderedCollection(RuleResult cannot depend on DictoTalker DictoTalker must depend on Ru...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :rule | 
| failingPredicates |
failingPredicates := self _failingPred...etc...
		index: 	1
	Receiver's instance variables: 
		array: 	an Array(RuleResult cannot depend on DictoTalker DictoTalker must depend...etc...
		firstIndex: 	1
		lastIndex: 	3


DITestGroup>>read
	Receiver: a DITestGroup
	Arguments and temporary variables: 

	Receiver's instance variables: 
		rules: 	an OrderedCollection(RuleResult cannot depend on DictoTalker DictoTalker...etc...
		adapter: 	a DIPhpDependencies
		runCommandText: 	nil
		testSpecification: 	nil
		adapterID: 	'DIPhpDependencies'
		resultFile: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/meta/1424251359/...etc...
		specificationFile: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/meta/1424...etc...
		commandFile: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/meta/1424251359...etc...


[ :testSuite | testSuite read ] in DIDicto>>_parseResultsFor:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		adapterTestGroups: 	a Dictionary(DIGrepFileContent->a DITestGroup DIJMeterLoadTe...etc...
		notFailingRules: 	nil
		failingRules: 	nil
		testSuite: 	a DITestGroup
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424252351'
		singleShotTask: 	true


Array(SequenceableCollection)>>do:
	Receiver: an Array(a DITestGroup a DITestGroup a DITestGroup a DITestGroup a DITestGroup)
	Arguments and temporary variables: 
		aBlock: 	[ :testSuite | testSuite read ]
		index: 	4
	Receiver's instance variables: 
an Array(a DITestGroup a DITestGroup a DITestGroup a DITestGroup a DITestGroup)

DIDicto>>_parseResultsFor:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		adapterTestGroups: 	a Dictionary(DIGrepFileContent->a DITestGroup DIJMeterLoadTe...etc...
		notFailingRules: 	nil
		failingRules: 	nil
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424252351'
		singleShotTask: 	true


DIDicto>>dictoCheck:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'RuleResult = PhpClass with name:"Dicto\RuleResult"
DictoTalker = P...etc...
		adapterTestGroups: 	a Dictionary(DIGrepFileContent->a DITestGroup DIJMeterLoadTe...etc...
		exportFormat: 	nil
		xml: 	nil
		json: 	nil
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424252351'
		singleShotTask: 	true


[ ^ dicto dictoCheck: input ] in DIWebServiceAPI>>getResults
	Receiver: a DIWebServiceAPI
	Arguments and temporary variables: 
		in: 	'/home/otruffer/dicto/bin/analysis/meta/dicto.rules'
		input: 	'RuleResult = PhpClass with name:"Dicto\RuleResult"
DictoTalker = PhpCla...etc...
		dicto: 	a DIDicto
	Receiver's instance variables: 
		request: 	nil
		response: 	nil
		variables: 	nil
		delegate: 	nil
		principal: 	nil
		credentials: 	nil


BlockClosure>>on:do:
	Receiver: [ ^ dicto dictoCheck: input ]
	Arguments and temporary variables: 
		exception: 	DIException
		handlerAction: 	[ :ex | ^ self error: ex description ]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	DIWebServiceAPI>>getResults
		startpc: 	110
		numArgs: 	0


DIWebServiceAPI>>getResults
	Receiver: a DIWebServiceAPI
	Arguments and temporary variables: 
		in: 	'/home/otruffer/dicto/bin/analysis/meta/dicto.rules'
		input: 	'RuleResult = PhpClass with name:"Dicto\RuleResult"
DictoTalker = PhpCla...etc...
		dicto: 	a DIDicto
	Receiver's instance variables: 
		request: 	nil
		response: 	nil
		variables: 	nil
		delegate: 	nil
		principal: 	nil
		credentials: 	nil


DIWebServiceHandler>>get
	Receiver: a DIWebServiceHandler
	Arguments and temporary variables: 
		api: 	a DIWebServiceAPI
	Receiver's instance variables: 
		request: 	a ZnRequest(GET /meta/results)
		response: 	nil
		variables: 	an OrderedCollection('meta' 'results')
		delegate: 	a ZnJSONRestServerDelegate
		principal: 	nil
		credentials: 	nil
		dicto: 	a DIDicto


DIWebServiceHandler(ZnRestCall)>>execute
	Receiver: a DIWebServiceHandler
	Arguments and temporary variables: 

	Receiver's instance variables: 
		request: 	a ZnRequest(GET /meta/results)
		response: 	nil
		variables: 	an OrderedCollection('meta' 'results')
		delegate: 	a ZnJSONRestServerDelegate
		principal: 	nil
		credentials: 	nil
		dicto: 	a DIDicto


[ call execute ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


BlockClosure>>on:do:
	Receiver: [ call execute ]
	Arguments and temporary variables: 
		exception: 	ZnRestCallUnauthorized
		handlerAction: 	[ :exception | self unauthorized: exception request ]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
		startpc: 	38
		numArgs: 	0


ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


[ self execute: call ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		request: 	a ZnRequest(GET /meta/results)
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


BlockClosure>>on:do:
	Receiver: [ self execute: call ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :exception | 
request server debugMode
	ifTrue: [ exception pa...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
		startpc: 	99
		numArgs: 	0


ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		request: 	a ZnRequest(GET /meta/results)
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ :delegate | delegate handleRequest: request ] ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(GET /meta/results)
		delegate: 	a ZnJSONRestServerDelegate
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateRequest:do:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(GET /meta/results)
		block: 	[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ ...etc...
		authenticator: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(GET /meta/results)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


[ self authenticateAndDelegateRequest: request ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(GET /meta/results)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


BlockClosure>>on:do:
	Receiver: [ self authenticateAndDelegateRequest: request ]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :exception | 
self debugMode
	ifTrue: [ exception pass ]
	ifFa...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequ...etc...
		startpc: 	58
		numArgs: 	0


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(GET /meta/results)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(GET /meta/results)
		response: 	nil
		initialMilliseconds: 	2181006
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeOneRequestResponseOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		stream: 	a ZdcSocketStream
		request: 	a ZnRequest(GET /meta/results)
		response: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


[ self executeOneRequestResponseOn: stream ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		stream: 	a ZdcSocketStream
		request: 	nil
		response: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


[ 
p psValueAt: index put: anObject.
aBlock value ] in ZnCurrentServer(DynamicVariable)>>value:during:
	Receiver: a ZnCurrentServer
	Arguments and temporary variables: 
		anObject: 	a ZnManagingMultiThreadedServer(running 8010)
		aBlock: 	[ self executeOneRequestResponseOn: stream ]
		p: 	a Process in nil
		oldValue: 	nil
	Receiver's instance variables: 
		index: 	5


BlockClosure>>ensure:
	Receiver: [ 
p psValueAt: index put: anObject.
aBlock value ]
	Arguments and temporary variables: 
		aBlock: 	[ p psValueAt: index put: oldValue ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ZnCurrentServer(DynamicVariable)>>value:during:
		startpc: 	62
		numArgs: 	0



--- The full stack ---
NeoJSONReader>>error:
NeoJSONReader>>parseValue
NeoJSONReader>>next
NeoJSONReader class>>fromString:
DIPhpModel>>_loadPhpModel
DIPhpModel>>model
DIVarPhpClass>>allElements
DIVarPhpClass(DIVar)>>elements
DISimpleRule>>subjectElements
DITestGroup>>_failingPredicatesFor:
[ :rule | 
| failingPredicates |
failingPredicates := self _failingPredicatesFor: rule.
failingPredicates size > 0
	ifTrue: [ 
		rule setFailed.
		rule errorPredicates: failingPredicates ] ] in DITestGroup>>read
OrderedCollection>>do:
DITestGroup>>read
[ :testSuite | testSuite read ] in DIDicto>>_parseResultsFor:
Array(SequenceableCollection)>>do:
DIDicto>>_parseResultsFor:
DIDicto>>dictoCheck:
[ ^ dicto dictoCheck: input ] in DIWebServiceAPI>>getResults
BlockClosure>>on:do:
DIWebServiceAPI>>getResults
DIWebServiceHandler>>get
DIWebServiceHandler(ZnRestCall)>>execute
[ call execute ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
BlockClosure>>on:do:
ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
[ self execute: call ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
BlockClosure>>on:do:
ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ :delegate | delegate handleRequest: request ] ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateRequest:do:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
[ self authenticateAndDelegateRequest: request ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
BlockClosure>>on:do:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequest:
ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeOneRequestResponseOn:
[ self executeOneRequestResponseOn: stream ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
[ 
p psValueAt: index put: anObject.
aBlock value ] in ZnCurrentServer(DynamicVariable)>>value:during:
BlockClosure>>ensure:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
ZnCurrentServer(DynamicVariable)>>value:during:
ZnCurrentServer class(DynamicVariable class)>>value:during:
ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
[ self executeRequestResponseLoopOn: stream ] in [ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ] in [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
BlockClosure>>ensure:
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ] in [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
BlockClosure>>ifCurtailed:
[ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
TestFailure: Assertion failed
18 February 2015 10:53:32.050853 am

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
NBCogit NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
https://github.com/pharo-project/pharo-vm.git Commit: 4a0d556150d478ff2de3c9624d2f18e6eaa3fa5c Date: 2014-12-18 18:42:53 +0100 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14893

Image: Pharo3.0 [Latest update: #30863]

DIPHPTests(TestAsserter)>>assert:
	Receiver: DIPHPTests>>#testPhp
	Arguments and temporary variables: 
		aBoolean: 	false
	Receiver's instance variables: 
		testSelector: 	#testPhp
		expectedFails: 	nil


[ :n | self assert: (DIModel allRules at: n) hasFailed = (res at: n) not ] in DIPHPTests(DIDSLTests)>>runAndReturnObjWithText:andSuccessResults:onProject:
	Receiver: DIPHPTests>>#testPhp
	Arguments and temporary variables: 
		dslText: 	'
Model = PhpClass with name:"ar*"
Controller = PhpClass with name:"*G...etc...
		res: 	#(false true false)
		project: 	'TestProjectPhp'
		dicto: 	a DIDicto
		n: 	1
	Receiver's instance variables: 
		testSelector: 	#testPhp
		expectedFails: 	nil


Interval>>do:
	Receiver: (1 to: 3)
	Arguments and temporary variables: 
		aBlock: 	[ :n | self assert: (DIModel allRules at: n) hasFailed = (res at: n) no...etc...
		aValue: 	1
		index: 	1
		size: 	3
	Receiver's instance variables: 
		start: 	1
		stop: 	3
		step: 	1


DIPHPTests(DIDSLTests)>>runAndReturnObjWithText:andSuccessResults:onProject:
	Receiver: DIPHPTests>>#testPhp
	Arguments and temporary variables: 
		dslText: 	'
Model = PhpClass with name:"ar*"
Controller = PhpClass with name:"*G...etc...
		res: 	#(false true false)
		project: 	'TestProjectPhp'
		dicto: 	a DIDicto
	Receiver's instance variables: 
		testSelector: 	#testPhp
		expectedFails: 	nil


DIPHPTests>>testPhp
	Receiver: DIPHPTests>>#testPhp
	Arguments and temporary variables: 
		dsl: 	'
Model = PhpClass with name:"ar*"
Controller = PhpClass with name:"*GUI"
...etc...
		success: 	#(false true false)
	Receiver's instance variables: 
		testSelector: 	#testPhp
		expectedFails: 	nil


DIPHPTests(TestCase)>>performTest
	Receiver: DIPHPTests>>#testPhp
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testPhp
		expectedFails: 	nil


[ 
self setUp.
self performTest ] in DIPHPTests(TestCase)>>runCase
	Receiver: DIPHPTests>>#testPhp
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testPhp
		expectedFails: 	nil


BlockClosure>>ensure:
	Receiver: [ 
self setUp.
self performTest ]
	Arguments and temporary variables: 
		aBlock: 	[ 
self tearDown.
self cleanUpInstanceVariables ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	DIPHPTests(TestCase)>>runCase
		startpc: 	57
		numArgs: 	0


DIPHPTests(TestCase)>>runCase
	Receiver: DIPHPTests>>#testPhp
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testPhp
		expectedFails: 	nil


[ (self class selector: testSelector) runCase ] in DIPHPTests(TestCase)>>debug
	Receiver: DIPHPTests>>#testPhp
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testPhp
		expectedFails: 	nil


BlockClosure>>ensure:
	Receiver: [ (self class selector: testSelector) runCase ]
	Arguments and temporary variables: 
		aBlock: 	[ self classForTestResource resetResources: self resources ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	DIPHPTests(TestCase)>>debug
		startpc: 	45
		numArgs: 	0


DIPHPTests(TestCase)>>debug
	Receiver: DIPHPTests>>#testPhp
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testPhp
		expectedFails: 	nil


DIPHPTests class(TestCase class)>>debug:
	Receiver: DIPHPTests
	Arguments and temporary variables: 
		aSymbol: 	#testPhp
	Receiver's instance variables: 
		superclass: 	DIDSLTests
		methodDict: 	a MethodDictionary(#testPhp->DIPHPTests>>#testPhp )
		format: 	134
		layout: 	a FixedLayout
		instanceVariables: 	#()
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#DIPHPTests
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Dicto-var-tests'
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set(#testPhp) #passed->a Se...etc...


[ 
| vScroll testClass testResult |
vScroll := methodWidget vScrollValue.
testClass := testMethod methodClass.
testResult := [ testClass run: testMethod selector ]
	on: Halt
	do: [ :e | 
		aBoolean
			ifTrue: [ 
				[ self runTestForAMethodWithAnHalt: aMethod ] fork.
				shouldAnnounce := false.
				TestAsserter classForTestResult new ]
			ifFalse: [ 
				TestAsserter classForTestResult new
					addFailure: (testClass selector: testMethod selector);
					yourself ] ].
testResult updateResultsInHistory.
testSemaphoreForMethod signal.
(aBoolean and: [ testResult failures isEmpty not or: [ testResult errors isEmpty not ] ])
	ifTrue: [ testClass debug: testMethod selector ].
ClassesIconsCache removeKey: aMethod methodClass ifAbsent: [  ].
UIManager default defer: [ methodWidget vScrollValue: vScroll ] ] in PackageTreeNautilusUI(NautilusUI)>>runTestForAMethod:notifying:priority:
	Receiver: a PackageTreeNautilusUI
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a CategoryWidget a MethodWidget a NautilusWindow(...etc...
		model: 	a PackageTreeNautilus
		window: 	a NautilusWindow(1028390912)
		hierarchyClass: 	nil
		cachedHierarchy: 	a SortHierarchically
		sourceTextArea: 	a PluggableTextMorphWithLimits(453509120)
		groupsSelection: 	a Dictionary()
		packagesSelection: 	a Dictionary(var-tests->true )
		classesSelection: 	a Dictionary(DIPHPTests->true )
		list: 	a MorphTreeMorph(56098816)
		list2: 	a PluggableIconListMorph(28835840)
		sourceCodePanel: 	a PanelMorph(333971456)
		commentTextArea: 	nil
		currentDisplayChoice: 	#SourceCode
		sourceTextAreaLimit: 	350
		sourceCodeContainer: 	a PanelMorph(900202496)
		list2Elements: 	{DIDSLTests. DIJavaTests. DIPHPTests. DISTTests}
		listElements: 	nil
		shouldUpdateTitle: 	true
		testSemaphore: 	a Semaphore()
		sourceTextAreas: 	an OrderedCollection(a PluggableTextMorphWithLimits(453509120)...etc...
		multipleMethodsEditor: 	a MultipleMethodsEditor(595591168)
		contentSelection: 	nil
		acceptor: 	a ClassOrMethodDefinitionAcceptor
		classifier: 	a MethodClassifier
		categoryWidget: 	a CategoryWidget
		methodWidget: 	a MethodWidget
		packagePattern: 	a RxMatcher
		searchWidget: 	a SearchMorph(308805632)


[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ 
| vScroll testClass testResult |
vScroll := methodWidget vScrollValue.
testClass := tes...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	PackageTreeNautilusUI(NautilusUI)>>runTestForAMethod:notifying:pr...etc...
		startpc: 	236
		numArgs: 	0



--- The full stack ---
DIPHPTests(TestAsserter)>>assert:
[ :n | self assert: (DIModel allRules at: n) hasFailed = (res at: n) not ] in DIPHPTests(DIDSLTests)>>runAndReturnObjWithText:andSuccessResults:onProject:
Interval>>do:
DIPHPTests(DIDSLTests)>>runAndReturnObjWithText:andSuccessResults:onProject:
DIPHPTests>>testPhp
DIPHPTests(TestCase)>>performTest
[ 
self setUp.
self performTest ] in DIPHPTests(TestCase)>>runCase
BlockClosure>>ensure:
DIPHPTests(TestCase)>>runCase
[ (self class selector: testSelector) runCase ] in DIPHPTests(TestCase)>>debug
BlockClosure>>ensure:
DIPHPTests(TestCase)>>debug
DIPHPTests class(TestCase class)>>debug:
[ 
| vScroll testClass testResult |
vScroll := methodWidget vScrollValue.
testClass := testMethod methodClass.
testResult := [ testClass run: testMethod selector ]
	on: Halt
	do: [ :e | 
		aBoolean
			ifTrue: [ 
				[ self runTestForAMethodWithAnHalt: aMethod ] fork.
				shouldAnnounce := false.
				TestAsserter classForTestResult new ]
			ifFalse: [ 
				TestAsserter classForTestResult new
					addFailure: (testClass selector: testMethod selector);
					yourself ] ].
testResult updateResultsInHistory.
testSemaphoreForMethod signal.
(aBoolean and: [ testResult failures isEmpty not or: [ testResult errors isEmpty not ] ])
	ifTrue: [ testClass debug: testMethod selector ].
ClassesIconsCache removeKey: aMethod methodClass ifAbsent: [  ].
UIManager default defer: [ methodWidget vScrollValue: vScroll ] ] in PackageTreeNautilusUI(NautilusUI)>>runTestForAMethod:notifying:priority:
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
PrimitiveFailed: primitive #basicNew: in ByteString class failed
18 February 2015 11:40:56.17719 am

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
NBCogit NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
https://github.com/pharo-project/pharo-vm.git Commit: 4a0d556150d478ff2de3c9624d2f18e6eaa3fa5c Date: 2014-12-18 18:42:53 +0100 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14893

Image: Pharo3.0 [Latest update: #30863]

ByteString class(Object)>>primitiveFailed:
	Receiver: ByteString
	Arguments and temporary variables: 
		selector: 	#basicNew:
	Receiver's instance variables: 
		superclass: 	String
		methodDict: 	a MethodDictionary(#asByteArray->ByteString>>#asByteArray #asKeyCom...etc...
		format: 	23554
		layout: 	a ByteLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#ByteString
		classPool: 	a Dictionary(#NonAsciiMap->#[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Collections-Strings'
		traitComposition: 	{}
		localSelectors: 	nil


ByteString class(Object)>>primitiveFailed
	Receiver: ByteString
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	String
		methodDict: 	a MethodDictionary(#asByteArray->ByteString>>#asByteArray #asKeyCom...etc...
		format: 	23554
		layout: 	a ByteLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#ByteString
		classPool: 	a Dictionary(#NonAsciiMap->#[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Collections-Strings'
		traitComposition: 	{}
		localSelectors: 	nil


ByteString class(Behavior)>>basicNew:
	Receiver: ByteString
	Arguments and temporary variables: 
		sizeRequested: 	-2
	Receiver's instance variables: 
		superclass: 	String
		methodDict: 	a MethodDictionary(#asByteArray->ByteString>>#asByteArray #asKeyCom...etc...
		format: 	23554
		layout: 	a ByteLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#ByteString
		classPool: 	a Dictionary(#NonAsciiMap->#[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Collections-Strings'
		traitComposition: 	{}
		localSelectors: 	nil


ByteString class(String class)>>new:
	Receiver: ByteString
	Arguments and temporary variables: 
		sizeRequested: 	-2
	Receiver's instance variables: 
		superclass: 	String
		methodDict: 	a MethodDictionary(#asByteArray->ByteString>>#asByteArray #asKeyCom...etc...
		format: 	23554
		layout: 	a ByteLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#ByteString
		classPool: 	a Dictionary(#NonAsciiMap->#[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Collections-Strings'
		traitComposition: 	{}
		localSelectors: 	nil


ByteString(SequenceableCollection)>>copyFrom:to:
	Receiver: ''
	Arguments and temporary variables: 
		start: 	1
		stop: 	-2
		newSize: 	-2
	Receiver's instance variables: 
''

DIPhpDependencies>>testInput
	Receiver: a DIPhpDependencies
	Arguments and temporary variables: 
		strRules: 	''
	Receiver's instance variables: 
		output: 	''
		commandOutput: 	''
		NEWLINE: 	'
'
		rules: 	a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalker m...etc...
		varSynonyms: 	nil
		sessionId: 	'1424256042'
		TIMESTAMP: 	'1424256042'
		TOOLNAME: 	'DIPhpDependencies'
		PROJECTROOT: 	'/home/otruffer/DictoCLI/'
		PROJECTSRC: 	'./'
		PROJECTBIN: 	'./'
		RESULTFILE: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/meta/1424256042/...etc...
		TESTFILE: 	nil
		testInputFileExt: 	'.st'
		SYSTEM: 	SYSTEM


DITestGroup>>build
	Receiver: a DITestGroup
	Arguments and temporary variables: 

	Receiver's instance variables: 
		rules: 	an OrderedCollection(RuleResult cannot depend on DictoTalker DictoTalker...etc...
		adapter: 	a DIPhpDependencies
		runCommandText: 	nil
		testSpecification: 	nil
		adapterID: 	'DIPhpDependencies'
		resultFile: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/meta/1424256042/...etc...
		specificationFile: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/meta/1424...etc...
		commandFile: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/meta/1424256042...etc...


[ :testGroup | testGroup build ] in DIDicto>>dictoBuild:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'RuleResult = PhpClass with name:"Dicto\RuleResult"
DictoTalker = P...etc...
		adapterTestGroups: 	a Dictionary(DIGrepFileContent->a DITestGroup DIJMeterLoadTe...etc...
		testGroup: 	a DITestGroup
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424256042'
		singleShotTask: 	false


Array(SequenceableCollection)>>do:
	Receiver: an Array(a DITestGroup a DITestGroup a DITestGroup a DITestGroup a DITestGroup)
	Arguments and temporary variables: 
		aBlock: 	[ :testGroup | testGroup build ]
		index: 	4
	Receiver's instance variables: 
an Array(a DITestGroup a DITestGroup a DITestGroup a DITestGroup a DITestGroup)

DIDicto>>dictoBuild:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'RuleResult = PhpClass with name:"Dicto\RuleResult"
DictoTalker = P...etc...
		adapterTestGroups: 	a Dictionary(DIGrepFileContent->a DITestGroup DIJMeterLoadTe...etc...
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424256042'
		singleShotTask: 	false


DIDicto>>dictoRun:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'RuleResult = PhpClass with name:"Dicto\RuleResult"
DictoTalker = P...etc...
		adapterTestGroups: 	nil
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424256042'
		singleShotTask: 	false


DIDicto>>dictoAll:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'RuleResult = PhpClass with name:"Dicto\RuleResult"
DictoTalker = P...etc...
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424256042'
		singleShotTask: 	false


[ DIDicto new dictoAll: input ] in DIWebServiceAPI>>getRun
	Receiver: a DIWebServiceAPI
	Arguments and temporary variables: 
		in: 	'/home/otruffer/dicto/bin/analysis/meta/dicto.rules'
		input: 	'RuleResult = PhpClass with name:"Dicto\RuleResult"
DictoTalker = PhpCla...etc...
		rulesFailed: 	nil
		rulesTotal: 	nil
	Receiver's instance variables: 
		request: 	nil
		response: 	nil
		variables: 	nil
		delegate: 	nil
		principal: 	nil
		credentials: 	nil


BlockClosure>>on:do:
	Receiver: [ DIDicto new dictoAll: input ]
	Arguments and temporary variables: 
		exception: 	DIException
		handlerAction: 	[ :ex | ^ self error: ex description ]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	DIWebServiceAPI>>getRun
		startpc: 	138
		numArgs: 	0


DIWebServiceAPI>>getRun
	Receiver: a DIWebServiceAPI
	Arguments and temporary variables: 
		in: 	'/home/otruffer/dicto/bin/analysis/meta/dicto.rules'
		input: 	'RuleResult = PhpClass with name:"Dicto\RuleResult"
DictoTalker = PhpCla...etc...
		rulesFailed: 	nil
		rulesTotal: 	nil
	Receiver's instance variables: 
		request: 	nil
		response: 	nil
		variables: 	nil
		delegate: 	nil
		principal: 	nil
		credentials: 	nil


DIWebServiceHandler>>post
	Receiver: a DIWebServiceHandler
	Arguments and temporary variables: 
		api: 	a DIWebServiceAPI
	Receiver's instance variables: 
		request: 	a ZnRequest(POST /meta/run)
		response: 	nil
		variables: 	an OrderedCollection('meta' 'run')
		delegate: 	a ZnJSONRestServerDelegate
		principal: 	nil
		credentials: 	nil
		dicto: 	a DIDicto


DIWebServiceHandler(ZnRestCall)>>execute
	Receiver: a DIWebServiceHandler
	Arguments and temporary variables: 

	Receiver's instance variables: 
		request: 	a ZnRequest(POST /meta/run)
		response: 	nil
		variables: 	an OrderedCollection('meta' 'run')
		delegate: 	a ZnJSONRestServerDelegate
		principal: 	nil
		credentials: 	nil
		dicto: 	a DIDicto


[ call execute ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


BlockClosure>>on:do:
	Receiver: [ call execute ]
	Arguments and temporary variables: 
		exception: 	ZnRestCallUnauthorized
		handlerAction: 	[ :exception | self unauthorized: exception request ]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
		startpc: 	38
		numArgs: 	0


ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


[ self execute: call ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /meta/run)
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


BlockClosure>>on:do:
	Receiver: [ self execute: call ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :exception | 
request server debugMode
	ifTrue: [ exception pa...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
		startpc: 	99
		numArgs: 	0


ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /meta/run)
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ :delegate | delegate handleRequest: request ] ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /meta/run)
		delegate: 	a ZnJSONRestServerDelegate
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateRequest:do:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /meta/run)
		block: 	[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ ...etc...
		authenticator: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /meta/run)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


[ self authenticateAndDelegateRequest: request ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /meta/run)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


BlockClosure>>on:do:
	Receiver: [ self authenticateAndDelegateRequest: request ]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :exception | 
self debugMode
	ifTrue: [ exception pass ]
	ifFa...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequ...etc...
		startpc: 	58
		numArgs: 	0


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /meta/run)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /meta/run)
		response: 	nil
		initialMilliseconds: 	552679
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeOneRequestResponseOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		stream: 	a ZdcSocketStream
		request: 	a ZnRequest(POST /meta/run)
		response: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


[ self executeOneRequestResponseOn: stream ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		stream: 	a ZdcSocketStream
		request: 	nil
		response: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


[ 
p psValueAt: index put: anObject.
aBlock value ] in ZnCurrentServer(DynamicVariable)>>value:during:
	Receiver: a ZnCurrentServer
	Arguments and temporary variables: 
		anObject: 	a ZnManagingMultiThreadedServer(running 8010)
		aBlock: 	[ self executeOneRequestResponseOn: stream ]
		p: 	a Process in nil
		oldValue: 	nil
	Receiver's instance variables: 
		index: 	5


BlockClosure>>ensure:
	Receiver: [ 
p psValueAt: index put: anObject.
aBlock value ]
	Arguments and temporary variables: 
		aBlock: 	[ p psValueAt: index put: oldValue ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ZnCurrentServer(DynamicVariable)>>value:during:
		startpc: 	62
		numArgs: 	0


ZnCurrentServer(DynamicVariable)>>value:during:
	Receiver: a ZnCurrentServer
	Arguments and temporary variables: 
		anObject: 	a ZnManagingMultiThreadedServer(running 8010)
		aBlock: 	[ self executeOneRequestResponseOn: stream ]
		p: 	a Process in nil
		oldValue: 	nil
	Receiver's instance variables: 
		index: 	5


ZnCurrentServer class(DynamicVariable class)>>value:during:
	Receiver: ZnCurrentServer
	Arguments and temporary variables: 
		anObject: 	a ZnManagingMultiThreadedServer(running 8010)
		aBlock: 	[ self executeOneRequestResponseOn: stream ]
	Receiver's instance variables: 
		superclass: 	DynamicVariable
		methodDict: 	a MethodDictionary()
		format: 	132
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#ZnCurrentServer
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Zinc-HTTP-Variables'
		traitComposition: 	{}
		localSelectors: 	nil
		hash: 	nil
		soleInstance: 	a ZnCurrentServer


ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		stream: 	a ZdcSocketStream
		request: 	nil
		response: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


[ self executeRequestResponseLoopOn: stream ] in [ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ] in [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		listeningSocket: 	a Socket[waitingForConnection]
		stream: 	a ZdcSocketStream
		socket: 	a Socket[connected]
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


BlockClosure>>ensure:
	Receiver: [ self executeRequestResponseLoopOn: stream ]
	Arguments and temporary variables: 
		aBlock: 	[ 
self log debug: 'Closing stream'.
self closeSocketStream: stream ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		se...etc...
		startpc: 	118
		numArgs: 	0



--- The full stack ---
ByteString class(Object)>>primitiveFailed:
ByteString class(Object)>>primitiveFailed
ByteString class(Behavior)>>basicNew:
ByteString class(String class)>>new:
ByteString(SequenceableCollection)>>copyFrom:to:
DIPhpDependencies>>testInput
DITestGroup>>build
[ :testGroup | testGroup build ] in DIDicto>>dictoBuild:
Array(SequenceableCollection)>>do:
DIDicto>>dictoBuild:
DIDicto>>dictoRun:
DIDicto>>dictoAll:
[ DIDicto new dictoAll: input ] in DIWebServiceAPI>>getRun
BlockClosure>>on:do:
DIWebServiceAPI>>getRun
DIWebServiceHandler>>post
DIWebServiceHandler(ZnRestCall)>>execute
[ call execute ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
BlockClosure>>on:do:
ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
[ self execute: call ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
BlockClosure>>on:do:
ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ :delegate | delegate handleRequest: request ] ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateRequest:do:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
[ self authenticateAndDelegateRequest: request ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
BlockClosure>>on:do:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequest:
ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeOneRequestResponseOn:
[ self executeOneRequestResponseOn: stream ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
[ 
p psValueAt: index put: anObject.
aBlock value ] in ZnCurrentServer(DynamicVariable)>>value:during:
BlockClosure>>ensure:
ZnCurrentServer(DynamicVariable)>>value:during:
ZnCurrentServer class(DynamicVariable class)>>value:during:
ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
[ self executeRequestResponseLoopOn: stream ] in [ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ] in [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
BlockClosure>>ensure:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ] in [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
BlockClosure>>ifCurtailed:
[ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Halt
18 February 2015 11:51:16.271963 am

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
NBCogit NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
https://github.com/pharo-project/pharo-vm.git Commit: 4a0d556150d478ff2de3c9624d2f18e6eaa3fa5c Date: 2014-12-18 18:42:53 +0100 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14893

Image: Pharo3.0 [Latest update: #30863]

DIPhpDependencies>>testInput
	Receiver: a DIPhpDependencies
	Arguments and temporary variables: 
		strRules: 	nil
	Receiver's instance variables: 
		output: 	''
		commandOutput: 	''
		NEWLINE: 	'
'
		rules: 	a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalker m...etc...
		varSynonyms: 	nil
		sessionId: 	'1424256676'
		TIMESTAMP: 	'1424256676'
		TOOLNAME: 	'DIPhpDependencies'
		PROJECTROOT: 	'/home/otruffer/DictoCLI/'
		PROJECTSRC: 	'./'
		PROJECTBIN: 	'./'
		RESULTFILE: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/meta/1424256676/...etc...
		TESTFILE: 	nil
		testInputFileExt: 	'.st'
		SYSTEM: 	SYSTEM


DITestGroup>>build
	Receiver: a DITestGroup
	Arguments and temporary variables: 

	Receiver's instance variables: 
		rules: 	an OrderedCollection(RuleResult cannot depend on DictoTalker DictoTalker...etc...
		adapter: 	a DIPhpDependencies
		runCommandText: 	nil
		testSpecification: 	nil
		adapterID: 	'DIPhpDependencies'
		resultFile: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/meta/1424256676/...etc...
		specificationFile: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/meta/1424...etc...
		commandFile: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/meta/1424256676...etc...


[ :testGroup | testGroup build ] in DIDicto>>dictoBuild:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'RuleResult = PhpClass with name:"Dicto\RuleResult"
DictoTalker = P...etc...
		adapterTestGroups: 	a Dictionary(DIGrepFileContent->a DITestGroup DIJMeterLoadTe...etc...
		testGroup: 	a DITestGroup
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424256676'
		singleShotTask: 	false


Array(SequenceableCollection)>>do:
	Receiver: an Array(a DITestGroup a DITestGroup a DITestGroup a DITestGroup a DITestGroup)
	Arguments and temporary variables: 
		aBlock: 	[ :testGroup | testGroup build ]
		index: 	4
	Receiver's instance variables: 
an Array(a DITestGroup a DITestGroup a DITestGroup a DITestGroup a DITestGroup)

DIDicto>>dictoBuild:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'RuleResult = PhpClass with name:"Dicto\RuleResult"
DictoTalker = P...etc...
		adapterTestGroups: 	a Dictionary(DIGrepFileContent->a DITestGroup DIJMeterLoadTe...etc...
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424256676'
		singleShotTask: 	false


DIDicto>>dictoRun:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'RuleResult = PhpClass with name:"Dicto\RuleResult"
DictoTalker = P...etc...
		adapterTestGroups: 	nil
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424256676'
		singleShotTask: 	false


DIDicto>>dictoAll:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'RuleResult = PhpClass with name:"Dicto\RuleResult"
DictoTalker = P...etc...
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424256676'
		singleShotTask: 	false


[ DIDicto new dictoAll: input ] in DIWebServiceAPI>>getRun
	Receiver: a DIWebServiceAPI
	Arguments and temporary variables: 
		in: 	'/home/otruffer/dicto/bin/analysis/meta/dicto.rules'
		input: 	'RuleResult = PhpClass with name:"Dicto\RuleResult"
DictoTalker = PhpCla...etc...
		rulesFailed: 	nil
		rulesTotal: 	nil
	Receiver's instance variables: 
		request: 	nil
		response: 	nil
		variables: 	nil
		delegate: 	nil
		principal: 	nil
		credentials: 	nil


BlockClosure>>on:do:
	Receiver: [ DIDicto new dictoAll: input ]
	Arguments and temporary variables: 
		exception: 	DIException
		handlerAction: 	[ :ex | ^ self error: ex description ]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	DIWebServiceAPI>>getRun
		startpc: 	138
		numArgs: 	0


DIWebServiceAPI>>getRun
	Receiver: a DIWebServiceAPI
	Arguments and temporary variables: 
		in: 	'/home/otruffer/dicto/bin/analysis/meta/dicto.rules'
		input: 	'RuleResult = PhpClass with name:"Dicto\RuleResult"
DictoTalker = PhpCla...etc...
		rulesFailed: 	nil
		rulesTotal: 	nil
	Receiver's instance variables: 
		request: 	nil
		response: 	nil
		variables: 	nil
		delegate: 	nil
		principal: 	nil
		credentials: 	nil


DIWebServiceHandler>>post
	Receiver: a DIWebServiceHandler
	Arguments and temporary variables: 
		api: 	a DIWebServiceAPI
	Receiver's instance variables: 
		request: 	a ZnRequest(POST /meta/run)
		response: 	nil
		variables: 	an OrderedCollection('meta' 'run')
		delegate: 	a ZnJSONRestServerDelegate
		principal: 	nil
		credentials: 	nil
		dicto: 	a DIDicto


DIWebServiceHandler(ZnRestCall)>>execute
	Receiver: a DIWebServiceHandler
	Arguments and temporary variables: 

	Receiver's instance variables: 
		request: 	a ZnRequest(POST /meta/run)
		response: 	nil
		variables: 	an OrderedCollection('meta' 'run')
		delegate: 	a ZnJSONRestServerDelegate
		principal: 	nil
		credentials: 	nil
		dicto: 	a DIDicto


[ call execute ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


BlockClosure>>on:do:
	Receiver: [ call execute ]
	Arguments and temporary variables: 
		exception: 	ZnRestCallUnauthorized
		handlerAction: 	[ :exception | self unauthorized: exception request ]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
		startpc: 	38
		numArgs: 	0


ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


[ self execute: call ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /meta/run)
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


BlockClosure>>on:do:
	Receiver: [ self execute: call ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :exception | 
request server debugMode
	ifTrue: [ exception pa...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
		startpc: 	99
		numArgs: 	0


ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /meta/run)
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ :delegate | delegate handleRequest: request ] ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /meta/run)
		delegate: 	a ZnJSONRestServerDelegate
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateRequest:do:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /meta/run)
		block: 	[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ ...etc...
		authenticator: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /meta/run)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


[ self authenticateAndDelegateRequest: request ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /meta/run)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


BlockClosure>>on:do:
	Receiver: [ self authenticateAndDelegateRequest: request ]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :exception | 
self debugMode
	ifTrue: [ exception pass ]
	ifFa...etc...
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequ...etc...
		startpc: 	58
		numArgs: 	0


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /meta/run)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /meta/run)
		response: 	nil
		initialMilliseconds: 	1186648
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeOneRequestResponseOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		stream: 	a ZdcSocketStream
		request: 	a ZnRequest(POST /meta/run)
		response: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


[ self executeOneRequestResponseOn: stream ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		stream: 	a ZdcSocketStream
		request: 	nil
		response: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


[ 
p psValueAt: index put: anObject.
aBlock value ] in ZnCurrentServer(DynamicVariable)>>value:during:
	Receiver: a ZnCurrentServer
	Arguments and temporary variables: 
		anObject: 	a ZnManagingMultiThreadedServer(running 8010)
		aBlock: 	[ self executeOneRequestResponseOn: stream ]
		p: 	a Process in nil
		oldValue: 	nil
	Receiver's instance variables: 
		index: 	5


BlockClosure>>ensure:
	Receiver: [ 
p psValueAt: index put: anObject.
aBlock value ]
	Arguments and temporary variables: 
		aBlock: 	[ p psValueAt: index put: oldValue ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ZnCurrentServer(DynamicVariable)>>value:during:
		startpc: 	62
		numArgs: 	0


ZnCurrentServer(DynamicVariable)>>value:during:
	Receiver: a ZnCurrentServer
	Arguments and temporary variables: 
		anObject: 	a ZnManagingMultiThreadedServer(running 8010)
		aBlock: 	[ self executeOneRequestResponseOn: stream ]
		p: 	a Process in nil
		oldValue: 	nil
	Receiver's instance variables: 
		index: 	5


ZnCurrentServer class(DynamicVariable class)>>value:during:
	Receiver: ZnCurrentServer
	Arguments and temporary variables: 
		anObject: 	a ZnManagingMultiThreadedServer(running 8010)
		aBlock: 	[ self executeOneRequestResponseOn: stream ]
	Receiver's instance variables: 
		superclass: 	DynamicVariable
		methodDict: 	a MethodDictionary()
		format: 	132
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#ZnCurrentServer
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Zinc-HTTP-Variables'
		traitComposition: 	{}
		localSelectors: 	nil
		hash: 	nil
		soleInstance: 	a ZnCurrentServer


ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		stream: 	a ZdcSocketStream
		request: 	nil
		response: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


[ self executeRequestResponseLoopOn: stream ] in [ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ] in [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		listeningSocket: 	a Socket[waitingForConnection]
		stream: 	a ZdcSocketStream
		socket: 	a Socket[connected]
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


BlockClosure>>ensure:
	Receiver: [ self executeRequestResponseLoopOn: stream ]
	Arguments and temporary variables: 
		aBlock: 	[ 
self log debug: 'Closing stream'.
self closeSocketStream: stream ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		se...etc...
		startpc: 	118
		numArgs: 	0


[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ] in [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		listeningSocket: 	a Socket[waitingForConnection]
		stream: 	a ZdcSocketStream
		socket: 	a Socket[connected]
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


BlockClosure>>ifCurtailed:
	Receiver: [ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing st...etc...
	Arguments and temporary variables: 
		aBlock: 	[ 
self log debug: 'Destroying socket'.
socket destroy ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	[ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
	...etc...
		startpc: 	113
		numArgs: 	0


[ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		listeningSocket: 	a Socket[waitingForConnection]
		stream: 	a ZdcSocketStream
		socket: 	a Socket[connected]
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnec...etc...
		startpc: 	108
		numArgs: 	0



--- The full stack ---
DIPhpDependencies>>testInput
DITestGroup>>build
[ :testGroup | testGroup build ] in DIDicto>>dictoBuild:
Array(SequenceableCollection)>>do:
DIDicto>>dictoBuild:
DIDicto>>dictoRun:
DIDicto>>dictoAll:
[ DIDicto new dictoAll: input ] in DIWebServiceAPI>>getRun
BlockClosure>>on:do:
DIWebServiceAPI>>getRun
DIWebServiceHandler>>post
DIWebServiceHandler(ZnRestCall)>>execute
[ call execute ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
BlockClosure>>on:do:
ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
[ self execute: call ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
BlockClosure>>on:do:
ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ :delegate | delegate handleRequest: request ] ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateRequest:do:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
[ self authenticateAndDelegateRequest: request ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
BlockClosure>>on:do:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequest:
ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeOneRequestResponseOn:
[ self executeOneRequestResponseOn: stream ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
[ 
p psValueAt: index put: anObject.
aBlock value ] in ZnCurrentServer(DynamicVariable)>>value:during:
BlockClosure>>ensure:
ZnCurrentServer(DynamicVariable)>>value:during:
ZnCurrentServer class(DynamicVariable class)>>value:during:
ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
[ self executeRequestResponseLoopOn: stream ] in [ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ] in [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
BlockClosure>>ensure:
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ] in [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
BlockClosure>>ifCurtailed:
[ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Halt
18 February 2015 11:51:57.507372 am

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
NBCogit NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
https://github.com/pharo-project/pharo-vm.git Commit: 4a0d556150d478ff2de3c9624d2f18e6eaa3fa5c Date: 2014-12-18 18:42:53 +0100 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14893

Image: Pharo3.0 [Latest update: #30863]

DIPhpDependencies>>testInput
	Receiver: a DIPhpDependencies
	Arguments and temporary variables: 
		strRules: 	nil
	Receiver's instance variables: 
		output: 	''
		commandOutput: 	''
		NEWLINE: 	'
'
		rules: 	a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalker m...etc...
		varSynonyms: 	nil
		sessionId: 	'1424256717'
		TIMESTAMP: 	'1424256718'
		TOOLNAME: 	'DIPhpDependencies'
		PROJECTROOT: 	'/home/otruffer/DictoCLI/'
		PROJECTSRC: 	'./'
		PROJECTBIN: 	'./'
		RESULTFILE: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/meta/1424256717/...etc...
		TESTFILE: 	nil
		testInputFileExt: 	'.st'
		SYSTEM: 	SYSTEM


DITestGroup>>build
	Receiver: a DITestGroup
	Arguments and temporary variables: 

	Receiver's instance variables: 
		rules: 	an OrderedCollection(RuleResult cannot depend on DictoTalker DictoTalker...etc...
		adapter: 	a DIPhpDependencies
		runCommandText: 	nil
		testSpecification: 	nil
		adapterID: 	'DIPhpDependencies'
		resultFile: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/meta/1424256717/...etc...
		specificationFile: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/meta/1424...etc...
		commandFile: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/meta/1424256717...etc...


[ :testGroup | testGroup build ] in DIDicto>>dictoBuild:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = ...etc...
		adapterTestGroups: 	a Dictionary(DIGrepFileContent->a DITestGroup DIJMeterLoadTe...etc...
		testGroup: 	a DITestGroup
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424256717'
		singleShotTask: 	false


Array(SequenceableCollection)>>do:
	Receiver: an Array(a DITestGroup a DITestGroup a DITestGroup a DITestGroup a DITestGroup)
	Arguments and temporary variables: 
		aBlock: 	[ :testGroup | testGroup build ]
		index: 	4
	Receiver's instance variables: 
an Array(a DITestGroup a DITestGroup a DITestGroup a DITestGroup a DITestGroup)

DIDicto>>dictoBuild:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = ...etc...
		adapterTestGroups: 	a Dictionary(DIGrepFileContent->a DITestGroup DIJMeterLoadTe...etc...
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424256717'
		singleShotTask: 	false


DIDicto>>dictoRun:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = ...etc...
		adapterTestGroups: 	nil
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424256717'
		singleShotTask: 	false


DIDicto>>dictoAll:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = ...etc...
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424256717'
		singleShotTask: 	false


[ DIDicto new dictoAll: input ] in DIWebServiceAPI>>getRun
	Receiver: a DIWebServiceAPI
	Arguments and temporary variables: 
		in: 	'/home/otruffer/dicto/bin/analysis/meta/dicto.rules'
		input: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = PhpCl...etc...
		rulesFailed: 	nil
		rulesTotal: 	nil
	Receiver's instance variables: 
		request: 	nil
		response: 	nil
		variables: 	nil
		delegate: 	nil
		principal: 	nil
		credentials: 	nil


BlockClosure>>on:do:
	Receiver: [ DIDicto new dictoAll: input ]
	Arguments and temporary variables: 
		exception: 	DIException
		handlerAction: 	[ :ex | ^ self error: ex description ]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	DIWebServiceAPI>>getRun
		startpc: 	138
		numArgs: 	0


DIWebServiceAPI>>getRun
	Receiver: a DIWebServiceAPI
	Arguments and temporary variables: 
		in: 	'/home/otruffer/dicto/bin/analysis/meta/dicto.rules'
		input: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = PhpCl...etc...
		rulesFailed: 	nil
		rulesTotal: 	nil
	Receiver's instance variables: 
		request: 	nil
		response: 	nil
		variables: 	nil
		delegate: 	nil
		principal: 	nil
		credentials: 	nil


DIWebServiceHandler>>post
	Receiver: a DIWebServiceHandler
	Arguments and temporary variables: 
		api: 	a DIWebServiceAPI
	Receiver's instance variables: 
		request: 	a ZnRequest(POST /meta/run)
		response: 	nil
		variables: 	an OrderedCollection('meta' 'run')
		delegate: 	a ZnJSONRestServerDelegate
		principal: 	nil
		credentials: 	nil
		dicto: 	a DIDicto


DIWebServiceHandler(ZnRestCall)>>execute
	Receiver: a DIWebServiceHandler
	Arguments and temporary variables: 

	Receiver's instance variables: 
		request: 	a ZnRequest(POST /meta/run)
		response: 	nil
		variables: 	an OrderedCollection('meta' 'run')
		delegate: 	a ZnJSONRestServerDelegate
		principal: 	nil
		credentials: 	nil
		dicto: 	a DIDicto


[ call execute ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


BlockClosure>>on:do:
	Receiver: [ call execute ]
	Arguments and temporary variables: 
		exception: 	ZnRestCallUnauthorized
		handlerAction: 	[ :exception | self unauthorized: exception request ]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
		startpc: 	38
		numArgs: 	0


ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


[ self execute: call ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /meta/run)
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


BlockClosure>>on:do:
	Receiver: [ self execute: call ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :exception | 
request server debugMode
	ifTrue: [ exception pa...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
		startpc: 	99
		numArgs: 	0


ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /meta/run)
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ :delegate | delegate handleRequest: request ] ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /meta/run)
		delegate: 	a ZnJSONRestServerDelegate
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateRequest:do:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /meta/run)
		block: 	[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ ...etc...
		authenticator: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /meta/run)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


[ self authenticateAndDelegateRequest: request ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /meta/run)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


BlockClosure>>on:do:
	Receiver: [ self authenticateAndDelegateRequest: request ]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :exception | 
self debugMode
	ifTrue: [ exception pass ]
	ifFa...etc...
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequ...etc...
		startpc: 	58
		numArgs: 	0


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /meta/run)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /meta/run)
		response: 	nil
		initialMilliseconds: 	1227903
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeOneRequestResponseOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		stream: 	a ZdcSocketStream
		request: 	a ZnRequest(POST /meta/run)
		response: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


[ self executeOneRequestResponseOn: stream ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		stream: 	a ZdcSocketStream
		request: 	nil
		response: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


[ 
p psValueAt: index put: anObject.
aBlock value ] in ZnCurrentServer(DynamicVariable)>>value:during:
	Receiver: a ZnCurrentServer
	Arguments and temporary variables: 
		anObject: 	a ZnManagingMultiThreadedServer(running 8010)
		aBlock: 	[ self executeOneRequestResponseOn: stream ]
		p: 	a Process in nil
		oldValue: 	nil
	Receiver's instance variables: 
		index: 	5


BlockClosure>>ensure:
	Receiver: [ 
p psValueAt: index put: anObject.
aBlock value ]
	Arguments and temporary variables: 
		aBlock: 	[ p psValueAt: index put: oldValue ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ZnCurrentServer(DynamicVariable)>>value:during:
		startpc: 	62
		numArgs: 	0


ZnCurrentServer(DynamicVariable)>>value:during:
	Receiver: a ZnCurrentServer
	Arguments and temporary variables: 
		anObject: 	a ZnManagingMultiThreadedServer(running 8010)
		aBlock: 	[ self executeOneRequestResponseOn: stream ]
		p: 	a Process in nil
		oldValue: 	nil
	Receiver's instance variables: 
		index: 	5


ZnCurrentServer class(DynamicVariable class)>>value:during:
	Receiver: ZnCurrentServer
	Arguments and temporary variables: 
		anObject: 	a ZnManagingMultiThreadedServer(running 8010)
		aBlock: 	[ self executeOneRequestResponseOn: stream ]
	Receiver's instance variables: 
		superclass: 	DynamicVariable
		methodDict: 	a MethodDictionary()
		format: 	132
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#ZnCurrentServer
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Zinc-HTTP-Variables'
		traitComposition: 	{}
		localSelectors: 	nil
		hash: 	nil
		soleInstance: 	a ZnCurrentServer


ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		stream: 	a ZdcSocketStream
		request: 	nil
		response: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


[ self executeRequestResponseLoopOn: stream ] in [ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ] in [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		listeningSocket: 	a Socket[waitingForConnection]
		stream: 	a ZdcSocketStream
		socket: 	a Socket[connected]
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


BlockClosure>>ensure:
	Receiver: [ self executeRequestResponseLoopOn: stream ]
	Arguments and temporary variables: 
		aBlock: 	[ 
self log debug: 'Closing stream'.
self closeSocketStream: stream ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		se...etc...
		startpc: 	118
		numArgs: 	0


[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ] in [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		listeningSocket: 	a Socket[waitingForConnection]
		stream: 	a ZdcSocketStream
		socket: 	a Socket[connected]
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


BlockClosure>>ifCurtailed:
	Receiver: [ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing st...etc...
	Arguments and temporary variables: 
		aBlock: 	[ 
self log debug: 'Destroying socket'.
socket destroy ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	[ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
	...etc...
		startpc: 	113
		numArgs: 	0


[ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		listeningSocket: 	a Socket[waitingForConnection]
		stream: 	a ZdcSocketStream
		socket: 	a Socket[connected]
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnec...etc...
		startpc: 	108
		numArgs: 	0



--- The full stack ---
DIPhpDependencies>>testInput
DITestGroup>>build
[ :testGroup | testGroup build ] in DIDicto>>dictoBuild:
Array(SequenceableCollection)>>do:
DIDicto>>dictoBuild:
DIDicto>>dictoRun:
DIDicto>>dictoAll:
[ DIDicto new dictoAll: input ] in DIWebServiceAPI>>getRun
BlockClosure>>on:do:
DIWebServiceAPI>>getRun
DIWebServiceHandler>>post
DIWebServiceHandler(ZnRestCall)>>execute
[ call execute ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
BlockClosure>>on:do:
ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
[ self execute: call ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
BlockClosure>>on:do:
ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ :delegate | delegate handleRequest: request ] ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateRequest:do:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
[ self authenticateAndDelegateRequest: request ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
BlockClosure>>on:do:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequest:
ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeOneRequestResponseOn:
[ self executeOneRequestResponseOn: stream ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
[ 
p psValueAt: index put: anObject.
aBlock value ] in ZnCurrentServer(DynamicVariable)>>value:during:
BlockClosure>>ensure:
ZnCurrentServer(DynamicVariable)>>value:during:
ZnCurrentServer class(DynamicVariable class)>>value:during:
ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
[ self executeRequestResponseLoopOn: stream ] in [ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ] in [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
BlockClosure>>ensure:
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ] in [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
BlockClosure>>ifCurtailed:
[ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Halt
18 February 2015 11:54:06.795579 am

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
NBCogit NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
https://github.com/pharo-project/pharo-vm.git Commit: 4a0d556150d478ff2de3c9624d2f18e6eaa3fa5c Date: 2014-12-18 18:42:53 +0100 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14893

Image: Pharo3.0 [Latest update: #30863]

DIPhpDependencies>>testInput
	Receiver: a DIPhpDependencies
	Arguments and temporary variables: 
		strRules: 	nil
	Receiver's instance variables: 
		output: 	''
		commandOutput: 	''
		NEWLINE: 	'
'
		rules: 	a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalker m...etc...
		varSynonyms: 	nil
		sessionId: 	'1424256847'
		TIMESTAMP: 	'1424256847'
		TOOLNAME: 	'DIPhpDependencies'
		PROJECTROOT: 	'/home/otruffer/DictoCLI/'
		PROJECTSRC: 	'./'
		PROJECTBIN: 	'./'
		RESULTFILE: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/meta/1424256847/...etc...
		TESTFILE: 	nil
		testInputFileExt: 	'.st'
		SYSTEM: 	SYSTEM


DITestGroup>>build
	Receiver: a DITestGroup
	Arguments and temporary variables: 

	Receiver's instance variables: 
		rules: 	an OrderedCollection(RuleResult cannot depend on DictoTalker DictoTalker...etc...
		adapter: 	a DIPhpDependencies
		runCommandText: 	nil
		testSpecification: 	nil
		adapterID: 	'DIPhpDependencies'
		resultFile: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/meta/1424256847/...etc...
		specificationFile: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/meta/1424...etc...
		commandFile: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/meta/1424256847...etc...


[ :testGroup | testGroup build ] in DIDicto>>dictoBuild:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = ...etc...
		adapterTestGroups: 	a Dictionary(DIGrepFileContent->a DITestGroup DIJMeterLoadTe...etc...
		testGroup: 	a DITestGroup
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424256847'
		singleShotTask: 	false


Array(SequenceableCollection)>>do:
	Receiver: an Array(a DITestGroup a DITestGroup a DITestGroup a DITestGroup a DITestGroup)
	Arguments and temporary variables: 
		aBlock: 	[ :testGroup | testGroup build ]
		index: 	4
	Receiver's instance variables: 
an Array(a DITestGroup a DITestGroup a DITestGroup a DITestGroup a DITestGroup)

DIDicto>>dictoBuild:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = ...etc...
		adapterTestGroups: 	a Dictionary(DIGrepFileContent->a DITestGroup DIJMeterLoadTe...etc...
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424256847'
		singleShotTask: 	false


DIDicto>>dictoRun:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = ...etc...
		adapterTestGroups: 	nil
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424256847'
		singleShotTask: 	false


DIDicto>>dictoAll:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = ...etc...
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424256847'
		singleShotTask: 	false


[ DIDicto new dictoAll: input ] in DIWebServiceAPI>>getRun
	Receiver: a DIWebServiceAPI
	Arguments and temporary variables: 
		in: 	'/home/otruffer/dicto/bin/analysis/meta/dicto.rules'
		input: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = PhpCl...etc...
		rulesFailed: 	nil
		rulesTotal: 	nil
	Receiver's instance variables: 
		request: 	nil
		response: 	nil
		variables: 	nil
		delegate: 	nil
		principal: 	nil
		credentials: 	nil


BlockClosure>>on:do:
	Receiver: [ DIDicto new dictoAll: input ]
	Arguments and temporary variables: 
		exception: 	DIException
		handlerAction: 	[ :ex | ^ self error: ex description ]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	DIWebServiceAPI>>getRun
		startpc: 	138
		numArgs: 	0


DIWebServiceAPI>>getRun
	Receiver: a DIWebServiceAPI
	Arguments and temporary variables: 
		in: 	'/home/otruffer/dicto/bin/analysis/meta/dicto.rules'
		input: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = PhpCl...etc...
		rulesFailed: 	nil
		rulesTotal: 	nil
	Receiver's instance variables: 
		request: 	nil
		response: 	nil
		variables: 	nil
		delegate: 	nil
		principal: 	nil
		credentials: 	nil


DIWebServiceHandler>>post
	Receiver: a DIWebServiceHandler
	Arguments and temporary variables: 
		api: 	a DIWebServiceAPI
	Receiver's instance variables: 
		request: 	a ZnRequest(POST /meta/run)
		response: 	nil
		variables: 	an OrderedCollection('meta' 'run')
		delegate: 	a ZnJSONRestServerDelegate
		principal: 	nil
		credentials: 	nil
		dicto: 	a DIDicto


DIWebServiceHandler(ZnRestCall)>>execute
	Receiver: a DIWebServiceHandler
	Arguments and temporary variables: 

	Receiver's instance variables: 
		request: 	a ZnRequest(POST /meta/run)
		response: 	nil
		variables: 	an OrderedCollection('meta' 'run')
		delegate: 	a ZnJSONRestServerDelegate
		principal: 	nil
		credentials: 	nil
		dicto: 	a DIDicto


[ call execute ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


BlockClosure>>on:do:
	Receiver: [ call execute ]
	Arguments and temporary variables: 
		exception: 	ZnRestCallUnauthorized
		handlerAction: 	[ :exception | self unauthorized: exception request ]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
		startpc: 	38
		numArgs: 	0


ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


[ self execute: call ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /meta/run)
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


BlockClosure>>on:do:
	Receiver: [ self execute: call ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :exception | 
request server debugMode
	ifTrue: [ exception pa...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
		startpc: 	99
		numArgs: 	0


ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /meta/run)
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ :delegate | delegate handleRequest: request ] ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /meta/run)
		delegate: 	a ZnJSONRestServerDelegate
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateRequest:do:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /meta/run)
		block: 	[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ ...etc...
		authenticator: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /meta/run)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


[ self authenticateAndDelegateRequest: request ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /meta/run)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


BlockClosure>>on:do:
	Receiver: [ self authenticateAndDelegateRequest: request ]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :exception | 
self debugMode
	ifTrue: [ exception pass ]
	ifFa...etc...
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequ...etc...
		startpc: 	58
		numArgs: 	0


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /meta/run)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /meta/run)
		response: 	nil
		initialMilliseconds: 	1357197
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeOneRequestResponseOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		stream: 	a ZdcSocketStream
		request: 	a ZnRequest(POST /meta/run)
		response: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


[ self executeOneRequestResponseOn: stream ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		stream: 	a ZdcSocketStream
		request: 	nil
		response: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


[ 
p psValueAt: index put: anObject.
aBlock value ] in ZnCurrentServer(DynamicVariable)>>value:during:
	Receiver: a ZnCurrentServer
	Arguments and temporary variables: 
		anObject: 	a ZnManagingMultiThreadedServer(running 8010)
		aBlock: 	[ self executeOneRequestResponseOn: stream ]
		p: 	a Process in nil
		oldValue: 	nil
	Receiver's instance variables: 
		index: 	5


BlockClosure>>ensure:
	Receiver: [ 
p psValueAt: index put: anObject.
aBlock value ]
	Arguments and temporary variables: 
		aBlock: 	[ p psValueAt: index put: oldValue ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ZnCurrentServer(DynamicVariable)>>value:during:
		startpc: 	62
		numArgs: 	0


ZnCurrentServer(DynamicVariable)>>value:during:
	Receiver: a ZnCurrentServer
	Arguments and temporary variables: 
		anObject: 	a ZnManagingMultiThreadedServer(running 8010)
		aBlock: 	[ self executeOneRequestResponseOn: stream ]
		p: 	a Process in nil
		oldValue: 	nil
	Receiver's instance variables: 
		index: 	5


ZnCurrentServer class(DynamicVariable class)>>value:during:
	Receiver: ZnCurrentServer
	Arguments and temporary variables: 
		anObject: 	a ZnManagingMultiThreadedServer(running 8010)
		aBlock: 	[ self executeOneRequestResponseOn: stream ]
	Receiver's instance variables: 
		superclass: 	DynamicVariable
		methodDict: 	a MethodDictionary()
		format: 	132
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#ZnCurrentServer
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Zinc-HTTP-Variables'
		traitComposition: 	{}
		localSelectors: 	nil
		hash: 	nil
		soleInstance: 	a ZnCurrentServer


ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		stream: 	a ZdcSocketStream
		request: 	nil
		response: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


[ self executeRequestResponseLoopOn: stream ] in [ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ] in [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		listeningSocket: 	a Socket[waitingForConnection]
		stream: 	a ZdcSocketStream
		socket: 	a Socket[connected]
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


BlockClosure>>ensure:
	Receiver: [ self executeRequestResponseLoopOn: stream ]
	Arguments and temporary variables: 
		aBlock: 	[ 
self log debug: 'Closing stream'.
self closeSocketStream: stream ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		se...etc...
		startpc: 	118
		numArgs: 	0


[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ] in [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		listeningSocket: 	a Socket[waitingForConnection]
		stream: 	a ZdcSocketStream
		socket: 	a Socket[connected]
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


BlockClosure>>ifCurtailed:
	Receiver: [ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing st...etc...
	Arguments and temporary variables: 
		aBlock: 	[ 
self log debug: 'Destroying socket'.
socket destroy ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	[ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
	...etc...
		startpc: 	113
		numArgs: 	0


[ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		listeningSocket: 	a Socket[waitingForConnection]
		stream: 	a ZdcSocketStream
		socket: 	a Socket[connected]
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnec...etc...
		startpc: 	108
		numArgs: 	0



--- The full stack ---
DIPhpDependencies>>testInput
DITestGroup>>build
[ :testGroup | testGroup build ] in DIDicto>>dictoBuild:
Array(SequenceableCollection)>>do:
DIDicto>>dictoBuild:
DIDicto>>dictoRun:
DIDicto>>dictoAll:
[ DIDicto new dictoAll: input ] in DIWebServiceAPI>>getRun
BlockClosure>>on:do:
DIWebServiceAPI>>getRun
DIWebServiceHandler>>post
DIWebServiceHandler(ZnRestCall)>>execute
[ call execute ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
BlockClosure>>on:do:
ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
[ self execute: call ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
BlockClosure>>on:do:
ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ :delegate | delegate handleRequest: request ] ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateRequest:do:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
[ self authenticateAndDelegateRequest: request ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
BlockClosure>>on:do:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequest:
ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeOneRequestResponseOn:
[ self executeOneRequestResponseOn: stream ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
[ 
p psValueAt: index put: anObject.
aBlock value ] in ZnCurrentServer(DynamicVariable)>>value:during:
BlockClosure>>ensure:
ZnCurrentServer(DynamicVariable)>>value:during:
ZnCurrentServer class(DynamicVariable class)>>value:during:
ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
[ self executeRequestResponseLoopOn: stream ] in [ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ] in [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
BlockClosure>>ensure:
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ] in [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
BlockClosure>>ifCurtailed:
[ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
NeoJSONParseError: invalid input: nil
18 February 2015 11:56:43.208234 am

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
NBCogit NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
https://github.com/pharo-project/pharo-vm.git Commit: 4a0d556150d478ff2de3c9624d2f18e6eaa3fa5c Date: 2014-12-18 18:42:53 +0100 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14893

Image: Pharo3.0 [Latest update: #30863]

NeoJSONReader>>error:
	Receiver: a NeoJSONReader
	Arguments and temporary variables: 
		text: 	'invalid input: nil'
	Receiver's instance variables: 
		mappings: 	nil
		readStream: 	a ReadStream
		stringStream: 	nil
		listClass: 	nil
		mapClass: 	nil
		propertyNamesAsSymbols: 	false


NeoJSONReader>>parseValue
	Receiver: a NeoJSONReader
	Arguments and temporary variables: 
		char: 	nil
	Receiver's instance variables: 
		mappings: 	nil
		readStream: 	a ReadStream
		stringStream: 	nil
		listClass: 	nil
		mapClass: 	nil
		propertyNamesAsSymbols: 	false


NeoJSONReader>>next
	Receiver: a NeoJSONReader
	Arguments and temporary variables: 

	Receiver's instance variables: 
		mappings: 	nil
		readStream: 	a ReadStream
		stringStream: 	nil
		listClass: 	nil
		mapClass: 	nil
		propertyNamesAsSymbols: 	false


NeoJSONReader class>>fromString:
	Receiver: NeoJSONReader
	Arguments and temporary variables: 
		string: 	''
	Receiver's instance variables: 
		superclass: 	NeoJSONMapper
		methodDict: 	a MethodDictionary(#atEnd->NeoJSONReader>>#atEnd #close->NeoJSONRea...etc...
		format: 	142
		layout: 	a FixedLayout
		instanceVariables: 	#(#readStream #stringStream #listClass #mapClass #propertyNa...etc...
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#NeoJSONReader
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Neo-JSON-Core'
		traitComposition: 	{}
		localSelectors: 	nil


DIPhpModel>>_loadPhpModel
	Receiver: a DIPhpModel
	Arguments and temporary variables: 

	Receiver's instance variables: 
		defRules: 	a DICollectionRule()
		defVars: 	a DICollectionVar(SYSTEM)
		analysisID: 	'1424257003'
		additionalProperties: 	a Dictionary()
		ruleCounter: 	0
		varCounter: 	0
		defVarElements: 	a DICollectionVarElements()
		defVarInvertedElements: 	a DICollectionVarElements()
		model: 	nil


DIPhpModel>>model
	Receiver: a DIPhpModel
	Arguments and temporary variables: 

	Receiver's instance variables: 
		defRules: 	a DICollectionRule()
		defVars: 	a DICollectionVar(SYSTEM)
		analysisID: 	'1424257003'
		additionalProperties: 	a Dictionary()
		ruleCounter: 	0
		varCounter: 	0
		defVarElements: 	a DICollectionVarElements()
		defVarInvertedElements: 	a DICollectionVarElements()
		model: 	nil


DIVarPhpClass>>allElements
	Receiver: RuleResult
	Arguments and temporary variables: 

	Receiver's instance variables: 
		isFirst: 	false
		dslText: 	'RuleResult=PhpClass with name:"Dicto\\RuleResult"'
		type: 	'PhpClass'
		id: 	1
		entity: 	nil
		name: 	'RuleResult'
		specifiers: 	an OrderedCollection(name=Dicto\\RuleResult)
		isInverted: 	false
		elements: 	a DICollectionVarElements()
		invertedElements: 	a DICollectionVarElements()


DIVarPhpClass(DIVar)>>elements
	Receiver: RuleResult
	Arguments and temporary variables: 
		valid: 	nil
	Receiver's instance variables: 
		isFirst: 	false
		dslText: 	'RuleResult=PhpClass with name:"Dicto\\RuleResult"'
		type: 	'PhpClass'
		id: 	1
		entity: 	nil
		name: 	'RuleResult'
		specifiers: 	an OrderedCollection(name=Dicto\\RuleResult)
		isInverted: 	false
		elements: 	a DICollectionVarElements()
		invertedElements: 	a DICollectionVarElements()


DISimpleRule>>subjectElements
	Receiver: RuleResult cannot depend on DictoTalker
	Arguments and temporary variables: 
		subjectElements: 	nil
	Receiver's instance variables: 
		isFirst: 	nil
		dslText: 	'RuleResult cannot depend on DictoTalker'
		type: 	#cannot
		id: 	1001
		entity: 	nil
		subjects: 	an Array(RuleResult)
		predicates: 	an Array(depend on DictoTalker)
		subRules: 	nil
		candidateAdapters: 	a SortedCollection(DIPhpDependencies)
		chosenAdapter: 	DIPhpDependencies
		hasFailed: 	false
		failureMessage: 	''
		failingPredicates: 	a Set()
		hasSubjectInverted: 	false
		hasPredicateInverted: 	false


DITestGroup>>_failingPredicatesFor:
	Receiver: a DITestGroup
	Arguments and temporary variables: 
		rule: 	RuleResult cannot depend on DictoTalker
		allPredicates: 	a Set()
		mustFindPassing: 	nil
		failingPredicates: 	nil
		predicateReadableValue: 	''
		predName: 	'dependOn'
	Receiver's instance variables: 
		rules: 	an OrderedCollection(RuleResult cannot depend on DictoTalker DictoTalker...etc...
		adapter: 	a DIPhpDependencies
		runCommandText: 	nil
		testSpecification: 	nil
		adapterID: 	'DIPhpDependencies'
		resultFile: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/meta/1424256847/...etc...
		specificationFile: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/meta/1424...etc...
		commandFile: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/meta/1424256847...etc...


[ :rule | 
| failingPredicates |
failingPredicates := self _failingPredicatesFor: rule.
failingPredicates size > 0
	ifTrue: [ 
		rule setFailed.
		rule errorPredicates: failingPredicates ] ] in DITestGroup>>read
	Receiver: a DITestGroup
	Arguments and temporary variables: 
		rule: 	RuleResult cannot depend on DictoTalker
		failingPredicates: 	nil
	Receiver's instance variables: 
		rules: 	an OrderedCollection(RuleResult cannot depend on DictoTalker DictoTalker...etc...
		adapter: 	a DIPhpDependencies
		runCommandText: 	nil
		testSpecification: 	nil
		adapterID: 	'DIPhpDependencies'
		resultFile: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/meta/1424256847/...etc...
		specificationFile: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/meta/1424...etc...
		commandFile: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/meta/1424256847...etc...


OrderedCollection>>do:
	Receiver: an OrderedCollection(RuleResult cannot depend on DictoTalker DictoTalker must depend on Ru...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :rule | 
| failingPredicates |
failingPredicates := self _failingPred...etc...
		index: 	1
	Receiver's instance variables: 
		array: 	an Array(RuleResult cannot depend on DictoTalker DictoTalker must depend...etc...
		firstIndex: 	1
		lastIndex: 	3


DITestGroup>>read
	Receiver: a DITestGroup
	Arguments and temporary variables: 

	Receiver's instance variables: 
		rules: 	an OrderedCollection(RuleResult cannot depend on DictoTalker DictoTalker...etc...
		adapter: 	a DIPhpDependencies
		runCommandText: 	nil
		testSpecification: 	nil
		adapterID: 	'DIPhpDependencies'
		resultFile: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/meta/1424256847/...etc...
		specificationFile: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/meta/1424...etc...
		commandFile: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/meta/1424256847...etc...


[ :testSuite | testSuite read ] in DIDicto>>_parseResultsFor:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		adapterTestGroups: 	a Dictionary(DIGrepFileContent->a DITestGroup DIJMeterLoadTe...etc...
		notFailingRules: 	nil
		failingRules: 	nil
		testSuite: 	a DITestGroup
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424257003'
		singleShotTask: 	true


Array(SequenceableCollection)>>do:
	Receiver: an Array(a DITestGroup a DITestGroup a DITestGroup a DITestGroup a DITestGroup)
	Arguments and temporary variables: 
		aBlock: 	[ :testSuite | testSuite read ]
		index: 	4
	Receiver's instance variables: 
an Array(a DITestGroup a DITestGroup a DITestGroup a DITestGroup a DITestGroup)

DIDicto>>_parseResultsFor:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		adapterTestGroups: 	a Dictionary(DIGrepFileContent->a DITestGroup DIJMeterLoadTe...etc...
		notFailingRules: 	nil
		failingRules: 	nil
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424257003'
		singleShotTask: 	true


DIDicto>>dictoCheck:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = ...etc...
		adapterTestGroups: 	a Dictionary(DIGrepFileContent->a DITestGroup DIJMeterLoadTe...etc...
		exportFormat: 	nil
		xml: 	nil
		json: 	nil
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424257003'
		singleShotTask: 	true


[ ^ dicto dictoCheck: input ] in DIWebServiceAPI>>getResults
	Receiver: a DIWebServiceAPI
	Arguments and temporary variables: 
		in: 	'/home/otruffer/dicto/bin/analysis/meta/dicto.rules'
		input: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = PhpCl...etc...
		dicto: 	a DIDicto
	Receiver's instance variables: 
		request: 	nil
		response: 	nil
		variables: 	nil
		delegate: 	nil
		principal: 	nil
		credentials: 	nil


BlockClosure>>on:do:
	Receiver: [ ^ dicto dictoCheck: input ]
	Arguments and temporary variables: 
		exception: 	DIException
		handlerAction: 	[ :ex | ^ self error: ex description ]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	DIWebServiceAPI>>getResults
		startpc: 	110
		numArgs: 	0


DIWebServiceAPI>>getResults
	Receiver: a DIWebServiceAPI
	Arguments and temporary variables: 
		in: 	'/home/otruffer/dicto/bin/analysis/meta/dicto.rules'
		input: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = PhpCl...etc...
		dicto: 	a DIDicto
	Receiver's instance variables: 
		request: 	nil
		response: 	nil
		variables: 	nil
		delegate: 	nil
		principal: 	nil
		credentials: 	nil


DIWebServiceHandler>>get
	Receiver: a DIWebServiceHandler
	Arguments and temporary variables: 
		api: 	a DIWebServiceAPI
	Receiver's instance variables: 
		request: 	a ZnRequest(GET /meta/results)
		response: 	nil
		variables: 	an OrderedCollection('meta' 'results')
		delegate: 	a ZnJSONRestServerDelegate
		principal: 	nil
		credentials: 	nil
		dicto: 	a DIDicto


DIWebServiceHandler(ZnRestCall)>>execute
	Receiver: a DIWebServiceHandler
	Arguments and temporary variables: 

	Receiver's instance variables: 
		request: 	a ZnRequest(GET /meta/results)
		response: 	nil
		variables: 	an OrderedCollection('meta' 'results')
		delegate: 	a ZnJSONRestServerDelegate
		principal: 	nil
		credentials: 	nil
		dicto: 	a DIDicto


[ call execute ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


BlockClosure>>on:do:
	Receiver: [ call execute ]
	Arguments and temporary variables: 
		exception: 	ZnRestCallUnauthorized
		handlerAction: 	[ :exception | self unauthorized: exception request ]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
		startpc: 	38
		numArgs: 	0


ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


[ self execute: call ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		request: 	a ZnRequest(GET /meta/results)
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


BlockClosure>>on:do:
	Receiver: [ self execute: call ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :exception | 
request server debugMode
	ifTrue: [ exception pa...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
		startpc: 	99
		numArgs: 	0


ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		request: 	a ZnRequest(GET /meta/results)
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ :delegate | delegate handleRequest: request ] ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(GET /meta/results)
		delegate: 	a ZnJSONRestServerDelegate
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateRequest:do:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(GET /meta/results)
		block: 	[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ ...etc...
		authenticator: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(GET /meta/results)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


[ self authenticateAndDelegateRequest: request ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(GET /meta/results)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


BlockClosure>>on:do:
	Receiver: [ self authenticateAndDelegateRequest: request ]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :exception | 
self debugMode
	ifTrue: [ exception pass ]
	ifFa...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequ...etc...
		startpc: 	58
		numArgs: 	0


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(GET /meta/results)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(GET /meta/results)
		response: 	nil
		initialMilliseconds: 	1513506
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeOneRequestResponseOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		stream: 	a ZdcSocketStream
		request: 	a ZnRequest(GET /meta/results)
		response: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


[ self executeOneRequestResponseOn: stream ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		stream: 	a ZdcSocketStream
		request: 	nil
		response: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


[ 
p psValueAt: index put: anObject.
aBlock value ] in ZnCurrentServer(DynamicVariable)>>value:during:
	Receiver: a ZnCurrentServer
	Arguments and temporary variables: 
		anObject: 	a ZnManagingMultiThreadedServer(running 8010)
		aBlock: 	[ self executeOneRequestResponseOn: stream ]
		p: 	a Process in nil
		oldValue: 	nil
	Receiver's instance variables: 
		index: 	5


BlockClosure>>ensure:
	Receiver: [ 
p psValueAt: index put: anObject.
aBlock value ]
	Arguments and temporary variables: 
		aBlock: 	[ p psValueAt: index put: oldValue ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ZnCurrentServer(DynamicVariable)>>value:during:
		startpc: 	62
		numArgs: 	0



--- The full stack ---
NeoJSONReader>>error:
NeoJSONReader>>parseValue
NeoJSONReader>>next
NeoJSONReader class>>fromString:
DIPhpModel>>_loadPhpModel
DIPhpModel>>model
DIVarPhpClass>>allElements
DIVarPhpClass(DIVar)>>elements
DISimpleRule>>subjectElements
DITestGroup>>_failingPredicatesFor:
[ :rule | 
| failingPredicates |
failingPredicates := self _failingPredicatesFor: rule.
failingPredicates size > 0
	ifTrue: [ 
		rule setFailed.
		rule errorPredicates: failingPredicates ] ] in DITestGroup>>read
OrderedCollection>>do:
DITestGroup>>read
[ :testSuite | testSuite read ] in DIDicto>>_parseResultsFor:
Array(SequenceableCollection)>>do:
DIDicto>>_parseResultsFor:
DIDicto>>dictoCheck:
[ ^ dicto dictoCheck: input ] in DIWebServiceAPI>>getResults
BlockClosure>>on:do:
DIWebServiceAPI>>getResults
DIWebServiceHandler>>get
DIWebServiceHandler(ZnRestCall)>>execute
[ call execute ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
BlockClosure>>on:do:
ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
[ self execute: call ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
BlockClosure>>on:do:
ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ :delegate | delegate handleRequest: request ] ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateRequest:do:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
[ self authenticateAndDelegateRequest: request ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
BlockClosure>>on:do:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequest:
ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeOneRequestResponseOn:
[ self executeOneRequestResponseOn: stream ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
[ 
p psValueAt: index put: anObject.
aBlock value ] in ZnCurrentServer(DynamicVariable)>>value:during:
BlockClosure>>ensure:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
ZnCurrentServer(DynamicVariable)>>value:during:
ZnCurrentServer class(DynamicVariable class)>>value:during:
ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
[ self executeRequestResponseLoopOn: stream ] in [ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ] in [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
BlockClosure>>ensure:
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ] in [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
BlockClosure>>ifCurtailed:
[ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
NeoJSONParseError: invalid input: nil
18 February 2015 12:04:06.858068 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
NBCogit NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
https://github.com/pharo-project/pharo-vm.git Commit: 4a0d556150d478ff2de3c9624d2f18e6eaa3fa5c Date: 2014-12-18 18:42:53 +0100 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14893

Image: Pharo3.0 [Latest update: #30863]

NeoJSONReader>>error:
	Receiver: a NeoJSONReader
	Arguments and temporary variables: 
		text: 	'invalid input: nil'
	Receiver's instance variables: 
		mappings: 	nil
		readStream: 	a ReadStream
		stringStream: 	nil
		listClass: 	nil
		mapClass: 	nil
		propertyNamesAsSymbols: 	false


NeoJSONReader>>parseValue
	Receiver: a NeoJSONReader
	Arguments and temporary variables: 
		char: 	nil
	Receiver's instance variables: 
		mappings: 	nil
		readStream: 	a ReadStream
		stringStream: 	nil
		listClass: 	nil
		mapClass: 	nil
		propertyNamesAsSymbols: 	false


NeoJSONReader>>next
	Receiver: a NeoJSONReader
	Arguments and temporary variables: 

	Receiver's instance variables: 
		mappings: 	nil
		readStream: 	a ReadStream
		stringStream: 	nil
		listClass: 	nil
		mapClass: 	nil
		propertyNamesAsSymbols: 	false


NeoJSONReader class>>fromString:
	Receiver: NeoJSONReader
	Arguments and temporary variables: 
		string: 	''
	Receiver's instance variables: 
		superclass: 	NeoJSONMapper
		methodDict: 	a MethodDictionary(#atEnd->NeoJSONReader>>#atEnd #close->NeoJSONRea...etc...
		format: 	142
		layout: 	a FixedLayout
		instanceVariables: 	#(#readStream #stringStream #listClass #mapClass #propertyNa...etc...
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#NeoJSONReader
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Neo-JSON-Core'
		traitComposition: 	{}
		localSelectors: 	nil


DIPhpModel>>_loadPhpModel
	Receiver: a DIPhpModel
	Arguments and temporary variables: 

	Receiver's instance variables: 
		defRules: 	a DICollectionRule()
		defVars: 	a DICollectionVar(SYSTEM)
		analysisID: 	'1424257447'
		additionalProperties: 	a Dictionary()
		ruleCounter: 	0
		varCounter: 	0
		defVarElements: 	a DICollectionVarElements()
		defVarInvertedElements: 	a DICollectionVarElements()
		model: 	nil


DIPhpModel>>model
	Receiver: a DIPhpModel
	Arguments and temporary variables: 

	Receiver's instance variables: 
		defRules: 	a DICollectionRule()
		defVars: 	a DICollectionVar(SYSTEM)
		analysisID: 	'1424257447'
		additionalProperties: 	a Dictionary()
		ruleCounter: 	0
		varCounter: 	0
		defVarElements: 	a DICollectionVarElements()
		defVarInvertedElements: 	a DICollectionVarElements()
		model: 	nil


DIVarPhpClass>>allElements
	Receiver: RuleResult
	Arguments and temporary variables: 

	Receiver's instance variables: 
		isFirst: 	false
		dslText: 	'RuleResult=PhpClass with name:"Dicto\\RuleResult"'
		type: 	'PhpClass'
		id: 	1
		entity: 	nil
		name: 	'RuleResult'
		specifiers: 	an OrderedCollection(name=Dicto\\RuleResult)
		isInverted: 	false
		elements: 	a DICollectionVarElements()
		invertedElements: 	a DICollectionVarElements()


DIVarPhpClass(DIVar)>>elements
	Receiver: RuleResult
	Arguments and temporary variables: 
		valid: 	nil
	Receiver's instance variables: 
		isFirst: 	false
		dslText: 	'RuleResult=PhpClass with name:"Dicto\\RuleResult"'
		type: 	'PhpClass'
		id: 	1
		entity: 	nil
		name: 	'RuleResult'
		specifiers: 	an OrderedCollection(name=Dicto\\RuleResult)
		isInverted: 	false
		elements: 	a DICollectionVarElements()
		invertedElements: 	a DICollectionVarElements()


DISimpleRule>>subjectElements
	Receiver: RuleResult cannot depend on DictoTalker
	Arguments and temporary variables: 
		subjectElements: 	nil
	Receiver's instance variables: 
		isFirst: 	nil
		dslText: 	'RuleResult cannot depend on DictoTalker'
		type: 	#cannot
		id: 	1001
		entity: 	nil
		subjects: 	an Array(RuleResult)
		predicates: 	an Array(depend on DictoTalker)
		subRules: 	nil
		candidateAdapters: 	a SortedCollection(DIPhpDependencies)
		chosenAdapter: 	DIPhpDependencies
		hasFailed: 	false
		failureMessage: 	''
		failingPredicates: 	a Set()
		hasSubjectInverted: 	false
		hasPredicateInverted: 	false


DITestGroup>>_failingPredicatesFor:
	Receiver: a DITestGroup
	Arguments and temporary variables: 
		rule: 	RuleResult cannot depend on DictoTalker
		allPredicates: 	a Set()
		mustFindPassing: 	nil
		failingPredicates: 	nil
		predicateReadableValue: 	''
		predName: 	'dependOn'
	Receiver's instance variables: 
		rules: 	an OrderedCollection(RuleResult cannot depend on DictoTalker DictoTalker...etc...
		adapter: 	a DIPhpDependencies
		runCommandText: 	nil
		testSpecification: 	nil
		adapterID: 	'DIPhpDependencies'
		resultFile: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/meta/1424256847/...etc...
		specificationFile: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/meta/1424...etc...
		commandFile: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/meta/1424256847...etc...


[ :rule | 
| failingPredicates |
failingPredicates := self _failingPredicatesFor: rule.
failingPredicates size > 0
	ifTrue: [ 
		rule setFailed.
		rule errorPredicates: failingPredicates ] ] in DITestGroup>>read
	Receiver: a DITestGroup
	Arguments and temporary variables: 
		rule: 	RuleResult cannot depend on DictoTalker
		failingPredicates: 	nil
	Receiver's instance variables: 
		rules: 	an OrderedCollection(RuleResult cannot depend on DictoTalker DictoTalker...etc...
		adapter: 	a DIPhpDependencies
		runCommandText: 	nil
		testSpecification: 	nil
		adapterID: 	'DIPhpDependencies'
		resultFile: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/meta/1424256847/...etc...
		specificationFile: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/meta/1424...etc...
		commandFile: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/meta/1424256847...etc...


OrderedCollection>>do:
	Receiver: an OrderedCollection(RuleResult cannot depend on DictoTalker DictoTalker must depend on Ru...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :rule | 
| failingPredicates |
failingPredicates := self _failingPred...etc...
		index: 	1
	Receiver's instance variables: 
		array: 	an Array(RuleResult cannot depend on DictoTalker DictoTalker must depend...etc...
		firstIndex: 	1
		lastIndex: 	3


DITestGroup>>read
	Receiver: a DITestGroup
	Arguments and temporary variables: 

	Receiver's instance variables: 
		rules: 	an OrderedCollection(RuleResult cannot depend on DictoTalker DictoTalker...etc...
		adapter: 	a DIPhpDependencies
		runCommandText: 	nil
		testSpecification: 	nil
		adapterID: 	'DIPhpDependencies'
		resultFile: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/meta/1424256847/...etc...
		specificationFile: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/meta/1424...etc...
		commandFile: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/meta/1424256847...etc...


[ :testSuite | testSuite read ] in DIDicto>>_parseResultsFor:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		adapterTestGroups: 	a Dictionary(DIGrepFileContent->a DITestGroup DIJMeterLoadTe...etc...
		notFailingRules: 	nil
		failingRules: 	nil
		testSuite: 	a DITestGroup
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424257447'
		singleShotTask: 	true


Array(SequenceableCollection)>>do:
	Receiver: an Array(a DITestGroup a DITestGroup a DITestGroup a DITestGroup a DITestGroup)
	Arguments and temporary variables: 
		aBlock: 	[ :testSuite | testSuite read ]
		index: 	4
	Receiver's instance variables: 
an Array(a DITestGroup a DITestGroup a DITestGroup a DITestGroup a DITestGroup)

DIDicto>>_parseResultsFor:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		adapterTestGroups: 	a Dictionary(DIGrepFileContent->a DITestGroup DIJMeterLoadTe...etc...
		notFailingRules: 	nil
		failingRules: 	nil
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424257447'
		singleShotTask: 	true


DIDicto>>dictoCheck:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = ...etc...
		adapterTestGroups: 	a Dictionary(DIGrepFileContent->a DITestGroup DIJMeterLoadTe...etc...
		exportFormat: 	nil
		xml: 	nil
		json: 	nil
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424257447'
		singleShotTask: 	true


[ ^ dicto dictoCheck: input ] in DIWebServiceAPI>>getResults
	Receiver: a DIWebServiceAPI
	Arguments and temporary variables: 
		in: 	'/home/otruffer/dicto/bin/analysis/meta/dicto.rules'
		input: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = PhpCl...etc...
		dicto: 	a DIDicto
	Receiver's instance variables: 
		request: 	nil
		response: 	nil
		variables: 	nil
		delegate: 	nil
		principal: 	nil
		credentials: 	nil


BlockClosure>>on:do:
	Receiver: [ ^ dicto dictoCheck: input ]
	Arguments and temporary variables: 
		exception: 	DIException
		handlerAction: 	[ :ex | ^ self error: ex description ]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	DIWebServiceAPI>>getResults
		startpc: 	110
		numArgs: 	0


DIWebServiceAPI>>getResults
	Receiver: a DIWebServiceAPI
	Arguments and temporary variables: 
		in: 	'/home/otruffer/dicto/bin/analysis/meta/dicto.rules'
		input: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = PhpCl...etc...
		dicto: 	a DIDicto
	Receiver's instance variables: 
		request: 	nil
		response: 	nil
		variables: 	nil
		delegate: 	nil
		principal: 	nil
		credentials: 	nil


DIWebServiceHandler>>get
	Receiver: a DIWebServiceHandler
	Arguments and temporary variables: 
		api: 	a DIWebServiceAPI
	Receiver's instance variables: 
		request: 	a ZnRequest(GET /meta/results)
		response: 	nil
		variables: 	an OrderedCollection('meta' 'results')
		delegate: 	a ZnJSONRestServerDelegate
		principal: 	nil
		credentials: 	nil
		dicto: 	a DIDicto


DIWebServiceHandler(ZnRestCall)>>execute
	Receiver: a DIWebServiceHandler
	Arguments and temporary variables: 

	Receiver's instance variables: 
		request: 	a ZnRequest(GET /meta/results)
		response: 	nil
		variables: 	an OrderedCollection('meta' 'results')
		delegate: 	a ZnJSONRestServerDelegate
		principal: 	nil
		credentials: 	nil
		dicto: 	a DIDicto


[ call execute ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


BlockClosure>>on:do:
	Receiver: [ call execute ]
	Arguments and temporary variables: 
		exception: 	ZnRestCallUnauthorized
		handlerAction: 	[ :exception | self unauthorized: exception request ]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
		startpc: 	38
		numArgs: 	0


ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


[ self execute: call ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		request: 	a ZnRequest(GET /meta/results)
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


BlockClosure>>on:do:
	Receiver: [ self execute: call ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :exception | 
request server debugMode
	ifTrue: [ exception pa...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
		startpc: 	99
		numArgs: 	0


ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		request: 	a ZnRequest(GET /meta/results)
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ :delegate | delegate handleRequest: request ] ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(GET /meta/results)
		delegate: 	a ZnJSONRestServerDelegate
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateRequest:do:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(GET /meta/results)
		block: 	[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ ...etc...
		authenticator: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(GET /meta/results)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


[ self authenticateAndDelegateRequest: request ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(GET /meta/results)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


BlockClosure>>on:do:
	Receiver: [ self authenticateAndDelegateRequest: request ]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :exception | 
self debugMode
	ifTrue: [ exception pass ]
	ifFa...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequ...etc...
		startpc: 	58
		numArgs: 	0


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(GET /meta/results)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(GET /meta/results)
		response: 	nil
		initialMilliseconds: 	1957161
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeOneRequestResponseOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		stream: 	a ZdcSocketStream
		request: 	a ZnRequest(GET /meta/results)
		response: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


[ self executeOneRequestResponseOn: stream ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		stream: 	a ZdcSocketStream
		request: 	nil
		response: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


[ 
p psValueAt: index put: anObject.
aBlock value ] in ZnCurrentServer(DynamicVariable)>>value:during:
	Receiver: a ZnCurrentServer
	Arguments and temporary variables: 
		anObject: 	a ZnManagingMultiThreadedServer(running 8010)
		aBlock: 	[ self executeOneRequestResponseOn: stream ]
		p: 	a Process in nil
		oldValue: 	nil
	Receiver's instance variables: 
		index: 	5


BlockClosure>>ensure:
	Receiver: [ 
p psValueAt: index put: anObject.
aBlock value ]
	Arguments and temporary variables: 
		aBlock: 	[ p psValueAt: index put: oldValue ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ZnCurrentServer(DynamicVariable)>>value:during:
		startpc: 	62
		numArgs: 	0



--- The full stack ---
NeoJSONReader>>error:
NeoJSONReader>>parseValue
NeoJSONReader>>next
NeoJSONReader class>>fromString:
DIPhpModel>>_loadPhpModel
DIPhpModel>>model
DIVarPhpClass>>allElements
DIVarPhpClass(DIVar)>>elements
DISimpleRule>>subjectElements
DITestGroup>>_failingPredicatesFor:
[ :rule | 
| failingPredicates |
failingPredicates := self _failingPredicatesFor: rule.
failingPredicates size > 0
	ifTrue: [ 
		rule setFailed.
		rule errorPredicates: failingPredicates ] ] in DITestGroup>>read
OrderedCollection>>do:
DITestGroup>>read
[ :testSuite | testSuite read ] in DIDicto>>_parseResultsFor:
Array(SequenceableCollection)>>do:
DIDicto>>_parseResultsFor:
DIDicto>>dictoCheck:
[ ^ dicto dictoCheck: input ] in DIWebServiceAPI>>getResults
BlockClosure>>on:do:
DIWebServiceAPI>>getResults
DIWebServiceHandler>>get
DIWebServiceHandler(ZnRestCall)>>execute
[ call execute ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
BlockClosure>>on:do:
ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
[ self execute: call ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
BlockClosure>>on:do:
ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ :delegate | delegate handleRequest: request ] ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateRequest:do:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
[ self authenticateAndDelegateRequest: request ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
BlockClosure>>on:do:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequest:
ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeOneRequestResponseOn:
[ self executeOneRequestResponseOn: stream ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
[ 
p psValueAt: index put: anObject.
aBlock value ] in ZnCurrentServer(DynamicVariable)>>value:during:
BlockClosure>>ensure:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
ZnCurrentServer(DynamicVariable)>>value:during:
ZnCurrentServer class(DynamicVariable class)>>value:during:
ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
[ self executeRequestResponseLoopOn: stream ] in [ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ] in [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
BlockClosure>>ensure:
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ] in [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
BlockClosure>>ifCurtailed:
[ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
NeoJSONParseError: invalid input: nil
18 February 2015 12:09:48.484882 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
NBCogit NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
https://github.com/pharo-project/pharo-vm.git Commit: 4a0d556150d478ff2de3c9624d2f18e6eaa3fa5c Date: 2014-12-18 18:42:53 +0100 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14893

Image: Pharo3.0 [Latest update: #30863]

NeoJSONReader>>error:
	Receiver: a NeoJSONReader
	Arguments and temporary variables: 
		text: 	'invalid input: nil'
	Receiver's instance variables: 
		mappings: 	nil
		readStream: 	a ReadStream
		stringStream: 	nil
		listClass: 	nil
		mapClass: 	nil
		propertyNamesAsSymbols: 	false


NeoJSONReader>>parseValue
	Receiver: a NeoJSONReader
	Arguments and temporary variables: 
		char: 	nil
	Receiver's instance variables: 
		mappings: 	nil
		readStream: 	a ReadStream
		stringStream: 	nil
		listClass: 	nil
		mapClass: 	nil
		propertyNamesAsSymbols: 	false


NeoJSONReader>>next
	Receiver: a NeoJSONReader
	Arguments and temporary variables: 

	Receiver's instance variables: 
		mappings: 	nil
		readStream: 	a ReadStream
		stringStream: 	nil
		listClass: 	nil
		mapClass: 	nil
		propertyNamesAsSymbols: 	false


NeoJSONReader class>>fromString:
	Receiver: NeoJSONReader
	Arguments and temporary variables: 
		string: 	''
	Receiver's instance variables: 
		superclass: 	NeoJSONMapper
		methodDict: 	a MethodDictionary(#atEnd->NeoJSONReader>>#atEnd #close->NeoJSONRea...etc...
		format: 	142
		layout: 	a FixedLayout
		instanceVariables: 	#(#readStream #stringStream #listClass #mapClass #propertyNa...etc...
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#NeoJSONReader
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Neo-JSON-Core'
		traitComposition: 	{}
		localSelectors: 	nil


DIPhpModel>>_loadPhpModel
	Receiver: a DIPhpModel
	Arguments and temporary variables: 

	Receiver's instance variables: 
		defRules: 	a DICollectionRule()
		defVars: 	a DICollectionVar(SYSTEM)
		analysisID: 	'1424257788'
		additionalProperties: 	a Dictionary()
		ruleCounter: 	0
		varCounter: 	0
		defVarElements: 	a DICollectionVarElements()
		defVarInvertedElements: 	a DICollectionVarElements()
		model: 	nil


DIPhpModel>>model
	Receiver: a DIPhpModel
	Arguments and temporary variables: 

	Receiver's instance variables: 
		defRules: 	a DICollectionRule()
		defVars: 	a DICollectionVar(SYSTEM)
		analysisID: 	'1424257788'
		additionalProperties: 	a Dictionary()
		ruleCounter: 	0
		varCounter: 	0
		defVarElements: 	a DICollectionVarElements()
		defVarInvertedElements: 	a DICollectionVarElements()
		model: 	nil


DIVarPhpClass>>allElements
	Receiver: RuleResult
	Arguments and temporary variables: 

	Receiver's instance variables: 
		isFirst: 	false
		dslText: 	'RuleResult=PhpClass with name:"Dicto\\RuleResult"'
		type: 	'PhpClass'
		id: 	1
		entity: 	nil
		name: 	'RuleResult'
		specifiers: 	an OrderedCollection(name=Dicto\\RuleResult)
		isInverted: 	false
		elements: 	a DICollectionVarElements()
		invertedElements: 	a DICollectionVarElements()


DIVarPhpClass(DIVar)>>elements
	Receiver: RuleResult
	Arguments and temporary variables: 
		valid: 	nil
	Receiver's instance variables: 
		isFirst: 	false
		dslText: 	'RuleResult=PhpClass with name:"Dicto\\RuleResult"'
		type: 	'PhpClass'
		id: 	1
		entity: 	nil
		name: 	'RuleResult'
		specifiers: 	an OrderedCollection(name=Dicto\\RuleResult)
		isInverted: 	false
		elements: 	a DICollectionVarElements()
		invertedElements: 	a DICollectionVarElements()


DISimpleRule>>subjectElements
	Receiver: RuleResult cannot depend on DictoTalker
	Arguments and temporary variables: 
		subjectElements: 	nil
	Receiver's instance variables: 
		isFirst: 	nil
		dslText: 	'RuleResult cannot depend on DictoTalker'
		type: 	#cannot
		id: 	1001
		entity: 	nil
		subjects: 	an Array(RuleResult)
		predicates: 	an Array(depend on DictoTalker)
		subRules: 	nil
		candidateAdapters: 	a SortedCollection(DIPhpDependencies)
		chosenAdapter: 	DIPhpDependencies
		hasFailed: 	false
		failureMessage: 	''
		failingPredicates: 	a Set()
		hasSubjectInverted: 	false
		hasPredicateInverted: 	false


DITestGroup>>_failingPredicatesFor:
	Receiver: a DITestGroup
	Arguments and temporary variables: 
		rule: 	RuleResult cannot depend on DictoTalker
		allPredicates: 	a Set()
		mustFindPassing: 	nil
		failingPredicates: 	nil
		predicateReadableValue: 	''
		predName: 	'dependOn'
	Receiver's instance variables: 
		rules: 	an OrderedCollection(RuleResult cannot depend on DictoTalker DictoTalker...etc...
		adapter: 	a DIPhpDependencies
		runCommandText: 	nil
		testSpecification: 	nil
		adapterID: 	'DIPhpDependencies'
		resultFile: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/meta/1424257761/...etc...
		specificationFile: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/meta/1424...etc...
		commandFile: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/meta/1424257761...etc...


[ :rule | 
| failingPredicates |
failingPredicates := self _failingPredicatesFor: rule.
failingPredicates size > 0
	ifTrue: [ 
		rule setFailed.
		rule errorPredicates: failingPredicates ] ] in DITestGroup>>read
	Receiver: a DITestGroup
	Arguments and temporary variables: 
		rule: 	RuleResult cannot depend on DictoTalker
		failingPredicates: 	nil
	Receiver's instance variables: 
		rules: 	an OrderedCollection(RuleResult cannot depend on DictoTalker DictoTalker...etc...
		adapter: 	a DIPhpDependencies
		runCommandText: 	nil
		testSpecification: 	nil
		adapterID: 	'DIPhpDependencies'
		resultFile: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/meta/1424257761/...etc...
		specificationFile: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/meta/1424...etc...
		commandFile: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/meta/1424257761...etc...


OrderedCollection>>do:
	Receiver: an OrderedCollection(RuleResult cannot depend on DictoTalker DictoTalker must depend on Ru...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :rule | 
| failingPredicates |
failingPredicates := self _failingPred...etc...
		index: 	1
	Receiver's instance variables: 
		array: 	an Array(RuleResult cannot depend on DictoTalker DictoTalker must depend...etc...
		firstIndex: 	1
		lastIndex: 	3


DITestGroup>>read
	Receiver: a DITestGroup
	Arguments and temporary variables: 

	Receiver's instance variables: 
		rules: 	an OrderedCollection(RuleResult cannot depend on DictoTalker DictoTalker...etc...
		adapter: 	a DIPhpDependencies
		runCommandText: 	nil
		testSpecification: 	nil
		adapterID: 	'DIPhpDependencies'
		resultFile: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/meta/1424257761/...etc...
		specificationFile: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/meta/1424...etc...
		commandFile: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/meta/1424257761...etc...


[ :testSuite | testSuite read ] in DIDicto>>_parseResultsFor:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		adapterTestGroups: 	a Dictionary(DIGrepFileContent->a DITestGroup DIJMeterLoadTe...etc...
		notFailingRules: 	nil
		failingRules: 	nil
		testSuite: 	a DITestGroup
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424257788'
		singleShotTask: 	true


Array(SequenceableCollection)>>do:
	Receiver: an Array(a DITestGroup a DITestGroup a DITestGroup a DITestGroup a DITestGroup)
	Arguments and temporary variables: 
		aBlock: 	[ :testSuite | testSuite read ]
		index: 	4
	Receiver's instance variables: 
an Array(a DITestGroup a DITestGroup a DITestGroup a DITestGroup a DITestGroup)

DIDicto>>_parseResultsFor:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		adapterTestGroups: 	a Dictionary(DIGrepFileContent->a DITestGroup DIJMeterLoadTe...etc...
		notFailingRules: 	nil
		failingRules: 	nil
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424257788'
		singleShotTask: 	true


DIDicto>>dictoCheck:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = ...etc...
		adapterTestGroups: 	a Dictionary(DIGrepFileContent->a DITestGroup DIJMeterLoadTe...etc...
		exportFormat: 	nil
		xml: 	nil
		json: 	nil
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424257788'
		singleShotTask: 	true


[ ^ dicto dictoCheck: input ] in DIWebServiceAPI>>getResults
	Receiver: a DIWebServiceAPI
	Arguments and temporary variables: 
		in: 	'/home/otruffer/dicto/bin/analysis/meta/dicto.rules'
		input: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = PhpCl...etc...
		dicto: 	a DIDicto
	Receiver's instance variables: 
		request: 	nil
		response: 	nil
		variables: 	nil
		delegate: 	nil
		principal: 	nil
		credentials: 	nil


BlockClosure>>on:do:
	Receiver: [ ^ dicto dictoCheck: input ]
	Arguments and temporary variables: 
		exception: 	DIException
		handlerAction: 	[ :ex | ^ self error: ex description ]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	DIWebServiceAPI>>getResults
		startpc: 	110
		numArgs: 	0


DIWebServiceAPI>>getResults
	Receiver: a DIWebServiceAPI
	Arguments and temporary variables: 
		in: 	'/home/otruffer/dicto/bin/analysis/meta/dicto.rules'
		input: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = PhpCl...etc...
		dicto: 	a DIDicto
	Receiver's instance variables: 
		request: 	nil
		response: 	nil
		variables: 	nil
		delegate: 	nil
		principal: 	nil
		credentials: 	nil


DIWebServiceHandler>>get
	Receiver: a DIWebServiceHandler
	Arguments and temporary variables: 
		api: 	a DIWebServiceAPI
	Receiver's instance variables: 
		request: 	a ZnRequest(GET /meta/results)
		response: 	nil
		variables: 	an OrderedCollection('meta' 'results')
		delegate: 	a ZnJSONRestServerDelegate
		principal: 	nil
		credentials: 	nil
		dicto: 	a DIDicto


DIWebServiceHandler(ZnRestCall)>>execute
	Receiver: a DIWebServiceHandler
	Arguments and temporary variables: 

	Receiver's instance variables: 
		request: 	a ZnRequest(GET /meta/results)
		response: 	nil
		variables: 	an OrderedCollection('meta' 'results')
		delegate: 	a ZnJSONRestServerDelegate
		principal: 	nil
		credentials: 	nil
		dicto: 	a DIDicto


[ call execute ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


BlockClosure>>on:do:
	Receiver: [ call execute ]
	Arguments and temporary variables: 
		exception: 	ZnRestCallUnauthorized
		handlerAction: 	[ :exception | self unauthorized: exception request ]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
		startpc: 	38
		numArgs: 	0


ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


[ self execute: call ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		request: 	a ZnRequest(GET /meta/results)
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


BlockClosure>>on:do:
	Receiver: [ self execute: call ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :exception | 
request server debugMode
	ifTrue: [ exception pa...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
		startpc: 	99
		numArgs: 	0


ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		request: 	a ZnRequest(GET /meta/results)
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ :delegate | delegate handleRequest: request ] ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(GET /meta/results)
		delegate: 	a ZnJSONRestServerDelegate
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateRequest:do:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(GET /meta/results)
		block: 	[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ ...etc...
		authenticator: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(GET /meta/results)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


[ self authenticateAndDelegateRequest: request ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(GET /meta/results)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


BlockClosure>>on:do:
	Receiver: [ self authenticateAndDelegateRequest: request ]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :exception | 
self debugMode
	ifTrue: [ exception pass ]
	ifFa...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequ...etc...
		startpc: 	58
		numArgs: 	0


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(GET /meta/results)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(GET /meta/results)
		response: 	nil
		initialMilliseconds: 	2298809
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeOneRequestResponseOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		stream: 	a ZdcSocketStream
		request: 	a ZnRequest(GET /meta/results)
		response: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


[ self executeOneRequestResponseOn: stream ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		stream: 	a ZdcSocketStream
		request: 	nil
		response: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


[ 
p psValueAt: index put: anObject.
aBlock value ] in ZnCurrentServer(DynamicVariable)>>value:during:
	Receiver: a ZnCurrentServer
	Arguments and temporary variables: 
		anObject: 	a ZnManagingMultiThreadedServer(running 8010)
		aBlock: 	[ self executeOneRequestResponseOn: stream ]
		p: 	a Process in nil
		oldValue: 	nil
	Receiver's instance variables: 
		index: 	5


BlockClosure>>ensure:
	Receiver: [ 
p psValueAt: index put: anObject.
aBlock value ]
	Arguments and temporary variables: 
		aBlock: 	[ p psValueAt: index put: oldValue ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ZnCurrentServer(DynamicVariable)>>value:during:
		startpc: 	62
		numArgs: 	0



--- The full stack ---
NeoJSONReader>>error:
NeoJSONReader>>parseValue
NeoJSONReader>>next
NeoJSONReader class>>fromString:
DIPhpModel>>_loadPhpModel
DIPhpModel>>model
DIVarPhpClass>>allElements
DIVarPhpClass(DIVar)>>elements
DISimpleRule>>subjectElements
DITestGroup>>_failingPredicatesFor:
[ :rule | 
| failingPredicates |
failingPredicates := self _failingPredicatesFor: rule.
failingPredicates size > 0
	ifTrue: [ 
		rule setFailed.
		rule errorPredicates: failingPredicates ] ] in DITestGroup>>read
OrderedCollection>>do:
DITestGroup>>read
[ :testSuite | testSuite read ] in DIDicto>>_parseResultsFor:
Array(SequenceableCollection)>>do:
DIDicto>>_parseResultsFor:
DIDicto>>dictoCheck:
[ ^ dicto dictoCheck: input ] in DIWebServiceAPI>>getResults
BlockClosure>>on:do:
DIWebServiceAPI>>getResults
DIWebServiceHandler>>get
DIWebServiceHandler(ZnRestCall)>>execute
[ call execute ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
BlockClosure>>on:do:
ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
[ self execute: call ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
BlockClosure>>on:do:
ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ :delegate | delegate handleRequest: request ] ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateRequest:do:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
[ self authenticateAndDelegateRequest: request ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
BlockClosure>>on:do:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequest:
ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeOneRequestResponseOn:
[ self executeOneRequestResponseOn: stream ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
[ 
p psValueAt: index put: anObject.
aBlock value ] in ZnCurrentServer(DynamicVariable)>>value:during:
BlockClosure>>ensure:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
ZnCurrentServer(DynamicVariable)>>value:during:
ZnCurrentServer class(DynamicVariable class)>>value:during:
ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
[ self executeRequestResponseLoopOn: stream ] in [ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ] in [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
BlockClosure>>ensure:
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ] in [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
BlockClosure>>ifCurtailed:
[ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: NeoJSONReader>>keys
18 February 2015 12:10:05.042176 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
NBCogit NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
https://github.com/pharo-project/pharo-vm.git Commit: 4a0d556150d478ff2de3c9624d2f18e6eaa3fa5c Date: 2014-12-18 18:42:53 +0100 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14893

Image: Pharo3.0 [Latest update: #30863]

NeoJSONReader(Object)>>doesNotUnderstand: #keys
	Receiver: a NeoJSONReader
	Arguments and temporary variables: 
		aMessage: 	keys
		exception: 	MessageNotUnderstood: NeoJSONReader>>keys
		resumeValue: 	nil
	Receiver's instance variables: 
		mappings: 	nil
		readStream: 	a ReadStream
		stringStream: 	nil
		listClass: 	nil
		mapClass: 	nil
		propertyNamesAsSymbols: 	false


DIVarPhpClass>>allElements
	Receiver: RuleResult
	Arguments and temporary variables: 

	Receiver's instance variables: 
		isFirst: 	false
		dslText: 	'RuleResult=PhpClass with name:"Dicto\\RuleResult"'
		type: 	'PhpClass'
		id: 	1
		entity: 	nil
		name: 	'RuleResult'
		specifiers: 	an OrderedCollection(name=Dicto\\RuleResult)
		isInverted: 	false
		elements: 	a DICollectionVarElements()
		invertedElements: 	a DICollectionVarElements()


DIVarPhpClass(DIVar)>>elements
	Receiver: RuleResult
	Arguments and temporary variables: 
		valid: 	nil
	Receiver's instance variables: 
		isFirst: 	false
		dslText: 	'RuleResult=PhpClass with name:"Dicto\\RuleResult"'
		type: 	'PhpClass'
		id: 	1
		entity: 	nil
		name: 	'RuleResult'
		specifiers: 	an OrderedCollection(name=Dicto\\RuleResult)
		isInverted: 	false
		elements: 	a DICollectionVarElements()
		invertedElements: 	a DICollectionVarElements()


DISimpleRule>>subjectElements
	Receiver: RuleResult cannot depend on DictoTalker
	Arguments and temporary variables: 
		subjectElements: 	nil
	Receiver's instance variables: 
		isFirst: 	nil
		dslText: 	'RuleResult cannot depend on DictoTalker'
		type: 	#cannot
		id: 	1001
		entity: 	nil
		subjects: 	an Array(RuleResult)
		predicates: 	an Array(depend on DictoTalker)
		subRules: 	nil
		candidateAdapters: 	a SortedCollection(DIPhpDependencies)
		chosenAdapter: 	DIPhpDependencies
		hasFailed: 	false
		failureMessage: 	''
		failingPredicates: 	a Set()
		hasSubjectInverted: 	false
		hasPredicateInverted: 	false


DITestGroup>>_failingPredicatesFor:
	Receiver: a DITestGroup
	Arguments and temporary variables: 
		rule: 	RuleResult cannot depend on DictoTalker
		allPredicates: 	a Set()
		mustFindPassing: 	nil
		failingPredicates: 	nil
		predicateReadableValue: 	''
		predName: 	'dependOn'
	Receiver's instance variables: 
		rules: 	an OrderedCollection(RuleResult cannot depend on DictoTalker DictoTalker...etc...
		adapter: 	a DIPhpDependencies
		runCommandText: 	nil
		testSpecification: 	nil
		adapterID: 	'DIPhpDependencies'
		resultFile: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/meta/1424257761/...etc...
		specificationFile: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/meta/1424...etc...
		commandFile: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/meta/1424257761...etc...


[ :rule | 
| failingPredicates |
failingPredicates := self _failingPredicatesFor: rule.
failingPredicates size > 0
	ifTrue: [ 
		rule setFailed.
		rule errorPredicates: failingPredicates ] ] in DITestGroup>>read
	Receiver: a DITestGroup
	Arguments and temporary variables: 
		rule: 	RuleResult cannot depend on DictoTalker
		failingPredicates: 	nil
	Receiver's instance variables: 
		rules: 	an OrderedCollection(RuleResult cannot depend on DictoTalker DictoTalker...etc...
		adapter: 	a DIPhpDependencies
		runCommandText: 	nil
		testSpecification: 	nil
		adapterID: 	'DIPhpDependencies'
		resultFile: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/meta/1424257761/...etc...
		specificationFile: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/meta/1424...etc...
		commandFile: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/meta/1424257761...etc...


OrderedCollection>>do:
	Receiver: an OrderedCollection(RuleResult cannot depend on DictoTalker DictoTalker must depend on Ru...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :rule | 
| failingPredicates |
failingPredicates := self _failingPred...etc...
		index: 	1
	Receiver's instance variables: 
		array: 	an Array(RuleResult cannot depend on DictoTalker DictoTalker must depend...etc...
		firstIndex: 	1
		lastIndex: 	3


DITestGroup>>read
	Receiver: a DITestGroup
	Arguments and temporary variables: 

	Receiver's instance variables: 
		rules: 	an OrderedCollection(RuleResult cannot depend on DictoTalker DictoTalker...etc...
		adapter: 	a DIPhpDependencies
		runCommandText: 	nil
		testSpecification: 	nil
		adapterID: 	'DIPhpDependencies'
		resultFile: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/meta/1424257761/...etc...
		specificationFile: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/meta/1424...etc...
		commandFile: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/meta/1424257761...etc...


[ :testSuite | testSuite read ] in DIDicto>>_parseResultsFor:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		adapterTestGroups: 	a Dictionary(DIGrepFileContent->a DITestGroup DIJMeterLoadTe...etc...
		notFailingRules: 	nil
		failingRules: 	nil
		testSuite: 	a DITestGroup
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424257788'
		singleShotTask: 	true


Array(SequenceableCollection)>>do:
	Receiver: an Array(a DITestGroup a DITestGroup a DITestGroup a DITestGroup a DITestGroup)
	Arguments and temporary variables: 
		aBlock: 	[ :testSuite | testSuite read ]
		index: 	4
	Receiver's instance variables: 
an Array(a DITestGroup a DITestGroup a DITestGroup a DITestGroup a DITestGroup)

DIDicto>>_parseResultsFor:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		adapterTestGroups: 	a Dictionary(DIGrepFileContent->a DITestGroup DIJMeterLoadTe...etc...
		notFailingRules: 	nil
		failingRules: 	nil
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424257788'
		singleShotTask: 	true


DIDicto>>dictoCheck:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = ...etc...
		adapterTestGroups: 	a Dictionary(DIGrepFileContent->a DITestGroup DIJMeterLoadTe...etc...
		exportFormat: 	nil
		xml: 	nil
		json: 	nil
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424257788'
		singleShotTask: 	true


[ ^ dicto dictoCheck: input ] in DIWebServiceAPI>>getResults
	Receiver: a DIWebServiceAPI
	Arguments and temporary variables: 
		in: 	'/home/otruffer/dicto/bin/analysis/meta/dicto.rules'
		input: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = PhpCl...etc...
		dicto: 	a DIDicto
	Receiver's instance variables: 
		request: 	nil
		response: 	nil
		variables: 	nil
		delegate: 	nil
		principal: 	nil
		credentials: 	nil


BlockClosure>>on:do:
	Receiver: [ ^ dicto dictoCheck: input ]
	Arguments and temporary variables: 
		exception: 	DIException
		handlerAction: 	[ :ex | ^ self error: ex description ]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	DIWebServiceAPI>>getResults
		startpc: 	110
		numArgs: 	0


DIWebServiceAPI>>getResults
	Receiver: a DIWebServiceAPI
	Arguments and temporary variables: 
		in: 	'/home/otruffer/dicto/bin/analysis/meta/dicto.rules'
		input: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = PhpCl...etc...
		dicto: 	a DIDicto
	Receiver's instance variables: 
		request: 	nil
		response: 	nil
		variables: 	nil
		delegate: 	nil
		principal: 	nil
		credentials: 	nil


DIWebServiceHandler>>get
	Receiver: a DIWebServiceHandler
	Arguments and temporary variables: 
		api: 	a DIWebServiceAPI
	Receiver's instance variables: 
		request: 	a ZnRequest(GET /meta/results)
		response: 	nil
		variables: 	an OrderedCollection('meta' 'results')
		delegate: 	a ZnJSONRestServerDelegate
		principal: 	nil
		credentials: 	nil
		dicto: 	a DIDicto


DIWebServiceHandler(ZnRestCall)>>execute
	Receiver: a DIWebServiceHandler
	Arguments and temporary variables: 

	Receiver's instance variables: 
		request: 	a ZnRequest(GET /meta/results)
		response: 	nil
		variables: 	an OrderedCollection('meta' 'results')
		delegate: 	a ZnJSONRestServerDelegate
		principal: 	nil
		credentials: 	nil
		dicto: 	a DIDicto


[ call execute ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


BlockClosure>>on:do:
	Receiver: [ call execute ]
	Arguments and temporary variables: 
		exception: 	ZnRestCallUnauthorized
		handlerAction: 	[ :exception | self unauthorized: exception request ]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
		startpc: 	38
		numArgs: 	0


ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


[ self execute: call ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		request: 	a ZnRequest(GET /meta/results)
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


BlockClosure>>on:do:
	Receiver: [ self execute: call ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :exception | 
request server debugMode
	ifTrue: [ exception pa...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
		startpc: 	99
		numArgs: 	0


ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		request: 	a ZnRequest(GET /meta/results)
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ :delegate | delegate handleRequest: request ] ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(GET /meta/results)
		delegate: 	a ZnJSONRestServerDelegate
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateRequest:do:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(GET /meta/results)
		block: 	[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ ...etc...
		authenticator: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(GET /meta/results)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


[ self authenticateAndDelegateRequest: request ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(GET /meta/results)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


BlockClosure>>on:do:
	Receiver: [ self authenticateAndDelegateRequest: request ]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :exception | 
self debugMode
	ifTrue: [ exception pass ]
	ifFa...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequ...etc...
		startpc: 	58
		numArgs: 	0


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(GET /meta/results)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(GET /meta/results)
		response: 	nil
		initialMilliseconds: 	2298809
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeOneRequestResponseOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		stream: 	a ZdcSocketStream
		request: 	a ZnRequest(GET /meta/results)
		response: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


[ self executeOneRequestResponseOn: stream ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		stream: 	a ZdcSocketStream
		request: 	nil
		response: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


[ 
p psValueAt: index put: anObject.
aBlock value ] in ZnCurrentServer(DynamicVariable)>>value:during:
	Receiver: a ZnCurrentServer
	Arguments and temporary variables: 
		anObject: 	a ZnManagingMultiThreadedServer(running 8010)
		aBlock: 	[ self executeOneRequestResponseOn: stream ]
		p: 	a Process in nil
		oldValue: 	nil
	Receiver's instance variables: 
		index: 	5


BlockClosure>>ensure:
	Receiver: [ 
p psValueAt: index put: anObject.
aBlock value ]
	Arguments and temporary variables: 
		aBlock: 	[ p psValueAt: index put: oldValue ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ZnCurrentServer(DynamicVariable)>>value:during:
		startpc: 	62
		numArgs: 	0


ZnCurrentServer(DynamicVariable)>>value:during:
	Receiver: a ZnCurrentServer
	Arguments and temporary variables: 
		anObject: 	a ZnManagingMultiThreadedServer(running 8010)
		aBlock: 	[ self executeOneRequestResponseOn: stream ]
		p: 	a Process in nil
		oldValue: 	nil
	Receiver's instance variables: 
		index: 	5


ZnCurrentServer class(DynamicVariable class)>>value:during:
	Receiver: ZnCurrentServer
	Arguments and temporary variables: 
		anObject: 	a ZnManagingMultiThreadedServer(running 8010)
		aBlock: 	[ self executeOneRequestResponseOn: stream ]
	Receiver's instance variables: 
		superclass: 	DynamicVariable
		methodDict: 	a MethodDictionary()
		format: 	132
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#ZnCurrentServer
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Zinc-HTTP-Variables'
		traitComposition: 	{}
		localSelectors: 	nil
		hash: 	nil
		soleInstance: 	a ZnCurrentServer


ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		stream: 	a ZdcSocketStream
		request: 	nil
		response: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


[ self executeRequestResponseLoopOn: stream ] in [ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ] in [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		listeningSocket: 	a Socket[waitingForConnection]
		stream: 	a ZdcSocketStream
		socket: 	a Socket[connected]
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


BlockClosure>>ensure:
	Receiver: [ self executeRequestResponseLoopOn: stream ]
	Arguments and temporary variables: 
		aBlock: 	[ 
self log debug: 'Closing stream'.
self closeSocketStream: stream ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		se...etc...
		startpc: 	118
		numArgs: 	0



--- The full stack ---
NeoJSONReader(Object)>>doesNotUnderstand: #keys
DIVarPhpClass>>allElements
DIVarPhpClass(DIVar)>>elements
DISimpleRule>>subjectElements
DITestGroup>>_failingPredicatesFor:
[ :rule | 
| failingPredicates |
failingPredicates := self _failingPredicatesFor: rule.
failingPredicates size > 0
	ifTrue: [ 
		rule setFailed.
		rule errorPredicates: failingPredicates ] ] in DITestGroup>>read
OrderedCollection>>do:
DITestGroup>>read
[ :testSuite | testSuite read ] in DIDicto>>_parseResultsFor:
Array(SequenceableCollection)>>do:
DIDicto>>_parseResultsFor:
DIDicto>>dictoCheck:
[ ^ dicto dictoCheck: input ] in DIWebServiceAPI>>getResults
BlockClosure>>on:do:
DIWebServiceAPI>>getResults
DIWebServiceHandler>>get
DIWebServiceHandler(ZnRestCall)>>execute
[ call execute ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
BlockClosure>>on:do:
ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
[ self execute: call ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
BlockClosure>>on:do:
ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ :delegate | delegate handleRequest: request ] ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateRequest:do:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
[ self authenticateAndDelegateRequest: request ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
BlockClosure>>on:do:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequest:
ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeOneRequestResponseOn:
[ self executeOneRequestResponseOn: stream ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
[ 
p psValueAt: index put: anObject.
aBlock value ] in ZnCurrentServer(DynamicVariable)>>value:during:
BlockClosure>>ensure:
ZnCurrentServer(DynamicVariable)>>value:during:
ZnCurrentServer class(DynamicVariable class)>>value:during:
ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
[ self executeRequestResponseLoopOn: stream ] in [ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ] in [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
BlockClosure>>ensure:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ] in [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
BlockClosure>>ifCurtailed:
[ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: NeoJSONReader>>keys
18 February 2015 12:10:09.916182 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
NBCogit NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
https://github.com/pharo-project/pharo-vm.git Commit: 4a0d556150d478ff2de3c9624d2f18e6eaa3fa5c Date: 2014-12-18 18:42:53 +0100 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14893

Image: Pharo3.0 [Latest update: #30863]

NeoJSONReader(Object)>>doesNotUnderstand: #keys
	Receiver: a NeoJSONReader
	Arguments and temporary variables: 
		aMessage: 	keys
		exception: 	MessageNotUnderstood: NeoJSONReader>>keys
		resumeValue: 	nil
	Receiver's instance variables: 
		mappings: 	nil
		readStream: 	a ReadStream
		stringStream: 	nil
		listClass: 	nil
		mapClass: 	nil
		propertyNamesAsSymbols: 	false


Message>>sentTo:
	Receiver: keys
	Arguments and temporary variables: 
		receiver: 	a NeoJSONReader
	Receiver's instance variables: 
		selector: 	#keys
		args: 	#()
		lookupClass: 	NeoJSONReader


NeoJSONReader(Object)>>doesNotUnderstand: #keys
	Receiver: a NeoJSONReader
	Arguments and temporary variables: 
		aMessage: 	keys
		exception: 	MessageNotUnderstood: NeoJSONReader>>keys
		resumeValue: 	MessageNotUnderstood: NeoJSONReader>>keys
	Receiver's instance variables: 
		mappings: 	nil
		readStream: 	a ReadStream
		stringStream: 	nil
		listClass: 	nil
		mapClass: 	nil
		propertyNamesAsSymbols: 	false


DIVarPhpClass>>allElements
	Receiver: RuleResult
	Arguments and temporary variables: 

	Receiver's instance variables: 
		isFirst: 	false
		dslText: 	'RuleResult=PhpClass with name:"Dicto\\RuleResult"'
		type: 	'PhpClass'
		id: 	1
		entity: 	nil
		name: 	'RuleResult'
		specifiers: 	an OrderedCollection(name=Dicto\\RuleResult)
		isInverted: 	false
		elements: 	a DICollectionVarElements()
		invertedElements: 	a DICollectionVarElements()


DIVarPhpClass(DIVar)>>elements
	Receiver: RuleResult
	Arguments and temporary variables: 
		valid: 	nil
	Receiver's instance variables: 
		isFirst: 	false
		dslText: 	'RuleResult=PhpClass with name:"Dicto\\RuleResult"'
		type: 	'PhpClass'
		id: 	1
		entity: 	nil
		name: 	'RuleResult'
		specifiers: 	an OrderedCollection(name=Dicto\\RuleResult)
		isInverted: 	false
		elements: 	a DICollectionVarElements()
		invertedElements: 	a DICollectionVarElements()


DISimpleRule>>subjectElements
	Receiver: RuleResult cannot depend on DictoTalker
	Arguments and temporary variables: 
		subjectElements: 	nil
	Receiver's instance variables: 
		isFirst: 	nil
		dslText: 	'RuleResult cannot depend on DictoTalker'
		type: 	#cannot
		id: 	1001
		entity: 	nil
		subjects: 	an Array(RuleResult)
		predicates: 	an Array(depend on DictoTalker)
		subRules: 	nil
		candidateAdapters: 	a SortedCollection(DIPhpDependencies)
		chosenAdapter: 	DIPhpDependencies
		hasFailed: 	false
		failureMessage: 	''
		failingPredicates: 	a Set()
		hasSubjectInverted: 	false
		hasPredicateInverted: 	false


DITestGroup>>_failingPredicatesFor:
	Receiver: a DITestGroup
	Arguments and temporary variables: 
		rule: 	RuleResult cannot depend on DictoTalker
		allPredicates: 	a Set()
		mustFindPassing: 	nil
		failingPredicates: 	nil
		predicateReadableValue: 	''
		predName: 	'dependOn'
	Receiver's instance variables: 
		rules: 	an OrderedCollection(RuleResult cannot depend on DictoTalker DictoTalker...etc...
		adapter: 	a DIPhpDependencies
		runCommandText: 	nil
		testSpecification: 	nil
		adapterID: 	'DIPhpDependencies'
		resultFile: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/meta/1424257761/...etc...
		specificationFile: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/meta/1424...etc...
		commandFile: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/meta/1424257761...etc...


[ :rule | 
| failingPredicates |
failingPredicates := self _failingPredicatesFor: rule.
failingPredicates size > 0
	ifTrue: [ 
		rule setFailed.
		rule errorPredicates: failingPredicates ] ] in DITestGroup>>read
	Receiver: a DITestGroup
	Arguments and temporary variables: 
		rule: 	RuleResult cannot depend on DictoTalker
		failingPredicates: 	nil
	Receiver's instance variables: 
		rules: 	an OrderedCollection(RuleResult cannot depend on DictoTalker DictoTalker...etc...
		adapter: 	a DIPhpDependencies
		runCommandText: 	nil
		testSpecification: 	nil
		adapterID: 	'DIPhpDependencies'
		resultFile: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/meta/1424257761/...etc...
		specificationFile: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/meta/1424...etc...
		commandFile: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/meta/1424257761...etc...


OrderedCollection>>do:
	Receiver: an OrderedCollection(RuleResult cannot depend on DictoTalker DictoTalker must depend on Ru...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :rule | 
| failingPredicates |
failingPredicates := self _failingPred...etc...
		index: 	1
	Receiver's instance variables: 
		array: 	an Array(RuleResult cannot depend on DictoTalker DictoTalker must depend...etc...
		firstIndex: 	1
		lastIndex: 	3


DITestGroup>>read
	Receiver: a DITestGroup
	Arguments and temporary variables: 

	Receiver's instance variables: 
		rules: 	an OrderedCollection(RuleResult cannot depend on DictoTalker DictoTalker...etc...
		adapter: 	a DIPhpDependencies
		runCommandText: 	nil
		testSpecification: 	nil
		adapterID: 	'DIPhpDependencies'
		resultFile: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/meta/1424257761/...etc...
		specificationFile: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/meta/1424...etc...
		commandFile: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/meta/1424257761...etc...


[ :testSuite | testSuite read ] in DIDicto>>_parseResultsFor:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		adapterTestGroups: 	a Dictionary(DIGrepFileContent->a DITestGroup DIJMeterLoadTe...etc...
		notFailingRules: 	nil
		failingRules: 	nil
		testSuite: 	a DITestGroup
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424257788'
		singleShotTask: 	true


Array(SequenceableCollection)>>do:
	Receiver: an Array(a DITestGroup a DITestGroup a DITestGroup a DITestGroup a DITestGroup)
	Arguments and temporary variables: 
		aBlock: 	[ :testSuite | testSuite read ]
		index: 	4
	Receiver's instance variables: 
an Array(a DITestGroup a DITestGroup a DITestGroup a DITestGroup a DITestGroup)

DIDicto>>_parseResultsFor:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		adapterTestGroups: 	a Dictionary(DIGrepFileContent->a DITestGroup DIJMeterLoadTe...etc...
		notFailingRules: 	nil
		failingRules: 	nil
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424257788'
		singleShotTask: 	true


DIDicto>>dictoCheck:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = ...etc...
		adapterTestGroups: 	a Dictionary(DIGrepFileContent->a DITestGroup DIJMeterLoadTe...etc...
		exportFormat: 	nil
		xml: 	nil
		json: 	nil
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424257788'
		singleShotTask: 	true


[ ^ dicto dictoCheck: input ] in DIWebServiceAPI>>getResults
	Receiver: a DIWebServiceAPI
	Arguments and temporary variables: 
		in: 	'/home/otruffer/dicto/bin/analysis/meta/dicto.rules'
		input: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = PhpCl...etc...
		dicto: 	a DIDicto
	Receiver's instance variables: 
		request: 	nil
		response: 	nil
		variables: 	nil
		delegate: 	nil
		principal: 	nil
		credentials: 	nil


BlockClosure>>on:do:
	Receiver: [ ^ dicto dictoCheck: input ]
	Arguments and temporary variables: 
		exception: 	DIException
		handlerAction: 	[ :ex | ^ self error: ex description ]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	DIWebServiceAPI>>getResults
		startpc: 	110
		numArgs: 	0


DIWebServiceAPI>>getResults
	Receiver: a DIWebServiceAPI
	Arguments and temporary variables: 
		in: 	'/home/otruffer/dicto/bin/analysis/meta/dicto.rules'
		input: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = PhpCl...etc...
		dicto: 	a DIDicto
	Receiver's instance variables: 
		request: 	nil
		response: 	nil
		variables: 	nil
		delegate: 	nil
		principal: 	nil
		credentials: 	nil


DIWebServiceHandler>>get
	Receiver: a DIWebServiceHandler
	Arguments and temporary variables: 
		api: 	a DIWebServiceAPI
	Receiver's instance variables: 
		request: 	a ZnRequest(GET /meta/results)
		response: 	nil
		variables: 	an OrderedCollection('meta' 'results')
		delegate: 	a ZnJSONRestServerDelegate
		principal: 	nil
		credentials: 	nil
		dicto: 	a DIDicto


DIWebServiceHandler(ZnRestCall)>>execute
	Receiver: a DIWebServiceHandler
	Arguments and temporary variables: 

	Receiver's instance variables: 
		request: 	a ZnRequest(GET /meta/results)
		response: 	nil
		variables: 	an OrderedCollection('meta' 'results')
		delegate: 	a ZnJSONRestServerDelegate
		principal: 	nil
		credentials: 	nil
		dicto: 	a DIDicto


[ call execute ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


BlockClosure>>on:do:
	Receiver: [ call execute ]
	Arguments and temporary variables: 
		exception: 	ZnRestCallUnauthorized
		handlerAction: 	[ :exception | self unauthorized: exception request ]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
		startpc: 	38
		numArgs: 	0


ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


[ self execute: call ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		request: 	a ZnRequest(GET /meta/results)
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


BlockClosure>>on:do:
	Receiver: [ self execute: call ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :exception | 
request server debugMode
	ifTrue: [ exception pa...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
		startpc: 	99
		numArgs: 	0


ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		request: 	a ZnRequest(GET /meta/results)
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ :delegate | delegate handleRequest: request ] ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(GET /meta/results)
		delegate: 	a ZnJSONRestServerDelegate
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateRequest:do:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(GET /meta/results)
		block: 	[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ ...etc...
		authenticator: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(GET /meta/results)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


[ self authenticateAndDelegateRequest: request ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(GET /meta/results)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


BlockClosure>>on:do:
	Receiver: [ self authenticateAndDelegateRequest: request ]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :exception | 
self debugMode
	ifTrue: [ exception pass ]
	ifFa...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequ...etc...
		startpc: 	58
		numArgs: 	0


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(GET /meta/results)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(GET /meta/results)
		response: 	nil
		initialMilliseconds: 	2298809
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeOneRequestResponseOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		stream: 	a ZdcSocketStream
		request: 	a ZnRequest(GET /meta/results)
		response: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


[ self executeOneRequestResponseOn: stream ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		stream: 	a ZdcSocketStream
		request: 	nil
		response: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


[ 
p psValueAt: index put: anObject.
aBlock value ] in ZnCurrentServer(DynamicVariable)>>value:during:
	Receiver: a ZnCurrentServer
	Arguments and temporary variables: 
		anObject: 	a ZnManagingMultiThreadedServer(running 8010)
		aBlock: 	[ self executeOneRequestResponseOn: stream ]
		p: 	a Process in nil
		oldValue: 	nil
	Receiver's instance variables: 
		index: 	5


BlockClosure>>ensure:
	Receiver: [ 
p psValueAt: index put: anObject.
aBlock value ]
	Arguments and temporary variables: 
		aBlock: 	[ p psValueAt: index put: oldValue ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ZnCurrentServer(DynamicVariable)>>value:during:
		startpc: 	62
		numArgs: 	0


ZnCurrentServer(DynamicVariable)>>value:during:
	Receiver: a ZnCurrentServer
	Arguments and temporary variables: 
		anObject: 	a ZnManagingMultiThreadedServer(running 8010)
		aBlock: 	[ self executeOneRequestResponseOn: stream ]
		p: 	a Process in nil
		oldValue: 	nil
	Receiver's instance variables: 
		index: 	5


ZnCurrentServer class(DynamicVariable class)>>value:during:
	Receiver: ZnCurrentServer
	Arguments and temporary variables: 
		anObject: 	a ZnManagingMultiThreadedServer(running 8010)
		aBlock: 	[ self executeOneRequestResponseOn: stream ]
	Receiver's instance variables: 
		superclass: 	DynamicVariable
		methodDict: 	a MethodDictionary()
		format: 	132
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#ZnCurrentServer
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Zinc-HTTP-Variables'
		traitComposition: 	{}
		localSelectors: 	nil
		hash: 	nil
		soleInstance: 	a ZnCurrentServer


ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		stream: 	a ZdcSocketStream
		request: 	nil
		response: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)



--- The full stack ---
NeoJSONReader(Object)>>doesNotUnderstand: #keys
Message>>sentTo:
NeoJSONReader(Object)>>doesNotUnderstand: #keys
DIVarPhpClass>>allElements
DIVarPhpClass(DIVar)>>elements
DISimpleRule>>subjectElements
DITestGroup>>_failingPredicatesFor:
[ :rule | 
| failingPredicates |
failingPredicates := self _failingPredicatesFor: rule.
failingPredicates size > 0
	ifTrue: [ 
		rule setFailed.
		rule errorPredicates: failingPredicates ] ] in DITestGroup>>read
OrderedCollection>>do:
DITestGroup>>read
[ :testSuite | testSuite read ] in DIDicto>>_parseResultsFor:
Array(SequenceableCollection)>>do:
DIDicto>>_parseResultsFor:
DIDicto>>dictoCheck:
[ ^ dicto dictoCheck: input ] in DIWebServiceAPI>>getResults
BlockClosure>>on:do:
DIWebServiceAPI>>getResults
DIWebServiceHandler>>get
DIWebServiceHandler(ZnRestCall)>>execute
[ call execute ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
BlockClosure>>on:do:
ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
[ self execute: call ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
BlockClosure>>on:do:
ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ :delegate | delegate handleRequest: request ] ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateRequest:do:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
[ self authenticateAndDelegateRequest: request ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
BlockClosure>>on:do:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequest:
ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeOneRequestResponseOn:
[ self executeOneRequestResponseOn: stream ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
[ 
p psValueAt: index put: anObject.
aBlock value ] in ZnCurrentServer(DynamicVariable)>>value:during:
BlockClosure>>ensure:
ZnCurrentServer(DynamicVariable)>>value:during:
ZnCurrentServer class(DynamicVariable class)>>value:during:
ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ self executeRequestResponseLoopOn: stream ] in [ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ] in [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
BlockClosure>>ensure:
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ] in [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
BlockClosure>>ifCurtailed:
[ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
NeoJSONParseError: invalid input: nil
18 February 2015 1:06:20.99208 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
NBCogit NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
https://github.com/pharo-project/pharo-vm.git Commit: 4a0d556150d478ff2de3c9624d2f18e6eaa3fa5c Date: 2014-12-18 18:42:53 +0100 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14893

Image: Pharo3.0 [Latest update: #30863]

NeoJSONReader>>error:
	Receiver: a NeoJSONReader
	Arguments and temporary variables: 
		text: 	'invalid input: nil'
	Receiver's instance variables: 
		mappings: 	nil
		readStream: 	a ReadStream
		stringStream: 	nil
		listClass: 	nil
		mapClass: 	nil
		propertyNamesAsSymbols: 	false


NeoJSONReader>>parseValue
	Receiver: a NeoJSONReader
	Arguments and temporary variables: 
		char: 	nil
	Receiver's instance variables: 
		mappings: 	nil
		readStream: 	a ReadStream
		stringStream: 	nil
		listClass: 	nil
		mapClass: 	nil
		propertyNamesAsSymbols: 	false


NeoJSONReader>>next
	Receiver: a NeoJSONReader
	Arguments and temporary variables: 

	Receiver's instance variables: 
		mappings: 	nil
		readStream: 	a ReadStream
		stringStream: 	nil
		listClass: 	nil
		mapClass: 	nil
		propertyNamesAsSymbols: 	false


NeoJSONReader class>>fromString:
	Receiver: NeoJSONReader
	Arguments and temporary variables: 
		string: 	''
	Receiver's instance variables: 
		superclass: 	NeoJSONMapper
		methodDict: 	a MethodDictionary(#atEnd->NeoJSONReader>>#atEnd #close->NeoJSONRea...etc...
		format: 	142
		layout: 	a FixedLayout
		instanceVariables: 	#(#readStream #stringStream #listClass #mapClass #propertyNa...etc...
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#NeoJSONReader
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Neo-JSON-Core'
		traitComposition: 	{}
		localSelectors: 	nil


DIPhpModel>>_loadPhpModel
	Receiver: a DIPhpModel
	Arguments and temporary variables: 

	Receiver's instance variables: 
		defRules: 	a DICollectionRule()
		defVars: 	a DICollectionVar(SYSTEM)
		analysisID: 	'1424261181'
		additionalProperties: 	a Dictionary()
		ruleCounter: 	0
		varCounter: 	0
		defVarElements: 	a DICollectionVarElements()
		defVarInvertedElements: 	a DICollectionVarElements()
		model: 	nil


DIPhpModel>>model
	Receiver: a DIPhpModel
	Arguments and temporary variables: 

	Receiver's instance variables: 
		defRules: 	a DICollectionRule()
		defVars: 	a DICollectionVar(SYSTEM)
		analysisID: 	'1424261181'
		additionalProperties: 	a Dictionary()
		ruleCounter: 	0
		varCounter: 	0
		defVarElements: 	a DICollectionVarElements()
		defVarInvertedElements: 	a DICollectionVarElements()
		model: 	nil


DIVarPhpClass>>allElements
	Receiver: RuleResult
	Arguments and temporary variables: 

	Receiver's instance variables: 
		isFirst: 	false
		dslText: 	'RuleResult=PhpClass with name:"Dicto\\RuleResult"'
		type: 	'PhpClass'
		id: 	1
		entity: 	nil
		name: 	'RuleResult'
		specifiers: 	an OrderedCollection(name=Dicto\\RuleResult)
		isInverted: 	false
		elements: 	a DICollectionVarElements()
		invertedElements: 	a DICollectionVarElements()


DIVarPhpClass(DIVar)>>elements
	Receiver: RuleResult
	Arguments and temporary variables: 
		valid: 	nil
	Receiver's instance variables: 
		isFirst: 	false
		dslText: 	'RuleResult=PhpClass with name:"Dicto\\RuleResult"'
		type: 	'PhpClass'
		id: 	1
		entity: 	nil
		name: 	'RuleResult'
		specifiers: 	an OrderedCollection(name=Dicto\\RuleResult)
		isInverted: 	false
		elements: 	a DICollectionVarElements()
		invertedElements: 	a DICollectionVarElements()


DISimpleRule>>subjectElements
	Receiver: RuleResult cannot depend on DictoTalker
	Arguments and temporary variables: 
		subjectElements: 	nil
	Receiver's instance variables: 
		isFirst: 	nil
		dslText: 	'RuleResult cannot depend on DictoTalker'
		type: 	#cannot
		id: 	1001
		entity: 	nil
		subjects: 	an Array(RuleResult)
		predicates: 	an Array(depend on DictoTalker)
		subRules: 	nil
		candidateAdapters: 	a SortedCollection(DIPhpDependencies)
		chosenAdapter: 	DIPhpDependencies
		hasFailed: 	false
		failureMessage: 	''
		failingPredicates: 	a Set()
		hasSubjectInverted: 	false
		hasPredicateInverted: 	false


printRulesEntityRelationship: someRules
	| res processedPredicates |
	res := ''.
	processedPredicates := Set new.
	someRules
		do: [ :rule | 
			| predicateSelector subjectElements argumentElements data isPredicateInv isSubjectInv |
			predicateSelector := (rule predicate nameNormalized , ':') asSymbol.
			isPredicateInv := rule hasPredicateInverted.
			isSubjectInv := rule hasSubjectInverted.
			subjectElements := rule subjectElements.
			argumentElements := rule argumentElements.
			subjectElements
				do: [ :subject | 
					argumentElements
						do: [ :argument | 
							| relId spec msgPass msgFail |
							relId := subject id , '-' , argument id.
							msgPass := subject id , '.' , rule predicate name , '(' , argument id , ')=True'.
							msgFail := subject id , '.' , rule predicate name , '(' , argument id , ')=False'.
							(processedPredicates includes: relId)
								ifFalse: [ 
									data := {(#subject -> subject value).
									(#argument -> argument value).
									(#ruleId -> rule id).
									(#propertyId -> relId).
									(#msgPass -> msgPass).
									(#msgFail -> msgFail)} asDictionary.
									spec := self perform: predicateSelector withArguments: {data}.
									spec := spec
										dictoReplace:
											{('$subject' -> subject value).
											('$argument' -> argument value).
											('$ruleId' -> rule id).
											('$propertyId' -> relId).
											('$msgPass' -> msgPass).
											('$msgFail' -> msgFail)}.
									res := res , spec ].	"avoid duplicate predicate evaluations"
							processedPredicates add: relId ] ] ].
	^ res in DIPhpDependencies(DIAdapter)>>printRulesEntityRelationship:
	Receiver: a DIPhpDependencies
	Arguments and temporary variables: 
		someRules: 	a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalk...etc...
		processedPredicates: 	a Set()
		data: 	nil
		res: 	''
		rule: 	RuleResult cannot depend on DictoTalker
		predicateSelector: 	#dependOn:
		subjectElements: 	nil
		argumentElements: 	nil
		isPredicateInv: 	false
		isSubjectInv: 	false
	Receiver's instance variables: 
		output: 	''
		commandOutput: 	''
		NEWLINE: 	'
'
		rules: 	a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalker m...etc...
		varSynonyms: 	nil
		sessionId: 	'1424261181'
		TIMESTAMP: 	'1424261181'
		TOOLNAME: 	'DIPhpDependencies'
		PROJECTROOT: 	'/home/otruffer/DictoCLI/'
		PROJECTSRC: 	'./'
		PROJECTBIN: 	'./'
		RESULTFILE: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/meta/1424260924/...etc...
		TESTFILE: 	nil
		testInputFileExt: 	'.st'
		SYSTEM: 	SYSTEM


DICollectionRule(OrderedCollection)>>do:
	Receiver: a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalker must depend on Rule...etc...
	Arguments and temporary variables: 
		aBlock: 	printRulesEntityRelationship: someRules
	| res processedPredicates |
	r...etc...
		index: 	1
	Receiver's instance variables: 
		array: 	an Array(RuleResult cannot depend on DictoTalker DictoTalker must depend...etc...
		firstIndex: 	1
		lastIndex: 	3
		elements: 	nil
		elements: 	nil


DIPhpDependencies(DIAdapter)>>printRulesEntityRelationship:
	Receiver: a DIPhpDependencies
	Arguments and temporary variables: 
		res: 	''
		someRules: 	a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalk...etc...
		processedPredicates: 	a Set()
	Receiver's instance variables: 
		output: 	''
		commandOutput: 	''
		NEWLINE: 	'
'
		rules: 	a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalker m...etc...
		varSynonyms: 	nil
		sessionId: 	'1424261181'
		TIMESTAMP: 	'1424261181'
		TOOLNAME: 	'DIPhpDependencies'
		PROJECTROOT: 	'/home/otruffer/DictoCLI/'
		PROJECTSRC: 	'./'
		PROJECTBIN: 	'./'
		RESULTFILE: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/meta/1424260924/...etc...
		TESTFILE: 	nil
		testInputFileExt: 	'.st'
		SYSTEM: 	SYSTEM


DIPhpDependencies(DIAdapter)>>printRules
	Receiver: a DIPhpDependencies
	Arguments and temporary variables: 
		res: 	nil
		allRules: 	a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalke...etc...
	Receiver's instance variables: 
		output: 	''
		commandOutput: 	''
		NEWLINE: 	'
'
		rules: 	a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalker m...etc...
		varSynonyms: 	nil
		sessionId: 	'1424261181'
		TIMESTAMP: 	'1424261181'
		TOOLNAME: 	'DIPhpDependencies'
		PROJECTROOT: 	'/home/otruffer/DictoCLI/'
		PROJECTSRC: 	'./'
		PROJECTBIN: 	'./'
		RESULTFILE: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/meta/1424260924/...etc...
		TESTFILE: 	nil
		testInputFileExt: 	'.st'
		SYSTEM: 	SYSTEM


DIPhpDependencies>>testInput
	Receiver: a DIPhpDependencies
	Arguments and temporary variables: 
		strRules: 	nil
	Receiver's instance variables: 
		output: 	''
		commandOutput: 	''
		NEWLINE: 	'
'
		rules: 	a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalker m...etc...
		varSynonyms: 	nil
		sessionId: 	'1424261181'
		TIMESTAMP: 	'1424261181'
		TOOLNAME: 	'DIPhpDependencies'
		PROJECTROOT: 	'/home/otruffer/DictoCLI/'
		PROJECTSRC: 	'./'
		PROJECTBIN: 	'./'
		RESULTFILE: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/meta/1424260924/...etc...
		TESTFILE: 	nil
		testInputFileExt: 	'.st'
		SYSTEM: 	SYSTEM


DITestGroup>>build
	Receiver: a DITestGroup
	Arguments and temporary variables: 

	Receiver's instance variables: 
		rules: 	an OrderedCollection(RuleResult cannot depend on DictoTalker DictoTalker...etc...
		adapter: 	a DIPhpDependencies
		runCommandText: 	nil
		testSpecification: 	nil
		adapterID: 	'DIPhpDependencies'
		resultFile: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/meta/1424261181/...etc...
		specificationFile: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/meta/1424...etc...
		commandFile: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/meta/1424261181...etc...


[ :testGroup | testGroup build ] in DIDicto>>dictoBuild:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = ...etc...
		adapterTestGroups: 	a Dictionary(DIGrepFileContent->a DITestGroup DIJMeterLoadTe...etc...
		testGroup: 	a DITestGroup
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424261181'
		singleShotTask: 	false


Array(SequenceableCollection)>>do:
	Receiver: an Array(a DITestGroup a DITestGroup a DITestGroup a DITestGroup a DITestGroup)
	Arguments and temporary variables: 
		aBlock: 	[ :testGroup | testGroup build ]
		index: 	4
	Receiver's instance variables: 
an Array(a DITestGroup a DITestGroup a DITestGroup a DITestGroup a DITestGroup)

DIDicto>>dictoBuild:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = ...etc...
		adapterTestGroups: 	a Dictionary(DIGrepFileContent->a DITestGroup DIJMeterLoadTe...etc...
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424261181'
		singleShotTask: 	false


DIDicto>>dictoRun:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = ...etc...
		adapterTestGroups: 	nil
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424261181'
		singleShotTask: 	false


DIDicto>>dictoAll:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = ...etc...
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424261181'
		singleShotTask: 	false


[ DIDicto new dictoAll: input ] in DIWebServiceAPI>>getRun
	Receiver: a DIWebServiceAPI
	Arguments and temporary variables: 
		in: 	'/home/otruffer/dicto/bin/analysis/meta/dicto.rules'
		input: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = PhpCl...etc...
		rulesFailed: 	nil
		rulesTotal: 	nil
	Receiver's instance variables: 
		request: 	nil
		response: 	nil
		variables: 	nil
		delegate: 	nil
		principal: 	nil
		credentials: 	nil


BlockClosure>>on:do:
	Receiver: [ DIDicto new dictoAll: input ]
	Arguments and temporary variables: 
		exception: 	DIException
		handlerAction: 	[ :ex | ^ self error: ex description ]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	DIWebServiceAPI>>getRun
		startpc: 	138
		numArgs: 	0


DIWebServiceAPI>>getRun
	Receiver: a DIWebServiceAPI
	Arguments and temporary variables: 
		in: 	'/home/otruffer/dicto/bin/analysis/meta/dicto.rules'
		input: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = PhpCl...etc...
		rulesFailed: 	nil
		rulesTotal: 	nil
	Receiver's instance variables: 
		request: 	nil
		response: 	nil
		variables: 	nil
		delegate: 	nil
		principal: 	nil
		credentials: 	nil


DIWebServiceHandler>>post
	Receiver: a DIWebServiceHandler
	Arguments and temporary variables: 
		api: 	a DIWebServiceAPI
	Receiver's instance variables: 
		request: 	a ZnRequest(POST /meta/run)
		response: 	nil
		variables: 	an OrderedCollection('meta' 'run')
		delegate: 	a ZnJSONRestServerDelegate
		principal: 	nil
		credentials: 	nil
		dicto: 	a DIDicto


DIWebServiceHandler(ZnRestCall)>>execute
	Receiver: a DIWebServiceHandler
	Arguments and temporary variables: 

	Receiver's instance variables: 
		request: 	a ZnRequest(POST /meta/run)
		response: 	nil
		variables: 	an OrderedCollection('meta' 'run')
		delegate: 	a ZnJSONRestServerDelegate
		principal: 	nil
		credentials: 	nil
		dicto: 	a DIDicto


[ call execute ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


BlockClosure>>on:do:
	Receiver: [ call execute ]
	Arguments and temporary variables: 
		exception: 	ZnRestCallUnauthorized
		handlerAction: 	[ :exception | self unauthorized: exception request ]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
		startpc: 	38
		numArgs: 	0


ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


[ self execute: call ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /meta/run)
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


BlockClosure>>on:do:
	Receiver: [ self execute: call ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :exception | 
request server debugMode
	ifTrue: [ exception pa...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
		startpc: 	99
		numArgs: 	0


ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /meta/run)
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ :delegate | delegate handleRequest: request ] ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /meta/run)
		delegate: 	a ZnJSONRestServerDelegate
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateRequest:do:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /meta/run)
		block: 	[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ ...etc...
		authenticator: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /meta/run)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


[ self authenticateAndDelegateRequest: request ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /meta/run)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


BlockClosure>>on:do:
	Receiver: [ self authenticateAndDelegateRequest: request ]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :exception | 
self debugMode
	ifTrue: [ exception pass ]
	ifFa...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequ...etc...
		startpc: 	58
		numArgs: 	0


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /meta/run)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /meta/run)
		response: 	nil
		initialMilliseconds: 	5691301
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeOneRequestResponseOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		stream: 	a ZdcSocketStream
		request: 	a ZnRequest(POST /meta/run)
		response: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)



--- The full stack ---
NeoJSONReader>>error:
NeoJSONReader>>parseValue
NeoJSONReader>>next
NeoJSONReader class>>fromString:
DIPhpModel>>_loadPhpModel
DIPhpModel>>model
DIVarPhpClass>>allElements
DIVarPhpClass(DIVar)>>elements
DISimpleRule>>subjectElements
printRulesEntityRelationship: someRules
	| res processedPredicates |
	res := ''.
	processedPredicates := Set new.
	someRules
		do: [ :rule | 
			| predicateSelector subjectElements argumentElements data isPredicateInv isSubjectInv |
			predicateSelector := (rule predicate nameNormalized , ':') asSymbol.
			isPredicateInv := rule hasPredicateInverted.
			isSubjectInv := rule hasSubjectInverted.
			subjectElements := rule subjectElements.
			argumentElements := rule argumentElements.
			subjectElements
				do: [ :subject | 
					argumentElements
						do: [ :argument | 
							| relId spec msgPass msgFail |
							relId := subject id , '-' , argument id.
							msgPass := subject id , '.' , rule predicate name , '(' , argument id , ')=True'.
							msgFail := subject id , '.' , rule predicate name , '(' , argument id , ')=False'.
							(processedPredicates includes: relId)
								ifFalse: [ 
									data := {(#subject -> subject value).
									(#argument -> argument value).
									(#ruleId -> rule id).
									(#propertyId -> relId).
									(#msgPass -> msgPass).
									(#msgFail -> msgFail)} asDictionary.
									spec := self perform: predicateSelector withArguments: {data}.
									spec := spec
										dictoReplace:
											{('$subject' -> subject value).
											('$argument' -> argument value).
											('$ruleId' -> rule id).
											('$propertyId' -> relId).
											('$msgPass' -> msgPass).
											('$msgFail' -> msgFail)}.
									res := res , spec ].	"avoid duplicate predicate evaluations"
							processedPredicates add: relId ] ] ].
	^ res in DIPhpDependencies(DIAdapter)>>printRulesEntityRelationship:
DICollectionRule(OrderedCollection)>>do:
DIPhpDependencies(DIAdapter)>>printRulesEntityRelationship:
DIPhpDependencies(DIAdapter)>>printRules
DIPhpDependencies>>testInput
DITestGroup>>build
[ :testGroup | testGroup build ] in DIDicto>>dictoBuild:
Array(SequenceableCollection)>>do:
DIDicto>>dictoBuild:
DIDicto>>dictoRun:
DIDicto>>dictoAll:
[ DIDicto new dictoAll: input ] in DIWebServiceAPI>>getRun
BlockClosure>>on:do:
DIWebServiceAPI>>getRun
DIWebServiceHandler>>post
DIWebServiceHandler(ZnRestCall)>>execute
[ call execute ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
BlockClosure>>on:do:
ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
[ self execute: call ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
BlockClosure>>on:do:
ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ :delegate | delegate handleRequest: request ] ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateRequest:do:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
[ self authenticateAndDelegateRequest: request ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
BlockClosure>>on:do:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequest:
ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeOneRequestResponseOn:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ self executeOneRequestResponseOn: stream ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
[ 
p psValueAt: index put: anObject.
aBlock value ] in ZnCurrentServer(DynamicVariable)>>value:during:
BlockClosure>>ensure:
ZnCurrentServer(DynamicVariable)>>value:during:
ZnCurrentServer class(DynamicVariable class)>>value:during:
ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
[ self executeRequestResponseLoopOn: stream ] in [ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ] in [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
BlockClosure>>ensure:
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ] in [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
BlockClosure>>ifCurtailed:
[ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: NeoJSONReader>>keys
18 February 2015 1:07:12.350161 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
NBCogit NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
https://github.com/pharo-project/pharo-vm.git Commit: 4a0d556150d478ff2de3c9624d2f18e6eaa3fa5c Date: 2014-12-18 18:42:53 +0100 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14893

Image: Pharo3.0 [Latest update: #30863]

NeoJSONReader(Object)>>doesNotUnderstand: #keys
	Receiver: a NeoJSONReader
	Arguments and temporary variables: 
		aMessage: 	keys
		exception: 	MessageNotUnderstood: NeoJSONReader>>keys
		resumeValue: 	nil
	Receiver's instance variables: 
		mappings: 	nil
		readStream: 	a ReadStream
		stringStream: 	nil
		listClass: 	nil
		mapClass: 	nil
		propertyNamesAsSymbols: 	false


DIVarPhpClass>>allElements
	Receiver: RuleResult
	Arguments and temporary variables: 

	Receiver's instance variables: 
		isFirst: 	false
		dslText: 	'RuleResult=PhpClass with name:"Dicto\\RuleResult"'
		type: 	'PhpClass'
		id: 	1
		entity: 	nil
		name: 	'RuleResult'
		specifiers: 	an OrderedCollection(name=Dicto\\RuleResult)
		isInverted: 	false
		elements: 	a DICollectionVarElements()
		invertedElements: 	a DICollectionVarElements()


DIVarPhpClass(DIVar)>>elements
	Receiver: RuleResult
	Arguments and temporary variables: 
		valid: 	nil
	Receiver's instance variables: 
		isFirst: 	false
		dslText: 	'RuleResult=PhpClass with name:"Dicto\\RuleResult"'
		type: 	'PhpClass'
		id: 	1
		entity: 	nil
		name: 	'RuleResult'
		specifiers: 	an OrderedCollection(name=Dicto\\RuleResult)
		isInverted: 	false
		elements: 	a DICollectionVarElements()
		invertedElements: 	a DICollectionVarElements()


DISimpleRule>>subjectElements
	Receiver: RuleResult cannot depend on DictoTalker
	Arguments and temporary variables: 
		subjectElements: 	nil
	Receiver's instance variables: 
		isFirst: 	nil
		dslText: 	'RuleResult cannot depend on DictoTalker'
		type: 	#cannot
		id: 	1001
		entity: 	nil
		subjects: 	an Array(RuleResult)
		predicates: 	an Array(depend on DictoTalker)
		subRules: 	nil
		candidateAdapters: 	a SortedCollection(DIPhpDependencies)
		chosenAdapter: 	DIPhpDependencies
		hasFailed: 	false
		failureMessage: 	''
		failingPredicates: 	a Set()
		hasSubjectInverted: 	false
		hasPredicateInverted: 	false


printRulesEntityRelationship: someRules
	| res processedPredicates |
	res := ''.
	processedPredicates := Set new.
	someRules
		do: [ :rule | 
			| predicateSelector subjectElements argumentElements data isPredicateInv isSubjectInv |
			predicateSelector := (rule predicate nameNormalized , ':') asSymbol.
			isPredicateInv := rule hasPredicateInverted.
			isSubjectInv := rule hasSubjectInverted.
			subjectElements := rule subjectElements.
			argumentElements := rule argumentElements.
			subjectElements
				do: [ :subject | 
					argumentElements
						do: [ :argument | 
							| relId spec msgPass msgFail |
							relId := subject id , '-' , argument id.
							msgPass := subject id , '.' , rule predicate name , '(' , argument id , ')=True'.
							msgFail := subject id , '.' , rule predicate name , '(' , argument id , ')=False'.
							(processedPredicates includes: relId)
								ifFalse: [ 
									data := {(#subject -> subject value).
									(#argument -> argument value).
									(#ruleId -> rule id).
									(#propertyId -> relId).
									(#msgPass -> msgPass).
									(#msgFail -> msgFail)} asDictionary.
									spec := self perform: predicateSelector withArguments: {data}.
									spec := spec
										dictoReplace:
											{('$subject' -> subject value).
											('$argument' -> argument value).
											('$ruleId' -> rule id).
											('$propertyId' -> relId).
											('$msgPass' -> msgPass).
											('$msgFail' -> msgFail)}.
									res := res , spec ].	"avoid duplicate predicate evaluations"
							processedPredicates add: relId ] ] ].
	^ res in DIPhpDependencies(DIAdapter)>>printRulesEntityRelationship:
	Receiver: a DIPhpDependencies
	Arguments and temporary variables: 
		someRules: 	a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalk...etc...
		processedPredicates: 	a Set()
		data: 	nil
		res: 	''
		rule: 	RuleResult cannot depend on DictoTalker
		predicateSelector: 	#dependOn:
		subjectElements: 	nil
		argumentElements: 	nil
		isPredicateInv: 	false
		isSubjectInv: 	false
	Receiver's instance variables: 
		output: 	''
		commandOutput: 	''
		NEWLINE: 	'
'
		rules: 	a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalker m...etc...
		varSynonyms: 	nil
		sessionId: 	'1424261181'
		TIMESTAMP: 	'1424261181'
		TOOLNAME: 	'DIPhpDependencies'
		PROJECTROOT: 	'/home/otruffer/DictoCLI/'
		PROJECTSRC: 	'./'
		PROJECTBIN: 	'./'
		RESULTFILE: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/meta/1424260924/...etc...
		TESTFILE: 	nil
		testInputFileExt: 	'.st'
		SYSTEM: 	SYSTEM


DICollectionRule(OrderedCollection)>>do:
	Receiver: a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalker must depend on Rule...etc...
	Arguments and temporary variables: 
		aBlock: 	printRulesEntityRelationship: someRules
	| res processedPredicates |
	r...etc...
		index: 	1
	Receiver's instance variables: 
		array: 	an Array(RuleResult cannot depend on DictoTalker DictoTalker must depend...etc...
		firstIndex: 	1
		lastIndex: 	3
		elements: 	nil
		elements: 	nil


DIPhpDependencies(DIAdapter)>>printRulesEntityRelationship:
	Receiver: a DIPhpDependencies
	Arguments and temporary variables: 
		res: 	''
		someRules: 	a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalk...etc...
		processedPredicates: 	a Set()
	Receiver's instance variables: 
		output: 	''
		commandOutput: 	''
		NEWLINE: 	'
'
		rules: 	a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalker m...etc...
		varSynonyms: 	nil
		sessionId: 	'1424261181'
		TIMESTAMP: 	'1424261181'
		TOOLNAME: 	'DIPhpDependencies'
		PROJECTROOT: 	'/home/otruffer/DictoCLI/'
		PROJECTSRC: 	'./'
		PROJECTBIN: 	'./'
		RESULTFILE: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/meta/1424260924/...etc...
		TESTFILE: 	nil
		testInputFileExt: 	'.st'
		SYSTEM: 	SYSTEM


DIPhpDependencies(DIAdapter)>>printRules
	Receiver: a DIPhpDependencies
	Arguments and temporary variables: 
		res: 	nil
		allRules: 	a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalke...etc...
	Receiver's instance variables: 
		output: 	''
		commandOutput: 	''
		NEWLINE: 	'
'
		rules: 	a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalker m...etc...
		varSynonyms: 	nil
		sessionId: 	'1424261181'
		TIMESTAMP: 	'1424261181'
		TOOLNAME: 	'DIPhpDependencies'
		PROJECTROOT: 	'/home/otruffer/DictoCLI/'
		PROJECTSRC: 	'./'
		PROJECTBIN: 	'./'
		RESULTFILE: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/meta/1424260924/...etc...
		TESTFILE: 	nil
		testInputFileExt: 	'.st'
		SYSTEM: 	SYSTEM


DIPhpDependencies>>testInput
	Receiver: a DIPhpDependencies
	Arguments and temporary variables: 
		strRules: 	nil
	Receiver's instance variables: 
		output: 	''
		commandOutput: 	''
		NEWLINE: 	'
'
		rules: 	a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalker m...etc...
		varSynonyms: 	nil
		sessionId: 	'1424261181'
		TIMESTAMP: 	'1424261181'
		TOOLNAME: 	'DIPhpDependencies'
		PROJECTROOT: 	'/home/otruffer/DictoCLI/'
		PROJECTSRC: 	'./'
		PROJECTBIN: 	'./'
		RESULTFILE: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/meta/1424260924/...etc...
		TESTFILE: 	nil
		testInputFileExt: 	'.st'
		SYSTEM: 	SYSTEM


DITestGroup>>build
	Receiver: a DITestGroup
	Arguments and temporary variables: 

	Receiver's instance variables: 
		rules: 	an OrderedCollection(RuleResult cannot depend on DictoTalker DictoTalker...etc...
		adapter: 	a DIPhpDependencies
		runCommandText: 	nil
		testSpecification: 	nil
		adapterID: 	'DIPhpDependencies'
		resultFile: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/meta/1424261181/...etc...
		specificationFile: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/meta/1424...etc...
		commandFile: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/meta/1424261181...etc...


[ :testGroup | testGroup build ] in DIDicto>>dictoBuild:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = ...etc...
		adapterTestGroups: 	a Dictionary(DIGrepFileContent->a DITestGroup DIJMeterLoadTe...etc...
		testGroup: 	a DITestGroup
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424261181'
		singleShotTask: 	false


Array(SequenceableCollection)>>do:
	Receiver: an Array(a DITestGroup a DITestGroup a DITestGroup a DITestGroup a DITestGroup)
	Arguments and temporary variables: 
		aBlock: 	[ :testGroup | testGroup build ]
		index: 	4
	Receiver's instance variables: 
an Array(a DITestGroup a DITestGroup a DITestGroup a DITestGroup a DITestGroup)

DIDicto>>dictoBuild:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = ...etc...
		adapterTestGroups: 	a Dictionary(DIGrepFileContent->a DITestGroup DIJMeterLoadTe...etc...
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424261181'
		singleShotTask: 	false


DIDicto>>dictoRun:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = ...etc...
		adapterTestGroups: 	nil
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424261181'
		singleShotTask: 	false


DIDicto>>dictoAll:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = ...etc...
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424261181'
		singleShotTask: 	false


[ DIDicto new dictoAll: input ] in DIWebServiceAPI>>getRun
	Receiver: a DIWebServiceAPI
	Arguments and temporary variables: 
		in: 	'/home/otruffer/dicto/bin/analysis/meta/dicto.rules'
		input: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = PhpCl...etc...
		rulesFailed: 	nil
		rulesTotal: 	nil
	Receiver's instance variables: 
		request: 	nil
		response: 	nil
		variables: 	nil
		delegate: 	nil
		principal: 	nil
		credentials: 	nil


BlockClosure>>on:do:
	Receiver: [ DIDicto new dictoAll: input ]
	Arguments and temporary variables: 
		exception: 	DIException
		handlerAction: 	[ :ex | ^ self error: ex description ]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	DIWebServiceAPI>>getRun
		startpc: 	138
		numArgs: 	0


DIWebServiceAPI>>getRun
	Receiver: a DIWebServiceAPI
	Arguments and temporary variables: 
		in: 	'/home/otruffer/dicto/bin/analysis/meta/dicto.rules'
		input: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = PhpCl...etc...
		rulesFailed: 	nil
		rulesTotal: 	nil
	Receiver's instance variables: 
		request: 	nil
		response: 	nil
		variables: 	nil
		delegate: 	nil
		principal: 	nil
		credentials: 	nil


DIWebServiceHandler>>post
	Receiver: a DIWebServiceHandler
	Arguments and temporary variables: 
		api: 	a DIWebServiceAPI
	Receiver's instance variables: 
		request: 	a ZnRequest(POST /meta/run)
		response: 	nil
		variables: 	an OrderedCollection('meta' 'run')
		delegate: 	a ZnJSONRestServerDelegate
		principal: 	nil
		credentials: 	nil
		dicto: 	a DIDicto


DIWebServiceHandler(ZnRestCall)>>execute
	Receiver: a DIWebServiceHandler
	Arguments and temporary variables: 

	Receiver's instance variables: 
		request: 	a ZnRequest(POST /meta/run)
		response: 	nil
		variables: 	an OrderedCollection('meta' 'run')
		delegate: 	a ZnJSONRestServerDelegate
		principal: 	nil
		credentials: 	nil
		dicto: 	a DIDicto


[ call execute ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


BlockClosure>>on:do:
	Receiver: [ call execute ]
	Arguments and temporary variables: 
		exception: 	ZnRestCallUnauthorized
		handlerAction: 	[ :exception | self unauthorized: exception request ]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
		startpc: 	38
		numArgs: 	0


ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


[ self execute: call ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /meta/run)
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


BlockClosure>>on:do:
	Receiver: [ self execute: call ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :exception | 
request server debugMode
	ifTrue: [ exception pa...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
		startpc: 	99
		numArgs: 	0


ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /meta/run)
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ :delegate | delegate handleRequest: request ] ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /meta/run)
		delegate: 	a ZnJSONRestServerDelegate
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateRequest:do:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /meta/run)
		block: 	[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ ...etc...
		authenticator: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /meta/run)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


[ self authenticateAndDelegateRequest: request ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /meta/run)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


BlockClosure>>on:do:
	Receiver: [ self authenticateAndDelegateRequest: request ]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :exception | 
self debugMode
	ifTrue: [ exception pass ]
	ifFa...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequ...etc...
		startpc: 	58
		numArgs: 	0


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /meta/run)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /meta/run)
		response: 	nil
		initialMilliseconds: 	5691301
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeOneRequestResponseOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		stream: 	a ZdcSocketStream
		request: 	a ZnRequest(POST /meta/run)
		response: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


[ self executeOneRequestResponseOn: stream ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		stream: 	a ZdcSocketStream
		request: 	nil
		response: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


[ 
p psValueAt: index put: anObject.
aBlock value ] in ZnCurrentServer(DynamicVariable)>>value:during:
	Receiver: a ZnCurrentServer
	Arguments and temporary variables: 
		anObject: 	a ZnManagingMultiThreadedServer(running 8010)
		aBlock: 	[ self executeOneRequestResponseOn: stream ]
		p: 	a Process in nil
		oldValue: 	nil
	Receiver's instance variables: 
		index: 	5


BlockClosure>>ensure:
	Receiver: [ 
p psValueAt: index put: anObject.
aBlock value ]
	Arguments and temporary variables: 
		aBlock: 	[ p psValueAt: index put: oldValue ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ZnCurrentServer(DynamicVariable)>>value:during:
		startpc: 	62
		numArgs: 	0


ZnCurrentServer(DynamicVariable)>>value:during:
	Receiver: a ZnCurrentServer
	Arguments and temporary variables: 
		anObject: 	a ZnManagingMultiThreadedServer(running 8010)
		aBlock: 	[ self executeOneRequestResponseOn: stream ]
		p: 	a Process in nil
		oldValue: 	nil
	Receiver's instance variables: 
		index: 	5


ZnCurrentServer class(DynamicVariable class)>>value:during:
	Receiver: ZnCurrentServer
	Arguments and temporary variables: 
		anObject: 	a ZnManagingMultiThreadedServer(running 8010)
		aBlock: 	[ self executeOneRequestResponseOn: stream ]
	Receiver's instance variables: 
		superclass: 	DynamicVariable
		methodDict: 	a MethodDictionary()
		format: 	132
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#ZnCurrentServer
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Zinc-HTTP-Variables'
		traitComposition: 	{}
		localSelectors: 	nil
		hash: 	nil
		soleInstance: 	a ZnCurrentServer



--- The full stack ---
NeoJSONReader(Object)>>doesNotUnderstand: #keys
DIVarPhpClass>>allElements
DIVarPhpClass(DIVar)>>elements
DISimpleRule>>subjectElements
printRulesEntityRelationship: someRules
	| res processedPredicates |
	res := ''.
	processedPredicates := Set new.
	someRules
		do: [ :rule | 
			| predicateSelector subjectElements argumentElements data isPredicateInv isSubjectInv |
			predicateSelector := (rule predicate nameNormalized , ':') asSymbol.
			isPredicateInv := rule hasPredicateInverted.
			isSubjectInv := rule hasSubjectInverted.
			subjectElements := rule subjectElements.
			argumentElements := rule argumentElements.
			subjectElements
				do: [ :subject | 
					argumentElements
						do: [ :argument | 
							| relId spec msgPass msgFail |
							relId := subject id , '-' , argument id.
							msgPass := subject id , '.' , rule predicate name , '(' , argument id , ')=True'.
							msgFail := subject id , '.' , rule predicate name , '(' , argument id , ')=False'.
							(processedPredicates includes: relId)
								ifFalse: [ 
									data := {(#subject -> subject value).
									(#argument -> argument value).
									(#ruleId -> rule id).
									(#propertyId -> relId).
									(#msgPass -> msgPass).
									(#msgFail -> msgFail)} asDictionary.
									spec := self perform: predicateSelector withArguments: {data}.
									spec := spec
										dictoReplace:
											{('$subject' -> subject value).
											('$argument' -> argument value).
											('$ruleId' -> rule id).
											('$propertyId' -> relId).
											('$msgPass' -> msgPass).
											('$msgFail' -> msgFail)}.
									res := res , spec ].	"avoid duplicate predicate evaluations"
							processedPredicates add: relId ] ] ].
	^ res in DIPhpDependencies(DIAdapter)>>printRulesEntityRelationship:
DICollectionRule(OrderedCollection)>>do:
DIPhpDependencies(DIAdapter)>>printRulesEntityRelationship:
DIPhpDependencies(DIAdapter)>>printRules
DIPhpDependencies>>testInput
DITestGroup>>build
[ :testGroup | testGroup build ] in DIDicto>>dictoBuild:
Array(SequenceableCollection)>>do:
DIDicto>>dictoBuild:
DIDicto>>dictoRun:
DIDicto>>dictoAll:
[ DIDicto new dictoAll: input ] in DIWebServiceAPI>>getRun
BlockClosure>>on:do:
DIWebServiceAPI>>getRun
DIWebServiceHandler>>post
DIWebServiceHandler(ZnRestCall)>>execute
[ call execute ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
BlockClosure>>on:do:
ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
[ self execute: call ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
BlockClosure>>on:do:
ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ :delegate | delegate handleRequest: request ] ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateRequest:do:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
[ self authenticateAndDelegateRequest: request ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
BlockClosure>>on:do:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequest:
ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeOneRequestResponseOn:
[ self executeOneRequestResponseOn: stream ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
[ 
p psValueAt: index put: anObject.
aBlock value ] in ZnCurrentServer(DynamicVariable)>>value:during:
BlockClosure>>ensure:
ZnCurrentServer(DynamicVariable)>>value:during:
ZnCurrentServer class(DynamicVariable class)>>value:during:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
[ self executeRequestResponseLoopOn: stream ] in [ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ] in [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
BlockClosure>>ensure:
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ] in [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
BlockClosure>>ifCurtailed:
[ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: NeoJSONReader>>keys
18 February 2015 1:07:13.919327 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
NBCogit NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
https://github.com/pharo-project/pharo-vm.git Commit: 4a0d556150d478ff2de3c9624d2f18e6eaa3fa5c Date: 2014-12-18 18:42:53 +0100 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14893

Image: Pharo3.0 [Latest update: #30863]

NeoJSONReader(Object)>>doesNotUnderstand: #keys
	Receiver: a NeoJSONReader
	Arguments and temporary variables: 
		aMessage: 	keys
		exception: 	MessageNotUnderstood: NeoJSONReader>>keys
		resumeValue: 	nil
	Receiver's instance variables: 
		mappings: 	nil
		readStream: 	a ReadStream
		stringStream: 	nil
		listClass: 	nil
		mapClass: 	nil
		propertyNamesAsSymbols: 	false


Message>>sentTo:
	Receiver: keys
	Arguments and temporary variables: 
		receiver: 	a NeoJSONReader
	Receiver's instance variables: 
		selector: 	#keys
		args: 	#()
		lookupClass: 	NeoJSONReader


NeoJSONReader(Object)>>doesNotUnderstand: #keys
	Receiver: a NeoJSONReader
	Arguments and temporary variables: 
		aMessage: 	keys
		exception: 	MessageNotUnderstood: NeoJSONReader>>keys
		resumeValue: 	MessageNotUnderstood: NeoJSONReader>>keys
	Receiver's instance variables: 
		mappings: 	nil
		readStream: 	a ReadStream
		stringStream: 	nil
		listClass: 	nil
		mapClass: 	nil
		propertyNamesAsSymbols: 	false


DIVarPhpClass>>allElements
	Receiver: RuleResult
	Arguments and temporary variables: 

	Receiver's instance variables: 
		isFirst: 	false
		dslText: 	'RuleResult=PhpClass with name:"Dicto\\RuleResult"'
		type: 	'PhpClass'
		id: 	1
		entity: 	nil
		name: 	'RuleResult'
		specifiers: 	an OrderedCollection(name=Dicto\\RuleResult)
		isInverted: 	false
		elements: 	a DICollectionVarElements()
		invertedElements: 	a DICollectionVarElements()


DIVarPhpClass(DIVar)>>elements
	Receiver: RuleResult
	Arguments and temporary variables: 
		valid: 	nil
	Receiver's instance variables: 
		isFirst: 	false
		dslText: 	'RuleResult=PhpClass with name:"Dicto\\RuleResult"'
		type: 	'PhpClass'
		id: 	1
		entity: 	nil
		name: 	'RuleResult'
		specifiers: 	an OrderedCollection(name=Dicto\\RuleResult)
		isInverted: 	false
		elements: 	a DICollectionVarElements()
		invertedElements: 	a DICollectionVarElements()


DISimpleRule>>subjectElements
	Receiver: RuleResult cannot depend on DictoTalker
	Arguments and temporary variables: 
		subjectElements: 	nil
	Receiver's instance variables: 
		isFirst: 	nil
		dslText: 	'RuleResult cannot depend on DictoTalker'
		type: 	#cannot
		id: 	1001
		entity: 	nil
		subjects: 	an Array(RuleResult)
		predicates: 	an Array(depend on DictoTalker)
		subRules: 	nil
		candidateAdapters: 	a SortedCollection(DIPhpDependencies)
		chosenAdapter: 	DIPhpDependencies
		hasFailed: 	false
		failureMessage: 	''
		failingPredicates: 	a Set()
		hasSubjectInverted: 	false
		hasPredicateInverted: 	false


printRulesEntityRelationship: someRules
	| res processedPredicates |
	res := ''.
	processedPredicates := Set new.
	someRules
		do: [ :rule | 
			| predicateSelector subjectElements argumentElements data isPredicateInv isSubjectInv |
			predicateSelector := (rule predicate nameNormalized , ':') asSymbol.
			isPredicateInv := rule hasPredicateInverted.
			isSubjectInv := rule hasSubjectInverted.
			subjectElements := rule subjectElements.
			argumentElements := rule argumentElements.
			subjectElements
				do: [ :subject | 
					argumentElements
						do: [ :argument | 
							| relId spec msgPass msgFail |
							relId := subject id , '-' , argument id.
							msgPass := subject id , '.' , rule predicate name , '(' , argument id , ')=True'.
							msgFail := subject id , '.' , rule predicate name , '(' , argument id , ')=False'.
							(processedPredicates includes: relId)
								ifFalse: [ 
									data := {(#subject -> subject value).
									(#argument -> argument value).
									(#ruleId -> rule id).
									(#propertyId -> relId).
									(#msgPass -> msgPass).
									(#msgFail -> msgFail)} asDictionary.
									spec := self perform: predicateSelector withArguments: {data}.
									spec := spec
										dictoReplace:
											{('$subject' -> subject value).
											('$argument' -> argument value).
											('$ruleId' -> rule id).
											('$propertyId' -> relId).
											('$msgPass' -> msgPass).
											('$msgFail' -> msgFail)}.
									res := res , spec ].	"avoid duplicate predicate evaluations"
							processedPredicates add: relId ] ] ].
	^ res in DIPhpDependencies(DIAdapter)>>printRulesEntityRelationship:
	Receiver: a DIPhpDependencies
	Arguments and temporary variables: 
		someRules: 	a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalk...etc...
		processedPredicates: 	a Set()
		data: 	nil
		res: 	''
		rule: 	RuleResult cannot depend on DictoTalker
		predicateSelector: 	#dependOn:
		subjectElements: 	nil
		argumentElements: 	nil
		isPredicateInv: 	false
		isSubjectInv: 	false
	Receiver's instance variables: 
		output: 	''
		commandOutput: 	''
		NEWLINE: 	'
'
		rules: 	a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalker m...etc...
		varSynonyms: 	nil
		sessionId: 	'1424261181'
		TIMESTAMP: 	'1424261181'
		TOOLNAME: 	'DIPhpDependencies'
		PROJECTROOT: 	'/home/otruffer/DictoCLI/'
		PROJECTSRC: 	'./'
		PROJECTBIN: 	'./'
		RESULTFILE: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/meta/1424260924/...etc...
		TESTFILE: 	nil
		testInputFileExt: 	'.st'
		SYSTEM: 	SYSTEM


DICollectionRule(OrderedCollection)>>do:
	Receiver: a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalker must depend on Rule...etc...
	Arguments and temporary variables: 
		aBlock: 	printRulesEntityRelationship: someRules
	| res processedPredicates |
	r...etc...
		index: 	1
	Receiver's instance variables: 
		array: 	an Array(RuleResult cannot depend on DictoTalker DictoTalker must depend...etc...
		firstIndex: 	1
		lastIndex: 	3
		elements: 	nil
		elements: 	nil


DIPhpDependencies(DIAdapter)>>printRulesEntityRelationship:
	Receiver: a DIPhpDependencies
	Arguments and temporary variables: 
		res: 	''
		someRules: 	a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalk...etc...
		processedPredicates: 	a Set()
	Receiver's instance variables: 
		output: 	''
		commandOutput: 	''
		NEWLINE: 	'
'
		rules: 	a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalker m...etc...
		varSynonyms: 	nil
		sessionId: 	'1424261181'
		TIMESTAMP: 	'1424261181'
		TOOLNAME: 	'DIPhpDependencies'
		PROJECTROOT: 	'/home/otruffer/DictoCLI/'
		PROJECTSRC: 	'./'
		PROJECTBIN: 	'./'
		RESULTFILE: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/meta/1424260924/...etc...
		TESTFILE: 	nil
		testInputFileExt: 	'.st'
		SYSTEM: 	SYSTEM


DIPhpDependencies(DIAdapter)>>printRules
	Receiver: a DIPhpDependencies
	Arguments and temporary variables: 
		res: 	nil
		allRules: 	a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalke...etc...
	Receiver's instance variables: 
		output: 	''
		commandOutput: 	''
		NEWLINE: 	'
'
		rules: 	a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalker m...etc...
		varSynonyms: 	nil
		sessionId: 	'1424261181'
		TIMESTAMP: 	'1424261181'
		TOOLNAME: 	'DIPhpDependencies'
		PROJECTROOT: 	'/home/otruffer/DictoCLI/'
		PROJECTSRC: 	'./'
		PROJECTBIN: 	'./'
		RESULTFILE: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/meta/1424260924/...etc...
		TESTFILE: 	nil
		testInputFileExt: 	'.st'
		SYSTEM: 	SYSTEM


DIPhpDependencies>>testInput
	Receiver: a DIPhpDependencies
	Arguments and temporary variables: 
		strRules: 	nil
	Receiver's instance variables: 
		output: 	''
		commandOutput: 	''
		NEWLINE: 	'
'
		rules: 	a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalker m...etc...
		varSynonyms: 	nil
		sessionId: 	'1424261181'
		TIMESTAMP: 	'1424261181'
		TOOLNAME: 	'DIPhpDependencies'
		PROJECTROOT: 	'/home/otruffer/DictoCLI/'
		PROJECTSRC: 	'./'
		PROJECTBIN: 	'./'
		RESULTFILE: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/meta/1424260924/...etc...
		TESTFILE: 	nil
		testInputFileExt: 	'.st'
		SYSTEM: 	SYSTEM


DITestGroup>>build
	Receiver: a DITestGroup
	Arguments and temporary variables: 

	Receiver's instance variables: 
		rules: 	an OrderedCollection(RuleResult cannot depend on DictoTalker DictoTalker...etc...
		adapter: 	a DIPhpDependencies
		runCommandText: 	nil
		testSpecification: 	nil
		adapterID: 	'DIPhpDependencies'
		resultFile: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/meta/1424261181/...etc...
		specificationFile: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/meta/1424...etc...
		commandFile: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/meta/1424261181...etc...


[ :testGroup | testGroup build ] in DIDicto>>dictoBuild:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = ...etc...
		adapterTestGroups: 	a Dictionary(DIGrepFileContent->a DITestGroup DIJMeterLoadTe...etc...
		testGroup: 	a DITestGroup
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424261181'
		singleShotTask: 	false


Array(SequenceableCollection)>>do:
	Receiver: an Array(a DITestGroup a DITestGroup a DITestGroup a DITestGroup a DITestGroup)
	Arguments and temporary variables: 
		aBlock: 	[ :testGroup | testGroup build ]
		index: 	4
	Receiver's instance variables: 
an Array(a DITestGroup a DITestGroup a DITestGroup a DITestGroup a DITestGroup)

DIDicto>>dictoBuild:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = ...etc...
		adapterTestGroups: 	a Dictionary(DIGrepFileContent->a DITestGroup DIJMeterLoadTe...etc...
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424261181'
		singleShotTask: 	false


DIDicto>>dictoRun:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = ...etc...
		adapterTestGroups: 	nil
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424261181'
		singleShotTask: 	false


DIDicto>>dictoAll:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = ...etc...
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424261181'
		singleShotTask: 	false


[ DIDicto new dictoAll: input ] in DIWebServiceAPI>>getRun
	Receiver: a DIWebServiceAPI
	Arguments and temporary variables: 
		in: 	'/home/otruffer/dicto/bin/analysis/meta/dicto.rules'
		input: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = PhpCl...etc...
		rulesFailed: 	nil
		rulesTotal: 	nil
	Receiver's instance variables: 
		request: 	nil
		response: 	nil
		variables: 	nil
		delegate: 	nil
		principal: 	nil
		credentials: 	nil


BlockClosure>>on:do:
	Receiver: [ DIDicto new dictoAll: input ]
	Arguments and temporary variables: 
		exception: 	DIException
		handlerAction: 	[ :ex | ^ self error: ex description ]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	DIWebServiceAPI>>getRun
		startpc: 	138
		numArgs: 	0


DIWebServiceAPI>>getRun
	Receiver: a DIWebServiceAPI
	Arguments and temporary variables: 
		in: 	'/home/otruffer/dicto/bin/analysis/meta/dicto.rules'
		input: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = PhpCl...etc...
		rulesFailed: 	nil
		rulesTotal: 	nil
	Receiver's instance variables: 
		request: 	nil
		response: 	nil
		variables: 	nil
		delegate: 	nil
		principal: 	nil
		credentials: 	nil


DIWebServiceHandler>>post
	Receiver: a DIWebServiceHandler
	Arguments and temporary variables: 
		api: 	a DIWebServiceAPI
	Receiver's instance variables: 
		request: 	a ZnRequest(POST /meta/run)
		response: 	nil
		variables: 	an OrderedCollection('meta' 'run')
		delegate: 	a ZnJSONRestServerDelegate
		principal: 	nil
		credentials: 	nil
		dicto: 	a DIDicto


DIWebServiceHandler(ZnRestCall)>>execute
	Receiver: a DIWebServiceHandler
	Arguments and temporary variables: 

	Receiver's instance variables: 
		request: 	a ZnRequest(POST /meta/run)
		response: 	nil
		variables: 	an OrderedCollection('meta' 'run')
		delegate: 	a ZnJSONRestServerDelegate
		principal: 	nil
		credentials: 	nil
		dicto: 	a DIDicto


[ call execute ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


BlockClosure>>on:do:
	Receiver: [ call execute ]
	Arguments and temporary variables: 
		exception: 	ZnRestCallUnauthorized
		handlerAction: 	[ :exception | self unauthorized: exception request ]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
		startpc: 	38
		numArgs: 	0


ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


[ self execute: call ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /meta/run)
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


BlockClosure>>on:do:
	Receiver: [ self execute: call ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :exception | 
request server debugMode
	ifTrue: [ exception pa...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
		startpc: 	99
		numArgs: 	0


ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /meta/run)
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ :delegate | delegate handleRequest: request ] ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /meta/run)
		delegate: 	a ZnJSONRestServerDelegate
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateRequest:do:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /meta/run)
		block: 	[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ ...etc...
		authenticator: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /meta/run)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


[ self authenticateAndDelegateRequest: request ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /meta/run)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


BlockClosure>>on:do:
	Receiver: [ self authenticateAndDelegateRequest: request ]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :exception | 
self debugMode
	ifTrue: [ exception pass ]
	ifFa...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequ...etc...
		startpc: 	58
		numArgs: 	0


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /meta/run)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /meta/run)
		response: 	nil
		initialMilliseconds: 	5691301
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeOneRequestResponseOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		stream: 	a ZdcSocketStream
		request: 	a ZnRequest(POST /meta/run)
		response: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


[ self executeOneRequestResponseOn: stream ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		stream: 	a ZdcSocketStream
		request: 	nil
		response: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


[ 
p psValueAt: index put: anObject.
aBlock value ] in ZnCurrentServer(DynamicVariable)>>value:during:
	Receiver: a ZnCurrentServer
	Arguments and temporary variables: 
		anObject: 	a ZnManagingMultiThreadedServer(running 8010)
		aBlock: 	[ self executeOneRequestResponseOn: stream ]
		p: 	a Process in nil
		oldValue: 	nil
	Receiver's instance variables: 
		index: 	5


BlockClosure>>ensure:
	Receiver: [ 
p psValueAt: index put: anObject.
aBlock value ]
	Arguments and temporary variables: 
		aBlock: 	[ p psValueAt: index put: oldValue ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ZnCurrentServer(DynamicVariable)>>value:during:
		startpc: 	62
		numArgs: 	0



--- The full stack ---
NeoJSONReader(Object)>>doesNotUnderstand: #keys
Message>>sentTo:
NeoJSONReader(Object)>>doesNotUnderstand: #keys
DIVarPhpClass>>allElements
DIVarPhpClass(DIVar)>>elements
DISimpleRule>>subjectElements
printRulesEntityRelationship: someRules
	| res processedPredicates |
	res := ''.
	processedPredicates := Set new.
	someRules
		do: [ :rule | 
			| predicateSelector subjectElements argumentElements data isPredicateInv isSubjectInv |
			predicateSelector := (rule predicate nameNormalized , ':') asSymbol.
			isPredicateInv := rule hasPredicateInverted.
			isSubjectInv := rule hasSubjectInverted.
			subjectElements := rule subjectElements.
			argumentElements := rule argumentElements.
			subjectElements
				do: [ :subject | 
					argumentElements
						do: [ :argument | 
							| relId spec msgPass msgFail |
							relId := subject id , '-' , argument id.
							msgPass := subject id , '.' , rule predicate name , '(' , argument id , ')=True'.
							msgFail := subject id , '.' , rule predicate name , '(' , argument id , ')=False'.
							(processedPredicates includes: relId)
								ifFalse: [ 
									data := {(#subject -> subject value).
									(#argument -> argument value).
									(#ruleId -> rule id).
									(#propertyId -> relId).
									(#msgPass -> msgPass).
									(#msgFail -> msgFail)} asDictionary.
									spec := self perform: predicateSelector withArguments: {data}.
									spec := spec
										dictoReplace:
											{('$subject' -> subject value).
											('$argument' -> argument value).
											('$ruleId' -> rule id).
											('$propertyId' -> relId).
											('$msgPass' -> msgPass).
											('$msgFail' -> msgFail)}.
									res := res , spec ].	"avoid duplicate predicate evaluations"
							processedPredicates add: relId ] ] ].
	^ res in DIPhpDependencies(DIAdapter)>>printRulesEntityRelationship:
DICollectionRule(OrderedCollection)>>do:
DIPhpDependencies(DIAdapter)>>printRulesEntityRelationship:
DIPhpDependencies(DIAdapter)>>printRules
DIPhpDependencies>>testInput
DITestGroup>>build
[ :testGroup | testGroup build ] in DIDicto>>dictoBuild:
Array(SequenceableCollection)>>do:
DIDicto>>dictoBuild:
DIDicto>>dictoRun:
DIDicto>>dictoAll:
[ DIDicto new dictoAll: input ] in DIWebServiceAPI>>getRun
BlockClosure>>on:do:
DIWebServiceAPI>>getRun
DIWebServiceHandler>>post
DIWebServiceHandler(ZnRestCall)>>execute
[ call execute ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
BlockClosure>>on:do:
ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
[ self execute: call ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
BlockClosure>>on:do:
ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ :delegate | delegate handleRequest: request ] ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateRequest:do:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
[ self authenticateAndDelegateRequest: request ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
BlockClosure>>on:do:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequest:
ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeOneRequestResponseOn:
[ self executeOneRequestResponseOn: stream ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
[ 
p psValueAt: index put: anObject.
aBlock value ] in ZnCurrentServer(DynamicVariable)>>value:during:
BlockClosure>>ensure:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
ZnCurrentServer(DynamicVariable)>>value:during:
ZnCurrentServer class(DynamicVariable class)>>value:during:
ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
[ self executeRequestResponseLoopOn: stream ] in [ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ] in [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
BlockClosure>>ensure:
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ] in [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
BlockClosure>>ifCurtailed:
[ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: NeoJSONReader>>keys
18 February 2015 1:07:15.604795 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
NBCogit NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
https://github.com/pharo-project/pharo-vm.git Commit: 4a0d556150d478ff2de3c9624d2f18e6eaa3fa5c Date: 2014-12-18 18:42:53 +0100 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14893

Image: Pharo3.0 [Latest update: #30863]

NeoJSONReader(Object)>>doesNotUnderstand: #keys
	Receiver: a NeoJSONReader
	Arguments and temporary variables: 
		aMessage: 	keys
		exception: 	MessageNotUnderstood: NeoJSONReader>>keys
		resumeValue: 	nil
	Receiver's instance variables: 
		mappings: 	nil
		readStream: 	a ReadStream
		stringStream: 	nil
		listClass: 	nil
		mapClass: 	nil
		propertyNamesAsSymbols: 	false


Message>>sentTo:
	Receiver: keys
	Arguments and temporary variables: 
		receiver: 	a NeoJSONReader
	Receiver's instance variables: 
		selector: 	#keys
		args: 	#()
		lookupClass: 	NeoJSONReader


NeoJSONReader(Object)>>doesNotUnderstand: #keys
	Receiver: a NeoJSONReader
	Arguments and temporary variables: 
		aMessage: 	keys
		exception: 	MessageNotUnderstood: NeoJSONReader>>keys
		resumeValue: 	MessageNotUnderstood: NeoJSONReader>>keys
	Receiver's instance variables: 
		mappings: 	nil
		readStream: 	a ReadStream
		stringStream: 	nil
		listClass: 	nil
		mapClass: 	nil
		propertyNamesAsSymbols: 	false


Message>>sentTo:
	Receiver: keys
	Arguments and temporary variables: 
		receiver: 	a NeoJSONReader
	Receiver's instance variables: 
		selector: 	#keys
		args: 	#()
		lookupClass: 	NeoJSONReader


NeoJSONReader(Object)>>doesNotUnderstand: #keys
	Receiver: a NeoJSONReader
	Arguments and temporary variables: 
		aMessage: 	keys
		exception: 	MessageNotUnderstood: NeoJSONReader>>keys
		resumeValue: 	MessageNotUnderstood: NeoJSONReader>>keys
	Receiver's instance variables: 
		mappings: 	nil
		readStream: 	a ReadStream
		stringStream: 	nil
		listClass: 	nil
		mapClass: 	nil
		propertyNamesAsSymbols: 	false


DIVarPhpClass>>allElements
	Receiver: RuleResult
	Arguments and temporary variables: 

	Receiver's instance variables: 
		isFirst: 	false
		dslText: 	'RuleResult=PhpClass with name:"Dicto\\RuleResult"'
		type: 	'PhpClass'
		id: 	1
		entity: 	nil
		name: 	'RuleResult'
		specifiers: 	an OrderedCollection(name=Dicto\\RuleResult)
		isInverted: 	false
		elements: 	a DICollectionVarElements()
		invertedElements: 	a DICollectionVarElements()


DIVarPhpClass(DIVar)>>elements
	Receiver: RuleResult
	Arguments and temporary variables: 
		valid: 	nil
	Receiver's instance variables: 
		isFirst: 	false
		dslText: 	'RuleResult=PhpClass with name:"Dicto\\RuleResult"'
		type: 	'PhpClass'
		id: 	1
		entity: 	nil
		name: 	'RuleResult'
		specifiers: 	an OrderedCollection(name=Dicto\\RuleResult)
		isInverted: 	false
		elements: 	a DICollectionVarElements()
		invertedElements: 	a DICollectionVarElements()


DISimpleRule>>subjectElements
	Receiver: RuleResult cannot depend on DictoTalker
	Arguments and temporary variables: 
		subjectElements: 	nil
	Receiver's instance variables: 
		isFirst: 	nil
		dslText: 	'RuleResult cannot depend on DictoTalker'
		type: 	#cannot
		id: 	1001
		entity: 	nil
		subjects: 	an Array(RuleResult)
		predicates: 	an Array(depend on DictoTalker)
		subRules: 	nil
		candidateAdapters: 	a SortedCollection(DIPhpDependencies)
		chosenAdapter: 	DIPhpDependencies
		hasFailed: 	false
		failureMessage: 	''
		failingPredicates: 	a Set()
		hasSubjectInverted: 	false
		hasPredicateInverted: 	false


printRulesEntityRelationship: someRules
	| res processedPredicates |
	res := ''.
	processedPredicates := Set new.
	someRules
		do: [ :rule | 
			| predicateSelector subjectElements argumentElements data isPredicateInv isSubjectInv |
			predicateSelector := (rule predicate nameNormalized , ':') asSymbol.
			isPredicateInv := rule hasPredicateInverted.
			isSubjectInv := rule hasSubjectInverted.
			subjectElements := rule subjectElements.
			argumentElements := rule argumentElements.
			subjectElements
				do: [ :subject | 
					argumentElements
						do: [ :argument | 
							| relId spec msgPass msgFail |
							relId := subject id , '-' , argument id.
							msgPass := subject id , '.' , rule predicate name , '(' , argument id , ')=True'.
							msgFail := subject id , '.' , rule predicate name , '(' , argument id , ')=False'.
							(processedPredicates includes: relId)
								ifFalse: [ 
									data := {(#subject -> subject value).
									(#argument -> argument value).
									(#ruleId -> rule id).
									(#propertyId -> relId).
									(#msgPass -> msgPass).
									(#msgFail -> msgFail)} asDictionary.
									spec := self perform: predicateSelector withArguments: {data}.
									spec := spec
										dictoReplace:
											{('$subject' -> subject value).
											('$argument' -> argument value).
											('$ruleId' -> rule id).
											('$propertyId' -> relId).
											('$msgPass' -> msgPass).
											('$msgFail' -> msgFail)}.
									res := res , spec ].	"avoid duplicate predicate evaluations"
							processedPredicates add: relId ] ] ].
	^ res in DIPhpDependencies(DIAdapter)>>printRulesEntityRelationship:
	Receiver: a DIPhpDependencies
	Arguments and temporary variables: 
		someRules: 	a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalk...etc...
		processedPredicates: 	a Set()
		data: 	nil
		res: 	''
		rule: 	RuleResult cannot depend on DictoTalker
		predicateSelector: 	#dependOn:
		subjectElements: 	nil
		argumentElements: 	nil
		isPredicateInv: 	false
		isSubjectInv: 	false
	Receiver's instance variables: 
		output: 	''
		commandOutput: 	''
		NEWLINE: 	'
'
		rules: 	a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalker m...etc...
		varSynonyms: 	nil
		sessionId: 	'1424261181'
		TIMESTAMP: 	'1424261181'
		TOOLNAME: 	'DIPhpDependencies'
		PROJECTROOT: 	'/home/otruffer/DictoCLI/'
		PROJECTSRC: 	'./'
		PROJECTBIN: 	'./'
		RESULTFILE: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/meta/1424260924/...etc...
		TESTFILE: 	nil
		testInputFileExt: 	'.st'
		SYSTEM: 	SYSTEM


DICollectionRule(OrderedCollection)>>do:
	Receiver: a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalker must depend on Rule...etc...
	Arguments and temporary variables: 
		aBlock: 	printRulesEntityRelationship: someRules
	| res processedPredicates |
	r...etc...
		index: 	1
	Receiver's instance variables: 
		array: 	an Array(RuleResult cannot depend on DictoTalker DictoTalker must depend...etc...
		firstIndex: 	1
		lastIndex: 	3
		elements: 	nil
		elements: 	nil


DIPhpDependencies(DIAdapter)>>printRulesEntityRelationship:
	Receiver: a DIPhpDependencies
	Arguments and temporary variables: 
		res: 	''
		someRules: 	a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalk...etc...
		processedPredicates: 	a Set()
	Receiver's instance variables: 
		output: 	''
		commandOutput: 	''
		NEWLINE: 	'
'
		rules: 	a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalker m...etc...
		varSynonyms: 	nil
		sessionId: 	'1424261181'
		TIMESTAMP: 	'1424261181'
		TOOLNAME: 	'DIPhpDependencies'
		PROJECTROOT: 	'/home/otruffer/DictoCLI/'
		PROJECTSRC: 	'./'
		PROJECTBIN: 	'./'
		RESULTFILE: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/meta/1424260924/...etc...
		TESTFILE: 	nil
		testInputFileExt: 	'.st'
		SYSTEM: 	SYSTEM


DIPhpDependencies(DIAdapter)>>printRules
	Receiver: a DIPhpDependencies
	Arguments and temporary variables: 
		res: 	nil
		allRules: 	a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalke...etc...
	Receiver's instance variables: 
		output: 	''
		commandOutput: 	''
		NEWLINE: 	'
'
		rules: 	a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalker m...etc...
		varSynonyms: 	nil
		sessionId: 	'1424261181'
		TIMESTAMP: 	'1424261181'
		TOOLNAME: 	'DIPhpDependencies'
		PROJECTROOT: 	'/home/otruffer/DictoCLI/'
		PROJECTSRC: 	'./'
		PROJECTBIN: 	'./'
		RESULTFILE: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/meta/1424260924/...etc...
		TESTFILE: 	nil
		testInputFileExt: 	'.st'
		SYSTEM: 	SYSTEM


DIPhpDependencies>>testInput
	Receiver: a DIPhpDependencies
	Arguments and temporary variables: 
		strRules: 	nil
	Receiver's instance variables: 
		output: 	''
		commandOutput: 	''
		NEWLINE: 	'
'
		rules: 	a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalker m...etc...
		varSynonyms: 	nil
		sessionId: 	'1424261181'
		TIMESTAMP: 	'1424261181'
		TOOLNAME: 	'DIPhpDependencies'
		PROJECTROOT: 	'/home/otruffer/DictoCLI/'
		PROJECTSRC: 	'./'
		PROJECTBIN: 	'./'
		RESULTFILE: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/meta/1424260924/...etc...
		TESTFILE: 	nil
		testInputFileExt: 	'.st'
		SYSTEM: 	SYSTEM


DITestGroup>>build
	Receiver: a DITestGroup
	Arguments and temporary variables: 

	Receiver's instance variables: 
		rules: 	an OrderedCollection(RuleResult cannot depend on DictoTalker DictoTalker...etc...
		adapter: 	a DIPhpDependencies
		runCommandText: 	nil
		testSpecification: 	nil
		adapterID: 	'DIPhpDependencies'
		resultFile: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/meta/1424261181/...etc...
		specificationFile: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/meta/1424...etc...
		commandFile: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/meta/1424261181...etc...


[ :testGroup | testGroup build ] in DIDicto>>dictoBuild:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = ...etc...
		adapterTestGroups: 	a Dictionary(DIGrepFileContent->a DITestGroup DIJMeterLoadTe...etc...
		testGroup: 	a DITestGroup
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424261181'
		singleShotTask: 	false


Array(SequenceableCollection)>>do:
	Receiver: an Array(a DITestGroup a DITestGroup a DITestGroup a DITestGroup a DITestGroup)
	Arguments and temporary variables: 
		aBlock: 	[ :testGroup | testGroup build ]
		index: 	4
	Receiver's instance variables: 
an Array(a DITestGroup a DITestGroup a DITestGroup a DITestGroup a DITestGroup)

DIDicto>>dictoBuild:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = ...etc...
		adapterTestGroups: 	a Dictionary(DIGrepFileContent->a DITestGroup DIJMeterLoadTe...etc...
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424261181'
		singleShotTask: 	false


DIDicto>>dictoRun:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = ...etc...
		adapterTestGroups: 	nil
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424261181'
		singleShotTask: 	false


DIDicto>>dictoAll:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = ...etc...
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424261181'
		singleShotTask: 	false


[ DIDicto new dictoAll: input ] in DIWebServiceAPI>>getRun
	Receiver: a DIWebServiceAPI
	Arguments and temporary variables: 
		in: 	'/home/otruffer/dicto/bin/analysis/meta/dicto.rules'
		input: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = PhpCl...etc...
		rulesFailed: 	nil
		rulesTotal: 	nil
	Receiver's instance variables: 
		request: 	nil
		response: 	nil
		variables: 	nil
		delegate: 	nil
		principal: 	nil
		credentials: 	nil


BlockClosure>>on:do:
	Receiver: [ DIDicto new dictoAll: input ]
	Arguments and temporary variables: 
		exception: 	DIException
		handlerAction: 	[ :ex | ^ self error: ex description ]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	DIWebServiceAPI>>getRun
		startpc: 	138
		numArgs: 	0


DIWebServiceAPI>>getRun
	Receiver: a DIWebServiceAPI
	Arguments and temporary variables: 
		in: 	'/home/otruffer/dicto/bin/analysis/meta/dicto.rules'
		input: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = PhpCl...etc...
		rulesFailed: 	nil
		rulesTotal: 	nil
	Receiver's instance variables: 
		request: 	nil
		response: 	nil
		variables: 	nil
		delegate: 	nil
		principal: 	nil
		credentials: 	nil


DIWebServiceHandler>>post
	Receiver: a DIWebServiceHandler
	Arguments and temporary variables: 
		api: 	a DIWebServiceAPI
	Receiver's instance variables: 
		request: 	a ZnRequest(POST /meta/run)
		response: 	nil
		variables: 	an OrderedCollection('meta' 'run')
		delegate: 	a ZnJSONRestServerDelegate
		principal: 	nil
		credentials: 	nil
		dicto: 	a DIDicto


DIWebServiceHandler(ZnRestCall)>>execute
	Receiver: a DIWebServiceHandler
	Arguments and temporary variables: 

	Receiver's instance variables: 
		request: 	a ZnRequest(POST /meta/run)
		response: 	nil
		variables: 	an OrderedCollection('meta' 'run')
		delegate: 	a ZnJSONRestServerDelegate
		principal: 	nil
		credentials: 	nil
		dicto: 	a DIDicto


[ call execute ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


BlockClosure>>on:do:
	Receiver: [ call execute ]
	Arguments and temporary variables: 
		exception: 	ZnRestCallUnauthorized
		handlerAction: 	[ :exception | self unauthorized: exception request ]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
		startpc: 	38
		numArgs: 	0


ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


[ self execute: call ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /meta/run)
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


BlockClosure>>on:do:
	Receiver: [ self execute: call ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :exception | 
request server debugMode
	ifTrue: [ exception pa...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
		startpc: 	99
		numArgs: 	0


ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /meta/run)
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ :delegate | delegate handleRequest: request ] ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /meta/run)
		delegate: 	a ZnJSONRestServerDelegate
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateRequest:do:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /meta/run)
		block: 	[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ ...etc...
		authenticator: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /meta/run)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


[ self authenticateAndDelegateRequest: request ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /meta/run)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


BlockClosure>>on:do:
	Receiver: [ self authenticateAndDelegateRequest: request ]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :exception | 
self debugMode
	ifTrue: [ exception pass ]
	ifFa...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequ...etc...
		startpc: 	58
		numArgs: 	0


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /meta/run)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /meta/run)
		response: 	nil
		initialMilliseconds: 	5691301
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeOneRequestResponseOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		stream: 	a ZdcSocketStream
		request: 	a ZnRequest(POST /meta/run)
		response: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


[ self executeOneRequestResponseOn: stream ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		stream: 	a ZdcSocketStream
		request: 	nil
		response: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)



--- The full stack ---
NeoJSONReader(Object)>>doesNotUnderstand: #keys
Message>>sentTo:
NeoJSONReader(Object)>>doesNotUnderstand: #keys
Message>>sentTo:
NeoJSONReader(Object)>>doesNotUnderstand: #keys
DIVarPhpClass>>allElements
DIVarPhpClass(DIVar)>>elements
DISimpleRule>>subjectElements
printRulesEntityRelationship: someRules
	| res processedPredicates |
	res := ''.
	processedPredicates := Set new.
	someRules
		do: [ :rule | 
			| predicateSelector subjectElements argumentElements data isPredicateInv isSubjectInv |
			predicateSelector := (rule predicate nameNormalized , ':') asSymbol.
			isPredicateInv := rule hasPredicateInverted.
			isSubjectInv := rule hasSubjectInverted.
			subjectElements := rule subjectElements.
			argumentElements := rule argumentElements.
			subjectElements
				do: [ :subject | 
					argumentElements
						do: [ :argument | 
							| relId spec msgPass msgFail |
							relId := subject id , '-' , argument id.
							msgPass := subject id , '.' , rule predicate name , '(' , argument id , ')=True'.
							msgFail := subject id , '.' , rule predicate name , '(' , argument id , ')=False'.
							(processedPredicates includes: relId)
								ifFalse: [ 
									data := {(#subject -> subject value).
									(#argument -> argument value).
									(#ruleId -> rule id).
									(#propertyId -> relId).
									(#msgPass -> msgPass).
									(#msgFail -> msgFail)} asDictionary.
									spec := self perform: predicateSelector withArguments: {data}.
									spec := spec
										dictoReplace:
											{('$subject' -> subject value).
											('$argument' -> argument value).
											('$ruleId' -> rule id).
											('$propertyId' -> relId).
											('$msgPass' -> msgPass).
											('$msgFail' -> msgFail)}.
									res := res , spec ].	"avoid duplicate predicate evaluations"
							processedPredicates add: relId ] ] ].
	^ res in DIPhpDependencies(DIAdapter)>>printRulesEntityRelationship:
DICollectionRule(OrderedCollection)>>do:
DIPhpDependencies(DIAdapter)>>printRulesEntityRelationship:
DIPhpDependencies(DIAdapter)>>printRules
DIPhpDependencies>>testInput
DITestGroup>>build
[ :testGroup | testGroup build ] in DIDicto>>dictoBuild:
Array(SequenceableCollection)>>do:
DIDicto>>dictoBuild:
DIDicto>>dictoRun:
DIDicto>>dictoAll:
[ DIDicto new dictoAll: input ] in DIWebServiceAPI>>getRun
BlockClosure>>on:do:
DIWebServiceAPI>>getRun
DIWebServiceHandler>>post
DIWebServiceHandler(ZnRestCall)>>execute
[ call execute ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
BlockClosure>>on:do:
ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
[ self execute: call ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
BlockClosure>>on:do:
ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ :delegate | delegate handleRequest: request ] ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateRequest:do:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
[ self authenticateAndDelegateRequest: request ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
BlockClosure>>on:do:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequest:
ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeOneRequestResponseOn:
[ self executeOneRequestResponseOn: stream ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ 
p psValueAt: index put: anObject.
aBlock value ] in ZnCurrentServer(DynamicVariable)>>value:during:
BlockClosure>>ensure:
ZnCurrentServer(DynamicVariable)>>value:during:
ZnCurrentServer class(DynamicVariable class)>>value:during:
ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
[ self executeRequestResponseLoopOn: stream ] in [ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ] in [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
BlockClosure>>ensure:
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ] in [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
BlockClosure>>ifCurtailed:
[ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: NeoJSONReader>>keys
18 February 2015 1:07:16.424056 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
NBCogit NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
https://github.com/pharo-project/pharo-vm.git Commit: 4a0d556150d478ff2de3c9624d2f18e6eaa3fa5c Date: 2014-12-18 18:42:53 +0100 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14893

Image: Pharo3.0 [Latest update: #30863]

NeoJSONReader(Object)>>doesNotUnderstand: #keys
	Receiver: a NeoJSONReader
	Arguments and temporary variables: 
		aMessage: 	keys
		exception: 	MessageNotUnderstood: NeoJSONReader>>keys
		resumeValue: 	nil
	Receiver's instance variables: 
		mappings: 	nil
		readStream: 	a ReadStream
		stringStream: 	nil
		listClass: 	nil
		mapClass: 	nil
		propertyNamesAsSymbols: 	false


Message>>sentTo:
	Receiver: keys
	Arguments and temporary variables: 
		receiver: 	a NeoJSONReader
	Receiver's instance variables: 
		selector: 	#keys
		args: 	#()
		lookupClass: 	NeoJSONReader


NeoJSONReader(Object)>>doesNotUnderstand: #keys
	Receiver: a NeoJSONReader
	Arguments and temporary variables: 
		aMessage: 	keys
		exception: 	MessageNotUnderstood: NeoJSONReader>>keys
		resumeValue: 	MessageNotUnderstood: NeoJSONReader>>keys
	Receiver's instance variables: 
		mappings: 	nil
		readStream: 	a ReadStream
		stringStream: 	nil
		listClass: 	nil
		mapClass: 	nil
		propertyNamesAsSymbols: 	false


Message>>sentTo:
	Receiver: keys
	Arguments and temporary variables: 
		receiver: 	a NeoJSONReader
	Receiver's instance variables: 
		selector: 	#keys
		args: 	#()
		lookupClass: 	NeoJSONReader


NeoJSONReader(Object)>>doesNotUnderstand: #keys
	Receiver: a NeoJSONReader
	Arguments and temporary variables: 
		aMessage: 	keys
		exception: 	MessageNotUnderstood: NeoJSONReader>>keys
		resumeValue: 	MessageNotUnderstood: NeoJSONReader>>keys
	Receiver's instance variables: 
		mappings: 	nil
		readStream: 	a ReadStream
		stringStream: 	nil
		listClass: 	nil
		mapClass: 	nil
		propertyNamesAsSymbols: 	false


Message>>sentTo:
	Receiver: keys
	Arguments and temporary variables: 
		receiver: 	a NeoJSONReader
	Receiver's instance variables: 
		selector: 	#keys
		args: 	#()
		lookupClass: 	NeoJSONReader


NeoJSONReader(Object)>>doesNotUnderstand: #keys
	Receiver: a NeoJSONReader
	Arguments and temporary variables: 
		aMessage: 	keys
		exception: 	MessageNotUnderstood: NeoJSONReader>>keys
		resumeValue: 	MessageNotUnderstood: NeoJSONReader>>keys
	Receiver's instance variables: 
		mappings: 	nil
		readStream: 	a ReadStream
		stringStream: 	nil
		listClass: 	nil
		mapClass: 	nil
		propertyNamesAsSymbols: 	false


DIVarPhpClass>>allElements
	Receiver: RuleResult
	Arguments and temporary variables: 

	Receiver's instance variables: 
		isFirst: 	false
		dslText: 	'RuleResult=PhpClass with name:"Dicto\\RuleResult"'
		type: 	'PhpClass'
		id: 	1
		entity: 	nil
		name: 	'RuleResult'
		specifiers: 	an OrderedCollection(name=Dicto\\RuleResult)
		isInverted: 	false
		elements: 	a DICollectionVarElements()
		invertedElements: 	a DICollectionVarElements()


DIVarPhpClass(DIVar)>>elements
	Receiver: RuleResult
	Arguments and temporary variables: 
		valid: 	nil
	Receiver's instance variables: 
		isFirst: 	false
		dslText: 	'RuleResult=PhpClass with name:"Dicto\\RuleResult"'
		type: 	'PhpClass'
		id: 	1
		entity: 	nil
		name: 	'RuleResult'
		specifiers: 	an OrderedCollection(name=Dicto\\RuleResult)
		isInverted: 	false
		elements: 	a DICollectionVarElements()
		invertedElements: 	a DICollectionVarElements()


DISimpleRule>>subjectElements
	Receiver: RuleResult cannot depend on DictoTalker
	Arguments and temporary variables: 
		subjectElements: 	nil
	Receiver's instance variables: 
		isFirst: 	nil
		dslText: 	'RuleResult cannot depend on DictoTalker'
		type: 	#cannot
		id: 	1001
		entity: 	nil
		subjects: 	an Array(RuleResult)
		predicates: 	an Array(depend on DictoTalker)
		subRules: 	nil
		candidateAdapters: 	a SortedCollection(DIPhpDependencies)
		chosenAdapter: 	DIPhpDependencies
		hasFailed: 	false
		failureMessage: 	''
		failingPredicates: 	a Set()
		hasSubjectInverted: 	false
		hasPredicateInverted: 	false


printRulesEntityRelationship: someRules
	| res processedPredicates |
	res := ''.
	processedPredicates := Set new.
	someRules
		do: [ :rule | 
			| predicateSelector subjectElements argumentElements data isPredicateInv isSubjectInv |
			predicateSelector := (rule predicate nameNormalized , ':') asSymbol.
			isPredicateInv := rule hasPredicateInverted.
			isSubjectInv := rule hasSubjectInverted.
			subjectElements := rule subjectElements.
			argumentElements := rule argumentElements.
			subjectElements
				do: [ :subject | 
					argumentElements
						do: [ :argument | 
							| relId spec msgPass msgFail |
							relId := subject id , '-' , argument id.
							msgPass := subject id , '.' , rule predicate name , '(' , argument id , ')=True'.
							msgFail := subject id , '.' , rule predicate name , '(' , argument id , ')=False'.
							(processedPredicates includes: relId)
								ifFalse: [ 
									data := {(#subject -> subject value).
									(#argument -> argument value).
									(#ruleId -> rule id).
									(#propertyId -> relId).
									(#msgPass -> msgPass).
									(#msgFail -> msgFail)} asDictionary.
									spec := self perform: predicateSelector withArguments: {data}.
									spec := spec
										dictoReplace:
											{('$subject' -> subject value).
											('$argument' -> argument value).
											('$ruleId' -> rule id).
											('$propertyId' -> relId).
											('$msgPass' -> msgPass).
											('$msgFail' -> msgFail)}.
									res := res , spec ].	"avoid duplicate predicate evaluations"
							processedPredicates add: relId ] ] ].
	^ res in DIPhpDependencies(DIAdapter)>>printRulesEntityRelationship:
	Receiver: a DIPhpDependencies
	Arguments and temporary variables: 
		someRules: 	a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalk...etc...
		processedPredicates: 	a Set()
		data: 	nil
		res: 	''
		rule: 	RuleResult cannot depend on DictoTalker
		predicateSelector: 	#dependOn:
		subjectElements: 	nil
		argumentElements: 	nil
		isPredicateInv: 	false
		isSubjectInv: 	false
	Receiver's instance variables: 
		output: 	''
		commandOutput: 	''
		NEWLINE: 	'
'
		rules: 	a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalker m...etc...
		varSynonyms: 	nil
		sessionId: 	'1424261181'
		TIMESTAMP: 	'1424261181'
		TOOLNAME: 	'DIPhpDependencies'
		PROJECTROOT: 	'/home/otruffer/DictoCLI/'
		PROJECTSRC: 	'./'
		PROJECTBIN: 	'./'
		RESULTFILE: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/meta/1424260924/...etc...
		TESTFILE: 	nil
		testInputFileExt: 	'.st'
		SYSTEM: 	SYSTEM


DICollectionRule(OrderedCollection)>>do:
	Receiver: a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalker must depend on Rule...etc...
	Arguments and temporary variables: 
		aBlock: 	printRulesEntityRelationship: someRules
	| res processedPredicates |
	r...etc...
		index: 	1
	Receiver's instance variables: 
		array: 	an Array(RuleResult cannot depend on DictoTalker DictoTalker must depend...etc...
		firstIndex: 	1
		lastIndex: 	3
		elements: 	nil
		elements: 	nil


DIPhpDependencies(DIAdapter)>>printRulesEntityRelationship:
	Receiver: a DIPhpDependencies
	Arguments and temporary variables: 
		res: 	''
		someRules: 	a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalk...etc...
		processedPredicates: 	a Set()
	Receiver's instance variables: 
		output: 	''
		commandOutput: 	''
		NEWLINE: 	'
'
		rules: 	a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalker m...etc...
		varSynonyms: 	nil
		sessionId: 	'1424261181'
		TIMESTAMP: 	'1424261181'
		TOOLNAME: 	'DIPhpDependencies'
		PROJECTROOT: 	'/home/otruffer/DictoCLI/'
		PROJECTSRC: 	'./'
		PROJECTBIN: 	'./'
		RESULTFILE: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/meta/1424260924/...etc...
		TESTFILE: 	nil
		testInputFileExt: 	'.st'
		SYSTEM: 	SYSTEM


DIPhpDependencies(DIAdapter)>>printRules
	Receiver: a DIPhpDependencies
	Arguments and temporary variables: 
		res: 	nil
		allRules: 	a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalke...etc...
	Receiver's instance variables: 
		output: 	''
		commandOutput: 	''
		NEWLINE: 	'
'
		rules: 	a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalker m...etc...
		varSynonyms: 	nil
		sessionId: 	'1424261181'
		TIMESTAMP: 	'1424261181'
		TOOLNAME: 	'DIPhpDependencies'
		PROJECTROOT: 	'/home/otruffer/DictoCLI/'
		PROJECTSRC: 	'./'
		PROJECTBIN: 	'./'
		RESULTFILE: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/meta/1424260924/...etc...
		TESTFILE: 	nil
		testInputFileExt: 	'.st'
		SYSTEM: 	SYSTEM


DIPhpDependencies>>testInput
	Receiver: a DIPhpDependencies
	Arguments and temporary variables: 
		strRules: 	nil
	Receiver's instance variables: 
		output: 	''
		commandOutput: 	''
		NEWLINE: 	'
'
		rules: 	a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalker m...etc...
		varSynonyms: 	nil
		sessionId: 	'1424261181'
		TIMESTAMP: 	'1424261181'
		TOOLNAME: 	'DIPhpDependencies'
		PROJECTROOT: 	'/home/otruffer/DictoCLI/'
		PROJECTSRC: 	'./'
		PROJECTBIN: 	'./'
		RESULTFILE: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/meta/1424260924/...etc...
		TESTFILE: 	nil
		testInputFileExt: 	'.st'
		SYSTEM: 	SYSTEM


DITestGroup>>build
	Receiver: a DITestGroup
	Arguments and temporary variables: 

	Receiver's instance variables: 
		rules: 	an OrderedCollection(RuleResult cannot depend on DictoTalker DictoTalker...etc...
		adapter: 	a DIPhpDependencies
		runCommandText: 	nil
		testSpecification: 	nil
		adapterID: 	'DIPhpDependencies'
		resultFile: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/meta/1424261181/...etc...
		specificationFile: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/meta/1424...etc...
		commandFile: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/meta/1424261181...etc...


[ :testGroup | testGroup build ] in DIDicto>>dictoBuild:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = ...etc...
		adapterTestGroups: 	a Dictionary(DIGrepFileContent->a DITestGroup DIJMeterLoadTe...etc...
		testGroup: 	a DITestGroup
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424261181'
		singleShotTask: 	false


Array(SequenceableCollection)>>do:
	Receiver: an Array(a DITestGroup a DITestGroup a DITestGroup a DITestGroup a DITestGroup)
	Arguments and temporary variables: 
		aBlock: 	[ :testGroup | testGroup build ]
		index: 	4
	Receiver's instance variables: 
an Array(a DITestGroup a DITestGroup a DITestGroup a DITestGroup a DITestGroup)

DIDicto>>dictoBuild:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = ...etc...
		adapterTestGroups: 	a Dictionary(DIGrepFileContent->a DITestGroup DIJMeterLoadTe...etc...
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424261181'
		singleShotTask: 	false


DIDicto>>dictoRun:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = ...etc...
		adapterTestGroups: 	nil
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424261181'
		singleShotTask: 	false


DIDicto>>dictoAll:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = ...etc...
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424261181'
		singleShotTask: 	false


[ DIDicto new dictoAll: input ] in DIWebServiceAPI>>getRun
	Receiver: a DIWebServiceAPI
	Arguments and temporary variables: 
		in: 	'/home/otruffer/dicto/bin/analysis/meta/dicto.rules'
		input: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = PhpCl...etc...
		rulesFailed: 	nil
		rulesTotal: 	nil
	Receiver's instance variables: 
		request: 	nil
		response: 	nil
		variables: 	nil
		delegate: 	nil
		principal: 	nil
		credentials: 	nil


BlockClosure>>on:do:
	Receiver: [ DIDicto new dictoAll: input ]
	Arguments and temporary variables: 
		exception: 	DIException
		handlerAction: 	[ :ex | ^ self error: ex description ]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	DIWebServiceAPI>>getRun
		startpc: 	138
		numArgs: 	0


DIWebServiceAPI>>getRun
	Receiver: a DIWebServiceAPI
	Arguments and temporary variables: 
		in: 	'/home/otruffer/dicto/bin/analysis/meta/dicto.rules'
		input: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = PhpCl...etc...
		rulesFailed: 	nil
		rulesTotal: 	nil
	Receiver's instance variables: 
		request: 	nil
		response: 	nil
		variables: 	nil
		delegate: 	nil
		principal: 	nil
		credentials: 	nil


DIWebServiceHandler>>post
	Receiver: a DIWebServiceHandler
	Arguments and temporary variables: 
		api: 	a DIWebServiceAPI
	Receiver's instance variables: 
		request: 	a ZnRequest(POST /meta/run)
		response: 	nil
		variables: 	an OrderedCollection('meta' 'run')
		delegate: 	a ZnJSONRestServerDelegate
		principal: 	nil
		credentials: 	nil
		dicto: 	a DIDicto


DIWebServiceHandler(ZnRestCall)>>execute
	Receiver: a DIWebServiceHandler
	Arguments and temporary variables: 

	Receiver's instance variables: 
		request: 	a ZnRequest(POST /meta/run)
		response: 	nil
		variables: 	an OrderedCollection('meta' 'run')
		delegate: 	a ZnJSONRestServerDelegate
		principal: 	nil
		credentials: 	nil
		dicto: 	a DIDicto


[ call execute ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


BlockClosure>>on:do:
	Receiver: [ call execute ]
	Arguments and temporary variables: 
		exception: 	ZnRestCallUnauthorized
		handlerAction: 	[ :exception | self unauthorized: exception request ]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
		startpc: 	38
		numArgs: 	0


ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


[ self execute: call ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /meta/run)
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


BlockClosure>>on:do:
	Receiver: [ self execute: call ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :exception | 
request server debugMode
	ifTrue: [ exception pa...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
		startpc: 	99
		numArgs: 	0


ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /meta/run)
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ :delegate | delegate handleRequest: request ] ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /meta/run)
		delegate: 	a ZnJSONRestServerDelegate
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateRequest:do:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /meta/run)
		block: 	[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ ...etc...
		authenticator: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /meta/run)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


[ self authenticateAndDelegateRequest: request ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /meta/run)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


BlockClosure>>on:do:
	Receiver: [ self authenticateAndDelegateRequest: request ]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :exception | 
self debugMode
	ifTrue: [ exception pass ]
	ifFa...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequ...etc...
		startpc: 	58
		numArgs: 	0


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /meta/run)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /meta/run)
		response: 	nil
		initialMilliseconds: 	5691301
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)



--- The full stack ---
NeoJSONReader(Object)>>doesNotUnderstand: #keys
Message>>sentTo:
NeoJSONReader(Object)>>doesNotUnderstand: #keys
Message>>sentTo:
NeoJSONReader(Object)>>doesNotUnderstand: #keys
Message>>sentTo:
NeoJSONReader(Object)>>doesNotUnderstand: #keys
DIVarPhpClass>>allElements
DIVarPhpClass(DIVar)>>elements
DISimpleRule>>subjectElements
printRulesEntityRelationship: someRules
	| res processedPredicates |
	res := ''.
	processedPredicates := Set new.
	someRules
		do: [ :rule | 
			| predicateSelector subjectElements argumentElements data isPredicateInv isSubjectInv |
			predicateSelector := (rule predicate nameNormalized , ':') asSymbol.
			isPredicateInv := rule hasPredicateInverted.
			isSubjectInv := rule hasSubjectInverted.
			subjectElements := rule subjectElements.
			argumentElements := rule argumentElements.
			subjectElements
				do: [ :subject | 
					argumentElements
						do: [ :argument | 
							| relId spec msgPass msgFail |
							relId := subject id , '-' , argument id.
							msgPass := subject id , '.' , rule predicate name , '(' , argument id , ')=True'.
							msgFail := subject id , '.' , rule predicate name , '(' , argument id , ')=False'.
							(processedPredicates includes: relId)
								ifFalse: [ 
									data := {(#subject -> subject value).
									(#argument -> argument value).
									(#ruleId -> rule id).
									(#propertyId -> relId).
									(#msgPass -> msgPass).
									(#msgFail -> msgFail)} asDictionary.
									spec := self perform: predicateSelector withArguments: {data}.
									spec := spec
										dictoReplace:
											{('$subject' -> subject value).
											('$argument' -> argument value).
											('$ruleId' -> rule id).
											('$propertyId' -> relId).
											('$msgPass' -> msgPass).
											('$msgFail' -> msgFail)}.
									res := res , spec ].	"avoid duplicate predicate evaluations"
							processedPredicates add: relId ] ] ].
	^ res in DIPhpDependencies(DIAdapter)>>printRulesEntityRelationship:
DICollectionRule(OrderedCollection)>>do:
DIPhpDependencies(DIAdapter)>>printRulesEntityRelationship:
DIPhpDependencies(DIAdapter)>>printRules
DIPhpDependencies>>testInput
DITestGroup>>build
[ :testGroup | testGroup build ] in DIDicto>>dictoBuild:
Array(SequenceableCollection)>>do:
DIDicto>>dictoBuild:
DIDicto>>dictoRun:
DIDicto>>dictoAll:
[ DIDicto new dictoAll: input ] in DIWebServiceAPI>>getRun
BlockClosure>>on:do:
DIWebServiceAPI>>getRun
DIWebServiceHandler>>post
DIWebServiceHandler(ZnRestCall)>>execute
[ call execute ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
BlockClosure>>on:do:
ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
[ self execute: call ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
BlockClosure>>on:do:
ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ :delegate | delegate handleRequest: request ] ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateRequest:do:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
[ self authenticateAndDelegateRequest: request ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
BlockClosure>>on:do:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequest:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeOneRequestResponseOn:
[ self executeOneRequestResponseOn: stream ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
[ 
p psValueAt: index put: anObject.
aBlock value ] in ZnCurrentServer(DynamicVariable)>>value:during:
BlockClosure>>ensure:
ZnCurrentServer(DynamicVariable)>>value:during:
ZnCurrentServer class(DynamicVariable class)>>value:during:
ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
[ self executeRequestResponseLoopOn: stream ] in [ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ] in [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
BlockClosure>>ensure:
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ] in [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
BlockClosure>>ifCurtailed:
[ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: NeoJSONReader>>keys
18 February 2015 1:07:17.502453 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
NBCogit NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
https://github.com/pharo-project/pharo-vm.git Commit: 4a0d556150d478ff2de3c9624d2f18e6eaa3fa5c Date: 2014-12-18 18:42:53 +0100 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14893

Image: Pharo3.0 [Latest update: #30863]

NeoJSONReader(Object)>>doesNotUnderstand: #keys
	Receiver: a NeoJSONReader
	Arguments and temporary variables: 
		aMessage: 	keys
		exception: 	MessageNotUnderstood: NeoJSONReader>>keys
		resumeValue: 	nil
	Receiver's instance variables: 
		mappings: 	nil
		readStream: 	a ReadStream
		stringStream: 	nil
		listClass: 	nil
		mapClass: 	nil
		propertyNamesAsSymbols: 	false


Message>>sentTo:
	Receiver: keys
	Arguments and temporary variables: 
		receiver: 	a NeoJSONReader
	Receiver's instance variables: 
		selector: 	#keys
		args: 	#()
		lookupClass: 	NeoJSONReader


NeoJSONReader(Object)>>doesNotUnderstand: #keys
	Receiver: a NeoJSONReader
	Arguments and temporary variables: 
		aMessage: 	keys
		exception: 	MessageNotUnderstood: NeoJSONReader>>keys
		resumeValue: 	MessageNotUnderstood: NeoJSONReader>>keys
	Receiver's instance variables: 
		mappings: 	nil
		readStream: 	a ReadStream
		stringStream: 	nil
		listClass: 	nil
		mapClass: 	nil
		propertyNamesAsSymbols: 	false


Message>>sentTo:
	Receiver: keys
	Arguments and temporary variables: 
		receiver: 	a NeoJSONReader
	Receiver's instance variables: 
		selector: 	#keys
		args: 	#()
		lookupClass: 	NeoJSONReader


NeoJSONReader(Object)>>doesNotUnderstand: #keys
	Receiver: a NeoJSONReader
	Arguments and temporary variables: 
		aMessage: 	keys
		exception: 	MessageNotUnderstood: NeoJSONReader>>keys
		resumeValue: 	MessageNotUnderstood: NeoJSONReader>>keys
	Receiver's instance variables: 
		mappings: 	nil
		readStream: 	a ReadStream
		stringStream: 	nil
		listClass: 	nil
		mapClass: 	nil
		propertyNamesAsSymbols: 	false


Message>>sentTo:
	Receiver: keys
	Arguments and temporary variables: 
		receiver: 	a NeoJSONReader
	Receiver's instance variables: 
		selector: 	#keys
		args: 	#()
		lookupClass: 	NeoJSONReader


NeoJSONReader(Object)>>doesNotUnderstand: #keys
	Receiver: a NeoJSONReader
	Arguments and temporary variables: 
		aMessage: 	keys
		exception: 	MessageNotUnderstood: NeoJSONReader>>keys
		resumeValue: 	MessageNotUnderstood: NeoJSONReader>>keys
	Receiver's instance variables: 
		mappings: 	nil
		readStream: 	a ReadStream
		stringStream: 	nil
		listClass: 	nil
		mapClass: 	nil
		propertyNamesAsSymbols: 	false


Message>>sentTo:
	Receiver: keys
	Arguments and temporary variables: 
		receiver: 	a NeoJSONReader
	Receiver's instance variables: 
		selector: 	#keys
		args: 	#()
		lookupClass: 	NeoJSONReader


NeoJSONReader(Object)>>doesNotUnderstand: #keys
	Receiver: a NeoJSONReader
	Arguments and temporary variables: 
		aMessage: 	keys
		exception: 	MessageNotUnderstood: NeoJSONReader>>keys
		resumeValue: 	MessageNotUnderstood: NeoJSONReader>>keys
	Receiver's instance variables: 
		mappings: 	nil
		readStream: 	a ReadStream
		stringStream: 	nil
		listClass: 	nil
		mapClass: 	nil
		propertyNamesAsSymbols: 	false


DIVarPhpClass>>allElements
	Receiver: RuleResult
	Arguments and temporary variables: 

	Receiver's instance variables: 
		isFirst: 	false
		dslText: 	'RuleResult=PhpClass with name:"Dicto\\RuleResult"'
		type: 	'PhpClass'
		id: 	1
		entity: 	nil
		name: 	'RuleResult'
		specifiers: 	an OrderedCollection(name=Dicto\\RuleResult)
		isInverted: 	false
		elements: 	a DICollectionVarElements()
		invertedElements: 	a DICollectionVarElements()


DIVarPhpClass(DIVar)>>elements
	Receiver: RuleResult
	Arguments and temporary variables: 
		valid: 	nil
	Receiver's instance variables: 
		isFirst: 	false
		dslText: 	'RuleResult=PhpClass with name:"Dicto\\RuleResult"'
		type: 	'PhpClass'
		id: 	1
		entity: 	nil
		name: 	'RuleResult'
		specifiers: 	an OrderedCollection(name=Dicto\\RuleResult)
		isInverted: 	false
		elements: 	a DICollectionVarElements()
		invertedElements: 	a DICollectionVarElements()


DISimpleRule>>subjectElements
	Receiver: RuleResult cannot depend on DictoTalker
	Arguments and temporary variables: 
		subjectElements: 	nil
	Receiver's instance variables: 
		isFirst: 	nil
		dslText: 	'RuleResult cannot depend on DictoTalker'
		type: 	#cannot
		id: 	1001
		entity: 	nil
		subjects: 	an Array(RuleResult)
		predicates: 	an Array(depend on DictoTalker)
		subRules: 	nil
		candidateAdapters: 	a SortedCollection(DIPhpDependencies)
		chosenAdapter: 	DIPhpDependencies
		hasFailed: 	false
		failureMessage: 	''
		failingPredicates: 	a Set()
		hasSubjectInverted: 	false
		hasPredicateInverted: 	false


printRulesEntityRelationship: someRules
	| res processedPredicates |
	res := ''.
	processedPredicates := Set new.
	someRules
		do: [ :rule | 
			| predicateSelector subjectElements argumentElements data isPredicateInv isSubjectInv |
			predicateSelector := (rule predicate nameNormalized , ':') asSymbol.
			isPredicateInv := rule hasPredicateInverted.
			isSubjectInv := rule hasSubjectInverted.
			subjectElements := rule subjectElements.
			argumentElements := rule argumentElements.
			subjectElements
				do: [ :subject | 
					argumentElements
						do: [ :argument | 
							| relId spec msgPass msgFail |
							relId := subject id , '-' , argument id.
							msgPass := subject id , '.' , rule predicate name , '(' , argument id , ')=True'.
							msgFail := subject id , '.' , rule predicate name , '(' , argument id , ')=False'.
							(processedPredicates includes: relId)
								ifFalse: [ 
									data := {(#subject -> subject value).
									(#argument -> argument value).
									(#ruleId -> rule id).
									(#propertyId -> relId).
									(#msgPass -> msgPass).
									(#msgFail -> msgFail)} asDictionary.
									spec := self perform: predicateSelector withArguments: {data}.
									spec := spec
										dictoReplace:
											{('$subject' -> subject value).
											('$argument' -> argument value).
											('$ruleId' -> rule id).
											('$propertyId' -> relId).
											('$msgPass' -> msgPass).
											('$msgFail' -> msgFail)}.
									res := res , spec ].	"avoid duplicate predicate evaluations"
							processedPredicates add: relId ] ] ].
	^ res in DIPhpDependencies(DIAdapter)>>printRulesEntityRelationship:
	Receiver: a DIPhpDependencies
	Arguments and temporary variables: 
		someRules: 	a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalk...etc...
		processedPredicates: 	a Set()
		data: 	nil
		res: 	''
		rule: 	RuleResult cannot depend on DictoTalker
		predicateSelector: 	#dependOn:
		subjectElements: 	nil
		argumentElements: 	nil
		isPredicateInv: 	false
		isSubjectInv: 	false
	Receiver's instance variables: 
		output: 	''
		commandOutput: 	''
		NEWLINE: 	'
'
		rules: 	a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalker m...etc...
		varSynonyms: 	nil
		sessionId: 	'1424261181'
		TIMESTAMP: 	'1424261181'
		TOOLNAME: 	'DIPhpDependencies'
		PROJECTROOT: 	'/home/otruffer/DictoCLI/'
		PROJECTSRC: 	'./'
		PROJECTBIN: 	'./'
		RESULTFILE: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/meta/1424260924/...etc...
		TESTFILE: 	nil
		testInputFileExt: 	'.st'
		SYSTEM: 	SYSTEM


DICollectionRule(OrderedCollection)>>do:
	Receiver: a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalker must depend on Rule...etc...
	Arguments and temporary variables: 
		aBlock: 	printRulesEntityRelationship: someRules
	| res processedPredicates |
	r...etc...
		index: 	1
	Receiver's instance variables: 
		array: 	an Array(RuleResult cannot depend on DictoTalker DictoTalker must depend...etc...
		firstIndex: 	1
		lastIndex: 	3
		elements: 	nil
		elements: 	nil


DIPhpDependencies(DIAdapter)>>printRulesEntityRelationship:
	Receiver: a DIPhpDependencies
	Arguments and temporary variables: 
		res: 	''
		someRules: 	a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalk...etc...
		processedPredicates: 	a Set()
	Receiver's instance variables: 
		output: 	''
		commandOutput: 	''
		NEWLINE: 	'
'
		rules: 	a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalker m...etc...
		varSynonyms: 	nil
		sessionId: 	'1424261181'
		TIMESTAMP: 	'1424261181'
		TOOLNAME: 	'DIPhpDependencies'
		PROJECTROOT: 	'/home/otruffer/DictoCLI/'
		PROJECTSRC: 	'./'
		PROJECTBIN: 	'./'
		RESULTFILE: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/meta/1424260924/...etc...
		TESTFILE: 	nil
		testInputFileExt: 	'.st'
		SYSTEM: 	SYSTEM


DIPhpDependencies(DIAdapter)>>printRules
	Receiver: a DIPhpDependencies
	Arguments and temporary variables: 
		res: 	nil
		allRules: 	a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalke...etc...
	Receiver's instance variables: 
		output: 	''
		commandOutput: 	''
		NEWLINE: 	'
'
		rules: 	a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalker m...etc...
		varSynonyms: 	nil
		sessionId: 	'1424261181'
		TIMESTAMP: 	'1424261181'
		TOOLNAME: 	'DIPhpDependencies'
		PROJECTROOT: 	'/home/otruffer/DictoCLI/'
		PROJECTSRC: 	'./'
		PROJECTBIN: 	'./'
		RESULTFILE: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/meta/1424260924/...etc...
		TESTFILE: 	nil
		testInputFileExt: 	'.st'
		SYSTEM: 	SYSTEM


DIPhpDependencies>>testInput
	Receiver: a DIPhpDependencies
	Arguments and temporary variables: 
		strRules: 	nil
	Receiver's instance variables: 
		output: 	''
		commandOutput: 	''
		NEWLINE: 	'
'
		rules: 	a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalker m...etc...
		varSynonyms: 	nil
		sessionId: 	'1424261181'
		TIMESTAMP: 	'1424261181'
		TOOLNAME: 	'DIPhpDependencies'
		PROJECTROOT: 	'/home/otruffer/DictoCLI/'
		PROJECTSRC: 	'./'
		PROJECTBIN: 	'./'
		RESULTFILE: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/meta/1424260924/...etc...
		TESTFILE: 	nil
		testInputFileExt: 	'.st'
		SYSTEM: 	SYSTEM


DITestGroup>>build
	Receiver: a DITestGroup
	Arguments and temporary variables: 

	Receiver's instance variables: 
		rules: 	an OrderedCollection(RuleResult cannot depend on DictoTalker DictoTalker...etc...
		adapter: 	a DIPhpDependencies
		runCommandText: 	nil
		testSpecification: 	nil
		adapterID: 	'DIPhpDependencies'
		resultFile: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/meta/1424261181/...etc...
		specificationFile: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/meta/1424...etc...
		commandFile: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/meta/1424261181...etc...


[ :testGroup | testGroup build ] in DIDicto>>dictoBuild:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = ...etc...
		adapterTestGroups: 	a Dictionary(DIGrepFileContent->a DITestGroup DIJMeterLoadTe...etc...
		testGroup: 	a DITestGroup
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424261181'
		singleShotTask: 	false


Array(SequenceableCollection)>>do:
	Receiver: an Array(a DITestGroup a DITestGroup a DITestGroup a DITestGroup a DITestGroup)
	Arguments and temporary variables: 
		aBlock: 	[ :testGroup | testGroup build ]
		index: 	4
	Receiver's instance variables: 
an Array(a DITestGroup a DITestGroup a DITestGroup a DITestGroup a DITestGroup)

DIDicto>>dictoBuild:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = ...etc...
		adapterTestGroups: 	a Dictionary(DIGrepFileContent->a DITestGroup DIJMeterLoadTe...etc...
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424261181'
		singleShotTask: 	false


DIDicto>>dictoRun:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = ...etc...
		adapterTestGroups: 	nil
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424261181'
		singleShotTask: 	false


DIDicto>>dictoAll:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = ...etc...
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424261181'
		singleShotTask: 	false


[ DIDicto new dictoAll: input ] in DIWebServiceAPI>>getRun
	Receiver: a DIWebServiceAPI
	Arguments and temporary variables: 
		in: 	'/home/otruffer/dicto/bin/analysis/meta/dicto.rules'
		input: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = PhpCl...etc...
		rulesFailed: 	nil
		rulesTotal: 	nil
	Receiver's instance variables: 
		request: 	nil
		response: 	nil
		variables: 	nil
		delegate: 	nil
		principal: 	nil
		credentials: 	nil


BlockClosure>>on:do:
	Receiver: [ DIDicto new dictoAll: input ]
	Arguments and temporary variables: 
		exception: 	DIException
		handlerAction: 	[ :ex | ^ self error: ex description ]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	DIWebServiceAPI>>getRun
		startpc: 	138
		numArgs: 	0


DIWebServiceAPI>>getRun
	Receiver: a DIWebServiceAPI
	Arguments and temporary variables: 
		in: 	'/home/otruffer/dicto/bin/analysis/meta/dicto.rules'
		input: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = PhpCl...etc...
		rulesFailed: 	nil
		rulesTotal: 	nil
	Receiver's instance variables: 
		request: 	nil
		response: 	nil
		variables: 	nil
		delegate: 	nil
		principal: 	nil
		credentials: 	nil


DIWebServiceHandler>>post
	Receiver: a DIWebServiceHandler
	Arguments and temporary variables: 
		api: 	a DIWebServiceAPI
	Receiver's instance variables: 
		request: 	a ZnRequest(POST /meta/run)
		response: 	nil
		variables: 	an OrderedCollection('meta' 'run')
		delegate: 	a ZnJSONRestServerDelegate
		principal: 	nil
		credentials: 	nil
		dicto: 	a DIDicto


DIWebServiceHandler(ZnRestCall)>>execute
	Receiver: a DIWebServiceHandler
	Arguments and temporary variables: 

	Receiver's instance variables: 
		request: 	a ZnRequest(POST /meta/run)
		response: 	nil
		variables: 	an OrderedCollection('meta' 'run')
		delegate: 	a ZnJSONRestServerDelegate
		principal: 	nil
		credentials: 	nil
		dicto: 	a DIDicto


[ call execute ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


BlockClosure>>on:do:
	Receiver: [ call execute ]
	Arguments and temporary variables: 
		exception: 	ZnRestCallUnauthorized
		handlerAction: 	[ :exception | self unauthorized: exception request ]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
		startpc: 	38
		numArgs: 	0


ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


[ self execute: call ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /meta/run)
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


BlockClosure>>on:do:
	Receiver: [ self execute: call ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :exception | 
request server debugMode
	ifTrue: [ exception pa...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
		startpc: 	99
		numArgs: 	0


ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /meta/run)
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ :delegate | delegate handleRequest: request ] ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /meta/run)
		delegate: 	a ZnJSONRestServerDelegate
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateRequest:do:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /meta/run)
		block: 	[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ ...etc...
		authenticator: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /meta/run)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


[ self authenticateAndDelegateRequest: request ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /meta/run)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


BlockClosure>>on:do:
	Receiver: [ self authenticateAndDelegateRequest: request ]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :exception | 
self debugMode
	ifTrue: [ exception pass ]
	ifFa...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequ...etc...
		startpc: 	58
		numArgs: 	0



--- The full stack ---
NeoJSONReader(Object)>>doesNotUnderstand: #keys
Message>>sentTo:
NeoJSONReader(Object)>>doesNotUnderstand: #keys
Message>>sentTo:
NeoJSONReader(Object)>>doesNotUnderstand: #keys
Message>>sentTo:
NeoJSONReader(Object)>>doesNotUnderstand: #keys
Message>>sentTo:
NeoJSONReader(Object)>>doesNotUnderstand: #keys
DIVarPhpClass>>allElements
DIVarPhpClass(DIVar)>>elements
DISimpleRule>>subjectElements
printRulesEntityRelationship: someRules
	| res processedPredicates |
	res := ''.
	processedPredicates := Set new.
	someRules
		do: [ :rule | 
			| predicateSelector subjectElements argumentElements data isPredicateInv isSubjectInv |
			predicateSelector := (rule predicate nameNormalized , ':') asSymbol.
			isPredicateInv := rule hasPredicateInverted.
			isSubjectInv := rule hasSubjectInverted.
			subjectElements := rule subjectElements.
			argumentElements := rule argumentElements.
			subjectElements
				do: [ :subject | 
					argumentElements
						do: [ :argument | 
							| relId spec msgPass msgFail |
							relId := subject id , '-' , argument id.
							msgPass := subject id , '.' , rule predicate name , '(' , argument id , ')=True'.
							msgFail := subject id , '.' , rule predicate name , '(' , argument id , ')=False'.
							(processedPredicates includes: relId)
								ifFalse: [ 
									data := {(#subject -> subject value).
									(#argument -> argument value).
									(#ruleId -> rule id).
									(#propertyId -> relId).
									(#msgPass -> msgPass).
									(#msgFail -> msgFail)} asDictionary.
									spec := self perform: predicateSelector withArguments: {data}.
									spec := spec
										dictoReplace:
											{('$subject' -> subject value).
											('$argument' -> argument value).
											('$ruleId' -> rule id).
											('$propertyId' -> relId).
											('$msgPass' -> msgPass).
											('$msgFail' -> msgFail)}.
									res := res , spec ].	"avoid duplicate predicate evaluations"
							processedPredicates add: relId ] ] ].
	^ res in DIPhpDependencies(DIAdapter)>>printRulesEntityRelationship:
DICollectionRule(OrderedCollection)>>do:
DIPhpDependencies(DIAdapter)>>printRulesEntityRelationship:
DIPhpDependencies(DIAdapter)>>printRules
DIPhpDependencies>>testInput
DITestGroup>>build
[ :testGroup | testGroup build ] in DIDicto>>dictoBuild:
Array(SequenceableCollection)>>do:
DIDicto>>dictoBuild:
DIDicto>>dictoRun:
DIDicto>>dictoAll:
[ DIDicto new dictoAll: input ] in DIWebServiceAPI>>getRun
BlockClosure>>on:do:
DIWebServiceAPI>>getRun
DIWebServiceHandler>>post
DIWebServiceHandler(ZnRestCall)>>execute
[ call execute ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
BlockClosure>>on:do:
ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
[ self execute: call ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
BlockClosure>>on:do:
ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ :delegate | delegate handleRequest: request ] ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateRequest:do:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
[ self authenticateAndDelegateRequest: request ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
BlockClosure>>on:do:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequest:
ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeOneRequestResponseOn:
[ self executeOneRequestResponseOn: stream ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
[ 
p psValueAt: index put: anObject.
aBlock value ] in ZnCurrentServer(DynamicVariable)>>value:during:
BlockClosure>>ensure:
ZnCurrentServer(DynamicVariable)>>value:during:
ZnCurrentServer class(DynamicVariable class)>>value:during:
ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
[ self executeRequestResponseLoopOn: stream ] in [ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ] in [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
BlockClosure>>ensure:
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ] in [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
BlockClosure>>ifCurtailed:
[ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: NeoJSONReader>>keys
18 February 2015 1:07:18.252464 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
NBCogit NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
https://github.com/pharo-project/pharo-vm.git Commit: 4a0d556150d478ff2de3c9624d2f18e6eaa3fa5c Date: 2014-12-18 18:42:53 +0100 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14893

Image: Pharo3.0 [Latest update: #30863]

NeoJSONReader(Object)>>doesNotUnderstand: #keys
	Receiver: a NeoJSONReader
	Arguments and temporary variables: 
		aMessage: 	keys
		exception: 	MessageNotUnderstood: NeoJSONReader>>keys
		resumeValue: 	nil
	Receiver's instance variables: 
		mappings: 	nil
		readStream: 	a ReadStream
		stringStream: 	nil
		listClass: 	nil
		mapClass: 	nil
		propertyNamesAsSymbols: 	false


Message>>sentTo:
	Receiver: keys
	Arguments and temporary variables: 
		receiver: 	a NeoJSONReader
	Receiver's instance variables: 
		selector: 	#keys
		args: 	#()
		lookupClass: 	NeoJSONReader


NeoJSONReader(Object)>>doesNotUnderstand: #keys
	Receiver: a NeoJSONReader
	Arguments and temporary variables: 
		aMessage: 	keys
		exception: 	MessageNotUnderstood: NeoJSONReader>>keys
		resumeValue: 	MessageNotUnderstood: NeoJSONReader>>keys
	Receiver's instance variables: 
		mappings: 	nil
		readStream: 	a ReadStream
		stringStream: 	nil
		listClass: 	nil
		mapClass: 	nil
		propertyNamesAsSymbols: 	false


Message>>sentTo:
	Receiver: keys
	Arguments and temporary variables: 
		receiver: 	a NeoJSONReader
	Receiver's instance variables: 
		selector: 	#keys
		args: 	#()
		lookupClass: 	NeoJSONReader


NeoJSONReader(Object)>>doesNotUnderstand: #keys
	Receiver: a NeoJSONReader
	Arguments and temporary variables: 
		aMessage: 	keys
		exception: 	MessageNotUnderstood: NeoJSONReader>>keys
		resumeValue: 	MessageNotUnderstood: NeoJSONReader>>keys
	Receiver's instance variables: 
		mappings: 	nil
		readStream: 	a ReadStream
		stringStream: 	nil
		listClass: 	nil
		mapClass: 	nil
		propertyNamesAsSymbols: 	false


Message>>sentTo:
	Receiver: keys
	Arguments and temporary variables: 
		receiver: 	a NeoJSONReader
	Receiver's instance variables: 
		selector: 	#keys
		args: 	#()
		lookupClass: 	NeoJSONReader


NeoJSONReader(Object)>>doesNotUnderstand: #keys
	Receiver: a NeoJSONReader
	Arguments and temporary variables: 
		aMessage: 	keys
		exception: 	MessageNotUnderstood: NeoJSONReader>>keys
		resumeValue: 	MessageNotUnderstood: NeoJSONReader>>keys
	Receiver's instance variables: 
		mappings: 	nil
		readStream: 	a ReadStream
		stringStream: 	nil
		listClass: 	nil
		mapClass: 	nil
		propertyNamesAsSymbols: 	false


Message>>sentTo:
	Receiver: keys
	Arguments and temporary variables: 
		receiver: 	a NeoJSONReader
	Receiver's instance variables: 
		selector: 	#keys
		args: 	#()
		lookupClass: 	NeoJSONReader


NeoJSONReader(Object)>>doesNotUnderstand: #keys
	Receiver: a NeoJSONReader
	Arguments and temporary variables: 
		aMessage: 	keys
		exception: 	MessageNotUnderstood: NeoJSONReader>>keys
		resumeValue: 	MessageNotUnderstood: NeoJSONReader>>keys
	Receiver's instance variables: 
		mappings: 	nil
		readStream: 	a ReadStream
		stringStream: 	nil
		listClass: 	nil
		mapClass: 	nil
		propertyNamesAsSymbols: 	false


Message>>sentTo:
	Receiver: keys
	Arguments and temporary variables: 
		receiver: 	a NeoJSONReader
	Receiver's instance variables: 
		selector: 	#keys
		args: 	#()
		lookupClass: 	NeoJSONReader


NeoJSONReader(Object)>>doesNotUnderstand: #keys
	Receiver: a NeoJSONReader
	Arguments and temporary variables: 
		aMessage: 	keys
		exception: 	MessageNotUnderstood: NeoJSONReader>>keys
		resumeValue: 	MessageNotUnderstood: NeoJSONReader>>keys
	Receiver's instance variables: 
		mappings: 	nil
		readStream: 	a ReadStream
		stringStream: 	nil
		listClass: 	nil
		mapClass: 	nil
		propertyNamesAsSymbols: 	false


DIVarPhpClass>>allElements
	Receiver: RuleResult
	Arguments and temporary variables: 

	Receiver's instance variables: 
		isFirst: 	false
		dslText: 	'RuleResult=PhpClass with name:"Dicto\\RuleResult"'
		type: 	'PhpClass'
		id: 	1
		entity: 	nil
		name: 	'RuleResult'
		specifiers: 	an OrderedCollection(name=Dicto\\RuleResult)
		isInverted: 	false
		elements: 	a DICollectionVarElements()
		invertedElements: 	a DICollectionVarElements()


DIVarPhpClass(DIVar)>>elements
	Receiver: RuleResult
	Arguments and temporary variables: 
		valid: 	nil
	Receiver's instance variables: 
		isFirst: 	false
		dslText: 	'RuleResult=PhpClass with name:"Dicto\\RuleResult"'
		type: 	'PhpClass'
		id: 	1
		entity: 	nil
		name: 	'RuleResult'
		specifiers: 	an OrderedCollection(name=Dicto\\RuleResult)
		isInverted: 	false
		elements: 	a DICollectionVarElements()
		invertedElements: 	a DICollectionVarElements()


DISimpleRule>>subjectElements
	Receiver: RuleResult cannot depend on DictoTalker
	Arguments and temporary variables: 
		subjectElements: 	nil
	Receiver's instance variables: 
		isFirst: 	nil
		dslText: 	'RuleResult cannot depend on DictoTalker'
		type: 	#cannot
		id: 	1001
		entity: 	nil
		subjects: 	an Array(RuleResult)
		predicates: 	an Array(depend on DictoTalker)
		subRules: 	nil
		candidateAdapters: 	a SortedCollection(DIPhpDependencies)
		chosenAdapter: 	DIPhpDependencies
		hasFailed: 	false
		failureMessage: 	''
		failingPredicates: 	a Set()
		hasSubjectInverted: 	false
		hasPredicateInverted: 	false


printRulesEntityRelationship: someRules
	| res processedPredicates |
	res := ''.
	processedPredicates := Set new.
	someRules
		do: [ :rule | 
			| predicateSelector subjectElements argumentElements data isPredicateInv isSubjectInv |
			predicateSelector := (rule predicate nameNormalized , ':') asSymbol.
			isPredicateInv := rule hasPredicateInverted.
			isSubjectInv := rule hasSubjectInverted.
			subjectElements := rule subjectElements.
			argumentElements := rule argumentElements.
			subjectElements
				do: [ :subject | 
					argumentElements
						do: [ :argument | 
							| relId spec msgPass msgFail |
							relId := subject id , '-' , argument id.
							msgPass := subject id , '.' , rule predicate name , '(' , argument id , ')=True'.
							msgFail := subject id , '.' , rule predicate name , '(' , argument id , ')=False'.
							(processedPredicates includes: relId)
								ifFalse: [ 
									data := {(#subject -> subject value).
									(#argument -> argument value).
									(#ruleId -> rule id).
									(#propertyId -> relId).
									(#msgPass -> msgPass).
									(#msgFail -> msgFail)} asDictionary.
									spec := self perform: predicateSelector withArguments: {data}.
									spec := spec
										dictoReplace:
											{('$subject' -> subject value).
											('$argument' -> argument value).
											('$ruleId' -> rule id).
											('$propertyId' -> relId).
											('$msgPass' -> msgPass).
											('$msgFail' -> msgFail)}.
									res := res , spec ].	"avoid duplicate predicate evaluations"
							processedPredicates add: relId ] ] ].
	^ res in DIPhpDependencies(DIAdapter)>>printRulesEntityRelationship:
	Receiver: a DIPhpDependencies
	Arguments and temporary variables: 
		someRules: 	a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalk...etc...
		processedPredicates: 	a Set()
		data: 	nil
		res: 	''
		rule: 	RuleResult cannot depend on DictoTalker
		predicateSelector: 	#dependOn:
		subjectElements: 	nil
		argumentElements: 	nil
		isPredicateInv: 	false
		isSubjectInv: 	false
	Receiver's instance variables: 
		output: 	''
		commandOutput: 	''
		NEWLINE: 	'
'
		rules: 	a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalker m...etc...
		varSynonyms: 	nil
		sessionId: 	'1424261181'
		TIMESTAMP: 	'1424261181'
		TOOLNAME: 	'DIPhpDependencies'
		PROJECTROOT: 	'/home/otruffer/DictoCLI/'
		PROJECTSRC: 	'./'
		PROJECTBIN: 	'./'
		RESULTFILE: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/meta/1424260924/...etc...
		TESTFILE: 	nil
		testInputFileExt: 	'.st'
		SYSTEM: 	SYSTEM


DICollectionRule(OrderedCollection)>>do:
	Receiver: a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalker must depend on Rule...etc...
	Arguments and temporary variables: 
		aBlock: 	printRulesEntityRelationship: someRules
	| res processedPredicates |
	r...etc...
		index: 	1
	Receiver's instance variables: 
		array: 	an Array(RuleResult cannot depend on DictoTalker DictoTalker must depend...etc...
		firstIndex: 	1
		lastIndex: 	3
		elements: 	nil
		elements: 	nil


DIPhpDependencies(DIAdapter)>>printRulesEntityRelationship:
	Receiver: a DIPhpDependencies
	Arguments and temporary variables: 
		res: 	''
		someRules: 	a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalk...etc...
		processedPredicates: 	a Set()
	Receiver's instance variables: 
		output: 	''
		commandOutput: 	''
		NEWLINE: 	'
'
		rules: 	a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalker m...etc...
		varSynonyms: 	nil
		sessionId: 	'1424261181'
		TIMESTAMP: 	'1424261181'
		TOOLNAME: 	'DIPhpDependencies'
		PROJECTROOT: 	'/home/otruffer/DictoCLI/'
		PROJECTSRC: 	'./'
		PROJECTBIN: 	'./'
		RESULTFILE: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/meta/1424260924/...etc...
		TESTFILE: 	nil
		testInputFileExt: 	'.st'
		SYSTEM: 	SYSTEM


DIPhpDependencies(DIAdapter)>>printRules
	Receiver: a DIPhpDependencies
	Arguments and temporary variables: 
		res: 	nil
		allRules: 	a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalke...etc...
	Receiver's instance variables: 
		output: 	''
		commandOutput: 	''
		NEWLINE: 	'
'
		rules: 	a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalker m...etc...
		varSynonyms: 	nil
		sessionId: 	'1424261181'
		TIMESTAMP: 	'1424261181'
		TOOLNAME: 	'DIPhpDependencies'
		PROJECTROOT: 	'/home/otruffer/DictoCLI/'
		PROJECTSRC: 	'./'
		PROJECTBIN: 	'./'
		RESULTFILE: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/meta/1424260924/...etc...
		TESTFILE: 	nil
		testInputFileExt: 	'.st'
		SYSTEM: 	SYSTEM


DIPhpDependencies>>testInput
	Receiver: a DIPhpDependencies
	Arguments and temporary variables: 
		strRules: 	nil
	Receiver's instance variables: 
		output: 	''
		commandOutput: 	''
		NEWLINE: 	'
'
		rules: 	a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalker m...etc...
		varSynonyms: 	nil
		sessionId: 	'1424261181'
		TIMESTAMP: 	'1424261181'
		TOOLNAME: 	'DIPhpDependencies'
		PROJECTROOT: 	'/home/otruffer/DictoCLI/'
		PROJECTSRC: 	'./'
		PROJECTBIN: 	'./'
		RESULTFILE: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/meta/1424260924/...etc...
		TESTFILE: 	nil
		testInputFileExt: 	'.st'
		SYSTEM: 	SYSTEM


DITestGroup>>build
	Receiver: a DITestGroup
	Arguments and temporary variables: 

	Receiver's instance variables: 
		rules: 	an OrderedCollection(RuleResult cannot depend on DictoTalker DictoTalker...etc...
		adapter: 	a DIPhpDependencies
		runCommandText: 	nil
		testSpecification: 	nil
		adapterID: 	'DIPhpDependencies'
		resultFile: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/meta/1424261181/...etc...
		specificationFile: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/meta/1424...etc...
		commandFile: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/meta/1424261181...etc...


[ :testGroup | testGroup build ] in DIDicto>>dictoBuild:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = ...etc...
		adapterTestGroups: 	a Dictionary(DIGrepFileContent->a DITestGroup DIJMeterLoadTe...etc...
		testGroup: 	a DITestGroup
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424261181'
		singleShotTask: 	false


Array(SequenceableCollection)>>do:
	Receiver: an Array(a DITestGroup a DITestGroup a DITestGroup a DITestGroup a DITestGroup)
	Arguments and temporary variables: 
		aBlock: 	[ :testGroup | testGroup build ]
		index: 	4
	Receiver's instance variables: 
an Array(a DITestGroup a DITestGroup a DITestGroup a DITestGroup a DITestGroup)

DIDicto>>dictoBuild:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = ...etc...
		adapterTestGroups: 	a Dictionary(DIGrepFileContent->a DITestGroup DIJMeterLoadTe...etc...
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424261181'
		singleShotTask: 	false


DIDicto>>dictoRun:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = ...etc...
		adapterTestGroups: 	nil
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424261181'
		singleShotTask: 	false


DIDicto>>dictoAll:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = ...etc...
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424261181'
		singleShotTask: 	false


[ DIDicto new dictoAll: input ] in DIWebServiceAPI>>getRun
	Receiver: a DIWebServiceAPI
	Arguments and temporary variables: 
		in: 	'/home/otruffer/dicto/bin/analysis/meta/dicto.rules'
		input: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = PhpCl...etc...
		rulesFailed: 	nil
		rulesTotal: 	nil
	Receiver's instance variables: 
		request: 	nil
		response: 	nil
		variables: 	nil
		delegate: 	nil
		principal: 	nil
		credentials: 	nil


BlockClosure>>on:do:
	Receiver: [ DIDicto new dictoAll: input ]
	Arguments and temporary variables: 
		exception: 	DIException
		handlerAction: 	[ :ex | ^ self error: ex description ]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	DIWebServiceAPI>>getRun
		startpc: 	138
		numArgs: 	0


DIWebServiceAPI>>getRun
	Receiver: a DIWebServiceAPI
	Arguments and temporary variables: 
		in: 	'/home/otruffer/dicto/bin/analysis/meta/dicto.rules'
		input: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = PhpCl...etc...
		rulesFailed: 	nil
		rulesTotal: 	nil
	Receiver's instance variables: 
		request: 	nil
		response: 	nil
		variables: 	nil
		delegate: 	nil
		principal: 	nil
		credentials: 	nil


DIWebServiceHandler>>post
	Receiver: a DIWebServiceHandler
	Arguments and temporary variables: 
		api: 	a DIWebServiceAPI
	Receiver's instance variables: 
		request: 	a ZnRequest(POST /meta/run)
		response: 	nil
		variables: 	an OrderedCollection('meta' 'run')
		delegate: 	a ZnJSONRestServerDelegate
		principal: 	nil
		credentials: 	nil
		dicto: 	a DIDicto


DIWebServiceHandler(ZnRestCall)>>execute
	Receiver: a DIWebServiceHandler
	Arguments and temporary variables: 

	Receiver's instance variables: 
		request: 	a ZnRequest(POST /meta/run)
		response: 	nil
		variables: 	an OrderedCollection('meta' 'run')
		delegate: 	a ZnJSONRestServerDelegate
		principal: 	nil
		credentials: 	nil
		dicto: 	a DIDicto


[ call execute ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


BlockClosure>>on:do:
	Receiver: [ call execute ]
	Arguments and temporary variables: 
		exception: 	ZnRestCallUnauthorized
		handlerAction: 	[ :exception | self unauthorized: exception request ]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
		startpc: 	38
		numArgs: 	0


ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


[ self execute: call ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /meta/run)
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


BlockClosure>>on:do:
	Receiver: [ self execute: call ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :exception | 
request server debugMode
	ifTrue: [ exception pa...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
		startpc: 	99
		numArgs: 	0


ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /meta/run)
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ :delegate | delegate handleRequest: request ] ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /meta/run)
		delegate: 	a ZnJSONRestServerDelegate
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateRequest:do:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /meta/run)
		block: 	[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ ...etc...
		authenticator: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /meta/run)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)



--- The full stack ---
NeoJSONReader(Object)>>doesNotUnderstand: #keys
Message>>sentTo:
NeoJSONReader(Object)>>doesNotUnderstand: #keys
Message>>sentTo:
NeoJSONReader(Object)>>doesNotUnderstand: #keys
Message>>sentTo:
NeoJSONReader(Object)>>doesNotUnderstand: #keys
Message>>sentTo:
NeoJSONReader(Object)>>doesNotUnderstand: #keys
Message>>sentTo:
NeoJSONReader(Object)>>doesNotUnderstand: #keys
DIVarPhpClass>>allElements
DIVarPhpClass(DIVar)>>elements
DISimpleRule>>subjectElements
printRulesEntityRelationship: someRules
	| res processedPredicates |
	res := ''.
	processedPredicates := Set new.
	someRules
		do: [ :rule | 
			| predicateSelector subjectElements argumentElements data isPredicateInv isSubjectInv |
			predicateSelector := (rule predicate nameNormalized , ':') asSymbol.
			isPredicateInv := rule hasPredicateInverted.
			isSubjectInv := rule hasSubjectInverted.
			subjectElements := rule subjectElements.
			argumentElements := rule argumentElements.
			subjectElements
				do: [ :subject | 
					argumentElements
						do: [ :argument | 
							| relId spec msgPass msgFail |
							relId := subject id , '-' , argument id.
							msgPass := subject id , '.' , rule predicate name , '(' , argument id , ')=True'.
							msgFail := subject id , '.' , rule predicate name , '(' , argument id , ')=False'.
							(processedPredicates includes: relId)
								ifFalse: [ 
									data := {(#subject -> subject value).
									(#argument -> argument value).
									(#ruleId -> rule id).
									(#propertyId -> relId).
									(#msgPass -> msgPass).
									(#msgFail -> msgFail)} asDictionary.
									spec := self perform: predicateSelector withArguments: {data}.
									spec := spec
										dictoReplace:
											{('$subject' -> subject value).
											('$argument' -> argument value).
											('$ruleId' -> rule id).
											('$propertyId' -> relId).
											('$msgPass' -> msgPass).
											('$msgFail' -> msgFail)}.
									res := res , spec ].	"avoid duplicate predicate evaluations"
							processedPredicates add: relId ] ] ].
	^ res in DIPhpDependencies(DIAdapter)>>printRulesEntityRelationship:
DICollectionRule(OrderedCollection)>>do:
DIPhpDependencies(DIAdapter)>>printRulesEntityRelationship:
DIPhpDependencies(DIAdapter)>>printRules
DIPhpDependencies>>testInput
DITestGroup>>build
[ :testGroup | testGroup build ] in DIDicto>>dictoBuild:
Array(SequenceableCollection)>>do:
DIDicto>>dictoBuild:
DIDicto>>dictoRun:
DIDicto>>dictoAll:
[ DIDicto new dictoAll: input ] in DIWebServiceAPI>>getRun
BlockClosure>>on:do:
DIWebServiceAPI>>getRun
DIWebServiceHandler>>post
DIWebServiceHandler(ZnRestCall)>>execute
[ call execute ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
BlockClosure>>on:do:
ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
[ self execute: call ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
BlockClosure>>on:do:
ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ :delegate | delegate handleRequest: request ] ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateRequest:do:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ self authenticateAndDelegateRequest: request ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
BlockClosure>>on:do:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequest:
ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeOneRequestResponseOn:
[ self executeOneRequestResponseOn: stream ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
[ 
p psValueAt: index put: anObject.
aBlock value ] in ZnCurrentServer(DynamicVariable)>>value:during:
BlockClosure>>ensure:
ZnCurrentServer(DynamicVariable)>>value:during:
ZnCurrentServer class(DynamicVariable class)>>value:during:
ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
[ self executeRequestResponseLoopOn: stream ] in [ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ] in [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
BlockClosure>>ensure:
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ] in [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
BlockClosure>>ifCurtailed:
[ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
KeyNotFound: key #cause not found in Dictionary
18 February 2015 1:12:16.064903 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
NBCogit NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
https://github.com/pharo-project/pharo-vm.git Commit: 4a0d556150d478ff2de3c9624d2f18e6eaa3fa5c Date: 2014-12-18 18:42:53 +0100 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14893

Image: Pharo3.0 [Latest update: #30863]

Dictionary>>errorKeyNotFound:
	Receiver: a Dictionary()
	Arguments and temporary variables: 
		aKey: 	#cause
	Receiver's instance variables: 
		tally: 	0
		array: 	#(nil nil nil nil nil)


[ self errorKeyNotFound: key ] in Dictionary>>at:
	Receiver: a Dictionary()
	Arguments and temporary variables: 
		key: 	#cause
	Receiver's instance variables: 
		tally: 	0
		array: 	#(nil nil nil nil nil)


Dictionary>>at:ifAbsent:
	Receiver: a Dictionary()
	Arguments and temporary variables: 
		key: 	#cause
		aBlock: 	[ self errorKeyNotFound: key ]
	Receiver's instance variables: 
		tally: 	0
		array: 	#(nil nil nil nil nil)


Dictionary>>at:
	Receiver: a Dictionary()
	Arguments and temporary variables: 
		key: 	#cause
	Receiver's instance variables: 
		tally: 	0
		array: 	#(nil nil nil nil nil)


[ :fp | 
element := Dictionary new.
(element at: #cause) put: fp asString.
fp fix = ''
	ifFalse: [ (element at: #fix) put: fp fix ].
fp details = ''
	ifFalse: [ (element at: #details) put: fp details ].
errors add: element ] in DIXMLToStringExporter(DIOutputGenerator)>>_subruleElements:
	Receiver: a DIXMLToStringExporter
	Arguments and temporary variables: 
		subrule: 	RuleResult cannot depend on DictoTalker
		errors: 	an OrderedCollection()
		element: 	a Dictionary()
		fp: 	Dicto\\RuleResult dependOn Dicto\\DictoTalker = True
	Receiver's instance variables: 
a DIXMLToStringExporter

Set>>do:
	Receiver: a Set(Dicto\\RuleResult dependOn Dicto\\DictoTalker = True)
	Arguments and temporary variables: 
		aBlock: 	[ :fp | 
element := Dictionary new.
(element at: #cause) put: fp asStri...etc...
		index: 	5
		each: 	Dicto\\RuleResult dependOn Dicto\\DictoTalker = True
	Receiver's instance variables: 
		tally: 	1
		array: 	an Array(nil nil nil nil Dicto\\RuleResult dependOn Dicto\\DictoTalker =...etc...


DIXMLToStringExporter(DIOutputGenerator)>>_subruleElements:
	Receiver: a DIXMLToStringExporter
	Arguments and temporary variables: 
		element: 	a Dictionary()
		subrule: 	RuleResult cannot depend on DictoTalker
		errors: 	an OrderedCollection()
	Receiver's instance variables: 
a DIXMLToStringExporter

DIXMLToStringExporter>>_printError:
	Receiver: a DIXMLToStringExporter
	Arguments and temporary variables: 
		out: 	''
		subrule: 	RuleResult cannot depend on DictoTalker
		elements: 	nil
	Receiver's instance variables: 
a DIXMLToStringExporter

[ :subrule | 
failed := subrule hasFailed asString.
out := out , '<subrule id="' , subrule id asString , '" failed="' , failed , '" value="' , subrule asStringEscaped
	, '" testedBy="' , subrule chosenAdapter asString , '">' , (self _printError: subrule) , '</subrule>' ] in [ :rule | 
failed := rule hasFailed asString.
out := out , '<rule id="' , rule id asString , '" failed="' , failed , '" value="' , rule asStringEscaped , '">'.
rule subRules
	do: [ :subrule | 
		failed := subrule hasFailed asString.
		out := out , '<subrule id="' , subrule id asString , '" failed="' , failed , '" value="' , subrule asStringEscaped
			, '" testedBy="' , subrule chosenAdapter asString , '">' , (self _printError: subrule) , '</subrule>' ].
out := out , '</rule>' ] in DIXMLToStringExporter>>export:to:
	Receiver: a DIXMLToStringExporter
	Arguments and temporary variables: 
		testSuites: 	a Dictionary(DIGrepFileContent->a DITestGroup DIJMeterLoadTest->a D...etc...
		anXMLFile: 	''
		analysisID: 	'1424261522'
		rule: 	RuleResult cannot depend on DictoTalker
		failed: 	'true'
		out: 	'<rule id="1" failed="true" value="RuleResult cannot depend on DictoTalker...etc...
		subrule: 	RuleResult cannot depend on DictoTalker
	Receiver's instance variables: 
a DIXMLToStringExporter

OrderedCollection>>do:
	Receiver: an OrderedCollection(RuleResult cannot depend on DictoTalker)
	Arguments and temporary variables: 
		aBlock: 	[ :subrule | 
failed := subrule hasFailed asString.
out := out , '<subr...etc...
		index: 	1
	Receiver's instance variables: 
		array: 	an Array(RuleResult cannot depend on DictoTalker nil nil nil nil nil nil...etc...
		firstIndex: 	1
		lastIndex: 	1


[ :rule | 
failed := rule hasFailed asString.
out := out , '<rule id="' , rule id asString , '" failed="' , failed , '" value="' , rule asStringEscaped , '">'.
rule subRules
	do: [ :subrule | 
		failed := subrule hasFailed asString.
		out := out , '<subrule id="' , subrule id asString , '" failed="' , failed , '" value="' , subrule asStringEscaped
			, '" testedBy="' , subrule chosenAdapter asString , '">' , (self _printError: subrule) , '</subrule>' ].
out := out , '</rule>' ] in DIXMLToStringExporter>>export:to:
	Receiver: a DIXMLToStringExporter
	Arguments and temporary variables: 
		testSuites: 	a Dictionary(DIGrepFileContent->a DITestGroup DIJMeterLoadTest->a D...etc...
		anXMLFile: 	''
		analysisID: 	'1424261522'
		failed: 	'true'
		out: 	'<rule id="1" failed="true" value="RuleResult cannot depend on DictoTalker...etc...
		rule: 	RuleResult cannot depend on DictoTalker
	Receiver's instance variables: 
a DIXMLToStringExporter

DICollectionRule(OrderedCollection)>>do:
	Receiver: a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalker must depend on Rule...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :rule | 
failed := rule hasFailed asString.
out := out , '<rule id="'...etc...
		index: 	1
	Receiver's instance variables: 
		array: 	an Array(RuleResult cannot depend on DictoTalker DictoTalker must depend...etc...
		firstIndex: 	1
		lastIndex: 	3
		elements: 	nil
		elements: 	nil


DIXMLToStringExporter>>export:to:
	Receiver: a DIXMLToStringExporter
	Arguments and temporary variables: 
		failed: 	'true'
		out: 	'<rule id="1" failed="true" value="RuleResult cannot depend on DictoTalker...etc...
		testSuites: 	a Dictionary(DIGrepFileContent->a DITestGroup DIJMeterLoadTest->a D...etc...
		anXMLFile: 	''
		analysisID: 	'1424261522'
	Receiver's instance variables: 
a DIXMLToStringExporter

DIXMLExporter>>export:to:
	Receiver: a DIXMLExporter
	Arguments and temporary variables: 
		testSuites: 	a Dictionary(DIGrepFileContent->a DITestGroup DIJMeterLoadTest->a D...etc...
		anXMLFile: 	'/home/otruffer/dicto/bin/analysis/meta/results.xml'
		out: 	nil
	Receiver's instance variables: 
a DIXMLExporter

DIDicto>>_exportTests:to:withExporter:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		testSuites: 	a Dictionary(DIGrepFileContent->a DITestGroup DIJMeterLoadTest->a D...etc...
		aFile: 	nil
		anExporterClass: 	DIXMLExporter
		ex: 	a DIXMLExporter
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424261522'
		singleShotTask: 	false


DIDicto>>dictoCheck:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = ...etc...
		adapterTestGroups: 	a Dictionary(DIGrepFileContent->a DITestGroup DIJMeterLoadTe...etc...
		exportFormat: 	nil
		xml: 	nil
		json: 	nil
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424261522'
		singleShotTask: 	false


DIDicto>>dictoAll:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = ...etc...
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424261522'
		singleShotTask: 	false


[ DIDicto new dictoAll: input ] in DIWebServiceAPI>>getRun
	Receiver: a DIWebServiceAPI
	Arguments and temporary variables: 
		in: 	'/home/otruffer/dicto/bin/analysis/meta/dicto.rules'
		input: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = PhpCl...etc...
		rulesFailed: 	nil
		rulesTotal: 	nil
	Receiver's instance variables: 
		request: 	nil
		response: 	nil
		variables: 	nil
		delegate: 	nil
		principal: 	nil
		credentials: 	nil


BlockClosure>>on:do:
	Receiver: [ DIDicto new dictoAll: input ]
	Arguments and temporary variables: 
		exception: 	DIException
		handlerAction: 	[ :ex | ^ self error: ex description ]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	DIWebServiceAPI>>getRun
		startpc: 	138
		numArgs: 	0


DIWebServiceAPI>>getRun
	Receiver: a DIWebServiceAPI
	Arguments and temporary variables: 
		in: 	'/home/otruffer/dicto/bin/analysis/meta/dicto.rules'
		input: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = PhpCl...etc...
		rulesFailed: 	nil
		rulesTotal: 	nil
	Receiver's instance variables: 
		request: 	nil
		response: 	nil
		variables: 	nil
		delegate: 	nil
		principal: 	nil
		credentials: 	nil


DIWebServiceHandler>>post
	Receiver: a DIWebServiceHandler
	Arguments and temporary variables: 
		api: 	a DIWebServiceAPI
	Receiver's instance variables: 
		request: 	a ZnRequest(POST /meta/run)
		response: 	nil
		variables: 	an OrderedCollection('meta' 'run')
		delegate: 	a ZnJSONRestServerDelegate
		principal: 	nil
		credentials: 	nil
		dicto: 	a DIDicto


DIWebServiceHandler(ZnRestCall)>>execute
	Receiver: a DIWebServiceHandler
	Arguments and temporary variables: 

	Receiver's instance variables: 
		request: 	a ZnRequest(POST /meta/run)
		response: 	nil
		variables: 	an OrderedCollection('meta' 'run')
		delegate: 	a ZnJSONRestServerDelegate
		principal: 	nil
		credentials: 	nil
		dicto: 	a DIDicto


[ call execute ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


BlockClosure>>on:do:
	Receiver: [ call execute ]
	Arguments and temporary variables: 
		exception: 	ZnRestCallUnauthorized
		handlerAction: 	[ :exception | self unauthorized: exception request ]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
		startpc: 	38
		numArgs: 	0


ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


[ self execute: call ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /meta/run)
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


BlockClosure>>on:do:
	Receiver: [ self execute: call ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :exception | 
request server debugMode
	ifTrue: [ exception pa...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
		startpc: 	99
		numArgs: 	0


ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /meta/run)
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ :delegate | delegate handleRequest: request ] ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /meta/run)
		delegate: 	a ZnJSONRestServerDelegate
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateRequest:do:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /meta/run)
		block: 	[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ ...etc...
		authenticator: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /meta/run)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


[ self authenticateAndDelegateRequest: request ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /meta/run)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


BlockClosure>>on:do:
	Receiver: [ self authenticateAndDelegateRequest: request ]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :exception | 
self debugMode
	ifTrue: [ exception pass ]
	ifFa...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequ...etc...
		startpc: 	58
		numArgs: 	0


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /meta/run)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /meta/run)
		response: 	nil
		initialMilliseconds: 	6032173
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeOneRequestResponseOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		stream: 	a ZdcSocketStream
		request: 	a ZnRequest(POST /meta/run)
		response: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


[ self executeOneRequestResponseOn: stream ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		stream: 	a ZdcSocketStream
		request: 	nil
		response: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


[ 
p psValueAt: index put: anObject.
aBlock value ] in ZnCurrentServer(DynamicVariable)>>value:during:
	Receiver: a ZnCurrentServer
	Arguments and temporary variables: 
		anObject: 	a ZnManagingMultiThreadedServer(running 8010)
		aBlock: 	[ self executeOneRequestResponseOn: stream ]
		p: 	a Process in nil
		oldValue: 	nil
	Receiver's instance variables: 
		index: 	5


BlockClosure>>ensure:
	Receiver: [ 
p psValueAt: index put: anObject.
aBlock value ]
	Arguments and temporary variables: 
		aBlock: 	[ p psValueAt: index put: oldValue ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ZnCurrentServer(DynamicVariable)>>value:during:
		startpc: 	62
		numArgs: 	0



--- The full stack ---
Dictionary>>errorKeyNotFound:
[ self errorKeyNotFound: key ] in Dictionary>>at:
Dictionary>>at:ifAbsent:
Dictionary>>at:
[ :fp | 
element := Dictionary new.
(element at: #cause) put: fp asString.
fp fix = ''
	ifFalse: [ (element at: #fix) put: fp fix ].
fp details = ''
	ifFalse: [ (element at: #details) put: fp details ].
errors add: element ] in DIXMLToStringExporter(DIOutputGenerator)>>_subruleElements:
Set>>do:
DIXMLToStringExporter(DIOutputGenerator)>>_subruleElements:
DIXMLToStringExporter>>_printError:
[ :subrule | 
failed := subrule hasFailed asString.
out := out , '<subrule id="' , subrule id asString , '" failed="' , failed , '" value="' , subrule asStringEscaped
	, '" testedBy="' , subrule chosenAdapter asString , '">' , (self _printError: subrule) , '</subrule>' ] in [ :rule | 
failed := rule hasFailed asString.
out := out , '<rule id="' , rule id asString , '" failed="' , failed , '" value="' , rule asStringEscaped , '">'.
rule subRules
	do: [ :subrule | 
		failed := subrule hasFailed asString.
		out := out , '<subrule id="' , subrule id asString , '" failed="' , failed , '" value="' , subrule asStringEscaped
			, '" testedBy="' , subrule chosenAdapter asString , '">' , (self _printError: subrule) , '</subrule>' ].
out := out , '</rule>' ] in DIXMLToStringExporter>>export:to:
OrderedCollection>>do:
[ :rule | 
failed := rule hasFailed asString.
out := out , '<rule id="' , rule id asString , '" failed="' , failed , '" value="' , rule asStringEscaped , '">'.
rule subRules
	do: [ :subrule | 
		failed := subrule hasFailed asString.
		out := out , '<subrule id="' , subrule id asString , '" failed="' , failed , '" value="' , subrule asStringEscaped
			, '" testedBy="' , subrule chosenAdapter asString , '">' , (self _printError: subrule) , '</subrule>' ].
out := out , '</rule>' ] in DIXMLToStringExporter>>export:to:
DICollectionRule(OrderedCollection)>>do:
DIXMLToStringExporter>>export:to:
DIXMLExporter>>export:to:
DIDicto>>_exportTests:to:withExporter:
DIDicto>>dictoCheck:
DIDicto>>dictoAll:
[ DIDicto new dictoAll: input ] in DIWebServiceAPI>>getRun
BlockClosure>>on:do:
DIWebServiceAPI>>getRun
DIWebServiceHandler>>post
DIWebServiceHandler(ZnRestCall)>>execute
[ call execute ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
BlockClosure>>on:do:
ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
[ self execute: call ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
BlockClosure>>on:do:
ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ :delegate | delegate handleRequest: request ] ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateRequest:do:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
[ self authenticateAndDelegateRequest: request ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
BlockClosure>>on:do:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequest:
ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeOneRequestResponseOn:
[ self executeOneRequestResponseOn: stream ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
[ 
p psValueAt: index put: anObject.
aBlock value ] in ZnCurrentServer(DynamicVariable)>>value:during:
BlockClosure>>ensure:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
ZnCurrentServer(DynamicVariable)>>value:during:
ZnCurrentServer class(DynamicVariable class)>>value:during:
ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
[ self executeRequestResponseLoopOn: stream ] in [ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ] in [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
BlockClosure>>ensure:
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ] in [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
BlockClosure>>ifCurtailed:
[ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Error: only integers should be used as indices
18 February 2015 1:15:25.881394 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
NBCogit NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
https://github.com/pharo-project/pharo-vm.git Commit: 4a0d556150d478ff2de3c9624d2f18e6eaa3fa5c Date: 2014-12-18 18:42:53 +0100 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14893

Image: Pharo3.0 [Latest update: #30863]

Array(Object)>>error:
	Receiver: #(nil nil nil nil nil)
	Arguments and temporary variables: 
		aString: 	'only integers should be used as indices'
	Receiver's instance variables: 
#(nil nil nil nil nil)

Array(Object)>>errorNonIntegerIndex
	Receiver: #(nil nil nil nil nil)
	Arguments and temporary variables: 

	Receiver's instance variables: 
#(nil nil nil nil nil)

Array(Object)>>at:put:
	Receiver: #(nil nil nil nil nil)
	Arguments and temporary variables: 
		index: 	#cause
		value: 	'Dicto\\RuleResult dependOn Dicto\\DictoTalker = True'
	Receiver's instance variables: 
#(nil nil nil nil nil)

Dictionary(HashedCollection)>>atNewIndex:put:
	Receiver: a Dictionary()
	Arguments and temporary variables: 
		index: 	#cause
		anObject: 	'Dicto\\RuleResult dependOn Dicto\\DictoTalker = True'
	Receiver's instance variables: 
		tally: 	0
		array: 	#(nil nil nil nil nil)


[ :fp | 
element := Dictionary new.
element atNewIndex: #cause put: fp asString.
fp fix = ''
	ifFalse: [ (element atNewIndex: #fix) put: fp fix ].
fp details = ''
	ifFalse: [ (element atNewIndex: #details) put: fp details ].
errors add: element ] in DIXMLToStringExporter(DIOutputGenerator)>>_subruleElements:
	Receiver: a DIXMLToStringExporter
	Arguments and temporary variables: 
		subrule: 	RuleResult cannot depend on DictoTalker
		errors: 	an OrderedCollection()
		element: 	a Dictionary()
		fp: 	Dicto\\RuleResult dependOn Dicto\\DictoTalker = True
	Receiver's instance variables: 
a DIXMLToStringExporter

Set>>do:
	Receiver: a Set(Dicto\\RuleResult dependOn Dicto\\DictoTalker = True)
	Arguments and temporary variables: 
		aBlock: 	[ :fp | 
element := Dictionary new.
element atNewIndex: #cause put: fp ...etc...
		index: 	5
		each: 	Dicto\\RuleResult dependOn Dicto\\DictoTalker = True
	Receiver's instance variables: 
		tally: 	1
		array: 	an Array(nil nil nil nil Dicto\\RuleResult dependOn Dicto\\DictoTalker =...etc...


DIXMLToStringExporter(DIOutputGenerator)>>_subruleElements:
	Receiver: a DIXMLToStringExporter
	Arguments and temporary variables: 
		element: 	a Dictionary()
		subrule: 	RuleResult cannot depend on DictoTalker
		errors: 	an OrderedCollection()
	Receiver's instance variables: 
a DIXMLToStringExporter

DIXMLToStringExporter>>_printError:
	Receiver: a DIXMLToStringExporter
	Arguments and temporary variables: 
		out: 	''
		subrule: 	RuleResult cannot depend on DictoTalker
		elements: 	nil
	Receiver's instance variables: 
a DIXMLToStringExporter

[ :subrule | 
failed := subrule hasFailed asString.
out := out , '<subrule id="' , subrule id asString , '" failed="' , failed , '" value="' , subrule asStringEscaped
	, '" testedBy="' , subrule chosenAdapter asString , '">' , (self _printError: subrule) , '</subrule>' ] in [ :rule | 
failed := rule hasFailed asString.
out := out , '<rule id="' , rule id asString , '" failed="' , failed , '" value="' , rule asStringEscaped , '">'.
rule subRules
	do: [ :subrule | 
		failed := subrule hasFailed asString.
		out := out , '<subrule id="' , subrule id asString , '" failed="' , failed , '" value="' , subrule asStringEscaped
			, '" testedBy="' , subrule chosenAdapter asString , '">' , (self _printError: subrule) , '</subrule>' ].
out := out , '</rule>' ] in DIXMLToStringExporter>>export:to:
	Receiver: a DIXMLToStringExporter
	Arguments and temporary variables: 
		testSuites: 	a Dictionary(DIGrepFileContent->a DITestGroup DIJMeterLoadTest->a D...etc...
		anXMLFile: 	''
		analysisID: 	'1424261712'
		rule: 	RuleResult cannot depend on DictoTalker
		failed: 	'true'
		out: 	'<rule id="1" failed="true" value="RuleResult cannot depend on DictoTalker...etc...
		subrule: 	RuleResult cannot depend on DictoTalker
	Receiver's instance variables: 
a DIXMLToStringExporter

OrderedCollection>>do:
	Receiver: an OrderedCollection(RuleResult cannot depend on DictoTalker)
	Arguments and temporary variables: 
		aBlock: 	[ :subrule | 
failed := subrule hasFailed asString.
out := out , '<subr...etc...
		index: 	1
	Receiver's instance variables: 
		array: 	an Array(RuleResult cannot depend on DictoTalker nil nil nil nil nil nil...etc...
		firstIndex: 	1
		lastIndex: 	1


[ :rule | 
failed := rule hasFailed asString.
out := out , '<rule id="' , rule id asString , '" failed="' , failed , '" value="' , rule asStringEscaped , '">'.
rule subRules
	do: [ :subrule | 
		failed := subrule hasFailed asString.
		out := out , '<subrule id="' , subrule id asString , '" failed="' , failed , '" value="' , subrule asStringEscaped
			, '" testedBy="' , subrule chosenAdapter asString , '">' , (self _printError: subrule) , '</subrule>' ].
out := out , '</rule>' ] in DIXMLToStringExporter>>export:to:
	Receiver: a DIXMLToStringExporter
	Arguments and temporary variables: 
		testSuites: 	a Dictionary(DIGrepFileContent->a DITestGroup DIJMeterLoadTest->a D...etc...
		anXMLFile: 	''
		analysisID: 	'1424261712'
		failed: 	'true'
		out: 	'<rule id="1" failed="true" value="RuleResult cannot depend on DictoTalker...etc...
		rule: 	RuleResult cannot depend on DictoTalker
	Receiver's instance variables: 
a DIXMLToStringExporter

DICollectionRule(OrderedCollection)>>do:
	Receiver: a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalker must depend on Rule...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :rule | 
failed := rule hasFailed asString.
out := out , '<rule id="'...etc...
		index: 	1
	Receiver's instance variables: 
		array: 	an Array(RuleResult cannot depend on DictoTalker DictoTalker must depend...etc...
		firstIndex: 	1
		lastIndex: 	3
		elements: 	nil
		elements: 	nil


DIXMLToStringExporter>>export:to:
	Receiver: a DIXMLToStringExporter
	Arguments and temporary variables: 
		failed: 	'true'
		out: 	'<rule id="1" failed="true" value="RuleResult cannot depend on DictoTalker...etc...
		testSuites: 	a Dictionary(DIGrepFileContent->a DITestGroup DIJMeterLoadTest->a D...etc...
		anXMLFile: 	''
		analysisID: 	'1424261712'
	Receiver's instance variables: 
a DIXMLToStringExporter

DIXMLExporter>>export:to:
	Receiver: a DIXMLExporter
	Arguments and temporary variables: 
		testSuites: 	a Dictionary(DIGrepFileContent->a DITestGroup DIJMeterLoadTest->a D...etc...
		anXMLFile: 	'/home/otruffer/dicto/bin/analysis/meta/results.xml'
		out: 	nil
	Receiver's instance variables: 
a DIXMLExporter

DIDicto>>_exportTests:to:withExporter:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		testSuites: 	a Dictionary(DIGrepFileContent->a DITestGroup DIJMeterLoadTest->a D...etc...
		aFile: 	nil
		anExporterClass: 	DIXMLExporter
		ex: 	a DIXMLExporter
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424261712'
		singleShotTask: 	false


DIDicto>>dictoCheck:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = ...etc...
		adapterTestGroups: 	a Dictionary(DIGrepFileContent->a DITestGroup DIJMeterLoadTe...etc...
		exportFormat: 	nil
		xml: 	nil
		json: 	nil
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424261712'
		singleShotTask: 	false


DIDicto>>dictoAll:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = ...etc...
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424261712'
		singleShotTask: 	false


[ DIDicto new dictoAll: input ] in DIWebServiceAPI>>getRun
	Receiver: a DIWebServiceAPI
	Arguments and temporary variables: 
		in: 	'/home/otruffer/dicto/bin/analysis/meta/dicto.rules'
		input: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = PhpCl...etc...
		rulesFailed: 	nil
		rulesTotal: 	nil
	Receiver's instance variables: 
		request: 	nil
		response: 	nil
		variables: 	nil
		delegate: 	nil
		principal: 	nil
		credentials: 	nil


BlockClosure>>on:do:
	Receiver: [ DIDicto new dictoAll: input ]
	Arguments and temporary variables: 
		exception: 	DIException
		handlerAction: 	[ :ex | ^ self error: ex description ]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	DIWebServiceAPI>>getRun
		startpc: 	138
		numArgs: 	0


DIWebServiceAPI>>getRun
	Receiver: a DIWebServiceAPI
	Arguments and temporary variables: 
		in: 	'/home/otruffer/dicto/bin/analysis/meta/dicto.rules'
		input: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = PhpCl...etc...
		rulesFailed: 	nil
		rulesTotal: 	nil
	Receiver's instance variables: 
		request: 	nil
		response: 	nil
		variables: 	nil
		delegate: 	nil
		principal: 	nil
		credentials: 	nil


DIWebServiceHandler>>post
	Receiver: a DIWebServiceHandler
	Arguments and temporary variables: 
		api: 	a DIWebServiceAPI
	Receiver's instance variables: 
		request: 	a ZnRequest(POST /meta/run)
		response: 	nil
		variables: 	an OrderedCollection('meta' 'run')
		delegate: 	a ZnJSONRestServerDelegate
		principal: 	nil
		credentials: 	nil
		dicto: 	a DIDicto


DIWebServiceHandler(ZnRestCall)>>execute
	Receiver: a DIWebServiceHandler
	Arguments and temporary variables: 

	Receiver's instance variables: 
		request: 	a ZnRequest(POST /meta/run)
		response: 	nil
		variables: 	an OrderedCollection('meta' 'run')
		delegate: 	a ZnJSONRestServerDelegate
		principal: 	nil
		credentials: 	nil
		dicto: 	a DIDicto


[ call execute ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


BlockClosure>>on:do:
	Receiver: [ call execute ]
	Arguments and temporary variables: 
		exception: 	ZnRestCallUnauthorized
		handlerAction: 	[ :exception | self unauthorized: exception request ]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
		startpc: 	38
		numArgs: 	0


ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


[ self execute: call ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /meta/run)
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


BlockClosure>>on:do:
	Receiver: [ self execute: call ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :exception | 
request server debugMode
	ifTrue: [ exception pa...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
		startpc: 	99
		numArgs: 	0


ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /meta/run)
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ :delegate | delegate handleRequest: request ] ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /meta/run)
		delegate: 	a ZnJSONRestServerDelegate
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateRequest:do:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /meta/run)
		block: 	[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ ...etc...
		authenticator: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /meta/run)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream)


[ self authenticateAndDelegateRequest: request ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /meta/run)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream)


BlockClosure>>on:do:
	Receiver: [ self authenticateAndDelegateRequest: request ]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :exception | 
self debugMode
	ifTrue: [ exception pass ]
	ifFa...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequ...etc...
		startpc: 	58
		numArgs: 	0


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /meta/run)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /meta/run)
		response: 	nil
		initialMilliseconds: 	6222292
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeOneRequestResponseOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		stream: 	a ZdcSocketStream
		request: 	a ZnRequest(POST /meta/run)
		response: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream)


[ self executeOneRequestResponseOn: stream ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		stream: 	a ZdcSocketStream
		request: 	nil
		response: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream)


[ 
p psValueAt: index put: anObject.
aBlock value ] in ZnCurrentServer(DynamicVariable)>>value:during:
	Receiver: a ZnCurrentServer
	Arguments and temporary variables: 
		anObject: 	a ZnManagingMultiThreadedServer(running 8010)
		aBlock: 	[ self executeOneRequestResponseOn: stream ]
		p: 	a Process in nil
		oldValue: 	nil
	Receiver's instance variables: 
		index: 	5


BlockClosure>>ensure:
	Receiver: [ 
p psValueAt: index put: anObject.
aBlock value ]
	Arguments and temporary variables: 
		aBlock: 	[ p psValueAt: index put: oldValue ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ZnCurrentServer(DynamicVariable)>>value:during:
		startpc: 	62
		numArgs: 	0



--- The full stack ---
Array(Object)>>error:
Array(Object)>>errorNonIntegerIndex
Array(Object)>>at:put:
Dictionary(HashedCollection)>>atNewIndex:put:
[ :fp | 
element := Dictionary new.
element atNewIndex: #cause put: fp asString.
fp fix = ''
	ifFalse: [ (element atNewIndex: #fix) put: fp fix ].
fp details = ''
	ifFalse: [ (element atNewIndex: #details) put: fp details ].
errors add: element ] in DIXMLToStringExporter(DIOutputGenerator)>>_subruleElements:
Set>>do:
DIXMLToStringExporter(DIOutputGenerator)>>_subruleElements:
DIXMLToStringExporter>>_printError:
[ :subrule | 
failed := subrule hasFailed asString.
out := out , '<subrule id="' , subrule id asString , '" failed="' , failed , '" value="' , subrule asStringEscaped
	, '" testedBy="' , subrule chosenAdapter asString , '">' , (self _printError: subrule) , '</subrule>' ] in [ :rule | 
failed := rule hasFailed asString.
out := out , '<rule id="' , rule id asString , '" failed="' , failed , '" value="' , rule asStringEscaped , '">'.
rule subRules
	do: [ :subrule | 
		failed := subrule hasFailed asString.
		out := out , '<subrule id="' , subrule id asString , '" failed="' , failed , '" value="' , subrule asStringEscaped
			, '" testedBy="' , subrule chosenAdapter asString , '">' , (self _printError: subrule) , '</subrule>' ].
out := out , '</rule>' ] in DIXMLToStringExporter>>export:to:
OrderedCollection>>do:
[ :rule | 
failed := rule hasFailed asString.
out := out , '<rule id="' , rule id asString , '" failed="' , failed , '" value="' , rule asStringEscaped , '">'.
rule subRules
	do: [ :subrule | 
		failed := subrule hasFailed asString.
		out := out , '<subrule id="' , subrule id asString , '" failed="' , failed , '" value="' , subrule asStringEscaped
			, '" testedBy="' , subrule chosenAdapter asString , '">' , (self _printError: subrule) , '</subrule>' ].
out := out , '</rule>' ] in DIXMLToStringExporter>>export:to:
DICollectionRule(OrderedCollection)>>do:
DIXMLToStringExporter>>export:to:
DIXMLExporter>>export:to:
DIDicto>>_exportTests:to:withExporter:
DIDicto>>dictoCheck:
DIDicto>>dictoAll:
[ DIDicto new dictoAll: input ] in DIWebServiceAPI>>getRun
BlockClosure>>on:do:
DIWebServiceAPI>>getRun
DIWebServiceHandler>>post
DIWebServiceHandler(ZnRestCall)>>execute
[ call execute ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
BlockClosure>>on:do:
ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
[ self execute: call ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
BlockClosure>>on:do:
ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ :delegate | delegate handleRequest: request ] ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateRequest:do:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
[ self authenticateAndDelegateRequest: request ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
BlockClosure>>on:do:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequest:
ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeOneRequestResponseOn:
[ self executeOneRequestResponseOn: stream ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
[ 
p psValueAt: index put: anObject.
aBlock value ] in ZnCurrentServer(DynamicVariable)>>value:during:
BlockClosure>>ensure:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
ZnCurrentServer(DynamicVariable)>>value:during:
ZnCurrentServer class(DynamicVariable class)>>value:during:
ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
[ self executeRequestResponseLoopOn: stream ] in [ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ] in [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
BlockClosure>>ensure:
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ] in [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
BlockClosure>>ifCurtailed:
[ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Error: only integers should be used as indices
18 February 2015 2:08:30.747706 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
NBCogit NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
https://github.com/pharo-project/pharo-vm.git Commit: 4a0d556150d478ff2de3c9624d2f18e6eaa3fa5c Date: 2014-12-18 18:42:53 +0100 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14893

Image: Pharo3.0 [Latest update: #30863]

Array(Object)>>error:
	Receiver: #(nil nil nil nil nil)
	Arguments and temporary variables: 
		aString: 	'only integers should be used as indices'
	Receiver's instance variables: 
#(nil nil nil nil nil)

Array(Object)>>errorNonIntegerIndex
	Receiver: #(nil nil nil nil nil)
	Arguments and temporary variables: 

	Receiver's instance variables: 
#(nil nil nil nil nil)

Array(Object)>>at:put:
	Receiver: #(nil nil nil nil nil)
	Arguments and temporary variables: 
		index: 	#cause
		value: 	'Dicto\\RuleResult dependOn Dicto\\DictoTalker = True'
	Receiver's instance variables: 
#(nil nil nil nil nil)

Dictionary(HashedCollection)>>atNewIndex:put:
	Receiver: a Dictionary()
	Arguments and temporary variables: 
		index: 	#cause
		anObject: 	'Dicto\\RuleResult dependOn Dicto\\DictoTalker = True'
	Receiver's instance variables: 
		tally: 	0
		array: 	#(nil nil nil nil nil)


[ :fp | 
element := Dictionary new.
element atNewIndex: #cause put: fp asString.
fp fix = ''
	ifFalse: [ (element atNewIndex: #fix) put: fp fix ].
fp details = ''
	ifFalse: [ (element atNewIndex: #details) put: fp details ].
errors add: element ] in DIXMLToStringExporter(DIOutputGenerator)>>_subruleElements:
	Receiver: a DIXMLToStringExporter
	Arguments and temporary variables: 
		subrule: 	RuleResult cannot depend on DictoTalker
		errors: 	an OrderedCollection()
		element: 	a Dictionary()
		fp: 	Dicto\\RuleResult dependOn Dicto\\DictoTalker = True
	Receiver's instance variables: 
a DIXMLToStringExporter

Set>>do:
	Receiver: a Set(Dicto\\RuleResult dependOn Dicto\\DictoTalker = True)
	Arguments and temporary variables: 
		aBlock: 	[ :fp | 
element := Dictionary new.
element atNewIndex: #cause put: fp ...etc...
		index: 	2
		each: 	Dicto\\RuleResult dependOn Dicto\\DictoTalker = True
	Receiver's instance variables: 
		tally: 	1
		array: 	an Array(nil Dicto\\RuleResult dependOn Dicto\\DictoTalker = True nil ni...etc...


DIXMLToStringExporter(DIOutputGenerator)>>_subruleElements:
	Receiver: a DIXMLToStringExporter
	Arguments and temporary variables: 
		element: 	a Dictionary()
		subrule: 	RuleResult cannot depend on DictoTalker
		errors: 	an OrderedCollection()
	Receiver's instance variables: 
a DIXMLToStringExporter

DIXMLToStringExporter>>_printError:
	Receiver: a DIXMLToStringExporter
	Arguments and temporary variables: 
		out: 	''
		subrule: 	RuleResult cannot depend on DictoTalker
		elements: 	nil
	Receiver's instance variables: 
a DIXMLToStringExporter

[ :subrule | 
failed := subrule hasFailed asString.
out := out , '<subrule id="' , subrule id asString , '" failed="' , failed , '" value="' , subrule asStringEscaped
	, '" testedBy="' , subrule chosenAdapter asString , '">' , (self _printError: subrule) , '</subrule>' ] in [ :rule | 
failed := rule hasFailed asString.
out := out , '<rule id="' , rule id asString , '" failed="' , failed , '" value="' , rule asStringEscaped , '">'.
rule subRules
	do: [ :subrule | 
		failed := subrule hasFailed asString.
		out := out , '<subrule id="' , subrule id asString , '" failed="' , failed , '" value="' , subrule asStringEscaped
			, '" testedBy="' , subrule chosenAdapter asString , '">' , (self _printError: subrule) , '</subrule>' ].
out := out , '</rule>' ] in DIXMLToStringExporter>>export:to:
	Receiver: a DIXMLToStringExporter
	Arguments and temporary variables: 
		testSuites: 	a Dictionary(DIGrepFileContent->a DITestGroup DIJMeterLoadTest->a D...etc...
		anXMLFile: 	''
		analysisID: 	'1424261712'
		rule: 	RuleResult cannot depend on DictoTalker
		failed: 	'true'
		out: 	'<rule id="1" failed="true" value="RuleResult cannot depend on DictoTalker...etc...
		subrule: 	RuleResult cannot depend on DictoTalker
	Receiver's instance variables: 
a DIXMLToStringExporter

OrderedCollection>>do:
	Receiver: an OrderedCollection(RuleResult cannot depend on DictoTalker)
	Arguments and temporary variables: 
		aBlock: 	[ :subrule | 
failed := subrule hasFailed asString.
out := out , '<subr...etc...
		index: 	1
	Receiver's instance variables: 
		array: 	an Array(RuleResult cannot depend on DictoTalker nil nil nil nil nil nil...etc...
		firstIndex: 	1
		lastIndex: 	1


[ :rule | 
failed := rule hasFailed asString.
out := out , '<rule id="' , rule id asString , '" failed="' , failed , '" value="' , rule asStringEscaped , '">'.
rule subRules
	do: [ :subrule | 
		failed := subrule hasFailed asString.
		out := out , '<subrule id="' , subrule id asString , '" failed="' , failed , '" value="' , subrule asStringEscaped
			, '" testedBy="' , subrule chosenAdapter asString , '">' , (self _printError: subrule) , '</subrule>' ].
out := out , '</rule>' ] in DIXMLToStringExporter>>export:to:
	Receiver: a DIXMLToStringExporter
	Arguments and temporary variables: 
		testSuites: 	a Dictionary(DIGrepFileContent->a DITestGroup DIJMeterLoadTest->a D...etc...
		anXMLFile: 	''
		analysisID: 	'1424261712'
		failed: 	'true'
		out: 	'<rule id="1" failed="true" value="RuleResult cannot depend on DictoTalker...etc...
		rule: 	RuleResult cannot depend on DictoTalker
	Receiver's instance variables: 
a DIXMLToStringExporter

DICollectionRule(OrderedCollection)>>do:
	Receiver: a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalker must depend on Rule...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :rule | 
failed := rule hasFailed asString.
out := out , '<rule id="'...etc...
		index: 	1
	Receiver's instance variables: 
		array: 	an Array(RuleResult cannot depend on DictoTalker DictoTalker must depend...etc...
		firstIndex: 	1
		lastIndex: 	3
		elements: 	nil
		elements: 	nil


DIXMLToStringExporter>>export:to:
	Receiver: a DIXMLToStringExporter
	Arguments and temporary variables: 
		failed: 	'true'
		out: 	'<rule id="1" failed="true" value="RuleResult cannot depend on DictoTalker...etc...
		testSuites: 	a Dictionary(DIGrepFileContent->a DITestGroup DIJMeterLoadTest->a D...etc...
		anXMLFile: 	''
		analysisID: 	'1424261712'
	Receiver's instance variables: 
a DIXMLToStringExporter

DIXMLExporter>>export:to:
	Receiver: a DIXMLExporter
	Arguments and temporary variables: 
		testSuites: 	a Dictionary(DIGrepFileContent->a DITestGroup DIJMeterLoadTest->a D...etc...
		anXMLFile: 	'/home/otruffer/dicto/bin/analysis/meta/results.xml'
		out: 	nil
	Receiver's instance variables: 
a DIXMLExporter

DIDicto>>_exportTests:to:withExporter:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		testSuites: 	a Dictionary(DIGrepFileContent->a DITestGroup DIJMeterLoadTest->a D...etc...
		aFile: 	nil
		anExporterClass: 	DIXMLExporter
		ex: 	a DIXMLExporter
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424264897'
		singleShotTask: 	false


DIDicto>>dictoCheck:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = ...etc...
		adapterTestGroups: 	a Dictionary(DIGrepFileContent->a DITestGroup DIJMeterLoadTe...etc...
		exportFormat: 	nil
		xml: 	nil
		json: 	nil
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424264897'
		singleShotTask: 	false


DIDicto>>dictoAll:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = ...etc...
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424264897'
		singleShotTask: 	false


[ DIDicto new dictoAll: input ] in DIWebServiceAPI>>getRun
	Receiver: a DIWebServiceAPI
	Arguments and temporary variables: 
		in: 	'/home/otruffer/dicto/bin/analysis/meta/dicto.rules'
		input: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = PhpCl...etc...
		rulesFailed: 	nil
		rulesTotal: 	nil
	Receiver's instance variables: 
		request: 	nil
		response: 	nil
		variables: 	nil
		delegate: 	nil
		principal: 	nil
		credentials: 	nil


BlockClosure>>on:do:
	Receiver: [ DIDicto new dictoAll: input ]
	Arguments and temporary variables: 
		exception: 	DIException
		handlerAction: 	[ :ex | ^ self error: ex description ]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	DIWebServiceAPI>>getRun
		startpc: 	138
		numArgs: 	0


DIWebServiceAPI>>getRun
	Receiver: a DIWebServiceAPI
	Arguments and temporary variables: 
		in: 	'/home/otruffer/dicto/bin/analysis/meta/dicto.rules'
		input: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = PhpCl...etc...
		rulesFailed: 	nil
		rulesTotal: 	nil
	Receiver's instance variables: 
		request: 	nil
		response: 	nil
		variables: 	nil
		delegate: 	nil
		principal: 	nil
		credentials: 	nil


DIWebServiceHandler>>post
	Receiver: a DIWebServiceHandler
	Arguments and temporary variables: 
		api: 	a DIWebServiceAPI
	Receiver's instance variables: 
		request: 	a ZnRequest(POST /meta/run)
		response: 	nil
		variables: 	an OrderedCollection('meta' 'run')
		delegate: 	a ZnJSONRestServerDelegate
		principal: 	nil
		credentials: 	nil
		dicto: 	a DIDicto


DIWebServiceHandler(ZnRestCall)>>execute
	Receiver: a DIWebServiceHandler
	Arguments and temporary variables: 

	Receiver's instance variables: 
		request: 	a ZnRequest(POST /meta/run)
		response: 	nil
		variables: 	an OrderedCollection('meta' 'run')
		delegate: 	a ZnJSONRestServerDelegate
		principal: 	nil
		credentials: 	nil
		dicto: 	a DIDicto


[ call execute ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


BlockClosure>>on:do:
	Receiver: [ call execute ]
	Arguments and temporary variables: 
		exception: 	ZnRestCallUnauthorized
		handlerAction: 	[ :exception | self unauthorized: exception request ]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
		startpc: 	38
		numArgs: 	0


ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


[ self execute: call ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /meta/run)
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


BlockClosure>>on:do:
	Receiver: [ self execute: call ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :exception | 
request server debugMode
	ifTrue: [ exception pa...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
		startpc: 	99
		numArgs: 	0


ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /meta/run)
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ :delegate | delegate handleRequest: request ] ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /meta/run)
		delegate: 	a ZnJSONRestServerDelegate
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateRequest:do:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /meta/run)
		block: 	[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ ...etc...
		authenticator: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /meta/run)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


[ self authenticateAndDelegateRequest: request ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /meta/run)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


BlockClosure>>on:do:
	Receiver: [ self authenticateAndDelegateRequest: request ]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :exception | 
self debugMode
	ifTrue: [ exception pass ]
	ifFa...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequ...etc...
		startpc: 	58
		numArgs: 	0


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /meta/run)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /meta/run)
		response: 	nil
		initialMilliseconds: 	9407198
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeOneRequestResponseOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		stream: 	a ZdcSocketStream
		request: 	a ZnRequest(POST /meta/run)
		response: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


[ self executeOneRequestResponseOn: stream ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		stream: 	a ZdcSocketStream
		request: 	nil
		response: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


[ 
p psValueAt: index put: anObject.
aBlock value ] in ZnCurrentServer(DynamicVariable)>>value:during:
	Receiver: a ZnCurrentServer
	Arguments and temporary variables: 
		anObject: 	a ZnManagingMultiThreadedServer(running 8010)
		aBlock: 	[ self executeOneRequestResponseOn: stream ]
		p: 	a Process in nil
		oldValue: 	nil
	Receiver's instance variables: 
		index: 	5


BlockClosure>>ensure:
	Receiver: [ 
p psValueAt: index put: anObject.
aBlock value ]
	Arguments and temporary variables: 
		aBlock: 	[ p psValueAt: index put: oldValue ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ZnCurrentServer(DynamicVariable)>>value:during:
		startpc: 	62
		numArgs: 	0



--- The full stack ---
Array(Object)>>error:
Array(Object)>>errorNonIntegerIndex
Array(Object)>>at:put:
Dictionary(HashedCollection)>>atNewIndex:put:
[ :fp | 
element := Dictionary new.
element atNewIndex: #cause put: fp asString.
fp fix = ''
	ifFalse: [ (element atNewIndex: #fix) put: fp fix ].
fp details = ''
	ifFalse: [ (element atNewIndex: #details) put: fp details ].
errors add: element ] in DIXMLToStringExporter(DIOutputGenerator)>>_subruleElements:
Set>>do:
DIXMLToStringExporter(DIOutputGenerator)>>_subruleElements:
DIXMLToStringExporter>>_printError:
[ :subrule | 
failed := subrule hasFailed asString.
out := out , '<subrule id="' , subrule id asString , '" failed="' , failed , '" value="' , subrule asStringEscaped
	, '" testedBy="' , subrule chosenAdapter asString , '">' , (self _printError: subrule) , '</subrule>' ] in [ :rule | 
failed := rule hasFailed asString.
out := out , '<rule id="' , rule id asString , '" failed="' , failed , '" value="' , rule asStringEscaped , '">'.
rule subRules
	do: [ :subrule | 
		failed := subrule hasFailed asString.
		out := out , '<subrule id="' , subrule id asString , '" failed="' , failed , '" value="' , subrule asStringEscaped
			, '" testedBy="' , subrule chosenAdapter asString , '">' , (self _printError: subrule) , '</subrule>' ].
out := out , '</rule>' ] in DIXMLToStringExporter>>export:to:
OrderedCollection>>do:
[ :rule | 
failed := rule hasFailed asString.
out := out , '<rule id="' , rule id asString , '" failed="' , failed , '" value="' , rule asStringEscaped , '">'.
rule subRules
	do: [ :subrule | 
		failed := subrule hasFailed asString.
		out := out , '<subrule id="' , subrule id asString , '" failed="' , failed , '" value="' , subrule asStringEscaped
			, '" testedBy="' , subrule chosenAdapter asString , '">' , (self _printError: subrule) , '</subrule>' ].
out := out , '</rule>' ] in DIXMLToStringExporter>>export:to:
DICollectionRule(OrderedCollection)>>do:
DIXMLToStringExporter>>export:to:
DIXMLExporter>>export:to:
DIDicto>>_exportTests:to:withExporter:
DIDicto>>dictoCheck:
DIDicto>>dictoAll:
[ DIDicto new dictoAll: input ] in DIWebServiceAPI>>getRun
BlockClosure>>on:do:
DIWebServiceAPI>>getRun
DIWebServiceHandler>>post
DIWebServiceHandler(ZnRestCall)>>execute
[ call execute ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
BlockClosure>>on:do:
ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
[ self execute: call ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
BlockClosure>>on:do:
ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ :delegate | delegate handleRequest: request ] ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateRequest:do:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
[ self authenticateAndDelegateRequest: request ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
BlockClosure>>on:do:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequest:
ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeOneRequestResponseOn:
[ self executeOneRequestResponseOn: stream ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
[ 
p psValueAt: index put: anObject.
aBlock value ] in ZnCurrentServer(DynamicVariable)>>value:during:
BlockClosure>>ensure:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
ZnCurrentServer(DynamicVariable)>>value:during:
ZnCurrentServer class(DynamicVariable class)>>value:during:
ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
[ self executeRequestResponseLoopOn: stream ] in [ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ] in [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
BlockClosure>>ensure:
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ] in [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
BlockClosure>>ifCurtailed:
[ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: OrderedCollection>>keys
18 February 2015 2:10:16.374794 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
NBCogit NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
https://github.com/pharo-project/pharo-vm.git Commit: 4a0d556150d478ff2de3c9624d2f18e6eaa3fa5c Date: 2014-12-18 18:42:53 +0100 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14893

Image: Pharo3.0 [Latest update: #30863]

OrderedCollection(Object)>>doesNotUnderstand: #keys
	Receiver: an OrderedCollection(a Dictionary(#cause->'Dicto\\RuleResult dependOn Dicto\\DictoTalker =...etc...
	Arguments and temporary variables: 
		aMessage: 	keys
		exception: 	MessageNotUnderstood: OrderedCollection>>keys
		resumeValue: 	nil
	Receiver's instance variables: 
		array: 	an Array(a Dictionary(#cause->'Dicto\\RuleResult dependOn Dicto\\DictoTa...etc...
		firstIndex: 	1
		lastIndex: 	1


DIXMLToStringExporter>>_printError:
	Receiver: a DIXMLToStringExporter
	Arguments and temporary variables: 
		out: 	''
		subrule: 	RuleResult cannot depend on DictoTalker
		elements: 	an OrderedCollection(a Dictionary(#cause->'Dicto\\RuleResult dependOn...etc...
	Receiver's instance variables: 
a DIXMLToStringExporter

[ :subrule | 
failed := subrule hasFailed asString.
out := out , '<subrule id="' , subrule id asString , '" failed="' , failed , '" value="' , subrule asStringEscaped
	, '" testedBy="' , subrule chosenAdapter asString , '">' , (self _printError: subrule) , '</subrule>' ] in [ :rule | 
failed := rule hasFailed asString.
out := out , '<rule id="' , rule id asString , '" failed="' , failed , '" value="' , rule asStringEscaped , '">'.
rule subRules
	do: [ :subrule | 
		failed := subrule hasFailed asString.
		out := out , '<subrule id="' , subrule id asString , '" failed="' , failed , '" value="' , subrule asStringEscaped
			, '" testedBy="' , subrule chosenAdapter asString , '">' , (self _printError: subrule) , '</subrule>' ].
out := out , '</rule>' ] in DIXMLToStringExporter>>export:to:
	Receiver: a DIXMLToStringExporter
	Arguments and temporary variables: 
		testSuites: 	a Dictionary(DIGrepFileContent->a DITestGroup DIJMeterLoadTest->a D...etc...
		anXMLFile: 	''
		analysisID: 	'1424261712'
		rule: 	RuleResult cannot depend on DictoTalker
		failed: 	'true'
		out: 	'<rule id="1" failed="true" value="RuleResult cannot depend on DictoTalker...etc...
		subrule: 	RuleResult cannot depend on DictoTalker
	Receiver's instance variables: 
a DIXMLToStringExporter

OrderedCollection>>do:
	Receiver: an OrderedCollection(RuleResult cannot depend on DictoTalker)
	Arguments and temporary variables: 
		aBlock: 	[ :subrule | 
failed := subrule hasFailed asString.
out := out , '<subr...etc...
		index: 	1
	Receiver's instance variables: 
		array: 	an Array(RuleResult cannot depend on DictoTalker nil nil nil nil nil nil...etc...
		firstIndex: 	1
		lastIndex: 	1


[ :rule | 
failed := rule hasFailed asString.
out := out , '<rule id="' , rule id asString , '" failed="' , failed , '" value="' , rule asStringEscaped , '">'.
rule subRules
	do: [ :subrule | 
		failed := subrule hasFailed asString.
		out := out , '<subrule id="' , subrule id asString , '" failed="' , failed , '" value="' , subrule asStringEscaped
			, '" testedBy="' , subrule chosenAdapter asString , '">' , (self _printError: subrule) , '</subrule>' ].
out := out , '</rule>' ] in DIXMLToStringExporter>>export:to:
	Receiver: a DIXMLToStringExporter
	Arguments and temporary variables: 
		testSuites: 	a Dictionary(DIGrepFileContent->a DITestGroup DIJMeterLoadTest->a D...etc...
		anXMLFile: 	''
		analysisID: 	'1424261712'
		failed: 	'true'
		out: 	'<rule id="1" failed="true" value="RuleResult cannot depend on DictoTalker...etc...
		rule: 	RuleResult cannot depend on DictoTalker
	Receiver's instance variables: 
a DIXMLToStringExporter

DICollectionRule(OrderedCollection)>>do:
	Receiver: a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalker must depend on Rule...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :rule | 
failed := rule hasFailed asString.
out := out , '<rule id="'...etc...
		index: 	1
	Receiver's instance variables: 
		array: 	an Array(RuleResult cannot depend on DictoTalker DictoTalker must depend...etc...
		firstIndex: 	1
		lastIndex: 	3
		elements: 	nil
		elements: 	nil


DIXMLToStringExporter>>export:to:
	Receiver: a DIXMLToStringExporter
	Arguments and temporary variables: 
		failed: 	'true'
		out: 	'<rule id="1" failed="true" value="RuleResult cannot depend on DictoTalker...etc...
		testSuites: 	a Dictionary(DIGrepFileContent->a DITestGroup DIJMeterLoadTest->a D...etc...
		anXMLFile: 	''
		analysisID: 	'1424261712'
	Receiver's instance variables: 
a DIXMLToStringExporter

DIXMLExporter>>export:to:
	Receiver: a DIXMLExporter
	Arguments and temporary variables: 
		testSuites: 	a Dictionary(DIGrepFileContent->a DITestGroup DIJMeterLoadTest->a D...etc...
		anXMLFile: 	'/home/otruffer/dicto/bin/analysis/meta/results.xml'
		out: 	nil
	Receiver's instance variables: 
a DIXMLExporter

DIDicto>>_exportTests:to:withExporter:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		testSuites: 	a Dictionary(DIGrepFileContent->a DITestGroup DIJMeterLoadTest->a D...etc...
		aFile: 	nil
		anExporterClass: 	DIXMLExporter
		ex: 	a DIXMLExporter
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424265002'
		singleShotTask: 	false


DIDicto>>dictoCheck:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = ...etc...
		adapterTestGroups: 	a Dictionary(DIGrepFileContent->a DITestGroup DIJMeterLoadTe...etc...
		exportFormat: 	nil
		xml: 	nil
		json: 	nil
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424265002'
		singleShotTask: 	false


DIDicto>>dictoAll:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = ...etc...
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424265002'
		singleShotTask: 	false


[ DIDicto new dictoAll: input ] in DIWebServiceAPI>>getRun
	Receiver: a DIWebServiceAPI
	Arguments and temporary variables: 
		in: 	'/home/otruffer/dicto/bin/analysis/meta/dicto.rules'
		input: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = PhpCl...etc...
		rulesFailed: 	nil
		rulesTotal: 	nil
	Receiver's instance variables: 
		request: 	nil
		response: 	nil
		variables: 	nil
		delegate: 	nil
		principal: 	nil
		credentials: 	nil


BlockClosure>>on:do:
	Receiver: [ DIDicto new dictoAll: input ]
	Arguments and temporary variables: 
		exception: 	DIException
		handlerAction: 	[ :ex | ^ self error: ex description ]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	DIWebServiceAPI>>getRun
		startpc: 	138
		numArgs: 	0


DIWebServiceAPI>>getRun
	Receiver: a DIWebServiceAPI
	Arguments and temporary variables: 
		in: 	'/home/otruffer/dicto/bin/analysis/meta/dicto.rules'
		input: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = PhpCl...etc...
		rulesFailed: 	nil
		rulesTotal: 	nil
	Receiver's instance variables: 
		request: 	nil
		response: 	nil
		variables: 	nil
		delegate: 	nil
		principal: 	nil
		credentials: 	nil


DIWebServiceHandler>>post
	Receiver: a DIWebServiceHandler
	Arguments and temporary variables: 
		api: 	a DIWebServiceAPI
	Receiver's instance variables: 
		request: 	a ZnRequest(POST /meta/run)
		response: 	nil
		variables: 	an OrderedCollection('meta' 'run')
		delegate: 	a ZnJSONRestServerDelegate
		principal: 	nil
		credentials: 	nil
		dicto: 	a DIDicto


DIWebServiceHandler(ZnRestCall)>>execute
	Receiver: a DIWebServiceHandler
	Arguments and temporary variables: 

	Receiver's instance variables: 
		request: 	a ZnRequest(POST /meta/run)
		response: 	nil
		variables: 	an OrderedCollection('meta' 'run')
		delegate: 	a ZnJSONRestServerDelegate
		principal: 	nil
		credentials: 	nil
		dicto: 	a DIDicto


[ call execute ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


BlockClosure>>on:do:
	Receiver: [ call execute ]
	Arguments and temporary variables: 
		exception: 	ZnRestCallUnauthorized
		handlerAction: 	[ :exception | self unauthorized: exception request ]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
		startpc: 	38
		numArgs: 	0


ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


[ self execute: call ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /meta/run)
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


BlockClosure>>on:do:
	Receiver: [ self execute: call ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :exception | 
request server debugMode
	ifTrue: [ exception pa...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
		startpc: 	99
		numArgs: 	0


ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /meta/run)
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ :delegate | delegate handleRequest: request ] ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /meta/run)
		delegate: 	a ZnJSONRestServerDelegate
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateRequest:do:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /meta/run)
		block: 	[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ ...etc...
		authenticator: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /meta/run)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


[ self authenticateAndDelegateRequest: request ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /meta/run)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


BlockClosure>>on:do:
	Receiver: [ self authenticateAndDelegateRequest: request ]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :exception | 
self debugMode
	ifTrue: [ exception pass ]
	ifFa...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequ...etc...
		startpc: 	58
		numArgs: 	0


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /meta/run)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /meta/run)
		response: 	nil
		initialMilliseconds: 	9512284
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeOneRequestResponseOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		stream: 	a ZdcSocketStream
		request: 	a ZnRequest(POST /meta/run)
		response: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


[ self executeOneRequestResponseOn: stream ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		stream: 	a ZdcSocketStream
		request: 	nil
		response: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


[ 
p psValueAt: index put: anObject.
aBlock value ] in ZnCurrentServer(DynamicVariable)>>value:during:
	Receiver: a ZnCurrentServer
	Arguments and temporary variables: 
		anObject: 	a ZnManagingMultiThreadedServer(running 8010)
		aBlock: 	[ self executeOneRequestResponseOn: stream ]
		p: 	a Process in nil
		oldValue: 	nil
	Receiver's instance variables: 
		index: 	5


BlockClosure>>ensure:
	Receiver: [ 
p psValueAt: index put: anObject.
aBlock value ]
	Arguments and temporary variables: 
		aBlock: 	[ p psValueAt: index put: oldValue ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ZnCurrentServer(DynamicVariable)>>value:during:
		startpc: 	62
		numArgs: 	0


ZnCurrentServer(DynamicVariable)>>value:during:
	Receiver: a ZnCurrentServer
	Arguments and temporary variables: 
		anObject: 	a ZnManagingMultiThreadedServer(running 8010)
		aBlock: 	[ self executeOneRequestResponseOn: stream ]
		p: 	a Process in nil
		oldValue: 	nil
	Receiver's instance variables: 
		index: 	5


ZnCurrentServer class(DynamicVariable class)>>value:during:
	Receiver: ZnCurrentServer
	Arguments and temporary variables: 
		anObject: 	a ZnManagingMultiThreadedServer(running 8010)
		aBlock: 	[ self executeOneRequestResponseOn: stream ]
	Receiver's instance variables: 
		superclass: 	DynamicVariable
		methodDict: 	a MethodDictionary()
		format: 	132
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#ZnCurrentServer
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Zinc-HTTP-Variables'
		traitComposition: 	{}
		localSelectors: 	nil
		hash: 	nil
		soleInstance: 	a ZnCurrentServer


ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		stream: 	a ZdcSocketStream
		request: 	nil
		response: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


[ self executeRequestResponseLoopOn: stream ] in [ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ] in [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		listeningSocket: 	a Socket[waitingForConnection]
		stream: 	a ZdcSocketStream
		socket: 	a Socket[connected]
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


BlockClosure>>ensure:
	Receiver: [ self executeRequestResponseLoopOn: stream ]
	Arguments and temporary variables: 
		aBlock: 	[ 
self log debug: 'Closing stream'.
self closeSocketStream: stream ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		se...etc...
		startpc: 	118
		numArgs: 	0


[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ] in [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		listeningSocket: 	a Socket[waitingForConnection]
		stream: 	a ZdcSocketStream
		socket: 	a Socket[connected]
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)



--- The full stack ---
OrderedCollection(Object)>>doesNotUnderstand: #keys
DIXMLToStringExporter>>_printError:
[ :subrule | 
failed := subrule hasFailed asString.
out := out , '<subrule id="' , subrule id asString , '" failed="' , failed , '" value="' , subrule asStringEscaped
	, '" testedBy="' , subrule chosenAdapter asString , '">' , (self _printError: subrule) , '</subrule>' ] in [ :rule | 
failed := rule hasFailed asString.
out := out , '<rule id="' , rule id asString , '" failed="' , failed , '" value="' , rule asStringEscaped , '">'.
rule subRules
	do: [ :subrule | 
		failed := subrule hasFailed asString.
		out := out , '<subrule id="' , subrule id asString , '" failed="' , failed , '" value="' , subrule asStringEscaped
			, '" testedBy="' , subrule chosenAdapter asString , '">' , (self _printError: subrule) , '</subrule>' ].
out := out , '</rule>' ] in DIXMLToStringExporter>>export:to:
OrderedCollection>>do:
[ :rule | 
failed := rule hasFailed asString.
out := out , '<rule id="' , rule id asString , '" failed="' , failed , '" value="' , rule asStringEscaped , '">'.
rule subRules
	do: [ :subrule | 
		failed := subrule hasFailed asString.
		out := out , '<subrule id="' , subrule id asString , '" failed="' , failed , '" value="' , subrule asStringEscaped
			, '" testedBy="' , subrule chosenAdapter asString , '">' , (self _printError: subrule) , '</subrule>' ].
out := out , '</rule>' ] in DIXMLToStringExporter>>export:to:
DICollectionRule(OrderedCollection)>>do:
DIXMLToStringExporter>>export:to:
DIXMLExporter>>export:to:
DIDicto>>_exportTests:to:withExporter:
DIDicto>>dictoCheck:
DIDicto>>dictoAll:
[ DIDicto new dictoAll: input ] in DIWebServiceAPI>>getRun
BlockClosure>>on:do:
DIWebServiceAPI>>getRun
DIWebServiceHandler>>post
DIWebServiceHandler(ZnRestCall)>>execute
[ call execute ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
BlockClosure>>on:do:
ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
[ self execute: call ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
BlockClosure>>on:do:
ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ :delegate | delegate handleRequest: request ] ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateRequest:do:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
[ self authenticateAndDelegateRequest: request ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
BlockClosure>>on:do:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequest:
ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeOneRequestResponseOn:
[ self executeOneRequestResponseOn: stream ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
[ 
p psValueAt: index put: anObject.
aBlock value ] in ZnCurrentServer(DynamicVariable)>>value:during:
BlockClosure>>ensure:
ZnCurrentServer(DynamicVariable)>>value:during:
ZnCurrentServer class(DynamicVariable class)>>value:during:
ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
[ self executeRequestResponseLoopOn: stream ] in [ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ] in [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
BlockClosure>>ensure:
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ] in [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
BlockClosure>>ifCurtailed:
[ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
NeoJSONParseError: invalid input: nil
18 February 2015 2:31:33.115892 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
NBCogit NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
https://github.com/pharo-project/pharo-vm.git Commit: 4a0d556150d478ff2de3c9624d2f18e6eaa3fa5c Date: 2014-12-18 18:42:53 +0100 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14893

Image: Pharo3.0 [Latest update: #30863]

NeoJSONReader>>error:
	Receiver: a NeoJSONReader
	Arguments and temporary variables: 
		text: 	'invalid input: nil'
	Receiver's instance variables: 
		mappings: 	nil
		readStream: 	a ReadStream
		stringStream: 	nil
		listClass: 	nil
		mapClass: 	nil
		propertyNamesAsSymbols: 	false


NeoJSONReader>>parseValue
	Receiver: a NeoJSONReader
	Arguments and temporary variables: 
		char: 	nil
	Receiver's instance variables: 
		mappings: 	nil
		readStream: 	a ReadStream
		stringStream: 	nil
		listClass: 	nil
		mapClass: 	nil
		propertyNamesAsSymbols: 	false


NeoJSONReader>>next
	Receiver: a NeoJSONReader
	Arguments and temporary variables: 

	Receiver's instance variables: 
		mappings: 	nil
		readStream: 	a ReadStream
		stringStream: 	nil
		listClass: 	nil
		mapClass: 	nil
		propertyNamesAsSymbols: 	false


NeoJSONReader class>>fromString:
	Receiver: NeoJSONReader
	Arguments and temporary variables: 
		string: 	''
	Receiver's instance variables: 
		superclass: 	NeoJSONMapper
		methodDict: 	a MethodDictionary(#atEnd->NeoJSONReader>>#atEnd #close->NeoJSONRea...etc...
		format: 	142
		layout: 	a FixedLayout
		instanceVariables: 	#(#readStream #stringStream #listClass #mapClass #propertyNa...etc...
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#NeoJSONReader
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Neo-JSON-Core'
		traitComposition: 	{}
		localSelectors: 	nil


DIPhpModel>>_loadPhpModel
	Receiver: a DIPhpModel
	Arguments and temporary variables: 

	Receiver's instance variables: 
		defRules: 	a DICollectionRule()
		defVars: 	a DICollectionVar(SYSTEM)
		analysisID: 	'1424266293'
		additionalProperties: 	a Dictionary()
		ruleCounter: 	0
		varCounter: 	0
		defVarElements: 	a DICollectionVarElements()
		defVarInvertedElements: 	a DICollectionVarElements()
		model: 	nil


DIPhpModel>>model
	Receiver: a DIPhpModel
	Arguments and temporary variables: 

	Receiver's instance variables: 
		defRules: 	a DICollectionRule()
		defVars: 	a DICollectionVar(SYSTEM)
		analysisID: 	'1424266293'
		additionalProperties: 	a Dictionary()
		ruleCounter: 	0
		varCounter: 	0
		defVarElements: 	a DICollectionVarElements()
		defVarInvertedElements: 	a DICollectionVarElements()
		model: 	nil


DIVarPhpClass>>allElements
	Receiver: RuleResult
	Arguments and temporary variables: 

	Receiver's instance variables: 
		isFirst: 	false
		dslText: 	'RuleResult=PhpClass with name:"Dicto\\RuleResult"'
		type: 	'PhpClass'
		id: 	1
		entity: 	nil
		name: 	'RuleResult'
		specifiers: 	an OrderedCollection(name=Dicto\\RuleResult)
		isInverted: 	false
		elements: 	a DICollectionVarElements()
		invertedElements: 	a DICollectionVarElements()


DIVarPhpClass(DIVar)>>elements
	Receiver: RuleResult
	Arguments and temporary variables: 
		valid: 	nil
	Receiver's instance variables: 
		isFirst: 	false
		dslText: 	'RuleResult=PhpClass with name:"Dicto\\RuleResult"'
		type: 	'PhpClass'
		id: 	1
		entity: 	nil
		name: 	'RuleResult'
		specifiers: 	an OrderedCollection(name=Dicto\\RuleResult)
		isInverted: 	false
		elements: 	a DICollectionVarElements()
		invertedElements: 	a DICollectionVarElements()


DISimpleRule>>subjectElements
	Receiver: RuleResult cannot depend on DictoTalker
	Arguments and temporary variables: 
		subjectElements: 	nil
	Receiver's instance variables: 
		isFirst: 	nil
		dslText: 	'RuleResult cannot depend on DictoTalker'
		type: 	#cannot
		id: 	1001
		entity: 	nil
		subjects: 	an Array(RuleResult)
		predicates: 	an Array(depend on DictoTalker)
		subRules: 	nil
		candidateAdapters: 	a SortedCollection(DIPhpDependencies)
		chosenAdapter: 	DIPhpDependencies
		hasFailed: 	false
		failureMessage: 	''
		failingPredicates: 	a Set()
		hasSubjectInverted: 	false
		hasPredicateInverted: 	false


DITestGroup>>_failingPredicatesFor:
	Receiver: a DITestGroup
	Arguments and temporary variables: 
		rule: 	RuleResult cannot depend on DictoTalker
		allPredicates: 	a Set()
		mustFindPassing: 	nil
		failingPredicates: 	nil
		predicateReadableValue: 	''
		predName: 	'dependOn'
	Receiver's instance variables: 
		rules: 	an OrderedCollection(RuleResult cannot depend on DictoTalker DictoTalker...etc...
		adapter: 	a DIPhpDependencies
		runCommandText: 	nil
		testSpecification: 	nil
		adapterID: 	'DIPhpDependencies'
		resultFile: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/meta/1424266268/...etc...
		specificationFile: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/meta/1424...etc...
		commandFile: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/meta/1424266268...etc...


[ :rule | 
| failingPredicates |
failingPredicates := self _failingPredicatesFor: rule.
failingPredicates size > 0
	ifTrue: [ 
		rule setFailed.
		rule errorPredicates: failingPredicates ] ] in DITestGroup>>read
	Receiver: a DITestGroup
	Arguments and temporary variables: 
		rule: 	RuleResult cannot depend on DictoTalker
		failingPredicates: 	nil
	Receiver's instance variables: 
		rules: 	an OrderedCollection(RuleResult cannot depend on DictoTalker DictoTalker...etc...
		adapter: 	a DIPhpDependencies
		runCommandText: 	nil
		testSpecification: 	nil
		adapterID: 	'DIPhpDependencies'
		resultFile: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/meta/1424266268/...etc...
		specificationFile: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/meta/1424...etc...
		commandFile: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/meta/1424266268...etc...


OrderedCollection>>do:
	Receiver: an OrderedCollection(RuleResult cannot depend on DictoTalker DictoTalker must depend on Ru...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :rule | 
| failingPredicates |
failingPredicates := self _failingPred...etc...
		index: 	1
	Receiver's instance variables: 
		array: 	an Array(RuleResult cannot depend on DictoTalker DictoTalker must depend...etc...
		firstIndex: 	1
		lastIndex: 	3


DITestGroup>>read
	Receiver: a DITestGroup
	Arguments and temporary variables: 

	Receiver's instance variables: 
		rules: 	an OrderedCollection(RuleResult cannot depend on DictoTalker DictoTalker...etc...
		adapter: 	a DIPhpDependencies
		runCommandText: 	nil
		testSpecification: 	nil
		adapterID: 	'DIPhpDependencies'
		resultFile: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/meta/1424266268/...etc...
		specificationFile: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/meta/1424...etc...
		commandFile: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/meta/1424266268...etc...


[ :testSuite | testSuite read ] in DIDicto>>_parseResultsFor:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		adapterTestGroups: 	a Dictionary(DIGrepFileContent->a DITestGroup DIJMeterLoadTe...etc...
		notFailingRules: 	nil
		failingRules: 	nil
		testSuite: 	a DITestGroup
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424266293'
		singleShotTask: 	true


Array(SequenceableCollection)>>do:
	Receiver: an Array(a DITestGroup a DITestGroup a DITestGroup a DITestGroup a DITestGroup)
	Arguments and temporary variables: 
		aBlock: 	[ :testSuite | testSuite read ]
		index: 	4
	Receiver's instance variables: 
an Array(a DITestGroup a DITestGroup a DITestGroup a DITestGroup a DITestGroup)

DIDicto>>_parseResultsFor:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		adapterTestGroups: 	a Dictionary(DIGrepFileContent->a DITestGroup DIJMeterLoadTe...etc...
		notFailingRules: 	nil
		failingRules: 	nil
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424266293'
		singleShotTask: 	true


DIDicto>>dictoCheck:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = ...etc...
		adapterTestGroups: 	a Dictionary(DIGrepFileContent->a DITestGroup DIJMeterLoadTe...etc...
		exportFormat: 	nil
		xml: 	nil
		json: 	nil
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424266293'
		singleShotTask: 	true


[ ^ dicto dictoCheck: input ] in DIWebServiceAPI>>getResults
	Receiver: a DIWebServiceAPI
	Arguments and temporary variables: 
		in: 	'/home/otruffer/dicto/bin/analysis/meta/dicto.rules'
		input: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = PhpCl...etc...
		dicto: 	a DIDicto
	Receiver's instance variables: 
		request: 	nil
		response: 	nil
		variables: 	nil
		delegate: 	nil
		principal: 	nil
		credentials: 	nil


BlockClosure>>on:do:
	Receiver: [ ^ dicto dictoCheck: input ]
	Arguments and temporary variables: 
		exception: 	DIException
		handlerAction: 	[ :ex | ^ self error: ex description ]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	DIWebServiceAPI>>getResults
		startpc: 	110
		numArgs: 	0


DIWebServiceAPI>>getResults
	Receiver: a DIWebServiceAPI
	Arguments and temporary variables: 
		in: 	'/home/otruffer/dicto/bin/analysis/meta/dicto.rules'
		input: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = PhpCl...etc...
		dicto: 	a DIDicto
	Receiver's instance variables: 
		request: 	nil
		response: 	nil
		variables: 	nil
		delegate: 	nil
		principal: 	nil
		credentials: 	nil


DIWebServiceHandler>>get
	Receiver: a DIWebServiceHandler
	Arguments and temporary variables: 
		api: 	a DIWebServiceAPI
	Receiver's instance variables: 
		request: 	a ZnRequest(GET /meta/results)
		response: 	nil
		variables: 	an OrderedCollection('meta' 'results')
		delegate: 	a ZnJSONRestServerDelegate
		principal: 	nil
		credentials: 	nil
		dicto: 	a DIDicto


DIWebServiceHandler(ZnRestCall)>>execute
	Receiver: a DIWebServiceHandler
	Arguments and temporary variables: 

	Receiver's instance variables: 
		request: 	a ZnRequest(GET /meta/results)
		response: 	nil
		variables: 	an OrderedCollection('meta' 'results')
		delegate: 	a ZnJSONRestServerDelegate
		principal: 	nil
		credentials: 	nil
		dicto: 	a DIDicto


[ call execute ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


BlockClosure>>on:do:
	Receiver: [ call execute ]
	Arguments and temporary variables: 
		exception: 	ZnRestCallUnauthorized
		handlerAction: 	[ :exception | self unauthorized: exception request ]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
		startpc: 	38
		numArgs: 	0


ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


[ self execute: call ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		request: 	a ZnRequest(GET /meta/results)
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


BlockClosure>>on:do:
	Receiver: [ self execute: call ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :exception | 
request server debugMode
	ifTrue: [ exception pa...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
		startpc: 	99
		numArgs: 	0


ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		request: 	a ZnRequest(GET /meta/results)
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ :delegate | delegate handleRequest: request ] ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(GET /meta/results)
		delegate: 	a ZnJSONRestServerDelegate
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateRequest:do:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(GET /meta/results)
		block: 	[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ ...etc...
		authenticator: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(GET /meta/results)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream)


[ self authenticateAndDelegateRequest: request ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(GET /meta/results)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream)


BlockClosure>>on:do:
	Receiver: [ self authenticateAndDelegateRequest: request ]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :exception | 
self debugMode
	ifTrue: [ exception pass ]
	ifFa...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequ...etc...
		startpc: 	58
		numArgs: 	0


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(GET /meta/results)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(GET /meta/results)
		response: 	nil
		initialMilliseconds: 	10803434
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeOneRequestResponseOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		stream: 	a ZdcSocketStream
		request: 	a ZnRequest(GET /meta/results)
		response: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream)


[ self executeOneRequestResponseOn: stream ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		stream: 	a ZdcSocketStream
		request: 	nil
		response: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream)


[ 
p psValueAt: index put: anObject.
aBlock value ] in ZnCurrentServer(DynamicVariable)>>value:during:
	Receiver: a ZnCurrentServer
	Arguments and temporary variables: 
		anObject: 	a ZnManagingMultiThreadedServer(running 8010)
		aBlock: 	[ self executeOneRequestResponseOn: stream ]
		p: 	a Process in nil
		oldValue: 	nil
	Receiver's instance variables: 
		index: 	5


BlockClosure>>ensure:
	Receiver: [ 
p psValueAt: index put: anObject.
aBlock value ]
	Arguments and temporary variables: 
		aBlock: 	[ p psValueAt: index put: oldValue ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ZnCurrentServer(DynamicVariable)>>value:during:
		startpc: 	62
		numArgs: 	0



--- The full stack ---
NeoJSONReader>>error:
NeoJSONReader>>parseValue
NeoJSONReader>>next
NeoJSONReader class>>fromString:
DIPhpModel>>_loadPhpModel
DIPhpModel>>model
DIVarPhpClass>>allElements
DIVarPhpClass(DIVar)>>elements
DISimpleRule>>subjectElements
DITestGroup>>_failingPredicatesFor:
[ :rule | 
| failingPredicates |
failingPredicates := self _failingPredicatesFor: rule.
failingPredicates size > 0
	ifTrue: [ 
		rule setFailed.
		rule errorPredicates: failingPredicates ] ] in DITestGroup>>read
OrderedCollection>>do:
DITestGroup>>read
[ :testSuite | testSuite read ] in DIDicto>>_parseResultsFor:
Array(SequenceableCollection)>>do:
DIDicto>>_parseResultsFor:
DIDicto>>dictoCheck:
[ ^ dicto dictoCheck: input ] in DIWebServiceAPI>>getResults
BlockClosure>>on:do:
DIWebServiceAPI>>getResults
DIWebServiceHandler>>get
DIWebServiceHandler(ZnRestCall)>>execute
[ call execute ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
BlockClosure>>on:do:
ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
[ self execute: call ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
BlockClosure>>on:do:
ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ :delegate | delegate handleRequest: request ] ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateRequest:do:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
[ self authenticateAndDelegateRequest: request ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
BlockClosure>>on:do:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequest:
ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeOneRequestResponseOn:
[ self executeOneRequestResponseOn: stream ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
[ 
p psValueAt: index put: anObject.
aBlock value ] in ZnCurrentServer(DynamicVariable)>>value:during:
BlockClosure>>ensure:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
ZnCurrentServer(DynamicVariable)>>value:during:
ZnCurrentServer class(DynamicVariable class)>>value:during:
ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
[ self executeRequestResponseLoopOn: stream ] in [ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ] in [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
BlockClosure>>ensure:
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ] in [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
BlockClosure>>ifCurtailed:
[ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: False>>trim
18 February 2015 2:38:18.597332 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
NBCogit NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
https://github.com/pharo-project/pharo-vm.git Commit: 4a0d556150d478ff2de3c9624d2f18e6eaa3fa5c Date: 2014-12-18 18:42:53 +0100 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14893

Image: Pharo3.0 [Latest update: #30863]

False(Object)>>doesNotUnderstand: #trim
	Receiver: false
	Arguments and temporary variables: 
		aMessage: 	trim
		exception: 	MessageNotUnderstood: False>>trim
		resumeValue: 	nil
	Receiver's instance variables: 
false

DILogger>>newSessionWithDSLText:
	Receiver: a DILogger
	Arguments and temporary variables: 
		aDSLText: 	false
		projectRoot: 	'/home/otruffer/DictoCLI/'
	Receiver's instance variables: 
		transcript: 	nil
		sessions: 	an OrderedCollection(an OrderedCollection('==========================...etc...
		lastSession: 	an OrderedCollection('===============================' '// Time: 1...etc...
		outputStream: 	MultiByteFileStream: '/home/otruffer/dicto/bin/analysis/full-test...etc...
		verbose: 	true


DIDicto>>_importText:withImporter:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aText: 	false
		anImporterClass: 	DIDSLImporter
		adjustedText: 	nil
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424266699'
		singleShotTask: 	true


DIDicto>>dictoParse:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	false
		adapterTestGroups: 	nil
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424266699'
		singleShotTask: 	true


[ dicto dictoParse: text ] in DIWebServiceAPI>>postRules:
	Receiver: a DIWebServiceAPI
	Arguments and temporary variables: 
		dict: 	a Dictionary('rules'->false )
		dicto: 	a DIDicto
		text: 	false
	Receiver's instance variables: 
		request: 	nil
		response: 	nil
		variables: 	nil
		delegate: 	nil
		principal: 	nil
		credentials: 	nil


BlockClosure>>on:do:
	Receiver: [ dicto dictoParse: text ]
	Arguments and temporary variables: 
		exception: 	DISyntaxErrorException
		handlerAction: 	[ :ex | ^ self error: 'syntax error' ]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	DIWebServiceAPI>>postRules:
		startpc: 	58
		numArgs: 	0


DIWebServiceAPI>>postRules:
	Receiver: a DIWebServiceAPI
	Arguments and temporary variables: 
		dict: 	a Dictionary('rules'->false )
		dicto: 	a DIDicto
		text: 	false
	Receiver's instance variables: 
		request: 	nil
		response: 	nil
		variables: 	nil
		delegate: 	nil
		principal: 	nil
		credentials: 	nil


DIWebServiceHandler>>post
	Receiver: a DIWebServiceHandler
	Arguments and temporary variables: 
		api: 	a DIWebServiceAPI
	Receiver's instance variables: 
		request: 	a ZnRequest(POST /full-test/rules)
		response: 	nil
		variables: 	an OrderedCollection('full-test' 'rules')
		delegate: 	a ZnJSONRestServerDelegate
		principal: 	nil
		credentials: 	nil
		dicto: 	a DIDicto


DIWebServiceHandler(ZnRestCall)>>execute
	Receiver: a DIWebServiceHandler
	Arguments and temporary variables: 

	Receiver's instance variables: 
		request: 	a ZnRequest(POST /full-test/rules)
		response: 	nil
		variables: 	an OrderedCollection('full-test' 'rules')
		delegate: 	a ZnJSONRestServerDelegate
		principal: 	nil
		credentials: 	nil
		dicto: 	a DIDicto


[ call execute ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


BlockClosure>>on:do:
	Receiver: [ call execute ]
	Arguments and temporary variables: 
		exception: 	ZnRestCallUnauthorized
		handlerAction: 	[ :exception | self unauthorized: exception request ]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
		startpc: 	38
		numArgs: 	0


ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


[ self execute: call ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /full-test/rules)
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


BlockClosure>>on:do:
	Receiver: [ self execute: call ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :exception | 
request server debugMode
	ifTrue: [ exception pa...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
		startpc: 	99
		numArgs: 	0


ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /full-test/rules)
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ :delegate | delegate handleRequest: request ] ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /full-test/rules)
		delegate: 	a ZnJSONRestServerDelegate
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream a ZdcSock...etc...


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateRequest:do:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /full-test/rules)
		block: 	[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ ...etc...
		authenticator: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream a ZdcSock...etc...


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /full-test/rules)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream a ZdcSock...etc...


[ self authenticateAndDelegateRequest: request ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /full-test/rules)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream a ZdcSock...etc...


BlockClosure>>on:do:
	Receiver: [ self authenticateAndDelegateRequest: request ]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :exception | 
self debugMode
	ifTrue: [ exception pass ]
	ifFa...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequ...etc...
		startpc: 	58
		numArgs: 	0


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /full-test/rules)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream a ZdcSock...etc...


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /full-test/rules)
		response: 	nil
		initialMilliseconds: 	11209007
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream a ZdcSock...etc...


ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeOneRequestResponseOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		stream: 	a ZdcSocketStream
		request: 	a ZnRequest(POST /full-test/rules)
		response: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream a ZdcSock...etc...


[ self executeOneRequestResponseOn: stream ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		stream: 	a ZdcSocketStream
		request: 	nil
		response: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream a ZdcSock...etc...


[ 
p psValueAt: index put: anObject.
aBlock value ] in ZnCurrentServer(DynamicVariable)>>value:during:
	Receiver: a ZnCurrentServer
	Arguments and temporary variables: 
		anObject: 	a ZnManagingMultiThreadedServer(running 8010)
		aBlock: 	[ self executeOneRequestResponseOn: stream ]
		p: 	a Process in nil
		oldValue: 	nil
	Receiver's instance variables: 
		index: 	5


BlockClosure>>ensure:
	Receiver: [ 
p psValueAt: index put: anObject.
aBlock value ]
	Arguments and temporary variables: 
		aBlock: 	[ p psValueAt: index put: oldValue ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ZnCurrentServer(DynamicVariable)>>value:during:
		startpc: 	62
		numArgs: 	0


ZnCurrentServer(DynamicVariable)>>value:during:
	Receiver: a ZnCurrentServer
	Arguments and temporary variables: 
		anObject: 	a ZnManagingMultiThreadedServer(running 8010)
		aBlock: 	[ self executeOneRequestResponseOn: stream ]
		p: 	a Process in nil
		oldValue: 	nil
	Receiver's instance variables: 
		index: 	5


ZnCurrentServer class(DynamicVariable class)>>value:during:
	Receiver: ZnCurrentServer
	Arguments and temporary variables: 
		anObject: 	a ZnManagingMultiThreadedServer(running 8010)
		aBlock: 	[ self executeOneRequestResponseOn: stream ]
	Receiver's instance variables: 
		superclass: 	DynamicVariable
		methodDict: 	a MethodDictionary()
		format: 	132
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#ZnCurrentServer
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Zinc-HTTP-Variables'
		traitComposition: 	{}
		localSelectors: 	nil
		hash: 	nil
		soleInstance: 	a ZnCurrentServer


ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		stream: 	a ZdcSocketStream
		request: 	nil
		response: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream a ZdcSock...etc...


[ self executeRequestResponseLoopOn: stream ] in [ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ] in [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		listeningSocket: 	a Socket[waitingForConnection]
		stream: 	a ZdcSocketStream
		socket: 	a Socket[connected]
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream a ZdcSock...etc...


BlockClosure>>ensure:
	Receiver: [ self executeRequestResponseLoopOn: stream ]
	Arguments and temporary variables: 
		aBlock: 	[ 
self log debug: 'Closing stream'.
self closeSocketStream: stream ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		se...etc...
		startpc: 	118
		numArgs: 	0


[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ] in [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		listeningSocket: 	a Socket[waitingForConnection]
		stream: 	a ZdcSocketStream
		socket: 	a Socket[connected]
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream a ZdcSock...etc...


BlockClosure>>ifCurtailed:
	Receiver: [ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing st...etc...
	Arguments and temporary variables: 
		aBlock: 	[ 
self log debug: 'Destroying socket'.
socket destroy ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	[ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
	...etc...
		startpc: 	113
		numArgs: 	0


[ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		listeningSocket: 	a Socket[waitingForConnection]
		stream: 	a ZdcSocketStream
		socket: 	a Socket[connected]
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream a ZdcSock...etc...


[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnec...etc...
		startpc: 	108
		numArgs: 	0



--- The full stack ---
False(Object)>>doesNotUnderstand: #trim
DILogger>>newSessionWithDSLText:
DIDicto>>_importText:withImporter:
DIDicto>>dictoParse:
[ dicto dictoParse: text ] in DIWebServiceAPI>>postRules:
BlockClosure>>on:do:
DIWebServiceAPI>>postRules:
DIWebServiceHandler>>post
DIWebServiceHandler(ZnRestCall)>>execute
[ call execute ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
BlockClosure>>on:do:
ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
[ self execute: call ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
BlockClosure>>on:do:
ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ :delegate | delegate handleRequest: request ] ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateRequest:do:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
[ self authenticateAndDelegateRequest: request ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
BlockClosure>>on:do:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequest:
ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeOneRequestResponseOn:
[ self executeOneRequestResponseOn: stream ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
[ 
p psValueAt: index put: anObject.
aBlock value ] in ZnCurrentServer(DynamicVariable)>>value:during:
BlockClosure>>ensure:
ZnCurrentServer(DynamicVariable)>>value:during:
ZnCurrentServer class(DynamicVariable class)>>value:during:
ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
[ self executeRequestResponseLoopOn: stream ] in [ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ] in [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
BlockClosure>>ensure:
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ] in [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
BlockClosure>>ifCurtailed:
[ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: False>>trim
18 February 2015 2:38:57.099202 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
NBCogit NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
https://github.com/pharo-project/pharo-vm.git Commit: 4a0d556150d478ff2de3c9624d2f18e6eaa3fa5c Date: 2014-12-18 18:42:53 +0100 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14893

Image: Pharo3.0 [Latest update: #30863]

False(Object)>>doesNotUnderstand: #trim
	Receiver: false
	Arguments and temporary variables: 
		aMessage: 	trim
		exception: 	MessageNotUnderstood: False>>trim
		resumeValue: 	nil
	Receiver's instance variables: 
false

DILogger>>newSessionWithDSLText:
	Receiver: a DILogger
	Arguments and temporary variables: 
		aDSLText: 	false
		projectRoot: 	'/home/otruffer/DictoCLI/'
	Receiver's instance variables: 
		transcript: 	nil
		sessions: 	an OrderedCollection(an OrderedCollection('==========================...etc...
		lastSession: 	an OrderedCollection('===============================' '// Time: 1...etc...
		outputStream: 	MultiByteFileStream: '/home/otruffer/dicto/bin/analysis/full-test...etc...
		verbose: 	true


DIDicto>>_importText:withImporter:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aText: 	false
		anImporterClass: 	DIDSLImporter
		adjustedText: 	nil
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424266737'
		singleShotTask: 	true


DIDicto>>dictoParse:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	false
		adapterTestGroups: 	nil
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424266737'
		singleShotTask: 	true


[ dicto dictoParse: text ] in DIWebServiceAPI>>postRules:
	Receiver: a DIWebServiceAPI
	Arguments and temporary variables: 
		dict: 	a Dictionary('rules'->false )
		dicto: 	a DIDicto
		text: 	false
	Receiver's instance variables: 
		request: 	nil
		response: 	nil
		variables: 	nil
		delegate: 	nil
		principal: 	nil
		credentials: 	nil


BlockClosure>>on:do:
	Receiver: [ dicto dictoParse: text ]
	Arguments and temporary variables: 
		exception: 	DISyntaxErrorException
		handlerAction: 	[ :ex | ^ self error: 'syntax error' ]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	DIWebServiceAPI>>postRules:
		startpc: 	58
		numArgs: 	0


DIWebServiceAPI>>postRules:
	Receiver: a DIWebServiceAPI
	Arguments and temporary variables: 
		dict: 	a Dictionary('rules'->false )
		dicto: 	a DIDicto
		text: 	false
	Receiver's instance variables: 
		request: 	nil
		response: 	nil
		variables: 	nil
		delegate: 	nil
		principal: 	nil
		credentials: 	nil


DIWebServiceHandler>>post
	Receiver: a DIWebServiceHandler
	Arguments and temporary variables: 
		api: 	a DIWebServiceAPI
	Receiver's instance variables: 
		request: 	a ZnRequest(POST /full-test/rules)
		response: 	nil
		variables: 	an OrderedCollection('full-test' 'rules')
		delegate: 	a ZnJSONRestServerDelegate
		principal: 	nil
		credentials: 	nil
		dicto: 	a DIDicto


DIWebServiceHandler(ZnRestCall)>>execute
	Receiver: a DIWebServiceHandler
	Arguments and temporary variables: 

	Receiver's instance variables: 
		request: 	a ZnRequest(POST /full-test/rules)
		response: 	nil
		variables: 	an OrderedCollection('full-test' 'rules')
		delegate: 	a ZnJSONRestServerDelegate
		principal: 	nil
		credentials: 	nil
		dicto: 	a DIDicto


[ call execute ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


BlockClosure>>on:do:
	Receiver: [ call execute ]
	Arguments and temporary variables: 
		exception: 	ZnRestCallUnauthorized
		handlerAction: 	[ :exception | self unauthorized: exception request ]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
		startpc: 	38
		numArgs: 	0


ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


[ self execute: call ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /full-test/rules)
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


BlockClosure>>on:do:
	Receiver: [ self execute: call ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :exception | 
request server debugMode
	ifTrue: [ exception pa...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
		startpc: 	99
		numArgs: 	0


ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /full-test/rules)
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ :delegate | delegate handleRequest: request ] ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /full-test/rules)
		delegate: 	a ZnJSONRestServerDelegate
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream a ZdcSock...etc...


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateRequest:do:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /full-test/rules)
		block: 	[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ ...etc...
		authenticator: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream a ZdcSock...etc...


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /full-test/rules)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream a ZdcSock...etc...


[ self authenticateAndDelegateRequest: request ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /full-test/rules)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream a ZdcSock...etc...


BlockClosure>>on:do:
	Receiver: [ self authenticateAndDelegateRequest: request ]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :exception | 
self debugMode
	ifTrue: [ exception pass ]
	ifFa...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequ...etc...
		startpc: 	58
		numArgs: 	0


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /full-test/rules)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream a ZdcSock...etc...


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /full-test/rules)
		response: 	nil
		initialMilliseconds: 	11247513
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream a ZdcSock...etc...


ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeOneRequestResponseOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		stream: 	a ZdcSocketStream
		request: 	a ZnRequest(POST /full-test/rules)
		response: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream a ZdcSock...etc...


[ self executeOneRequestResponseOn: stream ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		stream: 	a ZdcSocketStream
		request: 	nil
		response: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream a ZdcSock...etc...


[ 
p psValueAt: index put: anObject.
aBlock value ] in ZnCurrentServer(DynamicVariable)>>value:during:
	Receiver: a ZnCurrentServer
	Arguments and temporary variables: 
		anObject: 	a ZnManagingMultiThreadedServer(running 8010)
		aBlock: 	[ self executeOneRequestResponseOn: stream ]
		p: 	a Process in nil
		oldValue: 	nil
	Receiver's instance variables: 
		index: 	5


BlockClosure>>ensure:
	Receiver: [ 
p psValueAt: index put: anObject.
aBlock value ]
	Arguments and temporary variables: 
		aBlock: 	[ p psValueAt: index put: oldValue ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ZnCurrentServer(DynamicVariable)>>value:during:
		startpc: 	62
		numArgs: 	0


ZnCurrentServer(DynamicVariable)>>value:during:
	Receiver: a ZnCurrentServer
	Arguments and temporary variables: 
		anObject: 	a ZnManagingMultiThreadedServer(running 8010)
		aBlock: 	[ self executeOneRequestResponseOn: stream ]
		p: 	a Process in nil
		oldValue: 	nil
	Receiver's instance variables: 
		index: 	5


ZnCurrentServer class(DynamicVariable class)>>value:during:
	Receiver: ZnCurrentServer
	Arguments and temporary variables: 
		anObject: 	a ZnManagingMultiThreadedServer(running 8010)
		aBlock: 	[ self executeOneRequestResponseOn: stream ]
	Receiver's instance variables: 
		superclass: 	DynamicVariable
		methodDict: 	a MethodDictionary()
		format: 	132
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#ZnCurrentServer
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Zinc-HTTP-Variables'
		traitComposition: 	{}
		localSelectors: 	nil
		hash: 	nil
		soleInstance: 	a ZnCurrentServer


ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		stream: 	a ZdcSocketStream
		request: 	nil
		response: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream a ZdcSock...etc...


[ self executeRequestResponseLoopOn: stream ] in [ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ] in [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		listeningSocket: 	a Socket[waitingForConnection]
		stream: 	a ZdcSocketStream
		socket: 	a Socket[connected]
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream a ZdcSock...etc...


BlockClosure>>ensure:
	Receiver: [ self executeRequestResponseLoopOn: stream ]
	Arguments and temporary variables: 
		aBlock: 	[ 
self log debug: 'Closing stream'.
self closeSocketStream: stream ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		se...etc...
		startpc: 	118
		numArgs: 	0


[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ] in [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		listeningSocket: 	a Socket[waitingForConnection]
		stream: 	a ZdcSocketStream
		socket: 	a Socket[connected]
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream a ZdcSock...etc...


BlockClosure>>ifCurtailed:
	Receiver: [ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing st...etc...
	Arguments and temporary variables: 
		aBlock: 	[ 
self log debug: 'Destroying socket'.
socket destroy ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	[ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
	...etc...
		startpc: 	113
		numArgs: 	0


[ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		listeningSocket: 	a Socket[waitingForConnection]
		stream: 	a ZdcSocketStream
		socket: 	a Socket[connected]
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream a ZdcSock...etc...


[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnec...etc...
		startpc: 	108
		numArgs: 	0



--- The full stack ---
False(Object)>>doesNotUnderstand: #trim
DILogger>>newSessionWithDSLText:
DIDicto>>_importText:withImporter:
DIDicto>>dictoParse:
[ dicto dictoParse: text ] in DIWebServiceAPI>>postRules:
BlockClosure>>on:do:
DIWebServiceAPI>>postRules:
DIWebServiceHandler>>post
DIWebServiceHandler(ZnRestCall)>>execute
[ call execute ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
BlockClosure>>on:do:
ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
[ self execute: call ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
BlockClosure>>on:do:
ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ :delegate | delegate handleRequest: request ] ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateRequest:do:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
[ self authenticateAndDelegateRequest: request ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
BlockClosure>>on:do:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequest:
ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeOneRequestResponseOn:
[ self executeOneRequestResponseOn: stream ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
[ 
p psValueAt: index put: anObject.
aBlock value ] in ZnCurrentServer(DynamicVariable)>>value:during:
BlockClosure>>ensure:
ZnCurrentServer(DynamicVariable)>>value:during:
ZnCurrentServer class(DynamicVariable class)>>value:during:
ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
[ self executeRequestResponseLoopOn: stream ] in [ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ] in [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
BlockClosure>>ensure:
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ] in [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
BlockClosure>>ifCurtailed:
[ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
FileDoesNotExist: Path / 'home' / 'otruffer' / 'dicto' / 'bin' / 'analysis' / 'full-test' / '1424266761'
18 February 2015 2:41:04.288242 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
NBCogit NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
https://github.com/pharo-project/pharo-vm.git Commit: 4a0d556150d478ff2de3c9624d2f18e6eaa3fa5c Date: 2014-12-18 18:42:53 +0100 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14893

Image: Pharo3.0 [Latest update: #30863]

UnixStore(DiskStore)>>delete:
	Receiver: an UnixStore
	Arguments and temporary variables: 
		path: 	Path / 'home' / 'otruffer' / 'dicto' / 'bin' / 'analysis' / 'full-test' /...etc...
		pathString: 	nil
		encodedPathString: 	nil
	Receiver's instance variables: 
		maxFileNameLength: 	255


FileSystem>>delete:
	Receiver: a FileSystem
	Arguments and temporary variables: 
		aResolvable: 	Path / 'home' / 'otruffer' / 'dicto' / 'bin' / 'analysis' / 'full-...etc...
	Receiver's instance variables: 
		workingDirectory: 	Path / 'home' / 'otruffer' / 'dicto' / 'bin' / 'dicto-engine'...etc...
		store: 	an UnixStore


FileReference>>delete
	Receiver: File @ /home/otruffer/dicto/bin/analysis/full-test/1424266761
	Arguments and temporary variables: 

	Receiver's instance variables: 
		filesystem: 	a FileSystem
		path: 	Path / 'home' / 'otruffer' / 'dicto' / 'bin' / 'analysis' / 'full-test' /...etc...


DeleteVisitor>>visitReference:
	Receiver: a DeleteVisitor
	Arguments and temporary variables: 
		anEntry: 	DirectoryEntry: File @ /home/otruffer/dicto/bin/analysis/full-test/142...etc...
	Receiver's instance variables: 
a DeleteVisitor

DeleteVisitor(FileSystemVisitor)>>visitFile:
	Receiver: a DeleteVisitor
	Arguments and temporary variables: 
		aReference: 	DirectoryEntry: File @ /home/otruffer/dicto/bin/analysis/full-test/...etc...
	Receiver's instance variables: 
a DeleteVisitor

PostorderGuide>>visit:
	Receiver: a PostorderGuide
	Arguments and temporary variables: 
		anEntry: 	DirectoryEntry: File @ /home/otruffer/dicto/bin/analysis/full-test/142...etc...
	Receiver's instance variables: 
		visitor: 	a DeleteVisitor
		work: 	an OrderedCollection(visit: DirectoryEntry: File @ /home/otruffer/dicto/b...etc...
		selectChildren: 	[ :entry | entry isSymlink not ]


Message>>sendTo:
	Receiver: visit: DirectoryEntry: File @ /home/otruffer/dicto/bin/analysis/full-test/1424266761
	Arguments and temporary variables: 
		receiver: 	a PostorderGuide
	Receiver's instance variables: 
		selector: 	#visit:
		args: 	an Array(DirectoryEntry: File @ /home/otruffer/dicto/bin/analysis/full-te...etc...
		lookupClass: 	nil


[ self pop sendTo: self ] in PostorderGuide>>show:
	Receiver: a PostorderGuide
	Arguments and temporary variables: 
		aReference: 	File @ /home/otruffer/dicto/bin/analysis/full-test
	Receiver's instance variables: 
		visitor: 	a DeleteVisitor
		work: 	an OrderedCollection(visit: DirectoryEntry: File @ /home/otruffer/dicto/b...etc...
		selectChildren: 	[ :entry | entry isSymlink not ]


PostorderGuide(FileSystemGuide)>>whileNotDoneDo:
	Receiver: a PostorderGuide
	Arguments and temporary variables: 
		aBlock: 	[ self pop sendTo: self ]
	Receiver's instance variables: 
		visitor: 	a DeleteVisitor
		work: 	an OrderedCollection(visit: DirectoryEntry: File @ /home/otruffer/dicto/b...etc...
		selectChildren: 	[ :entry | entry isSymlink not ]


PostorderGuide>>show:
	Receiver: a PostorderGuide
	Arguments and temporary variables: 
		aReference: 	File @ /home/otruffer/dicto/bin/analysis/full-test
	Receiver's instance variables: 
		visitor: 	a DeleteVisitor
		work: 	an OrderedCollection(visit: DirectoryEntry: File @ /home/otruffer/dicto/b...etc...
		selectChildren: 	[ :entry | entry isSymlink not ]


PostorderGuide class(FileSystemGuide class)>>show:to:selecting:
	Receiver: PostorderGuide
	Arguments and temporary variables: 
		aReference: 	File @ /home/otruffer/dicto/bin/analysis/full-test
		aVisitor: 	a DeleteVisitor
		aBlock: 	[ :entry | entry isSymlink not ]
	Receiver's instance variables: 
		superclass: 	FileSystemGuide
		methodDict: 	a MethodDictionary(#pushTraverse:->PostorderGuide>>#pushTraverse: #...etc...
		format: 	136
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#PostorderGuide
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'FileSystem-Core-Implementation'
		traitComposition: 	{}
		localSelectors: 	nil


DeleteVisitor>>visit:
	Receiver: a DeleteVisitor
	Arguments and temporary variables: 
		aReference: 	File @ /home/otruffer/dicto/bin/analysis/full-test
	Receiver's instance variables: 
a DeleteVisitor

DeleteVisitor class>>delete:
	Receiver: DeleteVisitor
	Arguments and temporary variables: 
		aReference: 	File @ /home/otruffer/dicto/bin/analysis/full-test
	Receiver's instance variables: 
		superclass: 	FileSystemVisitor
		methodDict: 	a MethodDictionary(#visit:->DeleteVisitor>>#visit: #visitReference:...etc...
		format: 	2
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#DeleteVisitor
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'FileSystem-Core-Implementation'
		traitComposition: 	{}
		localSelectors: 	nil


FileReference(AbstractFileReference)>>deleteAll
	Receiver: File @ /home/otruffer/dicto/bin/analysis/full-test
	Arguments and temporary variables: 

	Receiver's instance variables: 
		filesystem: 	a FileSystem
		path: 	Path / 'home' / 'otruffer' / 'dicto' / 'bin' / 'analysis' / 'full-test'


DIUtil class>>folderRemove:
	Receiver: DIUtil
	Arguments and temporary variables: 
		aString: 	'/home/otruffer/dicto/bin/analysis/full-test'
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary()
		format: 	2
		layout: 	a FixedLayout
		instanceVariables: 	#()
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#DIUtil
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Dicto-var-util'
		traitComposition: 	{}
		localSelectors: 	nil


DIWebServiceAPI>>getSuiteKill
	Receiver: a DIWebServiceAPI
	Arguments and temporary variables: 

	Receiver's instance variables: 
		request: 	nil
		response: 	nil
		variables: 	nil
		delegate: 	nil
		principal: 	nil
		credentials: 	nil


DIWebServiceHandler>>delete
	Receiver: a DIWebServiceHandler
	Arguments and temporary variables: 
		api: 	a DIWebServiceAPI
	Receiver's instance variables: 
		request: 	a ZnRequest(DELETE /full-test/suite)
		response: 	nil
		variables: 	an OrderedCollection('full-test' 'suite')
		delegate: 	a ZnJSONRestServerDelegate
		principal: 	nil
		credentials: 	nil
		dicto: 	a DIDicto


DIWebServiceHandler(ZnRestCall)>>execute
	Receiver: a DIWebServiceHandler
	Arguments and temporary variables: 

	Receiver's instance variables: 
		request: 	a ZnRequest(DELETE /full-test/suite)
		response: 	nil
		variables: 	an OrderedCollection('full-test' 'suite')
		delegate: 	a ZnJSONRestServerDelegate
		principal: 	nil
		credentials: 	nil
		dicto: 	a DIDicto


[ call execute ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


BlockClosure>>on:do:
	Receiver: [ call execute ]
	Arguments and temporary variables: 
		exception: 	ZnRestCallUnauthorized
		handlerAction: 	[ :exception | self unauthorized: exception request ]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
		startpc: 	38
		numArgs: 	0


ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


[ self execute: call ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		request: 	a ZnRequest(DELETE /full-test/suite)
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


BlockClosure>>on:do:
	Receiver: [ self execute: call ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :exception | 
request server debugMode
	ifTrue: [ exception pa...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
		startpc: 	99
		numArgs: 	0


ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		request: 	a ZnRequest(DELETE /full-test/suite)
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ :delegate | delegate handleRequest: request ] ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(DELETE /full-test/suite)
		delegate: 	a ZnJSONRestServerDelegate
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream a ZdcSock...etc...


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateRequest:do:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(DELETE /full-test/suite)
		block: 	[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ ...etc...
		authenticator: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream a ZdcSock...etc...


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(DELETE /full-test/suite)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream a ZdcSock...etc...


[ self authenticateAndDelegateRequest: request ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(DELETE /full-test/suite)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream a ZdcSock...etc...


BlockClosure>>on:do:
	Receiver: [ self authenticateAndDelegateRequest: request ]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :exception | 
self debugMode
	ifTrue: [ exception pass ]
	ifFa...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequ...etc...
		startpc: 	58
		numArgs: 	0


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(DELETE /full-test/suite)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream a ZdcSock...etc...


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(DELETE /full-test/suite)
		response: 	nil
		initialMilliseconds: 	11374689
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream a ZdcSock...etc...


ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeOneRequestResponseOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		stream: 	a ZdcSocketStream
		request: 	a ZnRequest(DELETE /full-test/suite)
		response: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream a ZdcSock...etc...


[ self executeOneRequestResponseOn: stream ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		stream: 	a ZdcSocketStream
		request: 	nil
		response: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream a ZdcSock...etc...


[ 
p psValueAt: index put: anObject.
aBlock value ] in ZnCurrentServer(DynamicVariable)>>value:during:
	Receiver: a ZnCurrentServer
	Arguments and temporary variables: 
		anObject: 	a ZnManagingMultiThreadedServer(running 8010)
		aBlock: 	[ self executeOneRequestResponseOn: stream ]
		p: 	a Process in nil
		oldValue: 	nil
	Receiver's instance variables: 
		index: 	5


BlockClosure>>ensure:
	Receiver: [ 
p psValueAt: index put: anObject.
aBlock value ]
	Arguments and temporary variables: 
		aBlock: 	[ p psValueAt: index put: oldValue ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ZnCurrentServer(DynamicVariable)>>value:during:
		startpc: 	62
		numArgs: 	0


ZnCurrentServer(DynamicVariable)>>value:during:
	Receiver: a ZnCurrentServer
	Arguments and temporary variables: 
		anObject: 	a ZnManagingMultiThreadedServer(running 8010)
		aBlock: 	[ self executeOneRequestResponseOn: stream ]
		p: 	a Process in nil
		oldValue: 	nil
	Receiver's instance variables: 
		index: 	5


ZnCurrentServer class(DynamicVariable class)>>value:during:
	Receiver: ZnCurrentServer
	Arguments and temporary variables: 
		anObject: 	a ZnManagingMultiThreadedServer(running 8010)
		aBlock: 	[ self executeOneRequestResponseOn: stream ]
	Receiver's instance variables: 
		superclass: 	DynamicVariable
		methodDict: 	a MethodDictionary()
		format: 	132
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#ZnCurrentServer
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Zinc-HTTP-Variables'
		traitComposition: 	{}
		localSelectors: 	nil
		hash: 	nil
		soleInstance: 	a ZnCurrentServer


ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		stream: 	a ZdcSocketStream
		request: 	nil
		response: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream a ZdcSock...etc...


[ self executeRequestResponseLoopOn: stream ] in [ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ] in [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		listeningSocket: 	a Socket[waitingForConnection]
		stream: 	a ZdcSocketStream
		socket: 	a Socket[connected]
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream a ZdcSock...etc...



--- The full stack ---
UnixStore(DiskStore)>>delete:
FileSystem>>delete:
FileReference>>delete
DeleteVisitor>>visitReference:
DeleteVisitor(FileSystemVisitor)>>visitFile:
PostorderGuide>>visit:
Message>>sendTo:
[ self pop sendTo: self ] in PostorderGuide>>show:
PostorderGuide(FileSystemGuide)>>whileNotDoneDo:
PostorderGuide>>show:
PostorderGuide class(FileSystemGuide class)>>show:to:selecting:
DeleteVisitor>>visit:
DeleteVisitor class>>delete:
FileReference(AbstractFileReference)>>deleteAll
DIUtil class>>folderRemove:
DIWebServiceAPI>>getSuiteKill
DIWebServiceHandler>>delete
DIWebServiceHandler(ZnRestCall)>>execute
[ call execute ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
BlockClosure>>on:do:
ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
[ self execute: call ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
BlockClosure>>on:do:
ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ :delegate | delegate handleRequest: request ] ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateRequest:do:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
[ self authenticateAndDelegateRequest: request ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
BlockClosure>>on:do:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequest:
ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeOneRequestResponseOn:
[ self executeOneRequestResponseOn: stream ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
[ 
p psValueAt: index put: anObject.
aBlock value ] in ZnCurrentServer(DynamicVariable)>>value:during:
BlockClosure>>ensure:
ZnCurrentServer(DynamicVariable)>>value:during:
ZnCurrentServer class(DynamicVariable class)>>value:during:
ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
[ self executeRequestResponseLoopOn: stream ] in [ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ] in [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
BlockClosure>>ensure:
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ] in [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
BlockClosure>>ifCurtailed:
[ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
NeoJSONParseError: invalid input: nil
18 February 2015 2:44:30.042132 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
NBCogit NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
https://github.com/pharo-project/pharo-vm.git Commit: 4a0d556150d478ff2de3c9624d2f18e6eaa3fa5c Date: 2014-12-18 18:42:53 +0100 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14893

Image: Pharo3.0 [Latest update: #30863]

NeoJSONReader>>error:
	Receiver: a NeoJSONReader
	Arguments and temporary variables: 
		text: 	'invalid input: nil'
	Receiver's instance variables: 
		mappings: 	nil
		readStream: 	a ReadStream
		stringStream: 	nil
		listClass: 	nil
		mapClass: 	nil
		propertyNamesAsSymbols: 	false


NeoJSONReader>>parseValue
	Receiver: a NeoJSONReader
	Arguments and temporary variables: 
		char: 	nil
	Receiver's instance variables: 
		mappings: 	nil
		readStream: 	a ReadStream
		stringStream: 	nil
		listClass: 	nil
		mapClass: 	nil
		propertyNamesAsSymbols: 	false


NeoJSONReader>>next
	Receiver: a NeoJSONReader
	Arguments and temporary variables: 

	Receiver's instance variables: 
		mappings: 	nil
		readStream: 	a ReadStream
		stringStream: 	nil
		listClass: 	nil
		mapClass: 	nil
		propertyNamesAsSymbols: 	false


NeoJSONReader class>>fromString:
	Receiver: NeoJSONReader
	Arguments and temporary variables: 
		string: 	''
	Receiver's instance variables: 
		superclass: 	NeoJSONMapper
		methodDict: 	a MethodDictionary(#atEnd->NeoJSONReader>>#atEnd #close->NeoJSONRea...etc...
		format: 	142
		layout: 	a FixedLayout
		instanceVariables: 	#(#readStream #stringStream #listClass #mapClass #propertyNa...etc...
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#NeoJSONReader
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Neo-JSON-Core'
		traitComposition: 	{}
		localSelectors: 	nil


DIPhpModel>>_loadPhpModel
	Receiver: a DIPhpModel
	Arguments and temporary variables: 

	Receiver's instance variables: 
		defRules: 	a DICollectionRule()
		defVars: 	a DICollectionVar(SYSTEM)
		analysisID: 	'1424267070'
		additionalProperties: 	a Dictionary()
		ruleCounter: 	0
		varCounter: 	0
		defVarElements: 	a DICollectionVarElements()
		defVarInvertedElements: 	a DICollectionVarElements()
		model: 	nil


DIPhpModel>>model
	Receiver: a DIPhpModel
	Arguments and temporary variables: 

	Receiver's instance variables: 
		defRules: 	a DICollectionRule()
		defVars: 	a DICollectionVar(SYSTEM)
		analysisID: 	'1424267070'
		additionalProperties: 	a Dictionary()
		ruleCounter: 	0
		varCounter: 	0
		defVarElements: 	a DICollectionVarElements()
		defVarInvertedElements: 	a DICollectionVarElements()
		model: 	nil


DIVarPhpClass>>allElements
	Receiver: RuleResult
	Arguments and temporary variables: 

	Receiver's instance variables: 
		isFirst: 	false
		dslText: 	'RuleResult=PhpClass with name:"Dicto\\RuleResult"'
		type: 	'PhpClass'
		id: 	1
		entity: 	nil
		name: 	'RuleResult'
		specifiers: 	an OrderedCollection(name=Dicto\\RuleResult)
		isInverted: 	false
		elements: 	a DICollectionVarElements()
		invertedElements: 	a DICollectionVarElements()


DIVarPhpClass(DIVar)>>elements
	Receiver: RuleResult
	Arguments and temporary variables: 
		valid: 	nil
	Receiver's instance variables: 
		isFirst: 	false
		dslText: 	'RuleResult=PhpClass with name:"Dicto\\RuleResult"'
		type: 	'PhpClass'
		id: 	1
		entity: 	nil
		name: 	'RuleResult'
		specifiers: 	an OrderedCollection(name=Dicto\\RuleResult)
		isInverted: 	false
		elements: 	a DICollectionVarElements()
		invertedElements: 	a DICollectionVarElements()


DISimpleRule>>subjectElements
	Receiver: RuleResult cannot depend on DictoTalker
	Arguments and temporary variables: 
		subjectElements: 	nil
	Receiver's instance variables: 
		isFirst: 	nil
		dslText: 	'RuleResult cannot depend on DictoTalker'
		type: 	#cannot
		id: 	1001
		entity: 	nil
		subjects: 	an Array(RuleResult)
		predicates: 	an Array(depend on DictoTalker)
		subRules: 	nil
		candidateAdapters: 	a SortedCollection(DIPhpDependencies)
		chosenAdapter: 	DIPhpDependencies
		hasFailed: 	false
		failureMessage: 	''
		failingPredicates: 	a Set()
		hasSubjectInverted: 	false
		hasPredicateInverted: 	false


printRulesEntityRelationship: someRules
	| res processedPredicates |
	res := ''.
	processedPredicates := Set new.
	someRules
		do: [ :rule | 
			| predicateSelector subjectElements argumentElements data isPredicateInv isSubjectInv |
			predicateSelector := (rule predicate nameNormalized , ':') asSymbol.
			isPredicateInv := rule hasPredicateInverted.
			isSubjectInv := rule hasSubjectInverted.
			subjectElements := rule subjectElements.
			argumentElements := rule argumentElements.
			subjectElements
				do: [ :subject | 
					argumentElements
						do: [ :argument | 
							| relId spec msgPass msgFail |
							relId := subject id , '-' , argument id.
							msgPass := subject id , '.' , rule predicate name , '(' , argument id , ')=True'.
							msgFail := subject id , '.' , rule predicate name , '(' , argument id , ')=False'.
							(processedPredicates includes: relId)
								ifFalse: [ 
									data := {(#subject -> subject value).
									(#argument -> argument value).
									(#ruleId -> rule id).
									(#propertyId -> relId).
									(#msgPass -> msgPass).
									(#msgFail -> msgFail)} asDictionary.
									spec := self perform: predicateSelector withArguments: {data}.
									spec := spec
										dictoReplace:
											{('$subject' -> subject value).
											('$argument' -> argument value).
											('$ruleId' -> rule id).
											('$propertyId' -> relId).
											('$msgPass' -> msgPass).
											('$msgFail' -> msgFail)}.
									res := res , spec ].	"avoid duplicate predicate evaluations"
							processedPredicates add: relId ] ] ].
	^ res in DIPhpDependencies(DIAdapter)>>printRulesEntityRelationship:
	Receiver: a DIPhpDependencies
	Arguments and temporary variables: 
		someRules: 	a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalk...etc...
		processedPredicates: 	a Set()
		data: 	nil
		res: 	''
		rule: 	RuleResult cannot depend on DictoTalker
		predicateSelector: 	#dependOn:
		subjectElements: 	nil
		argumentElements: 	nil
		isPredicateInv: 	false
		isSubjectInv: 	false
	Receiver's instance variables: 
		output: 	''
		commandOutput: 	''
		NEWLINE: 	'
'
		rules: 	a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalker m...etc...
		varSynonyms: 	nil
		sessionId: 	'1424267070'
		TIMESTAMP: 	'1424267070'
		TOOLNAME: 	'DIPhpDependencies'
		PROJECTROOT: 	'/home/otruffer/DictoCLI/'
		PROJECTSRC: 	'./'
		PROJECTBIN: 	'./'
		RESULTFILE: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/full-test/0/DIPh...etc...
		TESTFILE: 	nil
		testInputFileExt: 	'.st'
		SYSTEM: 	SYSTEM


DICollectionRule(OrderedCollection)>>do:
	Receiver: a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalker must depend on Rule...etc...
	Arguments and temporary variables: 
		aBlock: 	printRulesEntityRelationship: someRules
	| res processedPredicates |
	r...etc...
		index: 	1
	Receiver's instance variables: 
		array: 	an Array(RuleResult cannot depend on DictoTalker DictoTalker must depend...etc...
		firstIndex: 	1
		lastIndex: 	3
		elements: 	nil
		elements: 	nil


DIPhpDependencies(DIAdapter)>>printRulesEntityRelationship:
	Receiver: a DIPhpDependencies
	Arguments and temporary variables: 
		res: 	''
		someRules: 	a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalk...etc...
		processedPredicates: 	a Set()
	Receiver's instance variables: 
		output: 	''
		commandOutput: 	''
		NEWLINE: 	'
'
		rules: 	a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalker m...etc...
		varSynonyms: 	nil
		sessionId: 	'1424267070'
		TIMESTAMP: 	'1424267070'
		TOOLNAME: 	'DIPhpDependencies'
		PROJECTROOT: 	'/home/otruffer/DictoCLI/'
		PROJECTSRC: 	'./'
		PROJECTBIN: 	'./'
		RESULTFILE: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/full-test/0/DIPh...etc...
		TESTFILE: 	nil
		testInputFileExt: 	'.st'
		SYSTEM: 	SYSTEM


DIPhpDependencies(DIAdapter)>>printRules
	Receiver: a DIPhpDependencies
	Arguments and temporary variables: 
		res: 	nil
		allRules: 	a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalke...etc...
	Receiver's instance variables: 
		output: 	''
		commandOutput: 	''
		NEWLINE: 	'
'
		rules: 	a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalker m...etc...
		varSynonyms: 	nil
		sessionId: 	'1424267070'
		TIMESTAMP: 	'1424267070'
		TOOLNAME: 	'DIPhpDependencies'
		PROJECTROOT: 	'/home/otruffer/DictoCLI/'
		PROJECTSRC: 	'./'
		PROJECTBIN: 	'./'
		RESULTFILE: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/full-test/0/DIPh...etc...
		TESTFILE: 	nil
		testInputFileExt: 	'.st'
		SYSTEM: 	SYSTEM


DIPhpDependencies>>testInput
	Receiver: a DIPhpDependencies
	Arguments and temporary variables: 
		strRules: 	nil
	Receiver's instance variables: 
		output: 	''
		commandOutput: 	''
		NEWLINE: 	'
'
		rules: 	a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalker m...etc...
		varSynonyms: 	nil
		sessionId: 	'1424267070'
		TIMESTAMP: 	'1424267070'
		TOOLNAME: 	'DIPhpDependencies'
		PROJECTROOT: 	'/home/otruffer/DictoCLI/'
		PROJECTSRC: 	'./'
		PROJECTBIN: 	'./'
		RESULTFILE: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/full-test/0/DIPh...etc...
		TESTFILE: 	nil
		testInputFileExt: 	'.st'
		SYSTEM: 	SYSTEM


DITestGroup>>build
	Receiver: a DITestGroup
	Arguments and temporary variables: 

	Receiver's instance variables: 
		rules: 	an OrderedCollection(RuleResult cannot depend on DictoTalker DictoTalker...etc...
		adapter: 	a DIPhpDependencies
		runCommandText: 	nil
		testSpecification: 	nil
		adapterID: 	'DIPhpDependencies'
		resultFile: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/full-test/142426...etc...
		specificationFile: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/full-test...etc...
		commandFile: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/full-test/14242...etc...


[ :testGroup | testGroup build ] in DIDicto>>dictoBuild:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = ...etc...
		adapterTestGroups: 	a Dictionary(DIGrepFileContent->a DITestGroup DIJMeterLoadTe...etc...
		testGroup: 	a DITestGroup
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424267070'
		singleShotTask: 	false


Array(SequenceableCollection)>>do:
	Receiver: an Array(a DITestGroup a DITestGroup a DITestGroup a DITestGroup a DITestGroup)
	Arguments and temporary variables: 
		aBlock: 	[ :testGroup | testGroup build ]
		index: 	4
	Receiver's instance variables: 
an Array(a DITestGroup a DITestGroup a DITestGroup a DITestGroup a DITestGroup)

DIDicto>>dictoBuild:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = ...etc...
		adapterTestGroups: 	a Dictionary(DIGrepFileContent->a DITestGroup DIJMeterLoadTe...etc...
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424267070'
		singleShotTask: 	false


DIDicto>>dictoRun:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = ...etc...
		adapterTestGroups: 	nil
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424267070'
		singleShotTask: 	false


DIDicto>>dictoAll:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = ...etc...
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424267070'
		singleShotTask: 	false


[ DIDicto new dictoAll: input ] in DIWebServiceAPI>>getRun
	Receiver: a DIWebServiceAPI
	Arguments and temporary variables: 
		in: 	'/home/otruffer/dicto/bin/analysis/full-test/dicto.rules'
		input: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = PhpCl...etc...
		rulesFailed: 	nil
		rulesTotal: 	nil
	Receiver's instance variables: 
		request: 	nil
		response: 	nil
		variables: 	nil
		delegate: 	nil
		principal: 	nil
		credentials: 	nil


BlockClosure>>on:do:
	Receiver: [ DIDicto new dictoAll: input ]
	Arguments and temporary variables: 
		exception: 	DIException
		handlerAction: 	[ :ex | ^ self error: ex description ]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	DIWebServiceAPI>>getRun
		startpc: 	138
		numArgs: 	0


DIWebServiceAPI>>getRun
	Receiver: a DIWebServiceAPI
	Arguments and temporary variables: 
		in: 	'/home/otruffer/dicto/bin/analysis/full-test/dicto.rules'
		input: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = PhpCl...etc...
		rulesFailed: 	nil
		rulesTotal: 	nil
	Receiver's instance variables: 
		request: 	nil
		response: 	nil
		variables: 	nil
		delegate: 	nil
		principal: 	nil
		credentials: 	nil


DIWebServiceHandler>>post
	Receiver: a DIWebServiceHandler
	Arguments and temporary variables: 
		api: 	a DIWebServiceAPI
	Receiver's instance variables: 
		request: 	a ZnRequest(POST /full-test/run)
		response: 	nil
		variables: 	an OrderedCollection('full-test' 'run')
		delegate: 	a ZnJSONRestServerDelegate
		principal: 	nil
		credentials: 	nil
		dicto: 	a DIDicto


DIWebServiceHandler(ZnRestCall)>>execute
	Receiver: a DIWebServiceHandler
	Arguments and temporary variables: 

	Receiver's instance variables: 
		request: 	a ZnRequest(POST /full-test/run)
		response: 	nil
		variables: 	an OrderedCollection('full-test' 'run')
		delegate: 	a ZnJSONRestServerDelegate
		principal: 	nil
		credentials: 	nil
		dicto: 	a DIDicto


[ call execute ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


BlockClosure>>on:do:
	Receiver: [ call execute ]
	Arguments and temporary variables: 
		exception: 	ZnRestCallUnauthorized
		handlerAction: 	[ :exception | self unauthorized: exception request ]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
		startpc: 	38
		numArgs: 	0


ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


[ self execute: call ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /full-test/run)
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


BlockClosure>>on:do:
	Receiver: [ self execute: call ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :exception | 
request server debugMode
	ifTrue: [ exception pa...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
		startpc: 	99
		numArgs: 	0


ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /full-test/run)
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ :delegate | delegate handleRequest: request ] ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /full-test/run)
		delegate: 	a ZnJSONRestServerDelegate
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream a ZdcSock...etc...


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateRequest:do:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /full-test/run)
		block: 	[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ ...etc...
		authenticator: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream a ZdcSock...etc...


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /full-test/run)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream a ZdcSock...etc...


[ self authenticateAndDelegateRequest: request ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /full-test/run)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream a ZdcSock...etc...


BlockClosure>>on:do:
	Receiver: [ self authenticateAndDelegateRequest: request ]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :exception | 
self debugMode
	ifTrue: [ exception pass ]
	ifFa...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequ...etc...
		startpc: 	58
		numArgs: 	0


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /full-test/run)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream a ZdcSock...etc...


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /full-test/run)
		response: 	nil
		initialMilliseconds: 	11580367
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream a ZdcSock...etc...


ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeOneRequestResponseOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		stream: 	a ZdcSocketStream
		request: 	a ZnRequest(POST /full-test/run)
		response: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream a ZdcSock...etc...



--- The full stack ---
NeoJSONReader>>error:
NeoJSONReader>>parseValue
NeoJSONReader>>next
NeoJSONReader class>>fromString:
DIPhpModel>>_loadPhpModel
DIPhpModel>>model
DIVarPhpClass>>allElements
DIVarPhpClass(DIVar)>>elements
DISimpleRule>>subjectElements
printRulesEntityRelationship: someRules
	| res processedPredicates |
	res := ''.
	processedPredicates := Set new.
	someRules
		do: [ :rule | 
			| predicateSelector subjectElements argumentElements data isPredicateInv isSubjectInv |
			predicateSelector := (rule predicate nameNormalized , ':') asSymbol.
			isPredicateInv := rule hasPredicateInverted.
			isSubjectInv := rule hasSubjectInverted.
			subjectElements := rule subjectElements.
			argumentElements := rule argumentElements.
			subjectElements
				do: [ :subject | 
					argumentElements
						do: [ :argument | 
							| relId spec msgPass msgFail |
							relId := subject id , '-' , argument id.
							msgPass := subject id , '.' , rule predicate name , '(' , argument id , ')=True'.
							msgFail := subject id , '.' , rule predicate name , '(' , argument id , ')=False'.
							(processedPredicates includes: relId)
								ifFalse: [ 
									data := {(#subject -> subject value).
									(#argument -> argument value).
									(#ruleId -> rule id).
									(#propertyId -> relId).
									(#msgPass -> msgPass).
									(#msgFail -> msgFail)} asDictionary.
									spec := self perform: predicateSelector withArguments: {data}.
									spec := spec
										dictoReplace:
											{('$subject' -> subject value).
											('$argument' -> argument value).
											('$ruleId' -> rule id).
											('$propertyId' -> relId).
											('$msgPass' -> msgPass).
											('$msgFail' -> msgFail)}.
									res := res , spec ].	"avoid duplicate predicate evaluations"
							processedPredicates add: relId ] ] ].
	^ res in DIPhpDependencies(DIAdapter)>>printRulesEntityRelationship:
DICollectionRule(OrderedCollection)>>do:
DIPhpDependencies(DIAdapter)>>printRulesEntityRelationship:
DIPhpDependencies(DIAdapter)>>printRules
DIPhpDependencies>>testInput
DITestGroup>>build
[ :testGroup | testGroup build ] in DIDicto>>dictoBuild:
Array(SequenceableCollection)>>do:
DIDicto>>dictoBuild:
DIDicto>>dictoRun:
DIDicto>>dictoAll:
[ DIDicto new dictoAll: input ] in DIWebServiceAPI>>getRun
BlockClosure>>on:do:
DIWebServiceAPI>>getRun
DIWebServiceHandler>>post
DIWebServiceHandler(ZnRestCall)>>execute
[ call execute ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
BlockClosure>>on:do:
ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
[ self execute: call ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
BlockClosure>>on:do:
ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ :delegate | delegate handleRequest: request ] ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateRequest:do:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
[ self authenticateAndDelegateRequest: request ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
BlockClosure>>on:do:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequest:
ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeOneRequestResponseOn:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ self executeOneRequestResponseOn: stream ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
[ 
p psValueAt: index put: anObject.
aBlock value ] in ZnCurrentServer(DynamicVariable)>>value:during:
BlockClosure>>ensure:
ZnCurrentServer(DynamicVariable)>>value:during:
ZnCurrentServer class(DynamicVariable class)>>value:during:
ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
[ self executeRequestResponseLoopOn: stream ] in [ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ] in [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
BlockClosure>>ensure:
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ] in [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
BlockClosure>>ifCurtailed:
[ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
FileDoesNotExist: Path / 'home' / 'otruffer' / 'dicto' / 'bin' / 'analysis' / 'full-test' / '1424266761'
18 February 2015 2:44:35.488002 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
NBCogit NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
https://github.com/pharo-project/pharo-vm.git Commit: 4a0d556150d478ff2de3c9624d2f18e6eaa3fa5c Date: 2014-12-18 18:42:53 +0100 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14893

Image: Pharo3.0 [Latest update: #30863]

UnixStore(DiskStore)>>delete:
	Receiver: an UnixStore
	Arguments and temporary variables: 
		path: 	Path / 'home' / 'otruffer' / 'dicto' / 'bin' / 'analysis' / 'full-test' /...etc...
		pathString: 	nil
		encodedPathString: 	nil
	Receiver's instance variables: 
		maxFileNameLength: 	255


FileSystem>>delete:
	Receiver: a FileSystem
	Arguments and temporary variables: 
		aResolvable: 	Path / 'home' / 'otruffer' / 'dicto' / 'bin' / 'analysis' / 'full-...etc...
	Receiver's instance variables: 
		workingDirectory: 	Path / 'home' / 'otruffer' / 'dicto' / 'bin' / 'dicto-engine'...etc...
		store: 	an UnixStore


FileReference>>delete
	Receiver: File @ /home/otruffer/dicto/bin/analysis/full-test/1424266761
	Arguments and temporary variables: 

	Receiver's instance variables: 
		filesystem: 	a FileSystem
		path: 	Path / 'home' / 'otruffer' / 'dicto' / 'bin' / 'analysis' / 'full-test' /...etc...


DeleteVisitor>>visitReference:
	Receiver: a DeleteVisitor
	Arguments and temporary variables: 
		anEntry: 	DirectoryEntry: File @ /home/otruffer/dicto/bin/analysis/full-test/142...etc...
	Receiver's instance variables: 
a DeleteVisitor

DeleteVisitor(FileSystemVisitor)>>visitFile:
	Receiver: a DeleteVisitor
	Arguments and temporary variables: 
		aReference: 	DirectoryEntry: File @ /home/otruffer/dicto/bin/analysis/full-test/...etc...
	Receiver's instance variables: 
a DeleteVisitor

PostorderGuide>>visit:
	Receiver: a PostorderGuide
	Arguments and temporary variables: 
		anEntry: 	DirectoryEntry: File @ /home/otruffer/dicto/bin/analysis/full-test/142...etc...
	Receiver's instance variables: 
		visitor: 	a DeleteVisitor
		work: 	an OrderedCollection(visit: DirectoryEntry: File @ /home/otruffer/dicto/b...etc...
		selectChildren: 	[ :entry | entry isSymlink not ]


Message>>sendTo:
	Receiver: visit: DirectoryEntry: File @ /home/otruffer/dicto/bin/analysis/full-test/1424266761
	Arguments and temporary variables: 
		receiver: 	a PostorderGuide
	Receiver's instance variables: 
		selector: 	#visit:
		args: 	an Array(DirectoryEntry: File @ /home/otruffer/dicto/bin/analysis/full-te...etc...
		lookupClass: 	nil


[ self pop sendTo: self ] in PostorderGuide>>show:
	Receiver: a PostorderGuide
	Arguments and temporary variables: 
		aReference: 	File @ /home/otruffer/dicto/bin/analysis/full-test
	Receiver's instance variables: 
		visitor: 	a DeleteVisitor
		work: 	an OrderedCollection(visit: DirectoryEntry: File @ /home/otruffer/dicto/b...etc...
		selectChildren: 	[ :entry | entry isSymlink not ]


PostorderGuide(FileSystemGuide)>>whileNotDoneDo:
	Receiver: a PostorderGuide
	Arguments and temporary variables: 
		aBlock: 	[ self pop sendTo: self ]
	Receiver's instance variables: 
		visitor: 	a DeleteVisitor
		work: 	an OrderedCollection(visit: DirectoryEntry: File @ /home/otruffer/dicto/b...etc...
		selectChildren: 	[ :entry | entry isSymlink not ]


PostorderGuide>>show:
	Receiver: a PostorderGuide
	Arguments and temporary variables: 
		aReference: 	File @ /home/otruffer/dicto/bin/analysis/full-test
	Receiver's instance variables: 
		visitor: 	a DeleteVisitor
		work: 	an OrderedCollection(visit: DirectoryEntry: File @ /home/otruffer/dicto/b...etc...
		selectChildren: 	[ :entry | entry isSymlink not ]


PostorderGuide class(FileSystemGuide class)>>show:to:selecting:
	Receiver: PostorderGuide
	Arguments and temporary variables: 
		aReference: 	File @ /home/otruffer/dicto/bin/analysis/full-test
		aVisitor: 	a DeleteVisitor
		aBlock: 	[ :entry | entry isSymlink not ]
	Receiver's instance variables: 
		superclass: 	FileSystemGuide
		methodDict: 	a MethodDictionary(#pushTraverse:->PostorderGuide>>#pushTraverse: #...etc...
		format: 	136
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#PostorderGuide
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'FileSystem-Core-Implementation'
		traitComposition: 	{}
		localSelectors: 	nil


DeleteVisitor>>visit:
	Receiver: a DeleteVisitor
	Arguments and temporary variables: 
		aReference: 	File @ /home/otruffer/dicto/bin/analysis/full-test
	Receiver's instance variables: 
a DeleteVisitor

DeleteVisitor class>>delete:
	Receiver: DeleteVisitor
	Arguments and temporary variables: 
		aReference: 	File @ /home/otruffer/dicto/bin/analysis/full-test
	Receiver's instance variables: 
		superclass: 	FileSystemVisitor
		methodDict: 	a MethodDictionary(#visit:->DeleteVisitor>>#visit: #visitReference:...etc...
		format: 	2
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#DeleteVisitor
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'FileSystem-Core-Implementation'
		traitComposition: 	{}
		localSelectors: 	nil


FileReference(AbstractFileReference)>>deleteAll
	Receiver: File @ /home/otruffer/dicto/bin/analysis/full-test
	Arguments and temporary variables: 

	Receiver's instance variables: 
		filesystem: 	a FileSystem
		path: 	Path / 'home' / 'otruffer' / 'dicto' / 'bin' / 'analysis' / 'full-test'


DIUtil class>>folderRemove:
	Receiver: DIUtil
	Arguments and temporary variables: 
		aString: 	'/home/otruffer/dicto/bin/analysis/full-test'
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary()
		format: 	2
		layout: 	a FixedLayout
		instanceVariables: 	#()
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#DIUtil
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Dicto-var-util'
		traitComposition: 	{}
		localSelectors: 	nil


DIWebServiceAPI>>getSuiteKill
	Receiver: a DIWebServiceAPI
	Arguments and temporary variables: 

	Receiver's instance variables: 
		request: 	nil
		response: 	nil
		variables: 	nil
		delegate: 	nil
		principal: 	nil
		credentials: 	nil


DIWebServiceHandler>>delete
	Receiver: a DIWebServiceHandler
	Arguments and temporary variables: 
		api: 	a DIWebServiceAPI
	Receiver's instance variables: 
		request: 	a ZnRequest(DELETE /full-test/suite)
		response: 	nil
		variables: 	an OrderedCollection('full-test' 'suite')
		delegate: 	a ZnJSONRestServerDelegate
		principal: 	nil
		credentials: 	nil
		dicto: 	a DIDicto


DIWebServiceHandler(ZnRestCall)>>execute
	Receiver: a DIWebServiceHandler
	Arguments and temporary variables: 

	Receiver's instance variables: 
		request: 	a ZnRequest(DELETE /full-test/suite)
		response: 	nil
		variables: 	an OrderedCollection('full-test' 'suite')
		delegate: 	a ZnJSONRestServerDelegate
		principal: 	nil
		credentials: 	nil
		dicto: 	a DIDicto


[ call execute ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


BlockClosure>>on:do:
	Receiver: [ call execute ]
	Arguments and temporary variables: 
		exception: 	ZnRestCallUnauthorized
		handlerAction: 	[ :exception | self unauthorized: exception request ]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
		startpc: 	38
		numArgs: 	0


ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


[ self execute: call ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		request: 	a ZnRequest(DELETE /full-test/suite)
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


BlockClosure>>on:do:
	Receiver: [ self execute: call ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :exception | 
request server debugMode
	ifTrue: [ exception pa...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
		startpc: 	99
		numArgs: 	0


ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		request: 	a ZnRequest(DELETE /full-test/suite)
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ :delegate | delegate handleRequest: request ] ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(DELETE /full-test/suite)
		delegate: 	a ZnJSONRestServerDelegate
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream a ZdcSock...etc...


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateRequest:do:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(DELETE /full-test/suite)
		block: 	[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ ...etc...
		authenticator: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream a ZdcSock...etc...


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(DELETE /full-test/suite)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream a ZdcSock...etc...


[ self authenticateAndDelegateRequest: request ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(DELETE /full-test/suite)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream a ZdcSock...etc...


BlockClosure>>on:do:
	Receiver: [ self authenticateAndDelegateRequest: request ]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :exception | 
self debugMode
	ifTrue: [ exception pass ]
	ifFa...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequ...etc...
		startpc: 	58
		numArgs: 	0


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(DELETE /full-test/suite)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream a ZdcSock...etc...


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(DELETE /full-test/suite)
		response: 	nil
		initialMilliseconds: 	11585904
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream a ZdcSock...etc...


ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeOneRequestResponseOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		stream: 	a ZdcSocketStream
		request: 	a ZnRequest(DELETE /full-test/suite)
		response: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream a ZdcSock...etc...


[ self executeOneRequestResponseOn: stream ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		stream: 	a ZdcSocketStream
		request: 	nil
		response: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream a ZdcSock...etc...


[ 
p psValueAt: index put: anObject.
aBlock value ] in ZnCurrentServer(DynamicVariable)>>value:during:
	Receiver: a ZnCurrentServer
	Arguments and temporary variables: 
		anObject: 	a ZnManagingMultiThreadedServer(running 8010)
		aBlock: 	[ self executeOneRequestResponseOn: stream ]
		p: 	a Process in nil
		oldValue: 	nil
	Receiver's instance variables: 
		index: 	5


BlockClosure>>ensure:
	Receiver: [ 
p psValueAt: index put: anObject.
aBlock value ]
	Arguments and temporary variables: 
		aBlock: 	[ p psValueAt: index put: oldValue ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ZnCurrentServer(DynamicVariable)>>value:during:
		startpc: 	62
		numArgs: 	0


ZnCurrentServer(DynamicVariable)>>value:during:
	Receiver: a ZnCurrentServer
	Arguments and temporary variables: 
		anObject: 	a ZnManagingMultiThreadedServer(running 8010)
		aBlock: 	[ self executeOneRequestResponseOn: stream ]
		p: 	a Process in nil
		oldValue: 	nil
	Receiver's instance variables: 
		index: 	5


ZnCurrentServer class(DynamicVariable class)>>value:during:
	Receiver: ZnCurrentServer
	Arguments and temporary variables: 
		anObject: 	a ZnManagingMultiThreadedServer(running 8010)
		aBlock: 	[ self executeOneRequestResponseOn: stream ]
	Receiver's instance variables: 
		superclass: 	DynamicVariable
		methodDict: 	a MethodDictionary()
		format: 	132
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#ZnCurrentServer
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Zinc-HTTP-Variables'
		traitComposition: 	{}
		localSelectors: 	nil
		hash: 	nil
		soleInstance: 	a ZnCurrentServer


ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		stream: 	a ZdcSocketStream
		request: 	nil
		response: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream a ZdcSock...etc...


[ self executeRequestResponseLoopOn: stream ] in [ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ] in [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		listeningSocket: 	a Socket[waitingForConnection]
		stream: 	a ZdcSocketStream
		socket: 	a Socket[connected]
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream a ZdcSock...etc...



--- The full stack ---
UnixStore(DiskStore)>>delete:
FileSystem>>delete:
FileReference>>delete
DeleteVisitor>>visitReference:
DeleteVisitor(FileSystemVisitor)>>visitFile:
PostorderGuide>>visit:
Message>>sendTo:
[ self pop sendTo: self ] in PostorderGuide>>show:
PostorderGuide(FileSystemGuide)>>whileNotDoneDo:
PostorderGuide>>show:
PostorderGuide class(FileSystemGuide class)>>show:to:selecting:
DeleteVisitor>>visit:
DeleteVisitor class>>delete:
FileReference(AbstractFileReference)>>deleteAll
DIUtil class>>folderRemove:
DIWebServiceAPI>>getSuiteKill
DIWebServiceHandler>>delete
DIWebServiceHandler(ZnRestCall)>>execute
[ call execute ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
BlockClosure>>on:do:
ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
[ self execute: call ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
BlockClosure>>on:do:
ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ :delegate | delegate handleRequest: request ] ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateRequest:do:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
[ self authenticateAndDelegateRequest: request ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
BlockClosure>>on:do:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequest:
ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeOneRequestResponseOn:
[ self executeOneRequestResponseOn: stream ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
[ 
p psValueAt: index put: anObject.
aBlock value ] in ZnCurrentServer(DynamicVariable)>>value:during:
BlockClosure>>ensure:
ZnCurrentServer(DynamicVariable)>>value:during:
ZnCurrentServer class(DynamicVariable class)>>value:during:
ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
[ self executeRequestResponseLoopOn: stream ] in [ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ] in [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
BlockClosure>>ensure:
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ] in [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
BlockClosure>>ifCurtailed:
[ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
FileDoesNotExist: Path / 'home' / 'otruffer' / 'dicto' / 'bin' / 'analysis' / 'full-test' / '1424266761'
18 February 2015 2:45:02.721753 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
NBCogit NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
https://github.com/pharo-project/pharo-vm.git Commit: 4a0d556150d478ff2de3c9624d2f18e6eaa3fa5c Date: 2014-12-18 18:42:53 +0100 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14893

Image: Pharo3.0 [Latest update: #30863]

UnixStore(DiskStore)>>delete:
	Receiver: an UnixStore
	Arguments and temporary variables: 
		path: 	Path / 'home' / 'otruffer' / 'dicto' / 'bin' / 'analysis' / 'full-test' /...etc...
		pathString: 	nil
		encodedPathString: 	nil
	Receiver's instance variables: 
		maxFileNameLength: 	255


FileSystem>>delete:
	Receiver: a FileSystem
	Arguments and temporary variables: 
		aResolvable: 	Path / 'home' / 'otruffer' / 'dicto' / 'bin' / 'analysis' / 'full-...etc...
	Receiver's instance variables: 
		workingDirectory: 	Path / 'home' / 'otruffer' / 'dicto' / 'bin' / 'dicto-engine'...etc...
		store: 	an UnixStore


FileReference>>delete
	Receiver: File @ /home/otruffer/dicto/bin/analysis/full-test/1424266761
	Arguments and temporary variables: 

	Receiver's instance variables: 
		filesystem: 	a FileSystem
		path: 	Path / 'home' / 'otruffer' / 'dicto' / 'bin' / 'analysis' / 'full-test' /...etc...


DeleteVisitor>>visitReference:
	Receiver: a DeleteVisitor
	Arguments and temporary variables: 
		anEntry: 	DirectoryEntry: File @ /home/otruffer/dicto/bin/analysis/full-test/142...etc...
	Receiver's instance variables: 
a DeleteVisitor

DeleteVisitor(FileSystemVisitor)>>visitFile:
	Receiver: a DeleteVisitor
	Arguments and temporary variables: 
		aReference: 	DirectoryEntry: File @ /home/otruffer/dicto/bin/analysis/full-test/...etc...
	Receiver's instance variables: 
a DeleteVisitor

PostorderGuide>>visit:
	Receiver: a PostorderGuide
	Arguments and temporary variables: 
		anEntry: 	DirectoryEntry: File @ /home/otruffer/dicto/bin/analysis/full-test/142...etc...
	Receiver's instance variables: 
		visitor: 	a DeleteVisitor
		work: 	an OrderedCollection(visit: DirectoryEntry: File @ /home/otruffer/dicto/b...etc...
		selectChildren: 	[ :entry | entry isSymlink not ]


Message>>sendTo:
	Receiver: visit: DirectoryEntry: File @ /home/otruffer/dicto/bin/analysis/full-test/1424266761
	Arguments and temporary variables: 
		receiver: 	a PostorderGuide
	Receiver's instance variables: 
		selector: 	#visit:
		args: 	an Array(DirectoryEntry: File @ /home/otruffer/dicto/bin/analysis/full-te...etc...
		lookupClass: 	nil


[ self pop sendTo: self ] in PostorderGuide>>show:
	Receiver: a PostorderGuide
	Arguments and temporary variables: 
		aReference: 	File @ /home/otruffer/dicto/bin/analysis/full-test
	Receiver's instance variables: 
		visitor: 	a DeleteVisitor
		work: 	an OrderedCollection(visit: DirectoryEntry: File @ /home/otruffer/dicto/b...etc...
		selectChildren: 	[ :entry | entry isSymlink not ]


PostorderGuide(FileSystemGuide)>>whileNotDoneDo:
	Receiver: a PostorderGuide
	Arguments and temporary variables: 
		aBlock: 	[ self pop sendTo: self ]
	Receiver's instance variables: 
		visitor: 	a DeleteVisitor
		work: 	an OrderedCollection(visit: DirectoryEntry: File @ /home/otruffer/dicto/b...etc...
		selectChildren: 	[ :entry | entry isSymlink not ]


PostorderGuide>>show:
	Receiver: a PostorderGuide
	Arguments and temporary variables: 
		aReference: 	File @ /home/otruffer/dicto/bin/analysis/full-test
	Receiver's instance variables: 
		visitor: 	a DeleteVisitor
		work: 	an OrderedCollection(visit: DirectoryEntry: File @ /home/otruffer/dicto/b...etc...
		selectChildren: 	[ :entry | entry isSymlink not ]


PostorderGuide class(FileSystemGuide class)>>show:to:selecting:
	Receiver: PostorderGuide
	Arguments and temporary variables: 
		aReference: 	File @ /home/otruffer/dicto/bin/analysis/full-test
		aVisitor: 	a DeleteVisitor
		aBlock: 	[ :entry | entry isSymlink not ]
	Receiver's instance variables: 
		superclass: 	FileSystemGuide
		methodDict: 	a MethodDictionary(#pushTraverse:->PostorderGuide>>#pushTraverse: #...etc...
		format: 	136
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#PostorderGuide
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'FileSystem-Core-Implementation'
		traitComposition: 	{}
		localSelectors: 	nil


DeleteVisitor>>visit:
	Receiver: a DeleteVisitor
	Arguments and temporary variables: 
		aReference: 	File @ /home/otruffer/dicto/bin/analysis/full-test
	Receiver's instance variables: 
a DeleteVisitor

DeleteVisitor class>>delete:
	Receiver: DeleteVisitor
	Arguments and temporary variables: 
		aReference: 	File @ /home/otruffer/dicto/bin/analysis/full-test
	Receiver's instance variables: 
		superclass: 	FileSystemVisitor
		methodDict: 	a MethodDictionary(#visit:->DeleteVisitor>>#visit: #visitReference:...etc...
		format: 	2
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#DeleteVisitor
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'FileSystem-Core-Implementation'
		traitComposition: 	{}
		localSelectors: 	nil


FileReference(AbstractFileReference)>>deleteAll
	Receiver: File @ /home/otruffer/dicto/bin/analysis/full-test
	Arguments and temporary variables: 

	Receiver's instance variables: 
		filesystem: 	a FileSystem
		path: 	Path / 'home' / 'otruffer' / 'dicto' / 'bin' / 'analysis' / 'full-test'


DIUtil class>>folderRemove:
	Receiver: DIUtil
	Arguments and temporary variables: 
		aString: 	'/home/otruffer/dicto/bin/analysis/full-test'
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary()
		format: 	2
		layout: 	a FixedLayout
		instanceVariables: 	#()
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#DIUtil
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Dicto-var-util'
		traitComposition: 	{}
		localSelectors: 	nil


DIWebServiceAPI>>getSuiteKill
	Receiver: a DIWebServiceAPI
	Arguments and temporary variables: 

	Receiver's instance variables: 
		request: 	nil
		response: 	nil
		variables: 	nil
		delegate: 	nil
		principal: 	nil
		credentials: 	nil


DIWebServiceHandler>>delete
	Receiver: a DIWebServiceHandler
	Arguments and temporary variables: 
		api: 	a DIWebServiceAPI
	Receiver's instance variables: 
		request: 	a ZnRequest(DELETE /full-test/suite)
		response: 	nil
		variables: 	an OrderedCollection('full-test' 'suite')
		delegate: 	a ZnJSONRestServerDelegate
		principal: 	nil
		credentials: 	nil
		dicto: 	a DIDicto


DIWebServiceHandler(ZnRestCall)>>execute
	Receiver: a DIWebServiceHandler
	Arguments and temporary variables: 

	Receiver's instance variables: 
		request: 	a ZnRequest(DELETE /full-test/suite)
		response: 	nil
		variables: 	an OrderedCollection('full-test' 'suite')
		delegate: 	a ZnJSONRestServerDelegate
		principal: 	nil
		credentials: 	nil
		dicto: 	a DIDicto


[ call execute ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


BlockClosure>>on:do:
	Receiver: [ call execute ]
	Arguments and temporary variables: 
		exception: 	ZnRestCallUnauthorized
		handlerAction: 	[ :exception | self unauthorized: exception request ]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
		startpc: 	38
		numArgs: 	0


ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


[ self execute: call ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		request: 	a ZnRequest(DELETE /full-test/suite)
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


BlockClosure>>on:do:
	Receiver: [ self execute: call ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :exception | 
request server debugMode
	ifTrue: [ exception pa...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
		startpc: 	99
		numArgs: 	0


ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		request: 	a ZnRequest(DELETE /full-test/suite)
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ :delegate | delegate handleRequest: request ] ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(DELETE /full-test/suite)
		delegate: 	a ZnJSONRestServerDelegate
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream a ZdcSock...etc...


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateRequest:do:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(DELETE /full-test/suite)
		block: 	[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ ...etc...
		authenticator: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream a ZdcSock...etc...


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(DELETE /full-test/suite)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream a ZdcSock...etc...


[ self authenticateAndDelegateRequest: request ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(DELETE /full-test/suite)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream a ZdcSock...etc...


BlockClosure>>on:do:
	Receiver: [ self authenticateAndDelegateRequest: request ]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :exception | 
self debugMode
	ifTrue: [ exception pass ]
	ifFa...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequ...etc...
		startpc: 	58
		numArgs: 	0


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(DELETE /full-test/suite)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream a ZdcSock...etc...


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(DELETE /full-test/suite)
		response: 	nil
		initialMilliseconds: 	11613135
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream a ZdcSock...etc...


ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeOneRequestResponseOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		stream: 	a ZdcSocketStream
		request: 	a ZnRequest(DELETE /full-test/suite)
		response: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream a ZdcSock...etc...


[ self executeOneRequestResponseOn: stream ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		stream: 	a ZdcSocketStream
		request: 	nil
		response: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream a ZdcSock...etc...


[ 
p psValueAt: index put: anObject.
aBlock value ] in ZnCurrentServer(DynamicVariable)>>value:during:
	Receiver: a ZnCurrentServer
	Arguments and temporary variables: 
		anObject: 	a ZnManagingMultiThreadedServer(running 8010)
		aBlock: 	[ self executeOneRequestResponseOn: stream ]
		p: 	a Process in nil
		oldValue: 	nil
	Receiver's instance variables: 
		index: 	5


BlockClosure>>ensure:
	Receiver: [ 
p psValueAt: index put: anObject.
aBlock value ]
	Arguments and temporary variables: 
		aBlock: 	[ p psValueAt: index put: oldValue ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ZnCurrentServer(DynamicVariable)>>value:during:
		startpc: 	62
		numArgs: 	0


ZnCurrentServer(DynamicVariable)>>value:during:
	Receiver: a ZnCurrentServer
	Arguments and temporary variables: 
		anObject: 	a ZnManagingMultiThreadedServer(running 8010)
		aBlock: 	[ self executeOneRequestResponseOn: stream ]
		p: 	a Process in nil
		oldValue: 	nil
	Receiver's instance variables: 
		index: 	5


ZnCurrentServer class(DynamicVariable class)>>value:during:
	Receiver: ZnCurrentServer
	Arguments and temporary variables: 
		anObject: 	a ZnManagingMultiThreadedServer(running 8010)
		aBlock: 	[ self executeOneRequestResponseOn: stream ]
	Receiver's instance variables: 
		superclass: 	DynamicVariable
		methodDict: 	a MethodDictionary()
		format: 	132
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#ZnCurrentServer
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Zinc-HTTP-Variables'
		traitComposition: 	{}
		localSelectors: 	nil
		hash: 	nil
		soleInstance: 	a ZnCurrentServer


ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		stream: 	a ZdcSocketStream
		request: 	nil
		response: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream a ZdcSock...etc...


[ self executeRequestResponseLoopOn: stream ] in [ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ] in [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		listeningSocket: 	a Socket[waitingForConnection]
		stream: 	a ZdcSocketStream
		socket: 	a Socket[connected]
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream a ZdcSock...etc...



--- The full stack ---
UnixStore(DiskStore)>>delete:
FileSystem>>delete:
FileReference>>delete
DeleteVisitor>>visitReference:
DeleteVisitor(FileSystemVisitor)>>visitFile:
PostorderGuide>>visit:
Message>>sendTo:
[ self pop sendTo: self ] in PostorderGuide>>show:
PostorderGuide(FileSystemGuide)>>whileNotDoneDo:
PostorderGuide>>show:
PostorderGuide class(FileSystemGuide class)>>show:to:selecting:
DeleteVisitor>>visit:
DeleteVisitor class>>delete:
FileReference(AbstractFileReference)>>deleteAll
DIUtil class>>folderRemove:
DIWebServiceAPI>>getSuiteKill
DIWebServiceHandler>>delete
DIWebServiceHandler(ZnRestCall)>>execute
[ call execute ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
BlockClosure>>on:do:
ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
[ self execute: call ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
BlockClosure>>on:do:
ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ :delegate | delegate handleRequest: request ] ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateRequest:do:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
[ self authenticateAndDelegateRequest: request ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
BlockClosure>>on:do:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequest:
ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeOneRequestResponseOn:
[ self executeOneRequestResponseOn: stream ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
[ 
p psValueAt: index put: anObject.
aBlock value ] in ZnCurrentServer(DynamicVariable)>>value:during:
BlockClosure>>ensure:
ZnCurrentServer(DynamicVariable)>>value:during:
ZnCurrentServer class(DynamicVariable class)>>value:during:
ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
[ self executeRequestResponseLoopOn: stream ] in [ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ] in [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
BlockClosure>>ensure:
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ] in [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
BlockClosure>>ifCurtailed:
[ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
FileDoesNotExist: Path / 'home' / 'otruffer' / 'dicto' / 'bin' / 'analysis' / 'full-test' / '1424266761'
18 February 2015 2:47:36.173893 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
NBCogit NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
https://github.com/pharo-project/pharo-vm.git Commit: 4a0d556150d478ff2de3c9624d2f18e6eaa3fa5c Date: 2014-12-18 18:42:53 +0100 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14893

Image: Pharo3.0 [Latest update: #30863]

UnixStore(DiskStore)>>delete:
	Receiver: an UnixStore
	Arguments and temporary variables: 
		path: 	Path / 'home' / 'otruffer' / 'dicto' / 'bin' / 'analysis' / 'full-test' /...etc...
		pathString: 	nil
		encodedPathString: 	nil
	Receiver's instance variables: 
		maxFileNameLength: 	255


FileSystem>>delete:
	Receiver: a FileSystem
	Arguments and temporary variables: 
		aResolvable: 	Path / 'home' / 'otruffer' / 'dicto' / 'bin' / 'analysis' / 'full-...etc...
	Receiver's instance variables: 
		workingDirectory: 	Path / 'home' / 'otruffer' / 'dicto' / 'bin' / 'dicto-engine'...etc...
		store: 	an UnixStore


FileReference>>delete
	Receiver: File @ /home/otruffer/dicto/bin/analysis/full-test/1424266761
	Arguments and temporary variables: 

	Receiver's instance variables: 
		filesystem: 	a FileSystem
		path: 	Path / 'home' / 'otruffer' / 'dicto' / 'bin' / 'analysis' / 'full-test' /...etc...


DeleteVisitor>>visitReference:
	Receiver: a DeleteVisitor
	Arguments and temporary variables: 
		anEntry: 	DirectoryEntry: File @ /home/otruffer/dicto/bin/analysis/full-test/142...etc...
	Receiver's instance variables: 
a DeleteVisitor

DeleteVisitor(FileSystemVisitor)>>visitFile:
	Receiver: a DeleteVisitor
	Arguments and temporary variables: 
		aReference: 	DirectoryEntry: File @ /home/otruffer/dicto/bin/analysis/full-test/...etc...
	Receiver's instance variables: 
a DeleteVisitor

PostorderGuide>>visit:
	Receiver: a PostorderGuide
	Arguments and temporary variables: 
		anEntry: 	DirectoryEntry: File @ /home/otruffer/dicto/bin/analysis/full-test/142...etc...
	Receiver's instance variables: 
		visitor: 	a DeleteVisitor
		work: 	an OrderedCollection(visit: DirectoryEntry: File @ /home/otruffer/dicto/b...etc...
		selectChildren: 	[ :entry | entry isSymlink not ]


Message>>sendTo:
	Receiver: visit: DirectoryEntry: File @ /home/otruffer/dicto/bin/analysis/full-test/1424266761
	Arguments and temporary variables: 
		receiver: 	a PostorderGuide
	Receiver's instance variables: 
		selector: 	#visit:
		args: 	an Array(DirectoryEntry: File @ /home/otruffer/dicto/bin/analysis/full-te...etc...
		lookupClass: 	nil


[ self pop sendTo: self ] in PostorderGuide>>show:
	Receiver: a PostorderGuide
	Arguments and temporary variables: 
		aReference: 	File @ /home/otruffer/dicto/bin/analysis/full-test
	Receiver's instance variables: 
		visitor: 	a DeleteVisitor
		work: 	an OrderedCollection(visit: DirectoryEntry: File @ /home/otruffer/dicto/b...etc...
		selectChildren: 	[ :entry | entry isSymlink not ]


PostorderGuide(FileSystemGuide)>>whileNotDoneDo:
	Receiver: a PostorderGuide
	Arguments and temporary variables: 
		aBlock: 	[ self pop sendTo: self ]
	Receiver's instance variables: 
		visitor: 	a DeleteVisitor
		work: 	an OrderedCollection(visit: DirectoryEntry: File @ /home/otruffer/dicto/b...etc...
		selectChildren: 	[ :entry | entry isSymlink not ]


PostorderGuide>>show:
	Receiver: a PostorderGuide
	Arguments and temporary variables: 
		aReference: 	File @ /home/otruffer/dicto/bin/analysis/full-test
	Receiver's instance variables: 
		visitor: 	a DeleteVisitor
		work: 	an OrderedCollection(visit: DirectoryEntry: File @ /home/otruffer/dicto/b...etc...
		selectChildren: 	[ :entry | entry isSymlink not ]


PostorderGuide class(FileSystemGuide class)>>show:to:selecting:
	Receiver: PostorderGuide
	Arguments and temporary variables: 
		aReference: 	File @ /home/otruffer/dicto/bin/analysis/full-test
		aVisitor: 	a DeleteVisitor
		aBlock: 	[ :entry | entry isSymlink not ]
	Receiver's instance variables: 
		superclass: 	FileSystemGuide
		methodDict: 	a MethodDictionary(#pushTraverse:->PostorderGuide>>#pushTraverse: #...etc...
		format: 	136
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#PostorderGuide
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'FileSystem-Core-Implementation'
		traitComposition: 	{}
		localSelectors: 	nil


DeleteVisitor>>visit:
	Receiver: a DeleteVisitor
	Arguments and temporary variables: 
		aReference: 	File @ /home/otruffer/dicto/bin/analysis/full-test
	Receiver's instance variables: 
a DeleteVisitor

DeleteVisitor class>>delete:
	Receiver: DeleteVisitor
	Arguments and temporary variables: 
		aReference: 	File @ /home/otruffer/dicto/bin/analysis/full-test
	Receiver's instance variables: 
		superclass: 	FileSystemVisitor
		methodDict: 	a MethodDictionary(#visit:->DeleteVisitor>>#visit: #visitReference:...etc...
		format: 	2
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#DeleteVisitor
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'FileSystem-Core-Implementation'
		traitComposition: 	{}
		localSelectors: 	nil


FileReference(AbstractFileReference)>>deleteAll
	Receiver: File @ /home/otruffer/dicto/bin/analysis/full-test
	Arguments and temporary variables: 

	Receiver's instance variables: 
		filesystem: 	a FileSystem
		path: 	Path / 'home' / 'otruffer' / 'dicto' / 'bin' / 'analysis' / 'full-test'


DIUtil class>>folderRemove:
	Receiver: DIUtil
	Arguments and temporary variables: 
		aString: 	'/home/otruffer/dicto/bin/analysis/full-test'
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary()
		format: 	2
		layout: 	a FixedLayout
		instanceVariables: 	#()
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#DIUtil
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Dicto-var-util'
		traitComposition: 	{}
		localSelectors: 	nil


DIWebServiceAPI>>getSuiteKill
	Receiver: a DIWebServiceAPI
	Arguments and temporary variables: 

	Receiver's instance variables: 
		request: 	nil
		response: 	nil
		variables: 	nil
		delegate: 	nil
		principal: 	nil
		credentials: 	nil


DIWebServiceHandler>>delete
	Receiver: a DIWebServiceHandler
	Arguments and temporary variables: 
		api: 	a DIWebServiceAPI
	Receiver's instance variables: 
		request: 	a ZnRequest(DELETE /full-test/suite)
		response: 	nil
		variables: 	an OrderedCollection('full-test' 'suite')
		delegate: 	a ZnJSONRestServerDelegate
		principal: 	nil
		credentials: 	nil
		dicto: 	a DIDicto


DIWebServiceHandler(ZnRestCall)>>execute
	Receiver: a DIWebServiceHandler
	Arguments and temporary variables: 

	Receiver's instance variables: 
		request: 	a ZnRequest(DELETE /full-test/suite)
		response: 	nil
		variables: 	an OrderedCollection('full-test' 'suite')
		delegate: 	a ZnJSONRestServerDelegate
		principal: 	nil
		credentials: 	nil
		dicto: 	a DIDicto


[ call execute ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


BlockClosure>>on:do:
	Receiver: [ call execute ]
	Arguments and temporary variables: 
		exception: 	ZnRestCallUnauthorized
		handlerAction: 	[ :exception | self unauthorized: exception request ]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
		startpc: 	38
		numArgs: 	0


ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


[ self execute: call ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		request: 	a ZnRequest(DELETE /full-test/suite)
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


BlockClosure>>on:do:
	Receiver: [ self execute: call ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :exception | 
request server debugMode
	ifTrue: [ exception pa...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
		startpc: 	99
		numArgs: 	0


ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		request: 	a ZnRequest(DELETE /full-test/suite)
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ :delegate | delegate handleRequest: request ] ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(DELETE /full-test/suite)
		delegate: 	a ZnJSONRestServerDelegate
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream a ZdcSock...etc...


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateRequest:do:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(DELETE /full-test/suite)
		block: 	[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ ...etc...
		authenticator: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream a ZdcSock...etc...


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(DELETE /full-test/suite)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream a ZdcSock...etc...


[ self authenticateAndDelegateRequest: request ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(DELETE /full-test/suite)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream a ZdcSock...etc...


BlockClosure>>on:do:
	Receiver: [ self authenticateAndDelegateRequest: request ]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :exception | 
self debugMode
	ifTrue: [ exception pass ]
	ifFa...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequ...etc...
		startpc: 	58
		numArgs: 	0


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(DELETE /full-test/suite)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream a ZdcSock...etc...


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(DELETE /full-test/suite)
		response: 	nil
		initialMilliseconds: 	11766585
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream a ZdcSock...etc...


ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeOneRequestResponseOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		stream: 	a ZdcSocketStream
		request: 	a ZnRequest(DELETE /full-test/suite)
		response: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream a ZdcSock...etc...


[ self executeOneRequestResponseOn: stream ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		stream: 	a ZdcSocketStream
		request: 	nil
		response: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream a ZdcSock...etc...


[ 
p psValueAt: index put: anObject.
aBlock value ] in ZnCurrentServer(DynamicVariable)>>value:during:
	Receiver: a ZnCurrentServer
	Arguments and temporary variables: 
		anObject: 	a ZnManagingMultiThreadedServer(running 8010)
		aBlock: 	[ self executeOneRequestResponseOn: stream ]
		p: 	a Process in nil
		oldValue: 	nil
	Receiver's instance variables: 
		index: 	5


BlockClosure>>ensure:
	Receiver: [ 
p psValueAt: index put: anObject.
aBlock value ]
	Arguments and temporary variables: 
		aBlock: 	[ p psValueAt: index put: oldValue ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ZnCurrentServer(DynamicVariable)>>value:during:
		startpc: 	62
		numArgs: 	0


ZnCurrentServer(DynamicVariable)>>value:during:
	Receiver: a ZnCurrentServer
	Arguments and temporary variables: 
		anObject: 	a ZnManagingMultiThreadedServer(running 8010)
		aBlock: 	[ self executeOneRequestResponseOn: stream ]
		p: 	a Process in nil
		oldValue: 	nil
	Receiver's instance variables: 
		index: 	5


ZnCurrentServer class(DynamicVariable class)>>value:during:
	Receiver: ZnCurrentServer
	Arguments and temporary variables: 
		anObject: 	a ZnManagingMultiThreadedServer(running 8010)
		aBlock: 	[ self executeOneRequestResponseOn: stream ]
	Receiver's instance variables: 
		superclass: 	DynamicVariable
		methodDict: 	a MethodDictionary()
		format: 	132
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#ZnCurrentServer
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Zinc-HTTP-Variables'
		traitComposition: 	{}
		localSelectors: 	nil
		hash: 	nil
		soleInstance: 	a ZnCurrentServer


ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		stream: 	a ZdcSocketStream
		request: 	nil
		response: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream a ZdcSock...etc...


[ self executeRequestResponseLoopOn: stream ] in [ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ] in [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		listeningSocket: 	a Socket[waitingForConnection]
		stream: 	a ZdcSocketStream
		socket: 	a Socket[connected]
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream a ZdcSock...etc...



--- The full stack ---
UnixStore(DiskStore)>>delete:
FileSystem>>delete:
FileReference>>delete
DeleteVisitor>>visitReference:
DeleteVisitor(FileSystemVisitor)>>visitFile:
PostorderGuide>>visit:
Message>>sendTo:
[ self pop sendTo: self ] in PostorderGuide>>show:
PostorderGuide(FileSystemGuide)>>whileNotDoneDo:
PostorderGuide>>show:
PostorderGuide class(FileSystemGuide class)>>show:to:selecting:
DeleteVisitor>>visit:
DeleteVisitor class>>delete:
FileReference(AbstractFileReference)>>deleteAll
DIUtil class>>folderRemove:
DIWebServiceAPI>>getSuiteKill
DIWebServiceHandler>>delete
DIWebServiceHandler(ZnRestCall)>>execute
[ call execute ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
BlockClosure>>on:do:
ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
[ self execute: call ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
BlockClosure>>on:do:
ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ :delegate | delegate handleRequest: request ] ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateRequest:do:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
[ self authenticateAndDelegateRequest: request ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
BlockClosure>>on:do:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequest:
ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeOneRequestResponseOn:
[ self executeOneRequestResponseOn: stream ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
[ 
p psValueAt: index put: anObject.
aBlock value ] in ZnCurrentServer(DynamicVariable)>>value:during:
BlockClosure>>ensure:
ZnCurrentServer(DynamicVariable)>>value:during:
ZnCurrentServer class(DynamicVariable class)>>value:during:
ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
[ self executeRequestResponseLoopOn: stream ] in [ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ] in [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
BlockClosure>>ensure:
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ] in [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
BlockClosure>>ifCurtailed:
[ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
FileDoesNotExist: Path / 'home' / 'otruffer' / 'dicto' / 'bin' / 'analysis' / 'full-test' / '1424266761'
18 February 2015 2:50:19.675227 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
NBCogit NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
https://github.com/pharo-project/pharo-vm.git Commit: 4a0d556150d478ff2de3c9624d2f18e6eaa3fa5c Date: 2014-12-18 18:42:53 +0100 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14893

Image: Pharo3.0 [Latest update: #30863]

UnixStore(DiskStore)>>delete:
	Receiver: an UnixStore
	Arguments and temporary variables: 
		path: 	Path / 'home' / 'otruffer' / 'dicto' / 'bin' / 'analysis' / 'full-test' /...etc...
		pathString: 	nil
		encodedPathString: 	nil
	Receiver's instance variables: 
		maxFileNameLength: 	255


FileSystem>>delete:
	Receiver: a FileSystem
	Arguments and temporary variables: 
		aResolvable: 	Path / 'home' / 'otruffer' / 'dicto' / 'bin' / 'analysis' / 'full-...etc...
	Receiver's instance variables: 
		workingDirectory: 	Path / 'home' / 'otruffer' / 'dicto' / 'bin' / 'dicto-engine'...etc...
		store: 	an UnixStore


FileReference>>delete
	Receiver: File @ /home/otruffer/dicto/bin/analysis/full-test/1424266761
	Arguments and temporary variables: 

	Receiver's instance variables: 
		filesystem: 	a FileSystem
		path: 	Path / 'home' / 'otruffer' / 'dicto' / 'bin' / 'analysis' / 'full-test' /...etc...


DeleteVisitor>>visitReference:
	Receiver: a DeleteVisitor
	Arguments and temporary variables: 
		anEntry: 	DirectoryEntry: File @ /home/otruffer/dicto/bin/analysis/full-test/142...etc...
	Receiver's instance variables: 
a DeleteVisitor

DeleteVisitor(FileSystemVisitor)>>visitFile:
	Receiver: a DeleteVisitor
	Arguments and temporary variables: 
		aReference: 	DirectoryEntry: File @ /home/otruffer/dicto/bin/analysis/full-test/...etc...
	Receiver's instance variables: 
a DeleteVisitor

PostorderGuide>>visit:
	Receiver: a PostorderGuide
	Arguments and temporary variables: 
		anEntry: 	DirectoryEntry: File @ /home/otruffer/dicto/bin/analysis/full-test/142...etc...
	Receiver's instance variables: 
		visitor: 	a DeleteVisitor
		work: 	an OrderedCollection(visit: DirectoryEntry: File @ /home/otruffer/dicto/b...etc...
		selectChildren: 	[ :entry | entry isSymlink not ]


Message>>sendTo:
	Receiver: visit: DirectoryEntry: File @ /home/otruffer/dicto/bin/analysis/full-test/1424266761
	Arguments and temporary variables: 
		receiver: 	a PostorderGuide
	Receiver's instance variables: 
		selector: 	#visit:
		args: 	an Array(DirectoryEntry: File @ /home/otruffer/dicto/bin/analysis/full-te...etc...
		lookupClass: 	nil


[ self pop sendTo: self ] in PostorderGuide>>show:
	Receiver: a PostorderGuide
	Arguments and temporary variables: 
		aReference: 	File @ /home/otruffer/dicto/bin/analysis/full-test
	Receiver's instance variables: 
		visitor: 	a DeleteVisitor
		work: 	an OrderedCollection(visit: DirectoryEntry: File @ /home/otruffer/dicto/b...etc...
		selectChildren: 	[ :entry | entry isSymlink not ]


PostorderGuide(FileSystemGuide)>>whileNotDoneDo:
	Receiver: a PostorderGuide
	Arguments and temporary variables: 
		aBlock: 	[ self pop sendTo: self ]
	Receiver's instance variables: 
		visitor: 	a DeleteVisitor
		work: 	an OrderedCollection(visit: DirectoryEntry: File @ /home/otruffer/dicto/b...etc...
		selectChildren: 	[ :entry | entry isSymlink not ]


PostorderGuide>>show:
	Receiver: a PostorderGuide
	Arguments and temporary variables: 
		aReference: 	File @ /home/otruffer/dicto/bin/analysis/full-test
	Receiver's instance variables: 
		visitor: 	a DeleteVisitor
		work: 	an OrderedCollection(visit: DirectoryEntry: File @ /home/otruffer/dicto/b...etc...
		selectChildren: 	[ :entry | entry isSymlink not ]


PostorderGuide class(FileSystemGuide class)>>show:to:selecting:
	Receiver: PostorderGuide
	Arguments and temporary variables: 
		aReference: 	File @ /home/otruffer/dicto/bin/analysis/full-test
		aVisitor: 	a DeleteVisitor
		aBlock: 	[ :entry | entry isSymlink not ]
	Receiver's instance variables: 
		superclass: 	FileSystemGuide
		methodDict: 	a MethodDictionary(#pushTraverse:->PostorderGuide>>#pushTraverse: #...etc...
		format: 	136
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#PostorderGuide
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'FileSystem-Core-Implementation'
		traitComposition: 	{}
		localSelectors: 	nil


DeleteVisitor>>visit:
	Receiver: a DeleteVisitor
	Arguments and temporary variables: 
		aReference: 	File @ /home/otruffer/dicto/bin/analysis/full-test
	Receiver's instance variables: 
a DeleteVisitor

DeleteVisitor class>>delete:
	Receiver: DeleteVisitor
	Arguments and temporary variables: 
		aReference: 	File @ /home/otruffer/dicto/bin/analysis/full-test
	Receiver's instance variables: 
		superclass: 	FileSystemVisitor
		methodDict: 	a MethodDictionary(#visit:->DeleteVisitor>>#visit: #visitReference:...etc...
		format: 	2
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#DeleteVisitor
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'FileSystem-Core-Implementation'
		traitComposition: 	{}
		localSelectors: 	nil


FileReference(AbstractFileReference)>>deleteAll
	Receiver: File @ /home/otruffer/dicto/bin/analysis/full-test
	Arguments and temporary variables: 

	Receiver's instance variables: 
		filesystem: 	a FileSystem
		path: 	Path / 'home' / 'otruffer' / 'dicto' / 'bin' / 'analysis' / 'full-test'


DIUtil class>>folderRemove:
	Receiver: DIUtil
	Arguments and temporary variables: 
		aString: 	'/home/otruffer/dicto/bin/analysis/full-test'
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary()
		format: 	2
		layout: 	a FixedLayout
		instanceVariables: 	#()
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#DIUtil
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Dicto-var-util'
		traitComposition: 	{}
		localSelectors: 	nil


DIWebServiceAPI>>getSuiteKill
	Receiver: a DIWebServiceAPI
	Arguments and temporary variables: 

	Receiver's instance variables: 
		request: 	nil
		response: 	nil
		variables: 	nil
		delegate: 	nil
		principal: 	nil
		credentials: 	nil


DIWebServiceHandler>>delete
	Receiver: a DIWebServiceHandler
	Arguments and temporary variables: 
		api: 	a DIWebServiceAPI
	Receiver's instance variables: 
		request: 	a ZnRequest(DELETE /full-test/suite)
		response: 	nil
		variables: 	an OrderedCollection('full-test' 'suite')
		delegate: 	a ZnJSONRestServerDelegate
		principal: 	nil
		credentials: 	nil
		dicto: 	a DIDicto


DIWebServiceHandler(ZnRestCall)>>execute
	Receiver: a DIWebServiceHandler
	Arguments and temporary variables: 

	Receiver's instance variables: 
		request: 	a ZnRequest(DELETE /full-test/suite)
		response: 	nil
		variables: 	an OrderedCollection('full-test' 'suite')
		delegate: 	a ZnJSONRestServerDelegate
		principal: 	nil
		credentials: 	nil
		dicto: 	a DIDicto


[ call execute ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


BlockClosure>>on:do:
	Receiver: [ call execute ]
	Arguments and temporary variables: 
		exception: 	ZnRestCallUnauthorized
		handlerAction: 	[ :exception | self unauthorized: exception request ]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
		startpc: 	38
		numArgs: 	0


ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


[ self execute: call ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		request: 	a ZnRequest(DELETE /full-test/suite)
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


BlockClosure>>on:do:
	Receiver: [ self execute: call ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :exception | 
request server debugMode
	ifTrue: [ exception pa...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
		startpc: 	99
		numArgs: 	0


ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		request: 	a ZnRequest(DELETE /full-test/suite)
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ :delegate | delegate handleRequest: request ] ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(DELETE /full-test/suite)
		delegate: 	a ZnJSONRestServerDelegate
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream a ZdcSock...etc...


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateRequest:do:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(DELETE /full-test/suite)
		block: 	[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ ...etc...
		authenticator: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream a ZdcSock...etc...


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(DELETE /full-test/suite)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream a ZdcSock...etc...


[ self authenticateAndDelegateRequest: request ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(DELETE /full-test/suite)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream a ZdcSock...etc...


BlockClosure>>on:do:
	Receiver: [ self authenticateAndDelegateRequest: request ]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :exception | 
self debugMode
	ifTrue: [ exception pass ]
	ifFa...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequ...etc...
		startpc: 	58
		numArgs: 	0


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(DELETE /full-test/suite)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream a ZdcSock...etc...


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(DELETE /full-test/suite)
		response: 	nil
		initialMilliseconds: 	11930098
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream a ZdcSock...etc...


ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeOneRequestResponseOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		stream: 	a ZdcSocketStream
		request: 	a ZnRequest(DELETE /full-test/suite)
		response: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream a ZdcSock...etc...


[ self executeOneRequestResponseOn: stream ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		stream: 	a ZdcSocketStream
		request: 	nil
		response: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream a ZdcSock...etc...


[ 
p psValueAt: index put: anObject.
aBlock value ] in ZnCurrentServer(DynamicVariable)>>value:during:
	Receiver: a ZnCurrentServer
	Arguments and temporary variables: 
		anObject: 	a ZnManagingMultiThreadedServer(running 8010)
		aBlock: 	[ self executeOneRequestResponseOn: stream ]
		p: 	a Process in nil
		oldValue: 	nil
	Receiver's instance variables: 
		index: 	5


BlockClosure>>ensure:
	Receiver: [ 
p psValueAt: index put: anObject.
aBlock value ]
	Arguments and temporary variables: 
		aBlock: 	[ p psValueAt: index put: oldValue ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ZnCurrentServer(DynamicVariable)>>value:during:
		startpc: 	62
		numArgs: 	0


ZnCurrentServer(DynamicVariable)>>value:during:
	Receiver: a ZnCurrentServer
	Arguments and temporary variables: 
		anObject: 	a ZnManagingMultiThreadedServer(running 8010)
		aBlock: 	[ self executeOneRequestResponseOn: stream ]
		p: 	a Process in nil
		oldValue: 	nil
	Receiver's instance variables: 
		index: 	5


ZnCurrentServer class(DynamicVariable class)>>value:during:
	Receiver: ZnCurrentServer
	Arguments and temporary variables: 
		anObject: 	a ZnManagingMultiThreadedServer(running 8010)
		aBlock: 	[ self executeOneRequestResponseOn: stream ]
	Receiver's instance variables: 
		superclass: 	DynamicVariable
		methodDict: 	a MethodDictionary()
		format: 	132
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#ZnCurrentServer
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Zinc-HTTP-Variables'
		traitComposition: 	{}
		localSelectors: 	nil
		hash: 	nil
		soleInstance: 	a ZnCurrentServer


ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		stream: 	a ZdcSocketStream
		request: 	nil
		response: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream a ZdcSock...etc...


[ self executeRequestResponseLoopOn: stream ] in [ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ] in [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		listeningSocket: 	a Socket[waitingForConnection]
		stream: 	a ZdcSocketStream
		socket: 	a Socket[connected]
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream a ZdcSock...etc...



--- The full stack ---
UnixStore(DiskStore)>>delete:
FileSystem>>delete:
FileReference>>delete
DeleteVisitor>>visitReference:
DeleteVisitor(FileSystemVisitor)>>visitFile:
PostorderGuide>>visit:
Message>>sendTo:
[ self pop sendTo: self ] in PostorderGuide>>show:
PostorderGuide(FileSystemGuide)>>whileNotDoneDo:
PostorderGuide>>show:
PostorderGuide class(FileSystemGuide class)>>show:to:selecting:
DeleteVisitor>>visit:
DeleteVisitor class>>delete:
FileReference(AbstractFileReference)>>deleteAll
DIUtil class>>folderRemove:
DIWebServiceAPI>>getSuiteKill
DIWebServiceHandler>>delete
DIWebServiceHandler(ZnRestCall)>>execute
[ call execute ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
BlockClosure>>on:do:
ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
[ self execute: call ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
BlockClosure>>on:do:
ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ :delegate | delegate handleRequest: request ] ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateRequest:do:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
[ self authenticateAndDelegateRequest: request ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
BlockClosure>>on:do:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequest:
ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeOneRequestResponseOn:
[ self executeOneRequestResponseOn: stream ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
[ 
p psValueAt: index put: anObject.
aBlock value ] in ZnCurrentServer(DynamicVariable)>>value:during:
BlockClosure>>ensure:
ZnCurrentServer(DynamicVariable)>>value:during:
ZnCurrentServer class(DynamicVariable class)>>value:during:
ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
[ self executeRequestResponseLoopOn: stream ] in [ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ] in [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
BlockClosure>>ensure:
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ] in [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
BlockClosure>>ifCurtailed:
[ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
FileDoesNotExist: Path / 'home' / 'otruffer' / 'dicto' / 'bin' / 'analysis' / 'full-test' / 'results.json'
18 February 2015 2:53:20.289735 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
NBCogit NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
https://github.com/pharo-project/pharo-vm.git Commit: 4a0d556150d478ff2de3c9624d2f18e6eaa3fa5c Date: 2014-12-18 18:42:53 +0100 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14893

Image: Pharo3.0 [Latest update: #30863]

UnixStore(DiskStore)>>delete:
	Receiver: an UnixStore
	Arguments and temporary variables: 
		path: 	Path / 'home' / 'otruffer' / 'dicto' / 'bin' / 'analysis' / 'full-test' /...etc...
		pathString: 	nil
		encodedPathString: 	nil
	Receiver's instance variables: 
		maxFileNameLength: 	255


FileSystem>>delete:
	Receiver: a FileSystem
	Arguments and temporary variables: 
		aResolvable: 	Path / 'home' / 'otruffer' / 'dicto' / 'bin' / 'analysis' / 'full-...etc...
	Receiver's instance variables: 
		workingDirectory: 	Path / 'home' / 'otruffer' / 'dicto' / 'bin' / 'dicto-engine'...etc...
		store: 	an UnixStore


FileReference>>delete
	Receiver: File @ /home/otruffer/dicto/bin/analysis/full-test/results.json
	Arguments and temporary variables: 

	Receiver's instance variables: 
		filesystem: 	a FileSystem
		path: 	Path / 'home' / 'otruffer' / 'dicto' / 'bin' / 'analysis' / 'full-test' /...etc...


DeleteVisitor>>visitReference:
	Receiver: a DeleteVisitor
	Arguments and temporary variables: 
		anEntry: 	DirectoryEntry: File @ /home/otruffer/dicto/bin/analysis/full-test/res...etc...
	Receiver's instance variables: 
a DeleteVisitor

DeleteVisitor(FileSystemVisitor)>>visitFile:
	Receiver: a DeleteVisitor
	Arguments and temporary variables: 
		aReference: 	DirectoryEntry: File @ /home/otruffer/dicto/bin/analysis/full-test/...etc...
	Receiver's instance variables: 
a DeleteVisitor

PostorderGuide>>visit:
	Receiver: a PostorderGuide
	Arguments and temporary variables: 
		anEntry: 	DirectoryEntry: File @ /home/otruffer/dicto/bin/analysis/full-test/res...etc...
	Receiver's instance variables: 
		visitor: 	a DeleteVisitor
		work: 	an OrderedCollection(visit: DirectoryEntry: File @ /home/otruffer/dicto/b...etc...
		selectChildren: 	[ :entry | entry isSymlink not ]


Message>>sendTo:
	Receiver: visit: DirectoryEntry: File @ /home/otruffer/dicto/bin/analysis/full-test/results.json
	Arguments and temporary variables: 
		receiver: 	a PostorderGuide
	Receiver's instance variables: 
		selector: 	#visit:
		args: 	an Array(DirectoryEntry: File @ /home/otruffer/dicto/bin/analysis/full-te...etc...
		lookupClass: 	nil


[ self pop sendTo: self ] in PostorderGuide>>show:
	Receiver: a PostorderGuide
	Arguments and temporary variables: 
		aReference: 	File @ /home/otruffer/dicto/bin/analysis/full-test
	Receiver's instance variables: 
		visitor: 	a DeleteVisitor
		work: 	an OrderedCollection(visit: DirectoryEntry: File @ /home/otruffer/dicto/b...etc...
		selectChildren: 	[ :entry | entry isSymlink not ]


PostorderGuide(FileSystemGuide)>>whileNotDoneDo:
	Receiver: a PostorderGuide
	Arguments and temporary variables: 
		aBlock: 	[ self pop sendTo: self ]
	Receiver's instance variables: 
		visitor: 	a DeleteVisitor
		work: 	an OrderedCollection(visit: DirectoryEntry: File @ /home/otruffer/dicto/b...etc...
		selectChildren: 	[ :entry | entry isSymlink not ]


PostorderGuide>>show:
	Receiver: a PostorderGuide
	Arguments and temporary variables: 
		aReference: 	File @ /home/otruffer/dicto/bin/analysis/full-test
	Receiver's instance variables: 
		visitor: 	a DeleteVisitor
		work: 	an OrderedCollection(visit: DirectoryEntry: File @ /home/otruffer/dicto/b...etc...
		selectChildren: 	[ :entry | entry isSymlink not ]


PostorderGuide class(FileSystemGuide class)>>show:to:selecting:
	Receiver: PostorderGuide
	Arguments and temporary variables: 
		aReference: 	File @ /home/otruffer/dicto/bin/analysis/full-test
		aVisitor: 	a DeleteVisitor
		aBlock: 	[ :entry | entry isSymlink not ]
	Receiver's instance variables: 
		superclass: 	FileSystemGuide
		methodDict: 	a MethodDictionary(#pushTraverse:->PostorderGuide>>#pushTraverse: #...etc...
		format: 	136
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#PostorderGuide
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'FileSystem-Core-Implementation'
		traitComposition: 	{}
		localSelectors: 	nil


DeleteVisitor>>visit:
	Receiver: a DeleteVisitor
	Arguments and temporary variables: 
		aReference: 	File @ /home/otruffer/dicto/bin/analysis/full-test
	Receiver's instance variables: 
a DeleteVisitor

DeleteVisitor class>>delete:
	Receiver: DeleteVisitor
	Arguments and temporary variables: 
		aReference: 	File @ /home/otruffer/dicto/bin/analysis/full-test
	Receiver's instance variables: 
		superclass: 	FileSystemVisitor
		methodDict: 	a MethodDictionary(#visit:->DeleteVisitor>>#visit: #visitReference:...etc...
		format: 	2
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#DeleteVisitor
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'FileSystem-Core-Implementation'
		traitComposition: 	{}
		localSelectors: 	nil


FileReference(AbstractFileReference)>>deleteAll
	Receiver: File @ /home/otruffer/dicto/bin/analysis/full-test
	Arguments and temporary variables: 

	Receiver's instance variables: 
		filesystem: 	a FileSystem
		path: 	Path / 'home' / 'otruffer' / 'dicto' / 'bin' / 'analysis' / 'full-test'


DIUtil class>>folderRemove:
	Receiver: DIUtil
	Arguments and temporary variables: 
		aString: 	'/home/otruffer/dicto/bin/analysis/full-test'
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary()
		format: 	2
		layout: 	a FixedLayout
		instanceVariables: 	#()
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#DIUtil
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Dicto-var-util'
		traitComposition: 	{}
		localSelectors: 	nil


DIWebServiceAPI>>getSuiteKill
	Receiver: a DIWebServiceAPI
	Arguments and temporary variables: 

	Receiver's instance variables: 
		request: 	nil
		response: 	nil
		variables: 	nil
		delegate: 	nil
		principal: 	nil
		credentials: 	nil


DIWebServiceHandler>>delete
	Receiver: a DIWebServiceHandler
	Arguments and temporary variables: 
		api: 	a DIWebServiceAPI
	Receiver's instance variables: 
		request: 	a ZnRequest(DELETE /full-test/suite)
		response: 	nil
		variables: 	an OrderedCollection('full-test' 'suite')
		delegate: 	a ZnJSONRestServerDelegate
		principal: 	nil
		credentials: 	nil
		dicto: 	a DIDicto


DIWebServiceHandler(ZnRestCall)>>execute
	Receiver: a DIWebServiceHandler
	Arguments and temporary variables: 

	Receiver's instance variables: 
		request: 	a ZnRequest(DELETE /full-test/suite)
		response: 	nil
		variables: 	an OrderedCollection('full-test' 'suite')
		delegate: 	a ZnJSONRestServerDelegate
		principal: 	nil
		credentials: 	nil
		dicto: 	a DIDicto


[ call execute ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


BlockClosure>>on:do:
	Receiver: [ call execute ]
	Arguments and temporary variables: 
		exception: 	ZnRestCallUnauthorized
		handlerAction: 	[ :exception | self unauthorized: exception request ]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
		startpc: 	38
		numArgs: 	0


ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


[ self execute: call ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		request: 	a ZnRequest(DELETE /full-test/suite)
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


BlockClosure>>on:do:
	Receiver: [ self execute: call ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :exception | 
request server debugMode
	ifTrue: [ exception pa...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
		startpc: 	99
		numArgs: 	0


ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		request: 	a ZnRequest(DELETE /full-test/suite)
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ :delegate | delegate handleRequest: request ] ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(DELETE /full-test/suite)
		delegate: 	a ZnJSONRestServerDelegate
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream a ZdcSock...etc...


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateRequest:do:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(DELETE /full-test/suite)
		block: 	[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ ...etc...
		authenticator: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream a ZdcSock...etc...


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(DELETE /full-test/suite)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream a ZdcSock...etc...


[ self authenticateAndDelegateRequest: request ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(DELETE /full-test/suite)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream a ZdcSock...etc...


BlockClosure>>on:do:
	Receiver: [ self authenticateAndDelegateRequest: request ]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :exception | 
self debugMode
	ifTrue: [ exception pass ]
	ifFa...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequ...etc...
		startpc: 	58
		numArgs: 	0


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(DELETE /full-test/suite)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream a ZdcSock...etc...


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(DELETE /full-test/suite)
		response: 	nil
		initialMilliseconds: 	12110702
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream a ZdcSock...etc...


ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeOneRequestResponseOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		stream: 	a ZdcSocketStream
		request: 	a ZnRequest(DELETE /full-test/suite)
		response: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream a ZdcSock...etc...


[ self executeOneRequestResponseOn: stream ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		stream: 	a ZdcSocketStream
		request: 	nil
		response: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream a ZdcSock...etc...


[ 
p psValueAt: index put: anObject.
aBlock value ] in ZnCurrentServer(DynamicVariable)>>value:during:
	Receiver: a ZnCurrentServer
	Arguments and temporary variables: 
		anObject: 	a ZnManagingMultiThreadedServer(running 8010)
		aBlock: 	[ self executeOneRequestResponseOn: stream ]
		p: 	a Process in nil
		oldValue: 	nil
	Receiver's instance variables: 
		index: 	5


BlockClosure>>ensure:
	Receiver: [ 
p psValueAt: index put: anObject.
aBlock value ]
	Arguments and temporary variables: 
		aBlock: 	[ p psValueAt: index put: oldValue ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ZnCurrentServer(DynamicVariable)>>value:during:
		startpc: 	62
		numArgs: 	0


ZnCurrentServer(DynamicVariable)>>value:during:
	Receiver: a ZnCurrentServer
	Arguments and temporary variables: 
		anObject: 	a ZnManagingMultiThreadedServer(running 8010)
		aBlock: 	[ self executeOneRequestResponseOn: stream ]
		p: 	a Process in nil
		oldValue: 	nil
	Receiver's instance variables: 
		index: 	5


ZnCurrentServer class(DynamicVariable class)>>value:during:
	Receiver: ZnCurrentServer
	Arguments and temporary variables: 
		anObject: 	a ZnManagingMultiThreadedServer(running 8010)
		aBlock: 	[ self executeOneRequestResponseOn: stream ]
	Receiver's instance variables: 
		superclass: 	DynamicVariable
		methodDict: 	a MethodDictionary()
		format: 	132
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#ZnCurrentServer
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Zinc-HTTP-Variables'
		traitComposition: 	{}
		localSelectors: 	nil
		hash: 	nil
		soleInstance: 	a ZnCurrentServer


ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		stream: 	a ZdcSocketStream
		request: 	nil
		response: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream a ZdcSock...etc...


[ self executeRequestResponseLoopOn: stream ] in [ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ] in [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		listeningSocket: 	a Socket[waitingForConnection]
		stream: 	a ZdcSocketStream
		socket: 	a Socket[connected]
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream a ZdcSock...etc...



--- The full stack ---
UnixStore(DiskStore)>>delete:
FileSystem>>delete:
FileReference>>delete
DeleteVisitor>>visitReference:
DeleteVisitor(FileSystemVisitor)>>visitFile:
PostorderGuide>>visit:
Message>>sendTo:
[ self pop sendTo: self ] in PostorderGuide>>show:
PostorderGuide(FileSystemGuide)>>whileNotDoneDo:
PostorderGuide>>show:
PostorderGuide class(FileSystemGuide class)>>show:to:selecting:
DeleteVisitor>>visit:
DeleteVisitor class>>delete:
FileReference(AbstractFileReference)>>deleteAll
DIUtil class>>folderRemove:
DIWebServiceAPI>>getSuiteKill
DIWebServiceHandler>>delete
DIWebServiceHandler(ZnRestCall)>>execute
[ call execute ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
BlockClosure>>on:do:
ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
[ self execute: call ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
BlockClosure>>on:do:
ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ :delegate | delegate handleRequest: request ] ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateRequest:do:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
[ self authenticateAndDelegateRequest: request ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
BlockClosure>>on:do:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequest:
ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeOneRequestResponseOn:
[ self executeOneRequestResponseOn: stream ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
[ 
p psValueAt: index put: anObject.
aBlock value ] in ZnCurrentServer(DynamicVariable)>>value:during:
BlockClosure>>ensure:
ZnCurrentServer(DynamicVariable)>>value:during:
ZnCurrentServer class(DynamicVariable class)>>value:during:
ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
[ self executeRequestResponseLoopOn: stream ] in [ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ] in [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
BlockClosure>>ensure:
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ] in [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
BlockClosure>>ifCurtailed:
[ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
NeoJSONParseError: invalid input: nil
18 February 2015 2:59:39.270755 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
NBCogit NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
https://github.com/pharo-project/pharo-vm.git Commit: 4a0d556150d478ff2de3c9624d2f18e6eaa3fa5c Date: 2014-12-18 18:42:53 +0100 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14893

Image: Pharo3.0 [Latest update: #30863]

NeoJSONReader>>error:
	Receiver: a NeoJSONReader
	Arguments and temporary variables: 
		text: 	'invalid input: nil'
	Receiver's instance variables: 
		mappings: 	nil
		readStream: 	a ReadStream
		stringStream: 	nil
		listClass: 	nil
		mapClass: 	nil
		propertyNamesAsSymbols: 	false


NeoJSONReader>>parseValue
	Receiver: a NeoJSONReader
	Arguments and temporary variables: 
		char: 	nil
	Receiver's instance variables: 
		mappings: 	nil
		readStream: 	a ReadStream
		stringStream: 	nil
		listClass: 	nil
		mapClass: 	nil
		propertyNamesAsSymbols: 	false


NeoJSONReader>>next
	Receiver: a NeoJSONReader
	Arguments and temporary variables: 

	Receiver's instance variables: 
		mappings: 	nil
		readStream: 	a ReadStream
		stringStream: 	nil
		listClass: 	nil
		mapClass: 	nil
		propertyNamesAsSymbols: 	false


NeoJSONReader class>>fromString:
	Receiver: NeoJSONReader
	Arguments and temporary variables: 
		string: 	''
	Receiver's instance variables: 
		superclass: 	NeoJSONMapper
		methodDict: 	a MethodDictionary(#atEnd->NeoJSONReader>>#atEnd #close->NeoJSONRea...etc...
		format: 	142
		layout: 	a FixedLayout
		instanceVariables: 	#(#readStream #stringStream #listClass #mapClass #propertyNa...etc...
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#NeoJSONReader
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Neo-JSON-Core'
		traitComposition: 	{}
		localSelectors: 	nil


DIPhpModel>>_loadPhpModel
	Receiver: a DIPhpModel
	Arguments and temporary variables: 

	Receiver's instance variables: 
		defRules: 	a DICollectionRule()
		defVars: 	a DICollectionVar(SYSTEM)
		analysisID: 	'1424267979'
		additionalProperties: 	a Dictionary()
		ruleCounter: 	0
		varCounter: 	0
		defVarElements: 	a DICollectionVarElements()
		defVarInvertedElements: 	a DICollectionVarElements()
		model: 	nil


DIPhpModel>>model
	Receiver: a DIPhpModel
	Arguments and temporary variables: 

	Receiver's instance variables: 
		defRules: 	a DICollectionRule()
		defVars: 	a DICollectionVar(SYSTEM)
		analysisID: 	'1424267979'
		additionalProperties: 	a Dictionary()
		ruleCounter: 	0
		varCounter: 	0
		defVarElements: 	a DICollectionVarElements()
		defVarInvertedElements: 	a DICollectionVarElements()
		model: 	nil


DIVarPhpClass>>allElements
	Receiver: RuleResult
	Arguments and temporary variables: 

	Receiver's instance variables: 
		isFirst: 	false
		dslText: 	'RuleResult=PhpClass with name:"Dicto\\RuleResult"'
		type: 	'PhpClass'
		id: 	1
		entity: 	nil
		name: 	'RuleResult'
		specifiers: 	an OrderedCollection(name=Dicto\\RuleResult)
		isInverted: 	false
		elements: 	a DICollectionVarElements()
		invertedElements: 	a DICollectionVarElements()


DIVarPhpClass(DIVar)>>elements
	Receiver: RuleResult
	Arguments and temporary variables: 
		valid: 	nil
	Receiver's instance variables: 
		isFirst: 	false
		dslText: 	'RuleResult=PhpClass with name:"Dicto\\RuleResult"'
		type: 	'PhpClass'
		id: 	1
		entity: 	nil
		name: 	'RuleResult'
		specifiers: 	an OrderedCollection(name=Dicto\\RuleResult)
		isInverted: 	false
		elements: 	a DICollectionVarElements()
		invertedElements: 	a DICollectionVarElements()


DISimpleRule>>subjectElements
	Receiver: RuleResult cannot depend on DictoTalker
	Arguments and temporary variables: 
		subjectElements: 	nil
	Receiver's instance variables: 
		isFirst: 	nil
		dslText: 	'RuleResult cannot depend on DictoTalker'
		type: 	#cannot
		id: 	1001
		entity: 	nil
		subjects: 	an Array(RuleResult)
		predicates: 	an Array(depend on DictoTalker)
		subRules: 	nil
		candidateAdapters: 	a SortedCollection(DIPhpDependencies)
		chosenAdapter: 	DIPhpDependencies
		hasFailed: 	false
		failureMessage: 	''
		failingPredicates: 	a Set()
		hasSubjectInverted: 	false
		hasPredicateInverted: 	false


DITestGroup>>_failingPredicatesFor:
	Receiver: a DITestGroup
	Arguments and temporary variables: 
		rule: 	RuleResult cannot depend on DictoTalker
		allPredicates: 	a Set()
		mustFindPassing: 	nil
		failingPredicates: 	nil
		predicateReadableValue: 	''
		predName: 	'dependOn'
	Receiver's instance variables: 
		rules: 	an OrderedCollection(RuleResult cannot depend on DictoTalker DictoTalker...etc...
		adapter: 	a DIPhpDependencies
		runCommandText: 	nil
		testSpecification: 	nil
		adapterID: 	'DIPhpDependencies'
		resultFile: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/full-test/142426...etc...
		specificationFile: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/full-test...etc...
		commandFile: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/full-test/14242...etc...


[ :rule | 
| failingPredicates |
failingPredicates := self _failingPredicatesFor: rule.
failingPredicates size > 0
	ifTrue: [ 
		rule setFailed.
		rule errorPredicates: failingPredicates ] ] in DITestGroup>>read
	Receiver: a DITestGroup
	Arguments and temporary variables: 
		rule: 	RuleResult cannot depend on DictoTalker
		failingPredicates: 	nil
	Receiver's instance variables: 
		rules: 	an OrderedCollection(RuleResult cannot depend on DictoTalker DictoTalker...etc...
		adapter: 	a DIPhpDependencies
		runCommandText: 	nil
		testSpecification: 	nil
		adapterID: 	'DIPhpDependencies'
		resultFile: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/full-test/142426...etc...
		specificationFile: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/full-test...etc...
		commandFile: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/full-test/14242...etc...


OrderedCollection>>do:
	Receiver: an OrderedCollection(RuleResult cannot depend on DictoTalker DictoTalker must depend on Ru...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :rule | 
| failingPredicates |
failingPredicates := self _failingPred...etc...
		index: 	1
	Receiver's instance variables: 
		array: 	an Array(RuleResult cannot depend on DictoTalker DictoTalker must depend...etc...
		firstIndex: 	1
		lastIndex: 	3


DITestGroup>>read
	Receiver: a DITestGroup
	Arguments and temporary variables: 

	Receiver's instance variables: 
		rules: 	an OrderedCollection(RuleResult cannot depend on DictoTalker DictoTalker...etc...
		adapter: 	a DIPhpDependencies
		runCommandText: 	nil
		testSpecification: 	nil
		adapterID: 	'DIPhpDependencies'
		resultFile: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/full-test/142426...etc...
		specificationFile: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/full-test...etc...
		commandFile: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/full-test/14242...etc...


[ :testSuite | testSuite read ] in DIDicto>>_parseResultsFor:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		adapterTestGroups: 	a Dictionary(DIGrepFileContent->a DITestGroup DIJMeterLoadTe...etc...
		notFailingRules: 	nil
		failingRules: 	nil
		testSuite: 	a DITestGroup
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424267979'
		singleShotTask: 	true


Array(SequenceableCollection)>>do:
	Receiver: an Array(a DITestGroup a DITestGroup a DITestGroup a DITestGroup a DITestGroup)
	Arguments and temporary variables: 
		aBlock: 	[ :testSuite | testSuite read ]
		index: 	4
	Receiver's instance variables: 
an Array(a DITestGroup a DITestGroup a DITestGroup a DITestGroup a DITestGroup)

DIDicto>>_parseResultsFor:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		adapterTestGroups: 	a Dictionary(DIGrepFileContent->a DITestGroup DIJMeterLoadTe...etc...
		notFailingRules: 	nil
		failingRules: 	nil
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424267979'
		singleShotTask: 	true


DIDicto>>dictoCheck:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = ...etc...
		adapterTestGroups: 	a Dictionary(DIGrepFileContent->a DITestGroup DIJMeterLoadTe...etc...
		exportFormat: 	nil
		xml: 	nil
		json: 	nil
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424267979'
		singleShotTask: 	true


[ ^ dicto dictoCheck: input ] in DIWebServiceAPI>>getResults
	Receiver: a DIWebServiceAPI
	Arguments and temporary variables: 
		in: 	'/home/otruffer/dicto/bin/analysis/full-test/dicto.rules'
		input: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = PhpCl...etc...
		dicto: 	a DIDicto
	Receiver's instance variables: 
		request: 	nil
		response: 	nil
		variables: 	nil
		delegate: 	nil
		principal: 	nil
		credentials: 	nil


BlockClosure>>on:do:
	Receiver: [ ^ dicto dictoCheck: input ]
	Arguments and temporary variables: 
		exception: 	DIException
		handlerAction: 	[ :ex | ^ self error: ex description ]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	DIWebServiceAPI>>getResults
		startpc: 	110
		numArgs: 	0


DIWebServiceAPI>>getResults
	Receiver: a DIWebServiceAPI
	Arguments and temporary variables: 
		in: 	'/home/otruffer/dicto/bin/analysis/full-test/dicto.rules'
		input: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = PhpCl...etc...
		dicto: 	a DIDicto
	Receiver's instance variables: 
		request: 	nil
		response: 	nil
		variables: 	nil
		delegate: 	nil
		principal: 	nil
		credentials: 	nil


DIWebServiceHandler>>get
	Receiver: a DIWebServiceHandler
	Arguments and temporary variables: 
		api: 	a DIWebServiceAPI
	Receiver's instance variables: 
		request: 	a ZnRequest(GET /full-test/results)
		response: 	nil
		variables: 	an OrderedCollection('full-test' 'results')
		delegate: 	a ZnJSONRestServerDelegate
		principal: 	nil
		credentials: 	nil
		dicto: 	a DIDicto


DIWebServiceHandler(ZnRestCall)>>execute
	Receiver: a DIWebServiceHandler
	Arguments and temporary variables: 

	Receiver's instance variables: 
		request: 	a ZnRequest(GET /full-test/results)
		response: 	nil
		variables: 	an OrderedCollection('full-test' 'results')
		delegate: 	a ZnJSONRestServerDelegate
		principal: 	nil
		credentials: 	nil
		dicto: 	a DIDicto


[ call execute ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


BlockClosure>>on:do:
	Receiver: [ call execute ]
	Arguments and temporary variables: 
		exception: 	ZnRestCallUnauthorized
		handlerAction: 	[ :exception | self unauthorized: exception request ]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
		startpc: 	38
		numArgs: 	0


ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


[ self execute: call ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		request: 	a ZnRequest(GET /full-test/results)
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


BlockClosure>>on:do:
	Receiver: [ self execute: call ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :exception | 
request server debugMode
	ifTrue: [ exception pa...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
		startpc: 	99
		numArgs: 	0


ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		request: 	a ZnRequest(GET /full-test/results)
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ :delegate | delegate handleRequest: request ] ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(GET /full-test/results)
		delegate: 	a ZnJSONRestServerDelegate
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream a ZdcSock...etc...


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateRequest:do:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(GET /full-test/results)
		block: 	[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ ...etc...
		authenticator: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream a ZdcSock...etc...


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(GET /full-test/results)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream a ZdcSock...etc...


[ self authenticateAndDelegateRequest: request ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(GET /full-test/results)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream a ZdcSock...etc...


BlockClosure>>on:do:
	Receiver: [ self authenticateAndDelegateRequest: request ]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :exception | 
self debugMode
	ifTrue: [ exception pass ]
	ifFa...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequ...etc...
		startpc: 	58
		numArgs: 	0


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(GET /full-test/results)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream a ZdcSock...etc...


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(GET /full-test/results)
		response: 	nil
		initialMilliseconds: 	12489568
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream a ZdcSock...etc...


ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeOneRequestResponseOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		stream: 	a ZdcSocketStream
		request: 	a ZnRequest(GET /full-test/results)
		response: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream a ZdcSock...etc...


[ self executeOneRequestResponseOn: stream ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		stream: 	a ZdcSocketStream
		request: 	nil
		response: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream a ZdcSock...etc...


[ 
p psValueAt: index put: anObject.
aBlock value ] in ZnCurrentServer(DynamicVariable)>>value:during:
	Receiver: a ZnCurrentServer
	Arguments and temporary variables: 
		anObject: 	a ZnManagingMultiThreadedServer(running 8010)
		aBlock: 	[ self executeOneRequestResponseOn: stream ]
		p: 	a Process in nil
		oldValue: 	nil
	Receiver's instance variables: 
		index: 	5


BlockClosure>>ensure:
	Receiver: [ 
p psValueAt: index put: anObject.
aBlock value ]
	Arguments and temporary variables: 
		aBlock: 	[ p psValueAt: index put: oldValue ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ZnCurrentServer(DynamicVariable)>>value:during:
		startpc: 	62
		numArgs: 	0



--- The full stack ---
NeoJSONReader>>error:
NeoJSONReader>>parseValue
NeoJSONReader>>next
NeoJSONReader class>>fromString:
DIPhpModel>>_loadPhpModel
DIPhpModel>>model
DIVarPhpClass>>allElements
DIVarPhpClass(DIVar)>>elements
DISimpleRule>>subjectElements
DITestGroup>>_failingPredicatesFor:
[ :rule | 
| failingPredicates |
failingPredicates := self _failingPredicatesFor: rule.
failingPredicates size > 0
	ifTrue: [ 
		rule setFailed.
		rule errorPredicates: failingPredicates ] ] in DITestGroup>>read
OrderedCollection>>do:
DITestGroup>>read
[ :testSuite | testSuite read ] in DIDicto>>_parseResultsFor:
Array(SequenceableCollection)>>do:
DIDicto>>_parseResultsFor:
DIDicto>>dictoCheck:
[ ^ dicto dictoCheck: input ] in DIWebServiceAPI>>getResults
BlockClosure>>on:do:
DIWebServiceAPI>>getResults
DIWebServiceHandler>>get
DIWebServiceHandler(ZnRestCall)>>execute
[ call execute ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
BlockClosure>>on:do:
ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
[ self execute: call ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
BlockClosure>>on:do:
ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ :delegate | delegate handleRequest: request ] ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateRequest:do:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
[ self authenticateAndDelegateRequest: request ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
BlockClosure>>on:do:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequest:
ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeOneRequestResponseOn:
[ self executeOneRequestResponseOn: stream ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
[ 
p psValueAt: index put: anObject.
aBlock value ] in ZnCurrentServer(DynamicVariable)>>value:during:
BlockClosure>>ensure:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
ZnCurrentServer(DynamicVariable)>>value:during:
ZnCurrentServer class(DynamicVariable class)>>value:during:
ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
[ self executeRequestResponseLoopOn: stream ] in [ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ] in [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
BlockClosure>>ensure:
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ] in [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
BlockClosure>>ifCurtailed:
[ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
FileDoesNotExist: Path / 'home' / 'otruffer' / 'dicto' / 'bin' / 'analysis' / 'full-test' / '1424267673'
18 February 2015 3:13:18.890521 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
NBCogit NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
https://github.com/pharo-project/pharo-vm.git Commit: 4a0d556150d478ff2de3c9624d2f18e6eaa3fa5c Date: 2014-12-18 18:42:53 +0100 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14893

Image: Pharo3.0 [Latest update: #30863]

UnixStore(DiskStore)>>delete:
	Receiver: an UnixStore
	Arguments and temporary variables: 
		path: 	Path / 'home' / 'otruffer' / 'dicto' / 'bin' / 'analysis' / 'full-test' /...etc...
		pathString: 	nil
		encodedPathString: 	nil
	Receiver's instance variables: 
		maxFileNameLength: 	255


FileSystem>>delete:
	Receiver: a FileSystem
	Arguments and temporary variables: 
		aResolvable: 	Path / 'home' / 'otruffer' / 'dicto' / 'bin' / 'analysis' / 'full-...etc...
	Receiver's instance variables: 
		workingDirectory: 	Path / 'home' / 'otruffer' / 'dicto' / 'bin' / 'dicto-engine'...etc...
		store: 	an UnixStore


FileReference>>delete
	Receiver: File @ /home/otruffer/dicto/bin/analysis/full-test/1424267673
	Arguments and temporary variables: 

	Receiver's instance variables: 
		filesystem: 	a FileSystem
		path: 	Path / 'home' / 'otruffer' / 'dicto' / 'bin' / 'analysis' / 'full-test' /...etc...


DeleteVisitor>>visitReference:
	Receiver: a DeleteVisitor
	Arguments and temporary variables: 
		anEntry: 	DirectoryEntry: File @ /home/otruffer/dicto/bin/analysis/full-test/142...etc...
	Receiver's instance variables: 
a DeleteVisitor

DeleteVisitor(FileSystemVisitor)>>visitFile:
	Receiver: a DeleteVisitor
	Arguments and temporary variables: 
		aReference: 	DirectoryEntry: File @ /home/otruffer/dicto/bin/analysis/full-test/...etc...
	Receiver's instance variables: 
a DeleteVisitor

PostorderGuide>>visit:
	Receiver: a PostorderGuide
	Arguments and temporary variables: 
		anEntry: 	DirectoryEntry: File @ /home/otruffer/dicto/bin/analysis/full-test/142...etc...
	Receiver's instance variables: 
		visitor: 	a DeleteVisitor
		work: 	an OrderedCollection(visit: DirectoryEntry: File @ /home/otruffer/dicto/b...etc...
		selectChildren: 	[ :entry | entry isSymlink not ]


Message>>sendTo:
	Receiver: visit: DirectoryEntry: File @ /home/otruffer/dicto/bin/analysis/full-test/1424267673
	Arguments and temporary variables: 
		receiver: 	a PostorderGuide
	Receiver's instance variables: 
		selector: 	#visit:
		args: 	an Array(DirectoryEntry: File @ /home/otruffer/dicto/bin/analysis/full-te...etc...
		lookupClass: 	nil


[ self pop sendTo: self ] in PostorderGuide>>show:
	Receiver: a PostorderGuide
	Arguments and temporary variables: 
		aReference: 	File @ /home/otruffer/dicto/bin/analysis/full-test
	Receiver's instance variables: 
		visitor: 	a DeleteVisitor
		work: 	an OrderedCollection(visit: DirectoryEntry: File @ /home/otruffer/dicto/b...etc...
		selectChildren: 	[ :entry | entry isSymlink not ]


PostorderGuide(FileSystemGuide)>>whileNotDoneDo:
	Receiver: a PostorderGuide
	Arguments and temporary variables: 
		aBlock: 	[ self pop sendTo: self ]
	Receiver's instance variables: 
		visitor: 	a DeleteVisitor
		work: 	an OrderedCollection(visit: DirectoryEntry: File @ /home/otruffer/dicto/b...etc...
		selectChildren: 	[ :entry | entry isSymlink not ]


PostorderGuide>>show:
	Receiver: a PostorderGuide
	Arguments and temporary variables: 
		aReference: 	File @ /home/otruffer/dicto/bin/analysis/full-test
	Receiver's instance variables: 
		visitor: 	a DeleteVisitor
		work: 	an OrderedCollection(visit: DirectoryEntry: File @ /home/otruffer/dicto/b...etc...
		selectChildren: 	[ :entry | entry isSymlink not ]


PostorderGuide class(FileSystemGuide class)>>show:to:selecting:
	Receiver: PostorderGuide
	Arguments and temporary variables: 
		aReference: 	File @ /home/otruffer/dicto/bin/analysis/full-test
		aVisitor: 	a DeleteVisitor
		aBlock: 	[ :entry | entry isSymlink not ]
	Receiver's instance variables: 
		superclass: 	FileSystemGuide
		methodDict: 	a MethodDictionary(#pushTraverse:->PostorderGuide>>#pushTraverse: #...etc...
		format: 	136
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#PostorderGuide
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'FileSystem-Core-Implementation'
		traitComposition: 	{}
		localSelectors: 	nil


DeleteVisitor>>visit:
	Receiver: a DeleteVisitor
	Arguments and temporary variables: 
		aReference: 	File @ /home/otruffer/dicto/bin/analysis/full-test
	Receiver's instance variables: 
a DeleteVisitor

DeleteVisitor class>>delete:
	Receiver: DeleteVisitor
	Arguments and temporary variables: 
		aReference: 	File @ /home/otruffer/dicto/bin/analysis/full-test
	Receiver's instance variables: 
		superclass: 	FileSystemVisitor
		methodDict: 	a MethodDictionary(#visit:->DeleteVisitor>>#visit: #visitReference:...etc...
		format: 	2
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#DeleteVisitor
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'FileSystem-Core-Implementation'
		traitComposition: 	{}
		localSelectors: 	nil


FileReference(AbstractFileReference)>>deleteAll
	Receiver: File @ /home/otruffer/dicto/bin/analysis/full-test
	Arguments and temporary variables: 

	Receiver's instance variables: 
		filesystem: 	a FileSystem
		path: 	Path / 'home' / 'otruffer' / 'dicto' / 'bin' / 'analysis' / 'full-test'


DIUtil class>>folderRemove:
	Receiver: DIUtil
	Arguments and temporary variables: 
		aString: 	'/home/otruffer/dicto/bin/analysis/full-test'
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary()
		format: 	2
		layout: 	a FixedLayout
		instanceVariables: 	#()
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#DIUtil
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Dicto-var-util'
		traitComposition: 	{}
		localSelectors: 	nil


DIWebServiceAPI>>getSuiteKill
	Receiver: a DIWebServiceAPI
	Arguments and temporary variables: 

	Receiver's instance variables: 
		request: 	nil
		response: 	nil
		variables: 	nil
		delegate: 	nil
		principal: 	nil
		credentials: 	nil


DIWebServiceHandler>>delete
	Receiver: a DIWebServiceHandler
	Arguments and temporary variables: 
		api: 	a DIWebServiceAPI
	Receiver's instance variables: 
		request: 	a ZnRequest(DELETE /full-test/suite)
		response: 	nil
		variables: 	an OrderedCollection('full-test' 'suite')
		delegate: 	a ZnJSONRestServerDelegate
		principal: 	nil
		credentials: 	nil
		dicto: 	a DIDicto


DIWebServiceHandler(ZnRestCall)>>execute
	Receiver: a DIWebServiceHandler
	Arguments and temporary variables: 

	Receiver's instance variables: 
		request: 	a ZnRequest(DELETE /full-test/suite)
		response: 	nil
		variables: 	an OrderedCollection('full-test' 'suite')
		delegate: 	a ZnJSONRestServerDelegate
		principal: 	nil
		credentials: 	nil
		dicto: 	a DIDicto


[ call execute ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


BlockClosure>>on:do:
	Receiver: [ call execute ]
	Arguments and temporary variables: 
		exception: 	ZnRestCallUnauthorized
		handlerAction: 	[ :exception | self unauthorized: exception request ]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
		startpc: 	38
		numArgs: 	0


ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


[ self execute: call ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		request: 	a ZnRequest(DELETE /full-test/suite)
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


BlockClosure>>on:do:
	Receiver: [ self execute: call ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :exception | 
request server debugMode
	ifTrue: [ exception pa...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
		startpc: 	99
		numArgs: 	0


ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		request: 	a ZnRequest(DELETE /full-test/suite)
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ :delegate | delegate handleRequest: request ] ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(DELETE /full-test/suite)
		delegate: 	a ZnJSONRestServerDelegate
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateRequest:do:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(DELETE /full-test/suite)
		block: 	[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ ...etc...
		authenticator: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(DELETE /full-test/suite)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream)


[ self authenticateAndDelegateRequest: request ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(DELETE /full-test/suite)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream)


BlockClosure>>on:do:
	Receiver: [ self authenticateAndDelegateRequest: request ]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :exception | 
self debugMode
	ifTrue: [ exception pass ]
	ifFa...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequ...etc...
		startpc: 	58
		numArgs: 	0


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(DELETE /full-test/suite)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(DELETE /full-test/suite)
		response: 	nil
		initialMilliseconds: 	13309293
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeOneRequestResponseOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		stream: 	a ZdcSocketStream
		request: 	a ZnRequest(DELETE /full-test/suite)
		response: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream)


[ self executeOneRequestResponseOn: stream ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		stream: 	a ZdcSocketStream
		request: 	nil
		response: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream)


[ 
p psValueAt: index put: anObject.
aBlock value ] in ZnCurrentServer(DynamicVariable)>>value:during:
	Receiver: a ZnCurrentServer
	Arguments and temporary variables: 
		anObject: 	a ZnManagingMultiThreadedServer(running 8010)
		aBlock: 	[ self executeOneRequestResponseOn: stream ]
		p: 	a Process in nil
		oldValue: 	nil
	Receiver's instance variables: 
		index: 	5


BlockClosure>>ensure:
	Receiver: [ 
p psValueAt: index put: anObject.
aBlock value ]
	Arguments and temporary variables: 
		aBlock: 	[ p psValueAt: index put: oldValue ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ZnCurrentServer(DynamicVariable)>>value:during:
		startpc: 	62
		numArgs: 	0


ZnCurrentServer(DynamicVariable)>>value:during:
	Receiver: a ZnCurrentServer
	Arguments and temporary variables: 
		anObject: 	a ZnManagingMultiThreadedServer(running 8010)
		aBlock: 	[ self executeOneRequestResponseOn: stream ]
		p: 	a Process in nil
		oldValue: 	nil
	Receiver's instance variables: 
		index: 	5


ZnCurrentServer class(DynamicVariable class)>>value:during:
	Receiver: ZnCurrentServer
	Arguments and temporary variables: 
		anObject: 	a ZnManagingMultiThreadedServer(running 8010)
		aBlock: 	[ self executeOneRequestResponseOn: stream ]
	Receiver's instance variables: 
		superclass: 	DynamicVariable
		methodDict: 	a MethodDictionary()
		format: 	132
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#ZnCurrentServer
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Zinc-HTTP-Variables'
		traitComposition: 	{}
		localSelectors: 	nil
		hash: 	nil
		soleInstance: 	a ZnCurrentServer


ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		stream: 	a ZdcSocketStream
		request: 	nil
		response: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream)


[ self executeRequestResponseLoopOn: stream ] in [ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ] in [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		listeningSocket: 	a Socket[waitingForConnection]
		stream: 	a ZdcSocketStream
		socket: 	a Socket[connected]
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream)



--- The full stack ---
UnixStore(DiskStore)>>delete:
FileSystem>>delete:
FileReference>>delete
DeleteVisitor>>visitReference:
DeleteVisitor(FileSystemVisitor)>>visitFile:
PostorderGuide>>visit:
Message>>sendTo:
[ self pop sendTo: self ] in PostorderGuide>>show:
PostorderGuide(FileSystemGuide)>>whileNotDoneDo:
PostorderGuide>>show:
PostorderGuide class(FileSystemGuide class)>>show:to:selecting:
DeleteVisitor>>visit:
DeleteVisitor class>>delete:
FileReference(AbstractFileReference)>>deleteAll
DIUtil class>>folderRemove:
DIWebServiceAPI>>getSuiteKill
DIWebServiceHandler>>delete
DIWebServiceHandler(ZnRestCall)>>execute
[ call execute ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
BlockClosure>>on:do:
ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
[ self execute: call ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
BlockClosure>>on:do:
ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ :delegate | delegate handleRequest: request ] ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateRequest:do:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
[ self authenticateAndDelegateRequest: request ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
BlockClosure>>on:do:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequest:
ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeOneRequestResponseOn:
[ self executeOneRequestResponseOn: stream ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
[ 
p psValueAt: index put: anObject.
aBlock value ] in ZnCurrentServer(DynamicVariable)>>value:during:
BlockClosure>>ensure:
ZnCurrentServer(DynamicVariable)>>value:during:
ZnCurrentServer class(DynamicVariable class)>>value:during:
ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
[ self executeRequestResponseLoopOn: stream ] in [ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ] in [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
BlockClosure>>ensure:
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ] in [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
BlockClosure>>ifCurtailed:
[ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
NeoJSONParseError: invalid input: nil
18 February 2015 3:22:15.698458 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
NBCogit NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
https://github.com/pharo-project/pharo-vm.git Commit: 4a0d556150d478ff2de3c9624d2f18e6eaa3fa5c Date: 2014-12-18 18:42:53 +0100 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14893

Image: Pharo3.0 [Latest update: #30863]

NeoJSONReader>>error:
	Receiver: a NeoJSONReader
	Arguments and temporary variables: 
		text: 	'invalid input: nil'
	Receiver's instance variables: 
		mappings: 	nil
		readStream: 	a ReadStream
		stringStream: 	nil
		listClass: 	nil
		mapClass: 	nil
		propertyNamesAsSymbols: 	false


NeoJSONReader>>parseValue
	Receiver: a NeoJSONReader
	Arguments and temporary variables: 
		char: 	nil
	Receiver's instance variables: 
		mappings: 	nil
		readStream: 	a ReadStream
		stringStream: 	nil
		listClass: 	nil
		mapClass: 	nil
		propertyNamesAsSymbols: 	false


NeoJSONReader>>next
	Receiver: a NeoJSONReader
	Arguments and temporary variables: 

	Receiver's instance variables: 
		mappings: 	nil
		readStream: 	a ReadStream
		stringStream: 	nil
		listClass: 	nil
		mapClass: 	nil
		propertyNamesAsSymbols: 	false


NeoJSONReader class>>fromString:
	Receiver: NeoJSONReader
	Arguments and temporary variables: 
		string: 	''
	Receiver's instance variables: 
		superclass: 	NeoJSONMapper
		methodDict: 	a MethodDictionary(#atEnd->NeoJSONReader>>#atEnd #close->NeoJSONRea...etc...
		format: 	142
		layout: 	a FixedLayout
		instanceVariables: 	#(#readStream #stringStream #listClass #mapClass #propertyNa...etc...
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#NeoJSONReader
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Neo-JSON-Core'
		traitComposition: 	{}
		localSelectors: 	nil


DIPhpModel>>_loadPhpModel
	Receiver: a DIPhpModel
	Arguments and temporary variables: 

	Receiver's instance variables: 
		defRules: 	a DICollectionRule()
		defVars: 	a DICollectionVar(SYSTEM)
		analysisID: 	'1424269336'
		additionalProperties: 	a Dictionary()
		ruleCounter: 	0
		varCounter: 	0
		defVarElements: 	a DICollectionVarElements()
		defVarInvertedElements: 	a DICollectionVarElements()
		model: 	nil


DIPhpModel>>model
	Receiver: a DIPhpModel
	Arguments and temporary variables: 

	Receiver's instance variables: 
		defRules: 	a DICollectionRule()
		defVars: 	a DICollectionVar(SYSTEM)
		analysisID: 	'1424269336'
		additionalProperties: 	a Dictionary()
		ruleCounter: 	0
		varCounter: 	0
		defVarElements: 	a DICollectionVarElements()
		defVarInvertedElements: 	a DICollectionVarElements()
		model: 	nil


DIVarPhpClass>>allElements
	Receiver: RuleResult
	Arguments and temporary variables: 

	Receiver's instance variables: 
		isFirst: 	false
		dslText: 	'RuleResult=PhpClass with name:"Dicto\\RuleResult"'
		type: 	'PhpClass'
		id: 	1
		entity: 	nil
		name: 	'RuleResult'
		specifiers: 	an OrderedCollection(name=Dicto\\RuleResult)
		isInverted: 	false
		elements: 	a DICollectionVarElements()
		invertedElements: 	a DICollectionVarElements()


DIVarPhpClass(DIVar)>>elements
	Receiver: RuleResult
	Arguments and temporary variables: 
		valid: 	nil
	Receiver's instance variables: 
		isFirst: 	false
		dslText: 	'RuleResult=PhpClass with name:"Dicto\\RuleResult"'
		type: 	'PhpClass'
		id: 	1
		entity: 	nil
		name: 	'RuleResult'
		specifiers: 	an OrderedCollection(name=Dicto\\RuleResult)
		isInverted: 	false
		elements: 	a DICollectionVarElements()
		invertedElements: 	a DICollectionVarElements()


DISimpleRule>>subjectElements
	Receiver: RuleResult cannot depend on DictoTalker
	Arguments and temporary variables: 
		subjectElements: 	nil
	Receiver's instance variables: 
		isFirst: 	nil
		dslText: 	'RuleResult cannot depend on DictoTalker'
		type: 	#cannot
		id: 	1001
		entity: 	nil
		subjects: 	an Array(RuleResult)
		predicates: 	an Array(depend on DictoTalker)
		subRules: 	nil
		candidateAdapters: 	a SortedCollection(DIPhpDependencies)
		chosenAdapter: 	DIPhpDependencies
		hasFailed: 	false
		failureMessage: 	''
		failingPredicates: 	a Set()
		hasSubjectInverted: 	false
		hasPredicateInverted: 	false


printRulesEntityRelationship: someRules
	| res processedPredicates |
	res := ''.
	processedPredicates := Set new.
	someRules
		do: [ :rule | 
			| predicateSelector subjectElements argumentElements data isPredicateInv isSubjectInv |
			predicateSelector := (rule predicate nameNormalized , ':') asSymbol.
			isPredicateInv := rule hasPredicateInverted.
			isSubjectInv := rule hasSubjectInverted.
			subjectElements := rule subjectElements.
			argumentElements := rule argumentElements.
			subjectElements
				do: [ :subject | 
					argumentElements
						do: [ :argument | 
							| relId spec msgPass msgFail |
							relId := subject id , '-' , argument id.
							msgPass := subject id , '.' , rule predicate name , '(' , argument id , ')=True'.
							msgFail := subject id , '.' , rule predicate name , '(' , argument id , ')=False'.
							(processedPredicates includes: relId)
								ifFalse: [ 
									data := {(#subject -> subject value).
									(#argument -> argument value).
									(#ruleId -> rule id).
									(#propertyId -> relId).
									(#msgPass -> msgPass).
									(#msgFail -> msgFail)} asDictionary.
									spec := self perform: predicateSelector withArguments: {data}.
									spec := spec
										dictoReplace:
											{('$subject' -> subject value).
											('$argument' -> argument value).
											('$ruleId' -> rule id).
											('$propertyId' -> relId).
											('$msgPass' -> msgPass).
											('$msgFail' -> msgFail)}.
									res := res , spec ].	"avoid duplicate predicate evaluations"
							processedPredicates add: relId ] ] ].
	^ res in DIPhpDependencies(DIAdapter)>>printRulesEntityRelationship:
	Receiver: a DIPhpDependencies
	Arguments and temporary variables: 
		someRules: 	a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalk...etc...
		processedPredicates: 	a Set()
		data: 	nil
		res: 	''
		rule: 	RuleResult cannot depend on DictoTalker
		predicateSelector: 	#dependOn:
		subjectElements: 	nil
		argumentElements: 	nil
		isPredicateInv: 	false
		isSubjectInv: 	false
	Receiver's instance variables: 
		output: 	''
		commandOutput: 	''
		NEWLINE: 	'
'
		rules: 	a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalker m...etc...
		varSynonyms: 	nil
		sessionId: 	'1424269336'
		TIMESTAMP: 	'1424269336'
		TOOLNAME: 	'DIPhpDependencies'
		PROJECTROOT: 	'/home/otruffer/DictoCLI/'
		PROJECTSRC: 	'./'
		PROJECTBIN: 	'./'
		RESULTFILE: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/full-test/142426...etc...
		TESTFILE: 	nil
		testInputFileExt: 	'.st'
		SYSTEM: 	SYSTEM


DICollectionRule(OrderedCollection)>>do:
	Receiver: a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalker must depend on Rule...etc...
	Arguments and temporary variables: 
		aBlock: 	printRulesEntityRelationship: someRules
	| res processedPredicates |
	r...etc...
		index: 	1
	Receiver's instance variables: 
		array: 	an Array(RuleResult cannot depend on DictoTalker DictoTalker must depend...etc...
		firstIndex: 	1
		lastIndex: 	3
		elements: 	nil
		elements: 	nil


DIPhpDependencies(DIAdapter)>>printRulesEntityRelationship:
	Receiver: a DIPhpDependencies
	Arguments and temporary variables: 
		res: 	''
		someRules: 	a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalk...etc...
		processedPredicates: 	a Set()
	Receiver's instance variables: 
		output: 	''
		commandOutput: 	''
		NEWLINE: 	'
'
		rules: 	a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalker m...etc...
		varSynonyms: 	nil
		sessionId: 	'1424269336'
		TIMESTAMP: 	'1424269336'
		TOOLNAME: 	'DIPhpDependencies'
		PROJECTROOT: 	'/home/otruffer/DictoCLI/'
		PROJECTSRC: 	'./'
		PROJECTBIN: 	'./'
		RESULTFILE: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/full-test/142426...etc...
		TESTFILE: 	nil
		testInputFileExt: 	'.st'
		SYSTEM: 	SYSTEM


DIPhpDependencies(DIAdapter)>>printRules
	Receiver: a DIPhpDependencies
	Arguments and temporary variables: 
		res: 	nil
		allRules: 	a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalke...etc...
	Receiver's instance variables: 
		output: 	''
		commandOutput: 	''
		NEWLINE: 	'
'
		rules: 	a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalker m...etc...
		varSynonyms: 	nil
		sessionId: 	'1424269336'
		TIMESTAMP: 	'1424269336'
		TOOLNAME: 	'DIPhpDependencies'
		PROJECTROOT: 	'/home/otruffer/DictoCLI/'
		PROJECTSRC: 	'./'
		PROJECTBIN: 	'./'
		RESULTFILE: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/full-test/142426...etc...
		TESTFILE: 	nil
		testInputFileExt: 	'.st'
		SYSTEM: 	SYSTEM


DIPhpDependencies>>testInput
	Receiver: a DIPhpDependencies
	Arguments and temporary variables: 
		strRules: 	nil
	Receiver's instance variables: 
		output: 	''
		commandOutput: 	''
		NEWLINE: 	'
'
		rules: 	a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalker m...etc...
		varSynonyms: 	nil
		sessionId: 	'1424269336'
		TIMESTAMP: 	'1424269336'
		TOOLNAME: 	'DIPhpDependencies'
		PROJECTROOT: 	'/home/otruffer/DictoCLI/'
		PROJECTSRC: 	'./'
		PROJECTBIN: 	'./'
		RESULTFILE: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/full-test/142426...etc...
		TESTFILE: 	nil
		testInputFileExt: 	'.st'
		SYSTEM: 	SYSTEM


DITestGroup>>build
	Receiver: a DITestGroup
	Arguments and temporary variables: 

	Receiver's instance variables: 
		rules: 	an OrderedCollection(RuleResult cannot depend on DictoTalker DictoTalker...etc...
		adapter: 	a DIPhpDependencies
		runCommandText: 	nil
		testSpecification: 	nil
		adapterID: 	'DIPhpDependencies'
		resultFile: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/full-test/142426...etc...
		specificationFile: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/full-test...etc...
		commandFile: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/full-test/14242...etc...


[ :testGroup | testGroup build ] in DIDicto>>dictoBuild:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = ...etc...
		adapterTestGroups: 	a Dictionary(DIGrepFileContent->a DITestGroup DIJMeterLoadTe...etc...
		testGroup: 	a DITestGroup
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424269336'
		singleShotTask: 	false


Array(SequenceableCollection)>>do:
	Receiver: an Array(a DITestGroup a DITestGroup a DITestGroup a DITestGroup a DITestGroup)
	Arguments and temporary variables: 
		aBlock: 	[ :testGroup | testGroup build ]
		index: 	4
	Receiver's instance variables: 
an Array(a DITestGroup a DITestGroup a DITestGroup a DITestGroup a DITestGroup)

DIDicto>>dictoBuild:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = ...etc...
		adapterTestGroups: 	a Dictionary(DIGrepFileContent->a DITestGroup DIJMeterLoadTe...etc...
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424269336'
		singleShotTask: 	false


DIDicto>>dictoRun:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = ...etc...
		adapterTestGroups: 	nil
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424269336'
		singleShotTask: 	false


DIDicto>>dictoAll:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = ...etc...
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424269336'
		singleShotTask: 	false


[ DIDicto new dictoAll: input ] in DIWebServiceAPI>>getRun
	Receiver: a DIWebServiceAPI
	Arguments and temporary variables: 
		in: 	'/home/otruffer/dicto/bin/analysis/full-test/dicto.rules'
		input: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = PhpCl...etc...
		rulesFailed: 	nil
		rulesTotal: 	nil
	Receiver's instance variables: 
		request: 	nil
		response: 	nil
		variables: 	nil
		delegate: 	nil
		principal: 	nil
		credentials: 	nil


BlockClosure>>on:do:
	Receiver: [ DIDicto new dictoAll: input ]
	Arguments and temporary variables: 
		exception: 	DIException
		handlerAction: 	[ :ex | ^ self error: ex description ]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	DIWebServiceAPI>>getRun
		startpc: 	138
		numArgs: 	0


DIWebServiceAPI>>getRun
	Receiver: a DIWebServiceAPI
	Arguments and temporary variables: 
		in: 	'/home/otruffer/dicto/bin/analysis/full-test/dicto.rules'
		input: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = PhpCl...etc...
		rulesFailed: 	nil
		rulesTotal: 	nil
	Receiver's instance variables: 
		request: 	nil
		response: 	nil
		variables: 	nil
		delegate: 	nil
		principal: 	nil
		credentials: 	nil


DIWebServiceHandler>>post
	Receiver: a DIWebServiceHandler
	Arguments and temporary variables: 
		api: 	a DIWebServiceAPI
	Receiver's instance variables: 
		request: 	a ZnRequest(POST /full-test/run)
		response: 	nil
		variables: 	an OrderedCollection('full-test' 'run')
		delegate: 	a ZnJSONRestServerDelegate
		principal: 	nil
		credentials: 	nil
		dicto: 	a DIDicto


DIWebServiceHandler(ZnRestCall)>>execute
	Receiver: a DIWebServiceHandler
	Arguments and temporary variables: 

	Receiver's instance variables: 
		request: 	a ZnRequest(POST /full-test/run)
		response: 	nil
		variables: 	an OrderedCollection('full-test' 'run')
		delegate: 	a ZnJSONRestServerDelegate
		principal: 	nil
		credentials: 	nil
		dicto: 	a DIDicto


[ call execute ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


BlockClosure>>on:do:
	Receiver: [ call execute ]
	Arguments and temporary variables: 
		exception: 	ZnRestCallUnauthorized
		handlerAction: 	[ :exception | self unauthorized: exception request ]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
		startpc: 	38
		numArgs: 	0


ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


[ self execute: call ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /full-test/run)
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


BlockClosure>>on:do:
	Receiver: [ self execute: call ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :exception | 
request server debugMode
	ifTrue: [ exception pa...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
		startpc: 	99
		numArgs: 	0


ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /full-test/run)
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ :delegate | delegate handleRequest: request ] ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /full-test/run)
		delegate: 	a ZnJSONRestServerDelegate
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateRequest:do:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /full-test/run)
		block: 	[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ ...etc...
		authenticator: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /full-test/run)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream)


[ self authenticateAndDelegateRequest: request ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /full-test/run)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream)


BlockClosure>>on:do:
	Receiver: [ self authenticateAndDelegateRequest: request ]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :exception | 
self debugMode
	ifTrue: [ exception pass ]
	ifFa...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequ...etc...
		startpc: 	58
		numArgs: 	0


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /full-test/run)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /full-test/run)
		response: 	nil
		initialMilliseconds: 	13846032
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeOneRequestResponseOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		stream: 	a ZdcSocketStream
		request: 	a ZnRequest(POST /full-test/run)
		response: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream)



--- The full stack ---
NeoJSONReader>>error:
NeoJSONReader>>parseValue
NeoJSONReader>>next
NeoJSONReader class>>fromString:
DIPhpModel>>_loadPhpModel
DIPhpModel>>model
DIVarPhpClass>>allElements
DIVarPhpClass(DIVar)>>elements
DISimpleRule>>subjectElements
printRulesEntityRelationship: someRules
	| res processedPredicates |
	res := ''.
	processedPredicates := Set new.
	someRules
		do: [ :rule | 
			| predicateSelector subjectElements argumentElements data isPredicateInv isSubjectInv |
			predicateSelector := (rule predicate nameNormalized , ':') asSymbol.
			isPredicateInv := rule hasPredicateInverted.
			isSubjectInv := rule hasSubjectInverted.
			subjectElements := rule subjectElements.
			argumentElements := rule argumentElements.
			subjectElements
				do: [ :subject | 
					argumentElements
						do: [ :argument | 
							| relId spec msgPass msgFail |
							relId := subject id , '-' , argument id.
							msgPass := subject id , '.' , rule predicate name , '(' , argument id , ')=True'.
							msgFail := subject id , '.' , rule predicate name , '(' , argument id , ')=False'.
							(processedPredicates includes: relId)
								ifFalse: [ 
									data := {(#subject -> subject value).
									(#argument -> argument value).
									(#ruleId -> rule id).
									(#propertyId -> relId).
									(#msgPass -> msgPass).
									(#msgFail -> msgFail)} asDictionary.
									spec := self perform: predicateSelector withArguments: {data}.
									spec := spec
										dictoReplace:
											{('$subject' -> subject value).
											('$argument' -> argument value).
											('$ruleId' -> rule id).
											('$propertyId' -> relId).
											('$msgPass' -> msgPass).
											('$msgFail' -> msgFail)}.
									res := res , spec ].	"avoid duplicate predicate evaluations"
							processedPredicates add: relId ] ] ].
	^ res in DIPhpDependencies(DIAdapter)>>printRulesEntityRelationship:
DICollectionRule(OrderedCollection)>>do:
DIPhpDependencies(DIAdapter)>>printRulesEntityRelationship:
DIPhpDependencies(DIAdapter)>>printRules
DIPhpDependencies>>testInput
DITestGroup>>build
[ :testGroup | testGroup build ] in DIDicto>>dictoBuild:
Array(SequenceableCollection)>>do:
DIDicto>>dictoBuild:
DIDicto>>dictoRun:
DIDicto>>dictoAll:
[ DIDicto new dictoAll: input ] in DIWebServiceAPI>>getRun
BlockClosure>>on:do:
DIWebServiceAPI>>getRun
DIWebServiceHandler>>post
DIWebServiceHandler(ZnRestCall)>>execute
[ call execute ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
BlockClosure>>on:do:
ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
[ self execute: call ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
BlockClosure>>on:do:
ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ :delegate | delegate handleRequest: request ] ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateRequest:do:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
[ self authenticateAndDelegateRequest: request ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
BlockClosure>>on:do:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequest:
ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeOneRequestResponseOn:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ self executeOneRequestResponseOn: stream ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
[ 
p psValueAt: index put: anObject.
aBlock value ] in ZnCurrentServer(DynamicVariable)>>value:during:
BlockClosure>>ensure:
ZnCurrentServer(DynamicVariable)>>value:during:
ZnCurrentServer class(DynamicVariable class)>>value:during:
ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
[ self executeRequestResponseLoopOn: stream ] in [ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ] in [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
BlockClosure>>ensure:
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ] in [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
BlockClosure>>ifCurtailed:
[ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
NeoJSONParseError: invalid input: nil
18 February 2015 3:22:43.523771 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
NBCogit NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
https://github.com/pharo-project/pharo-vm.git Commit: 4a0d556150d478ff2de3c9624d2f18e6eaa3fa5c Date: 2014-12-18 18:42:53 +0100 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14893

Image: Pharo3.0 [Latest update: #30863]

NeoJSONReader>>error:
	Receiver: a NeoJSONReader
	Arguments and temporary variables: 
		text: 	'invalid input: nil'
	Receiver's instance variables: 
		mappings: 	nil
		readStream: 	a ReadStream
		stringStream: 	nil
		listClass: 	nil
		mapClass: 	nil
		propertyNamesAsSymbols: 	false


NeoJSONReader>>parseValue
	Receiver: a NeoJSONReader
	Arguments and temporary variables: 
		char: 	nil
	Receiver's instance variables: 
		mappings: 	nil
		readStream: 	a ReadStream
		stringStream: 	nil
		listClass: 	nil
		mapClass: 	nil
		propertyNamesAsSymbols: 	false


NeoJSONReader>>next
	Receiver: a NeoJSONReader
	Arguments and temporary variables: 

	Receiver's instance variables: 
		mappings: 	nil
		readStream: 	a ReadStream
		stringStream: 	nil
		listClass: 	nil
		mapClass: 	nil
		propertyNamesAsSymbols: 	false


NeoJSONReader class>>fromString:
	Receiver: NeoJSONReader
	Arguments and temporary variables: 
		string: 	''
	Receiver's instance variables: 
		superclass: 	NeoJSONMapper
		methodDict: 	a MethodDictionary(#atEnd->NeoJSONReader>>#atEnd #close->NeoJSONRea...etc...
		format: 	142
		layout: 	a FixedLayout
		instanceVariables: 	#(#readStream #stringStream #listClass #mapClass #propertyNa...etc...
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#NeoJSONReader
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Neo-JSON-Core'
		traitComposition: 	{}
		localSelectors: 	nil


DIPhpModel>>_loadPhpModel
	Receiver: a DIPhpModel
	Arguments and temporary variables: 

	Receiver's instance variables: 
		defRules: 	a DICollectionRule()
		defVars: 	a DICollectionVar(SYSTEM)
		analysisID: 	'1424269363'
		additionalProperties: 	a Dictionary()
		ruleCounter: 	0
		varCounter: 	0
		defVarElements: 	a DICollectionVarElements()
		defVarInvertedElements: 	a DICollectionVarElements()
		model: 	nil


DIPhpModel>>model
	Receiver: a DIPhpModel
	Arguments and temporary variables: 

	Receiver's instance variables: 
		defRules: 	a DICollectionRule()
		defVars: 	a DICollectionVar(SYSTEM)
		analysisID: 	'1424269363'
		additionalProperties: 	a Dictionary()
		ruleCounter: 	0
		varCounter: 	0
		defVarElements: 	a DICollectionVarElements()
		defVarInvertedElements: 	a DICollectionVarElements()
		model: 	nil


DIVarPhpClass>>allElements
	Receiver: RuleResult
	Arguments and temporary variables: 

	Receiver's instance variables: 
		isFirst: 	false
		dslText: 	'RuleResult=PhpClass with name:"Dicto\\RuleResult"'
		type: 	'PhpClass'
		id: 	1
		entity: 	nil
		name: 	'RuleResult'
		specifiers: 	an OrderedCollection(name=Dicto\\RuleResult)
		isInverted: 	false
		elements: 	a DICollectionVarElements()
		invertedElements: 	a DICollectionVarElements()


DIVarPhpClass(DIVar)>>elements
	Receiver: RuleResult
	Arguments and temporary variables: 
		valid: 	nil
	Receiver's instance variables: 
		isFirst: 	false
		dslText: 	'RuleResult=PhpClass with name:"Dicto\\RuleResult"'
		type: 	'PhpClass'
		id: 	1
		entity: 	nil
		name: 	'RuleResult'
		specifiers: 	an OrderedCollection(name=Dicto\\RuleResult)
		isInverted: 	false
		elements: 	a DICollectionVarElements()
		invertedElements: 	a DICollectionVarElements()


DISimpleRule>>subjectElements
	Receiver: RuleResult cannot depend on DictoTalker
	Arguments and temporary variables: 
		subjectElements: 	nil
	Receiver's instance variables: 
		isFirst: 	nil
		dslText: 	'RuleResult cannot depend on DictoTalker'
		type: 	#cannot
		id: 	1001
		entity: 	nil
		subjects: 	an Array(RuleResult)
		predicates: 	an Array(depend on DictoTalker)
		subRules: 	nil
		candidateAdapters: 	a SortedCollection(DIPhpDependencies)
		chosenAdapter: 	DIPhpDependencies
		hasFailed: 	false
		failureMessage: 	''
		failingPredicates: 	a Set()
		hasSubjectInverted: 	false
		hasPredicateInverted: 	false


printRulesEntityRelationship: someRules
	| res processedPredicates |
	res := ''.
	processedPredicates := Set new.
	someRules
		do: [ :rule | 
			| predicateSelector subjectElements argumentElements data isPredicateInv isSubjectInv |
			predicateSelector := (rule predicate nameNormalized , ':') asSymbol.
			isPredicateInv := rule hasPredicateInverted.
			isSubjectInv := rule hasSubjectInverted.
			subjectElements := rule subjectElements.
			argumentElements := rule argumentElements.
			subjectElements
				do: [ :subject | 
					argumentElements
						do: [ :argument | 
							| relId spec msgPass msgFail |
							relId := subject id , '-' , argument id.
							msgPass := subject id , '.' , rule predicate name , '(' , argument id , ')=True'.
							msgFail := subject id , '.' , rule predicate name , '(' , argument id , ')=False'.
							(processedPredicates includes: relId)
								ifFalse: [ 
									data := {(#subject -> subject value).
									(#argument -> argument value).
									(#ruleId -> rule id).
									(#propertyId -> relId).
									(#msgPass -> msgPass).
									(#msgFail -> msgFail)} asDictionary.
									spec := self perform: predicateSelector withArguments: {data}.
									spec := spec
										dictoReplace:
											{('$subject' -> subject value).
											('$argument' -> argument value).
											('$ruleId' -> rule id).
											('$propertyId' -> relId).
											('$msgPass' -> msgPass).
											('$msgFail' -> msgFail)}.
									res := res , spec ].	"avoid duplicate predicate evaluations"
							processedPredicates add: relId ] ] ].
	^ res in DIPhpDependencies(DIAdapter)>>printRulesEntityRelationship:
	Receiver: a DIPhpDependencies
	Arguments and temporary variables: 
		someRules: 	a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalk...etc...
		processedPredicates: 	a Set()
		data: 	nil
		res: 	''
		rule: 	RuleResult cannot depend on DictoTalker
		predicateSelector: 	#dependOn:
		subjectElements: 	nil
		argumentElements: 	nil
		isPredicateInv: 	false
		isSubjectInv: 	false
	Receiver's instance variables: 
		output: 	''
		commandOutput: 	''
		NEWLINE: 	'
'
		rules: 	a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalker m...etc...
		varSynonyms: 	nil
		sessionId: 	'1424269363'
		TIMESTAMP: 	'1424269363'
		TOOLNAME: 	'DIPhpDependencies'
		PROJECTROOT: 	'/home/otruffer/DictoCLI/'
		PROJECTSRC: 	'./'
		PROJECTBIN: 	'./'
		RESULTFILE: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/full-test/142426...etc...
		TESTFILE: 	nil
		testInputFileExt: 	'.st'
		SYSTEM: 	SYSTEM


DICollectionRule(OrderedCollection)>>do:
	Receiver: a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalker must depend on Rule...etc...
	Arguments and temporary variables: 
		aBlock: 	printRulesEntityRelationship: someRules
	| res processedPredicates |
	r...etc...
		index: 	1
	Receiver's instance variables: 
		array: 	an Array(RuleResult cannot depend on DictoTalker DictoTalker must depend...etc...
		firstIndex: 	1
		lastIndex: 	3
		elements: 	nil
		elements: 	nil


DIPhpDependencies(DIAdapter)>>printRulesEntityRelationship:
	Receiver: a DIPhpDependencies
	Arguments and temporary variables: 
		res: 	''
		someRules: 	a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalk...etc...
		processedPredicates: 	a Set()
	Receiver's instance variables: 
		output: 	''
		commandOutput: 	''
		NEWLINE: 	'
'
		rules: 	a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalker m...etc...
		varSynonyms: 	nil
		sessionId: 	'1424269363'
		TIMESTAMP: 	'1424269363'
		TOOLNAME: 	'DIPhpDependencies'
		PROJECTROOT: 	'/home/otruffer/DictoCLI/'
		PROJECTSRC: 	'./'
		PROJECTBIN: 	'./'
		RESULTFILE: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/full-test/142426...etc...
		TESTFILE: 	nil
		testInputFileExt: 	'.st'
		SYSTEM: 	SYSTEM


DIPhpDependencies(DIAdapter)>>printRules
	Receiver: a DIPhpDependencies
	Arguments and temporary variables: 
		res: 	nil
		allRules: 	a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalke...etc...
	Receiver's instance variables: 
		output: 	''
		commandOutput: 	''
		NEWLINE: 	'
'
		rules: 	a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalker m...etc...
		varSynonyms: 	nil
		sessionId: 	'1424269363'
		TIMESTAMP: 	'1424269363'
		TOOLNAME: 	'DIPhpDependencies'
		PROJECTROOT: 	'/home/otruffer/DictoCLI/'
		PROJECTSRC: 	'./'
		PROJECTBIN: 	'./'
		RESULTFILE: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/full-test/142426...etc...
		TESTFILE: 	nil
		testInputFileExt: 	'.st'
		SYSTEM: 	SYSTEM


DIPhpDependencies>>testInput
	Receiver: a DIPhpDependencies
	Arguments and temporary variables: 
		strRules: 	nil
	Receiver's instance variables: 
		output: 	''
		commandOutput: 	''
		NEWLINE: 	'
'
		rules: 	a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalker m...etc...
		varSynonyms: 	nil
		sessionId: 	'1424269363'
		TIMESTAMP: 	'1424269363'
		TOOLNAME: 	'DIPhpDependencies'
		PROJECTROOT: 	'/home/otruffer/DictoCLI/'
		PROJECTSRC: 	'./'
		PROJECTBIN: 	'./'
		RESULTFILE: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/full-test/142426...etc...
		TESTFILE: 	nil
		testInputFileExt: 	'.st'
		SYSTEM: 	SYSTEM


DITestGroup>>build
	Receiver: a DITestGroup
	Arguments and temporary variables: 

	Receiver's instance variables: 
		rules: 	an OrderedCollection(RuleResult cannot depend on DictoTalker DictoTalker...etc...
		adapter: 	a DIPhpDependencies
		runCommandText: 	nil
		testSpecification: 	nil
		adapterID: 	'DIPhpDependencies'
		resultFile: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/full-test/142426...etc...
		specificationFile: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/full-test...etc...
		commandFile: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/full-test/14242...etc...


[ :testGroup | testGroup build ] in DIDicto>>dictoBuild:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = ...etc...
		adapterTestGroups: 	a Dictionary(DIGrepFileContent->a DITestGroup DIJMeterLoadTe...etc...
		testGroup: 	a DITestGroup
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424269363'
		singleShotTask: 	false


Array(SequenceableCollection)>>do:
	Receiver: an Array(a DITestGroup a DITestGroup a DITestGroup a DITestGroup a DITestGroup)
	Arguments and temporary variables: 
		aBlock: 	[ :testGroup | testGroup build ]
		index: 	4
	Receiver's instance variables: 
an Array(a DITestGroup a DITestGroup a DITestGroup a DITestGroup a DITestGroup)

DIDicto>>dictoBuild:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = ...etc...
		adapterTestGroups: 	a Dictionary(DIGrepFileContent->a DITestGroup DIJMeterLoadTe...etc...
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424269363'
		singleShotTask: 	false


DIDicto>>dictoRun:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = ...etc...
		adapterTestGroups: 	nil
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424269363'
		singleShotTask: 	false


DIDicto>>dictoAll:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = ...etc...
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424269363'
		singleShotTask: 	false


[ DIDicto new dictoAll: input ] in DIWebServiceAPI>>getRun
	Receiver: a DIWebServiceAPI
	Arguments and temporary variables: 
		in: 	'/home/otruffer/dicto/bin/analysis/full-test/dicto.rules'
		input: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = PhpCl...etc...
		rulesFailed: 	nil
		rulesTotal: 	nil
	Receiver's instance variables: 
		request: 	nil
		response: 	nil
		variables: 	nil
		delegate: 	nil
		principal: 	nil
		credentials: 	nil


BlockClosure>>on:do:
	Receiver: [ DIDicto new dictoAll: input ]
	Arguments and temporary variables: 
		exception: 	DIException
		handlerAction: 	[ :ex | ^ self error: ex description ]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	DIWebServiceAPI>>getRun
		startpc: 	138
		numArgs: 	0


DIWebServiceAPI>>getRun
	Receiver: a DIWebServiceAPI
	Arguments and temporary variables: 
		in: 	'/home/otruffer/dicto/bin/analysis/full-test/dicto.rules'
		input: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = PhpCl...etc...
		rulesFailed: 	nil
		rulesTotal: 	nil
	Receiver's instance variables: 
		request: 	nil
		response: 	nil
		variables: 	nil
		delegate: 	nil
		principal: 	nil
		credentials: 	nil


DIWebServiceHandler>>post
	Receiver: a DIWebServiceHandler
	Arguments and temporary variables: 
		api: 	a DIWebServiceAPI
	Receiver's instance variables: 
		request: 	a ZnRequest(POST /full-test/run)
		response: 	nil
		variables: 	an OrderedCollection('full-test' 'run')
		delegate: 	a ZnJSONRestServerDelegate
		principal: 	nil
		credentials: 	nil
		dicto: 	a DIDicto


DIWebServiceHandler(ZnRestCall)>>execute
	Receiver: a DIWebServiceHandler
	Arguments and temporary variables: 

	Receiver's instance variables: 
		request: 	a ZnRequest(POST /full-test/run)
		response: 	nil
		variables: 	an OrderedCollection('full-test' 'run')
		delegate: 	a ZnJSONRestServerDelegate
		principal: 	nil
		credentials: 	nil
		dicto: 	a DIDicto


[ call execute ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


BlockClosure>>on:do:
	Receiver: [ call execute ]
	Arguments and temporary variables: 
		exception: 	ZnRestCallUnauthorized
		handlerAction: 	[ :exception | self unauthorized: exception request ]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
		startpc: 	38
		numArgs: 	0


ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


[ self execute: call ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /full-test/run)
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


BlockClosure>>on:do:
	Receiver: [ self execute: call ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :exception | 
request server debugMode
	ifTrue: [ exception pa...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
		startpc: 	99
		numArgs: 	0


ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /full-test/run)
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ :delegate | delegate handleRequest: request ] ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /full-test/run)
		delegate: 	a ZnJSONRestServerDelegate
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateRequest:do:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /full-test/run)
		block: 	[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ ...etc...
		authenticator: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /full-test/run)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream)


[ self authenticateAndDelegateRequest: request ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /full-test/run)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream)


BlockClosure>>on:do:
	Receiver: [ self authenticateAndDelegateRequest: request ]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :exception | 
self debugMode
	ifTrue: [ exception pass ]
	ifFa...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequ...etc...
		startpc: 	58
		numArgs: 	0


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /full-test/run)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /full-test/run)
		response: 	nil
		initialMilliseconds: 	13873862
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeOneRequestResponseOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		stream: 	a ZdcSocketStream
		request: 	a ZnRequest(POST /full-test/run)
		response: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream)



--- The full stack ---
NeoJSONReader>>error:
NeoJSONReader>>parseValue
NeoJSONReader>>next
NeoJSONReader class>>fromString:
DIPhpModel>>_loadPhpModel
DIPhpModel>>model
DIVarPhpClass>>allElements
DIVarPhpClass(DIVar)>>elements
DISimpleRule>>subjectElements
printRulesEntityRelationship: someRules
	| res processedPredicates |
	res := ''.
	processedPredicates := Set new.
	someRules
		do: [ :rule | 
			| predicateSelector subjectElements argumentElements data isPredicateInv isSubjectInv |
			predicateSelector := (rule predicate nameNormalized , ':') asSymbol.
			isPredicateInv := rule hasPredicateInverted.
			isSubjectInv := rule hasSubjectInverted.
			subjectElements := rule subjectElements.
			argumentElements := rule argumentElements.
			subjectElements
				do: [ :subject | 
					argumentElements
						do: [ :argument | 
							| relId spec msgPass msgFail |
							relId := subject id , '-' , argument id.
							msgPass := subject id , '.' , rule predicate name , '(' , argument id , ')=True'.
							msgFail := subject id , '.' , rule predicate name , '(' , argument id , ')=False'.
							(processedPredicates includes: relId)
								ifFalse: [ 
									data := {(#subject -> subject value).
									(#argument -> argument value).
									(#ruleId -> rule id).
									(#propertyId -> relId).
									(#msgPass -> msgPass).
									(#msgFail -> msgFail)} asDictionary.
									spec := self perform: predicateSelector withArguments: {data}.
									spec := spec
										dictoReplace:
											{('$subject' -> subject value).
											('$argument' -> argument value).
											('$ruleId' -> rule id).
											('$propertyId' -> relId).
											('$msgPass' -> msgPass).
											('$msgFail' -> msgFail)}.
									res := res , spec ].	"avoid duplicate predicate evaluations"
							processedPredicates add: relId ] ] ].
	^ res in DIPhpDependencies(DIAdapter)>>printRulesEntityRelationship:
DICollectionRule(OrderedCollection)>>do:
DIPhpDependencies(DIAdapter)>>printRulesEntityRelationship:
DIPhpDependencies(DIAdapter)>>printRules
DIPhpDependencies>>testInput
DITestGroup>>build
[ :testGroup | testGroup build ] in DIDicto>>dictoBuild:
Array(SequenceableCollection)>>do:
DIDicto>>dictoBuild:
DIDicto>>dictoRun:
DIDicto>>dictoAll:
[ DIDicto new dictoAll: input ] in DIWebServiceAPI>>getRun
BlockClosure>>on:do:
DIWebServiceAPI>>getRun
DIWebServiceHandler>>post
DIWebServiceHandler(ZnRestCall)>>execute
[ call execute ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
BlockClosure>>on:do:
ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
[ self execute: call ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
BlockClosure>>on:do:
ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ :delegate | delegate handleRequest: request ] ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateRequest:do:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
[ self authenticateAndDelegateRequest: request ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
BlockClosure>>on:do:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequest:
ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeOneRequestResponseOn:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ self executeOneRequestResponseOn: stream ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
[ 
p psValueAt: index put: anObject.
aBlock value ] in ZnCurrentServer(DynamicVariable)>>value:during:
BlockClosure>>ensure:
ZnCurrentServer(DynamicVariable)>>value:during:
ZnCurrentServer class(DynamicVariable class)>>value:during:
ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
[ self executeRequestResponseLoopOn: stream ] in [ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ] in [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
BlockClosure>>ensure:
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ] in [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
BlockClosure>>ifCurtailed:
[ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
NeoJSONParseError: invalid input: nil
18 February 2015 3:34:35.825634 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
NBCogit NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
https://github.com/pharo-project/pharo-vm.git Commit: 4a0d556150d478ff2de3c9624d2f18e6eaa3fa5c Date: 2014-12-18 18:42:53 +0100 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14893

Image: Pharo3.0 [Latest update: #30863]

NeoJSONReader>>error:
	Receiver: a NeoJSONReader
	Arguments and temporary variables: 
		text: 	'invalid input: nil'
	Receiver's instance variables: 
		mappings: 	nil
		readStream: 	a ReadStream
		stringStream: 	nil
		listClass: 	nil
		mapClass: 	nil
		propertyNamesAsSymbols: 	false


NeoJSONReader>>parseValue
	Receiver: a NeoJSONReader
	Arguments and temporary variables: 
		char: 	nil
	Receiver's instance variables: 
		mappings: 	nil
		readStream: 	a ReadStream
		stringStream: 	nil
		listClass: 	nil
		mapClass: 	nil
		propertyNamesAsSymbols: 	false


NeoJSONReader>>next
	Receiver: a NeoJSONReader
	Arguments and temporary variables: 

	Receiver's instance variables: 
		mappings: 	nil
		readStream: 	a ReadStream
		stringStream: 	nil
		listClass: 	nil
		mapClass: 	nil
		propertyNamesAsSymbols: 	false


NeoJSONReader class>>fromString:
	Receiver: NeoJSONReader
	Arguments and temporary variables: 
		string: 	''
	Receiver's instance variables: 
		superclass: 	NeoJSONMapper
		methodDict: 	a MethodDictionary(#atEnd->NeoJSONReader>>#atEnd #close->NeoJSONRea...etc...
		format: 	142
		layout: 	a FixedLayout
		instanceVariables: 	#(#readStream #stringStream #listClass #mapClass #propertyNa...etc...
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#NeoJSONReader
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Neo-JSON-Core'
		traitComposition: 	{}
		localSelectors: 	nil


DIPhpModel>>_loadPhpModel
	Receiver: a DIPhpModel
	Arguments and temporary variables: 

	Receiver's instance variables: 
		defRules: 	a DICollectionRule()
		defVars: 	a DICollectionVar(SYSTEM)
		analysisID: 	'1424270076'
		additionalProperties: 	a Dictionary()
		ruleCounter: 	0
		varCounter: 	0
		defVarElements: 	a DICollectionVarElements()
		defVarInvertedElements: 	a DICollectionVarElements()
		model: 	nil


DIPhpModel>>model
	Receiver: a DIPhpModel
	Arguments and temporary variables: 

	Receiver's instance variables: 
		defRules: 	a DICollectionRule()
		defVars: 	a DICollectionVar(SYSTEM)
		analysisID: 	'1424270076'
		additionalProperties: 	a Dictionary()
		ruleCounter: 	0
		varCounter: 	0
		defVarElements: 	a DICollectionVarElements()
		defVarInvertedElements: 	a DICollectionVarElements()
		model: 	nil


DIVarPhpClass>>allElements
	Receiver: RuleResult
	Arguments and temporary variables: 

	Receiver's instance variables: 
		isFirst: 	false
		dslText: 	'RuleResult=PhpClass with name:"Dicto\\RuleResult"'
		type: 	'PhpClass'
		id: 	1
		entity: 	nil
		name: 	'RuleResult'
		specifiers: 	an OrderedCollection(name=Dicto\\RuleResult)
		isInverted: 	false
		elements: 	a DICollectionVarElements()
		invertedElements: 	a DICollectionVarElements()


DIVarPhpClass(DIVar)>>elements
	Receiver: RuleResult
	Arguments and temporary variables: 
		valid: 	nil
	Receiver's instance variables: 
		isFirst: 	false
		dslText: 	'RuleResult=PhpClass with name:"Dicto\\RuleResult"'
		type: 	'PhpClass'
		id: 	1
		entity: 	nil
		name: 	'RuleResult'
		specifiers: 	an OrderedCollection(name=Dicto\\RuleResult)
		isInverted: 	false
		elements: 	a DICollectionVarElements()
		invertedElements: 	a DICollectionVarElements()


DISimpleRule>>subjectElements
	Receiver: RuleResult cannot depend on DictoTalker
	Arguments and temporary variables: 
		subjectElements: 	nil
	Receiver's instance variables: 
		isFirst: 	nil
		dslText: 	'RuleResult cannot depend on DictoTalker'
		type: 	#cannot
		id: 	1001
		entity: 	nil
		subjects: 	an Array(RuleResult)
		predicates: 	an Array(depend on DictoTalker)
		subRules: 	nil
		candidateAdapters: 	a SortedCollection(DIPhpDependencies)
		chosenAdapter: 	DIPhpDependencies
		hasFailed: 	false
		failureMessage: 	''
		failingPredicates: 	a Set()
		hasSubjectInverted: 	false
		hasPredicateInverted: 	false


printRulesEntityRelationship: someRules
	| res processedPredicates |
	res := ''.
	processedPredicates := Set new.
	someRules
		do: [ :rule | 
			| predicateSelector subjectElements argumentElements data isPredicateInv isSubjectInv |
			predicateSelector := (rule predicate nameNormalized , ':') asSymbol.
			isPredicateInv := rule hasPredicateInverted.
			isSubjectInv := rule hasSubjectInverted.
			subjectElements := rule subjectElements.
			argumentElements := rule argumentElements.
			subjectElements
				do: [ :subject | 
					argumentElements
						do: [ :argument | 
							| relId spec msgPass msgFail |
							relId := subject id , '-' , argument id.
							msgPass := subject id , '.' , rule predicate name , '(' , argument id , ')=True'.
							msgFail := subject id , '.' , rule predicate name , '(' , argument id , ')=False'.
							(processedPredicates includes: relId)
								ifFalse: [ 
									data := {(#subject -> subject value).
									(#argument -> argument value).
									(#ruleId -> rule id).
									(#propertyId -> relId).
									(#msgPass -> msgPass).
									(#msgFail -> msgFail)} asDictionary.
									spec := self perform: predicateSelector withArguments: {data}.
									spec := spec
										dictoReplace:
											{('$subject' -> subject value).
											('$argument' -> argument value).
											('$ruleId' -> rule id).
											('$propertyId' -> relId).
											('$msgPass' -> msgPass).
											('$msgFail' -> msgFail)}.
									res := res , spec ].	"avoid duplicate predicate evaluations"
							processedPredicates add: relId ] ] ].
	^ res in DIPhpDependencies(DIAdapter)>>printRulesEntityRelationship:
	Receiver: a DIPhpDependencies
	Arguments and temporary variables: 
		someRules: 	a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalk...etc...
		processedPredicates: 	a Set()
		data: 	nil
		res: 	''
		rule: 	RuleResult cannot depend on DictoTalker
		predicateSelector: 	#dependOn:
		subjectElements: 	nil
		argumentElements: 	nil
		isPredicateInv: 	false
		isSubjectInv: 	false
	Receiver's instance variables: 
		output: 	''
		commandOutput: 	''
		NEWLINE: 	'
'
		rules: 	a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalker m...etc...
		varSynonyms: 	nil
		sessionId: 	'1424270076'
		TIMESTAMP: 	'1424270076'
		TOOLNAME: 	'DIPhpDependencies'
		PROJECTROOT: 	'/home/otruffer/DictoCLI/'
		PROJECTSRC: 	'./'
		PROJECTBIN: 	'./'
		RESULTFILE: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/full-test/142427...etc...
		TESTFILE: 	nil
		testInputFileExt: 	'.st'
		SYSTEM: 	SYSTEM


DICollectionRule(OrderedCollection)>>do:
	Receiver: a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalker must depend on Rule...etc...
	Arguments and temporary variables: 
		aBlock: 	printRulesEntityRelationship: someRules
	| res processedPredicates |
	r...etc...
		index: 	1
	Receiver's instance variables: 
		array: 	an Array(RuleResult cannot depend on DictoTalker DictoTalker must depend...etc...
		firstIndex: 	1
		lastIndex: 	3
		elements: 	nil
		elements: 	nil


DIPhpDependencies(DIAdapter)>>printRulesEntityRelationship:
	Receiver: a DIPhpDependencies
	Arguments and temporary variables: 
		res: 	''
		someRules: 	a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalk...etc...
		processedPredicates: 	a Set()
	Receiver's instance variables: 
		output: 	''
		commandOutput: 	''
		NEWLINE: 	'
'
		rules: 	a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalker m...etc...
		varSynonyms: 	nil
		sessionId: 	'1424270076'
		TIMESTAMP: 	'1424270076'
		TOOLNAME: 	'DIPhpDependencies'
		PROJECTROOT: 	'/home/otruffer/DictoCLI/'
		PROJECTSRC: 	'./'
		PROJECTBIN: 	'./'
		RESULTFILE: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/full-test/142427...etc...
		TESTFILE: 	nil
		testInputFileExt: 	'.st'
		SYSTEM: 	SYSTEM


DIPhpDependencies(DIAdapter)>>printRules
	Receiver: a DIPhpDependencies
	Arguments and temporary variables: 
		res: 	nil
		allRules: 	a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalke...etc...
	Receiver's instance variables: 
		output: 	''
		commandOutput: 	''
		NEWLINE: 	'
'
		rules: 	a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalker m...etc...
		varSynonyms: 	nil
		sessionId: 	'1424270076'
		TIMESTAMP: 	'1424270076'
		TOOLNAME: 	'DIPhpDependencies'
		PROJECTROOT: 	'/home/otruffer/DictoCLI/'
		PROJECTSRC: 	'./'
		PROJECTBIN: 	'./'
		RESULTFILE: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/full-test/142427...etc...
		TESTFILE: 	nil
		testInputFileExt: 	'.st'
		SYSTEM: 	SYSTEM


DIPhpDependencies>>testInput
	Receiver: a DIPhpDependencies
	Arguments and temporary variables: 
		strRules: 	nil
	Receiver's instance variables: 
		output: 	''
		commandOutput: 	''
		NEWLINE: 	'
'
		rules: 	a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalker m...etc...
		varSynonyms: 	nil
		sessionId: 	'1424270076'
		TIMESTAMP: 	'1424270076'
		TOOLNAME: 	'DIPhpDependencies'
		PROJECTROOT: 	'/home/otruffer/DictoCLI/'
		PROJECTSRC: 	'./'
		PROJECTBIN: 	'./'
		RESULTFILE: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/full-test/142427...etc...
		TESTFILE: 	nil
		testInputFileExt: 	'.st'
		SYSTEM: 	SYSTEM


DITestGroup>>build
	Receiver: a DITestGroup
	Arguments and temporary variables: 

	Receiver's instance variables: 
		rules: 	an OrderedCollection(RuleResult cannot depend on DictoTalker DictoTalker...etc...
		adapter: 	a DIPhpDependencies
		runCommandText: 	nil
		testSpecification: 	nil
		adapterID: 	'DIPhpDependencies'
		resultFile: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/full-test/142427...etc...
		specificationFile: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/full-test...etc...
		commandFile: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/full-test/14242...etc...


[ :testGroup | testGroup build ] in DIDicto>>dictoBuild:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = ...etc...
		adapterTestGroups: 	a Dictionary(DIGrepFileContent->a DITestGroup DIJMeterLoadTe...etc...
		testGroup: 	a DITestGroup
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424270076'
		singleShotTask: 	false


Array(SequenceableCollection)>>do:
	Receiver: an Array(a DITestGroup a DITestGroup a DITestGroup a DITestGroup a DITestGroup)
	Arguments and temporary variables: 
		aBlock: 	[ :testGroup | testGroup build ]
		index: 	4
	Receiver's instance variables: 
an Array(a DITestGroup a DITestGroup a DITestGroup a DITestGroup a DITestGroup)

DIDicto>>dictoBuild:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = ...etc...
		adapterTestGroups: 	a Dictionary(DIGrepFileContent->a DITestGroup DIJMeterLoadTe...etc...
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424270076'
		singleShotTask: 	false


DIDicto>>dictoRun:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = ...etc...
		adapterTestGroups: 	nil
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424270076'
		singleShotTask: 	false


DIDicto>>dictoAll:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = ...etc...
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424270076'
		singleShotTask: 	false


[ DIDicto new dictoAll: input ] in DIWebServiceAPI>>getRun
	Receiver: a DIWebServiceAPI
	Arguments and temporary variables: 
		in: 	'/home/otruffer/dicto/bin/analysis/full-test/dicto.rules'
		input: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = PhpCl...etc...
		rulesFailed: 	nil
		rulesTotal: 	nil
	Receiver's instance variables: 
		request: 	nil
		response: 	nil
		variables: 	nil
		delegate: 	nil
		principal: 	nil
		credentials: 	nil


BlockClosure>>on:do:
	Receiver: [ DIDicto new dictoAll: input ]
	Arguments and temporary variables: 
		exception: 	DIException
		handlerAction: 	[ :ex | ^ self error: ex description ]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	DIWebServiceAPI>>getRun
		startpc: 	138
		numArgs: 	0


DIWebServiceAPI>>getRun
	Receiver: a DIWebServiceAPI
	Arguments and temporary variables: 
		in: 	'/home/otruffer/dicto/bin/analysis/full-test/dicto.rules'
		input: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = PhpCl...etc...
		rulesFailed: 	nil
		rulesTotal: 	nil
	Receiver's instance variables: 
		request: 	nil
		response: 	nil
		variables: 	nil
		delegate: 	nil
		principal: 	nil
		credentials: 	nil


DIWebServiceHandler>>post
	Receiver: a DIWebServiceHandler
	Arguments and temporary variables: 
		api: 	a DIWebServiceAPI
	Receiver's instance variables: 
		request: 	a ZnRequest(POST /full-test/run)
		response: 	nil
		variables: 	an OrderedCollection('full-test' 'run')
		delegate: 	a ZnJSONRestServerDelegate
		principal: 	nil
		credentials: 	nil
		dicto: 	a DIDicto


DIWebServiceHandler(ZnRestCall)>>execute
	Receiver: a DIWebServiceHandler
	Arguments and temporary variables: 

	Receiver's instance variables: 
		request: 	a ZnRequest(POST /full-test/run)
		response: 	nil
		variables: 	an OrderedCollection('full-test' 'run')
		delegate: 	a ZnJSONRestServerDelegate
		principal: 	nil
		credentials: 	nil
		dicto: 	a DIDicto


[ call execute ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


BlockClosure>>on:do:
	Receiver: [ call execute ]
	Arguments and temporary variables: 
		exception: 	ZnRestCallUnauthorized
		handlerAction: 	[ :exception | self unauthorized: exception request ]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
		startpc: 	38
		numArgs: 	0


ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


[ self execute: call ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /full-test/run)
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


BlockClosure>>on:do:
	Receiver: [ self execute: call ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :exception | 
request server debugMode
	ifTrue: [ exception pa...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
		startpc: 	99
		numArgs: 	0


ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /full-test/run)
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ :delegate | delegate handleRequest: request ] ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /full-test/run)
		delegate: 	a ZnJSONRestServerDelegate
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateRequest:do:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /full-test/run)
		block: 	[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ ...etc...
		authenticator: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /full-test/run)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream)


[ self authenticateAndDelegateRequest: request ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /full-test/run)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream)


BlockClosure>>on:do:
	Receiver: [ self authenticateAndDelegateRequest: request ]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :exception | 
self debugMode
	ifTrue: [ exception pass ]
	ifFa...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequ...etc...
		startpc: 	58
		numArgs: 	0


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /full-test/run)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /full-test/run)
		response: 	nil
		initialMilliseconds: 	14586173
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeOneRequestResponseOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		stream: 	a ZdcSocketStream
		request: 	a ZnRequest(POST /full-test/run)
		response: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream)



--- The full stack ---
NeoJSONReader>>error:
NeoJSONReader>>parseValue
NeoJSONReader>>next
NeoJSONReader class>>fromString:
DIPhpModel>>_loadPhpModel
DIPhpModel>>model
DIVarPhpClass>>allElements
DIVarPhpClass(DIVar)>>elements
DISimpleRule>>subjectElements
printRulesEntityRelationship: someRules
	| res processedPredicates |
	res := ''.
	processedPredicates := Set new.
	someRules
		do: [ :rule | 
			| predicateSelector subjectElements argumentElements data isPredicateInv isSubjectInv |
			predicateSelector := (rule predicate nameNormalized , ':') asSymbol.
			isPredicateInv := rule hasPredicateInverted.
			isSubjectInv := rule hasSubjectInverted.
			subjectElements := rule subjectElements.
			argumentElements := rule argumentElements.
			subjectElements
				do: [ :subject | 
					argumentElements
						do: [ :argument | 
							| relId spec msgPass msgFail |
							relId := subject id , '-' , argument id.
							msgPass := subject id , '.' , rule predicate name , '(' , argument id , ')=True'.
							msgFail := subject id , '.' , rule predicate name , '(' , argument id , ')=False'.
							(processedPredicates includes: relId)
								ifFalse: [ 
									data := {(#subject -> subject value).
									(#argument -> argument value).
									(#ruleId -> rule id).
									(#propertyId -> relId).
									(#msgPass -> msgPass).
									(#msgFail -> msgFail)} asDictionary.
									spec := self perform: predicateSelector withArguments: {data}.
									spec := spec
										dictoReplace:
											{('$subject' -> subject value).
											('$argument' -> argument value).
											('$ruleId' -> rule id).
											('$propertyId' -> relId).
											('$msgPass' -> msgPass).
											('$msgFail' -> msgFail)}.
									res := res , spec ].	"avoid duplicate predicate evaluations"
							processedPredicates add: relId ] ] ].
	^ res in DIPhpDependencies(DIAdapter)>>printRulesEntityRelationship:
DICollectionRule(OrderedCollection)>>do:
DIPhpDependencies(DIAdapter)>>printRulesEntityRelationship:
DIPhpDependencies(DIAdapter)>>printRules
DIPhpDependencies>>testInput
DITestGroup>>build
[ :testGroup | testGroup build ] in DIDicto>>dictoBuild:
Array(SequenceableCollection)>>do:
DIDicto>>dictoBuild:
DIDicto>>dictoRun:
DIDicto>>dictoAll:
[ DIDicto new dictoAll: input ] in DIWebServiceAPI>>getRun
BlockClosure>>on:do:
DIWebServiceAPI>>getRun
DIWebServiceHandler>>post
DIWebServiceHandler(ZnRestCall)>>execute
[ call execute ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
BlockClosure>>on:do:
ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
[ self execute: call ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
BlockClosure>>on:do:
ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ :delegate | delegate handleRequest: request ] ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateRequest:do:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
[ self authenticateAndDelegateRequest: request ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
BlockClosure>>on:do:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequest:
ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeOneRequestResponseOn:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ self executeOneRequestResponseOn: stream ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
[ 
p psValueAt: index put: anObject.
aBlock value ] in ZnCurrentServer(DynamicVariable)>>value:during:
BlockClosure>>ensure:
ZnCurrentServer(DynamicVariable)>>value:during:
ZnCurrentServer class(DynamicVariable class)>>value:during:
ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
[ self executeRequestResponseLoopOn: stream ] in [ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ] in [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
BlockClosure>>ensure:
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ] in [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
BlockClosure>>ifCurtailed:
[ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
FileDoesNotExist: Path / 'home' / 'otruffer' / 'dicto' / 'bin' / 'analysis' / 'full-test' / '1424267673'
18 February 2015 3:35:16.659861 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
NBCogit NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
https://github.com/pharo-project/pharo-vm.git Commit: 4a0d556150d478ff2de3c9624d2f18e6eaa3fa5c Date: 2014-12-18 18:42:53 +0100 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14893

Image: Pharo3.0 [Latest update: #30863]

UnixStore(DiskStore)>>delete:
	Receiver: an UnixStore
	Arguments and temporary variables: 
		path: 	Path / 'home' / 'otruffer' / 'dicto' / 'bin' / 'analysis' / 'full-test' /...etc...
		pathString: 	nil
		encodedPathString: 	nil
	Receiver's instance variables: 
		maxFileNameLength: 	255


FileSystem>>delete:
	Receiver: a FileSystem
	Arguments and temporary variables: 
		aResolvable: 	Path / 'home' / 'otruffer' / 'dicto' / 'bin' / 'analysis' / 'full-...etc...
	Receiver's instance variables: 
		workingDirectory: 	Path / 'home' / 'otruffer' / 'dicto' / 'bin' / 'dicto-engine'...etc...
		store: 	an UnixStore


FileReference>>delete
	Receiver: File @ /home/otruffer/dicto/bin/analysis/full-test/1424267673
	Arguments and temporary variables: 

	Receiver's instance variables: 
		filesystem: 	a FileSystem
		path: 	Path / 'home' / 'otruffer' / 'dicto' / 'bin' / 'analysis' / 'full-test' /...etc...


DeleteVisitor>>visitReference:
	Receiver: a DeleteVisitor
	Arguments and temporary variables: 
		anEntry: 	DirectoryEntry: File @ /home/otruffer/dicto/bin/analysis/full-test/142...etc...
	Receiver's instance variables: 
a DeleteVisitor

DeleteVisitor(FileSystemVisitor)>>visitFile:
	Receiver: a DeleteVisitor
	Arguments and temporary variables: 
		aReference: 	DirectoryEntry: File @ /home/otruffer/dicto/bin/analysis/full-test/...etc...
	Receiver's instance variables: 
a DeleteVisitor

PostorderGuide>>visit:
	Receiver: a PostorderGuide
	Arguments and temporary variables: 
		anEntry: 	DirectoryEntry: File @ /home/otruffer/dicto/bin/analysis/full-test/142...etc...
	Receiver's instance variables: 
		visitor: 	a DeleteVisitor
		work: 	an OrderedCollection(visit: DirectoryEntry: File @ /home/otruffer/dicto/b...etc...
		selectChildren: 	[ :entry | entry isSymlink not ]


Message>>sendTo:
	Receiver: visit: DirectoryEntry: File @ /home/otruffer/dicto/bin/analysis/full-test/1424267673
	Arguments and temporary variables: 
		receiver: 	a PostorderGuide
	Receiver's instance variables: 
		selector: 	#visit:
		args: 	an Array(DirectoryEntry: File @ /home/otruffer/dicto/bin/analysis/full-te...etc...
		lookupClass: 	nil


[ self pop sendTo: self ] in PostorderGuide>>show:
	Receiver: a PostorderGuide
	Arguments and temporary variables: 
		aReference: 	File @ /home/otruffer/dicto/bin/analysis/full-test
	Receiver's instance variables: 
		visitor: 	a DeleteVisitor
		work: 	an OrderedCollection(visit: DirectoryEntry: File @ /home/otruffer/dicto/b...etc...
		selectChildren: 	[ :entry | entry isSymlink not ]


PostorderGuide(FileSystemGuide)>>whileNotDoneDo:
	Receiver: a PostorderGuide
	Arguments and temporary variables: 
		aBlock: 	[ self pop sendTo: self ]
	Receiver's instance variables: 
		visitor: 	a DeleteVisitor
		work: 	an OrderedCollection(visit: DirectoryEntry: File @ /home/otruffer/dicto/b...etc...
		selectChildren: 	[ :entry | entry isSymlink not ]


PostorderGuide>>show:
	Receiver: a PostorderGuide
	Arguments and temporary variables: 
		aReference: 	File @ /home/otruffer/dicto/bin/analysis/full-test
	Receiver's instance variables: 
		visitor: 	a DeleteVisitor
		work: 	an OrderedCollection(visit: DirectoryEntry: File @ /home/otruffer/dicto/b...etc...
		selectChildren: 	[ :entry | entry isSymlink not ]


PostorderGuide class(FileSystemGuide class)>>show:to:selecting:
	Receiver: PostorderGuide
	Arguments and temporary variables: 
		aReference: 	File @ /home/otruffer/dicto/bin/analysis/full-test
		aVisitor: 	a DeleteVisitor
		aBlock: 	[ :entry | entry isSymlink not ]
	Receiver's instance variables: 
		superclass: 	FileSystemGuide
		methodDict: 	a MethodDictionary(#pushTraverse:->PostorderGuide>>#pushTraverse: #...etc...
		format: 	136
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#PostorderGuide
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'FileSystem-Core-Implementation'
		traitComposition: 	{}
		localSelectors: 	nil


DeleteVisitor>>visit:
	Receiver: a DeleteVisitor
	Arguments and temporary variables: 
		aReference: 	File @ /home/otruffer/dicto/bin/analysis/full-test
	Receiver's instance variables: 
a DeleteVisitor

DeleteVisitor class>>delete:
	Receiver: DeleteVisitor
	Arguments and temporary variables: 
		aReference: 	File @ /home/otruffer/dicto/bin/analysis/full-test
	Receiver's instance variables: 
		superclass: 	FileSystemVisitor
		methodDict: 	a MethodDictionary(#visit:->DeleteVisitor>>#visit: #visitReference:...etc...
		format: 	2
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#DeleteVisitor
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'FileSystem-Core-Implementation'
		traitComposition: 	{}
		localSelectors: 	nil


FileReference(AbstractFileReference)>>deleteAll
	Receiver: File @ /home/otruffer/dicto/bin/analysis/full-test
	Arguments and temporary variables: 

	Receiver's instance variables: 
		filesystem: 	a FileSystem
		path: 	Path / 'home' / 'otruffer' / 'dicto' / 'bin' / 'analysis' / 'full-test'


DIUtil class>>folderRemove:
	Receiver: DIUtil
	Arguments and temporary variables: 
		aString: 	'/home/otruffer/dicto/bin/analysis/full-test'
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary()
		format: 	2
		layout: 	a FixedLayout
		instanceVariables: 	#()
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#DIUtil
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Dicto-var-util'
		traitComposition: 	{}
		localSelectors: 	nil


DIWebServiceAPI>>getSuiteKill
	Receiver: a DIWebServiceAPI
	Arguments and temporary variables: 

	Receiver's instance variables: 
		request: 	nil
		response: 	nil
		variables: 	nil
		delegate: 	nil
		principal: 	nil
		credentials: 	nil


DIWebServiceHandler>>delete
	Receiver: a DIWebServiceHandler
	Arguments and temporary variables: 
		api: 	a DIWebServiceAPI
	Receiver's instance variables: 
		request: 	a ZnRequest(DELETE /full-test/suite)
		response: 	nil
		variables: 	an OrderedCollection('full-test' 'suite')
		delegate: 	a ZnJSONRestServerDelegate
		principal: 	nil
		credentials: 	nil
		dicto: 	a DIDicto


DIWebServiceHandler(ZnRestCall)>>execute
	Receiver: a DIWebServiceHandler
	Arguments and temporary variables: 

	Receiver's instance variables: 
		request: 	a ZnRequest(DELETE /full-test/suite)
		response: 	nil
		variables: 	an OrderedCollection('full-test' 'suite')
		delegate: 	a ZnJSONRestServerDelegate
		principal: 	nil
		credentials: 	nil
		dicto: 	a DIDicto


[ call execute ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


BlockClosure>>on:do:
	Receiver: [ call execute ]
	Arguments and temporary variables: 
		exception: 	ZnRestCallUnauthorized
		handlerAction: 	[ :exception | self unauthorized: exception request ]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
		startpc: 	38
		numArgs: 	0


ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


[ self execute: call ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		request: 	a ZnRequest(DELETE /full-test/suite)
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


BlockClosure>>on:do:
	Receiver: [ self execute: call ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :exception | 
request server debugMode
	ifTrue: [ exception pa...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
		startpc: 	99
		numArgs: 	0


ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		request: 	a ZnRequest(DELETE /full-test/suite)
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ :delegate | delegate handleRequest: request ] ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(DELETE /full-test/suite)
		delegate: 	a ZnJSONRestServerDelegate
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateRequest:do:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(DELETE /full-test/suite)
		block: 	[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ ...etc...
		authenticator: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(DELETE /full-test/suite)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream)


[ self authenticateAndDelegateRequest: request ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(DELETE /full-test/suite)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream)


BlockClosure>>on:do:
	Receiver: [ self authenticateAndDelegateRequest: request ]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :exception | 
self debugMode
	ifTrue: [ exception pass ]
	ifFa...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequ...etc...
		startpc: 	58
		numArgs: 	0


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(DELETE /full-test/suite)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(DELETE /full-test/suite)
		response: 	nil
		initialMilliseconds: 	14627080
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeOneRequestResponseOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		stream: 	a ZdcSocketStream
		request: 	a ZnRequest(DELETE /full-test/suite)
		response: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream)


[ self executeOneRequestResponseOn: stream ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		stream: 	a ZdcSocketStream
		request: 	nil
		response: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream)


[ 
p psValueAt: index put: anObject.
aBlock value ] in ZnCurrentServer(DynamicVariable)>>value:during:
	Receiver: a ZnCurrentServer
	Arguments and temporary variables: 
		anObject: 	a ZnManagingMultiThreadedServer(running 8010)
		aBlock: 	[ self executeOneRequestResponseOn: stream ]
		p: 	a Process in nil
		oldValue: 	nil
	Receiver's instance variables: 
		index: 	5


BlockClosure>>ensure:
	Receiver: [ 
p psValueAt: index put: anObject.
aBlock value ]
	Arguments and temporary variables: 
		aBlock: 	[ p psValueAt: index put: oldValue ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ZnCurrentServer(DynamicVariable)>>value:during:
		startpc: 	62
		numArgs: 	0


ZnCurrentServer(DynamicVariable)>>value:during:
	Receiver: a ZnCurrentServer
	Arguments and temporary variables: 
		anObject: 	a ZnManagingMultiThreadedServer(running 8010)
		aBlock: 	[ self executeOneRequestResponseOn: stream ]
		p: 	a Process in nil
		oldValue: 	nil
	Receiver's instance variables: 
		index: 	5


ZnCurrentServer class(DynamicVariable class)>>value:during:
	Receiver: ZnCurrentServer
	Arguments and temporary variables: 
		anObject: 	a ZnManagingMultiThreadedServer(running 8010)
		aBlock: 	[ self executeOneRequestResponseOn: stream ]
	Receiver's instance variables: 
		superclass: 	DynamicVariable
		methodDict: 	a MethodDictionary()
		format: 	132
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#ZnCurrentServer
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Zinc-HTTP-Variables'
		traitComposition: 	{}
		localSelectors: 	nil
		hash: 	nil
		soleInstance: 	a ZnCurrentServer


ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		stream: 	a ZdcSocketStream
		request: 	nil
		response: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream)


[ self executeRequestResponseLoopOn: stream ] in [ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ] in [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		listeningSocket: 	a Socket[waitingForConnection]
		stream: 	a ZdcSocketStream
		socket: 	a Socket[connected]
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream)



--- The full stack ---
UnixStore(DiskStore)>>delete:
FileSystem>>delete:
FileReference>>delete
DeleteVisitor>>visitReference:
DeleteVisitor(FileSystemVisitor)>>visitFile:
PostorderGuide>>visit:
Message>>sendTo:
[ self pop sendTo: self ] in PostorderGuide>>show:
PostorderGuide(FileSystemGuide)>>whileNotDoneDo:
PostorderGuide>>show:
PostorderGuide class(FileSystemGuide class)>>show:to:selecting:
DeleteVisitor>>visit:
DeleteVisitor class>>delete:
FileReference(AbstractFileReference)>>deleteAll
DIUtil class>>folderRemove:
DIWebServiceAPI>>getSuiteKill
DIWebServiceHandler>>delete
DIWebServiceHandler(ZnRestCall)>>execute
[ call execute ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
BlockClosure>>on:do:
ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
[ self execute: call ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
BlockClosure>>on:do:
ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ :delegate | delegate handleRequest: request ] ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateRequest:do:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
[ self authenticateAndDelegateRequest: request ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
BlockClosure>>on:do:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequest:
ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeOneRequestResponseOn:
[ self executeOneRequestResponseOn: stream ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
[ 
p psValueAt: index put: anObject.
aBlock value ] in ZnCurrentServer(DynamicVariable)>>value:during:
BlockClosure>>ensure:
ZnCurrentServer(DynamicVariable)>>value:during:
ZnCurrentServer class(DynamicVariable class)>>value:during:
ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
[ self executeRequestResponseLoopOn: stream ] in [ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ] in [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
BlockClosure>>ensure:
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ] in [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
BlockClosure>>ifCurtailed:
[ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Halt
18 February 2015 3:37:43.984429 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
NBCogit NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
https://github.com/pharo-project/pharo-vm.git Commit: 4a0d556150d478ff2de3c9624d2f18e6eaa3fa5c Date: 2014-12-18 18:42:53 +0100 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14893

Image: Pharo3.0 [Latest update: #30863]

DIWebServiceAPI>>getResults
	Receiver: a DIWebServiceAPI
	Arguments and temporary variables: 
		json: 	''
		jsonFilePath: 	'/home/otruffer/dicto/bin/analysis/full-test/results.json'
	Receiver's instance variables: 
		request: 	nil
		response: 	nil
		variables: 	nil
		delegate: 	nil
		principal: 	nil
		credentials: 	nil


DIWebServiceHandler>>get
	Receiver: a DIWebServiceHandler
	Arguments and temporary variables: 
		api: 	a DIWebServiceAPI
	Receiver's instance variables: 
		request: 	a ZnRequest(GET /full-test/results)
		response: 	nil
		variables: 	an OrderedCollection('full-test' 'results')
		delegate: 	a ZnJSONRestServerDelegate
		principal: 	nil
		credentials: 	nil
		dicto: 	a DIDicto


DIWebServiceHandler(ZnRestCall)>>execute
	Receiver: a DIWebServiceHandler
	Arguments and temporary variables: 

	Receiver's instance variables: 
		request: 	a ZnRequest(GET /full-test/results)
		response: 	nil
		variables: 	an OrderedCollection('full-test' 'results')
		delegate: 	a ZnJSONRestServerDelegate
		principal: 	nil
		credentials: 	nil
		dicto: 	a DIDicto


[ call execute ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


BlockClosure>>on:do:
	Receiver: [ call execute ]
	Arguments and temporary variables: 
		exception: 	ZnRestCallUnauthorized
		handlerAction: 	[ :exception | self unauthorized: exception request ]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
		startpc: 	38
		numArgs: 	0


ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


[ self execute: call ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		request: 	a ZnRequest(GET /full-test/results)
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


BlockClosure>>on:do:
	Receiver: [ self execute: call ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :exception | 
request server debugMode
	ifTrue: [ exception pa...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
		startpc: 	99
		numArgs: 	0


ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		request: 	a ZnRequest(GET /full-test/results)
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ :delegate | delegate handleRequest: request ] ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(GET /full-test/results)
		delegate: 	a ZnJSONRestServerDelegate
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateRequest:do:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(GET /full-test/results)
		block: 	[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ ...etc...
		authenticator: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(GET /full-test/results)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream)


[ self authenticateAndDelegateRequest: request ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(GET /full-test/results)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream)


BlockClosure>>on:do:
	Receiver: [ self authenticateAndDelegateRequest: request ]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :exception | 
self debugMode
	ifTrue: [ exception pass ]
	ifFa...etc...
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequ...etc...
		startpc: 	58
		numArgs: 	0


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(GET /full-test/results)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(GET /full-test/results)
		response: 	nil
		initialMilliseconds: 	14774396
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeOneRequestResponseOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		stream: 	a ZdcSocketStream
		request: 	a ZnRequest(GET /full-test/results)
		response: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream)


[ self executeOneRequestResponseOn: stream ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		stream: 	a ZdcSocketStream
		request: 	nil
		response: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream)


[ 
p psValueAt: index put: anObject.
aBlock value ] in ZnCurrentServer(DynamicVariable)>>value:during:
	Receiver: a ZnCurrentServer
	Arguments and temporary variables: 
		anObject: 	a ZnManagingMultiThreadedServer(running 8010)
		aBlock: 	[ self executeOneRequestResponseOn: stream ]
		p: 	a Process in nil
		oldValue: 	nil
	Receiver's instance variables: 
		index: 	5


BlockClosure>>ensure:
	Receiver: [ 
p psValueAt: index put: anObject.
aBlock value ]
	Arguments and temporary variables: 
		aBlock: 	[ p psValueAt: index put: oldValue ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ZnCurrentServer(DynamicVariable)>>value:during:
		startpc: 	62
		numArgs: 	0


ZnCurrentServer(DynamicVariable)>>value:during:
	Receiver: a ZnCurrentServer
	Arguments and temporary variables: 
		anObject: 	a ZnManagingMultiThreadedServer(running 8010)
		aBlock: 	[ self executeOneRequestResponseOn: stream ]
		p: 	a Process in nil
		oldValue: 	nil
	Receiver's instance variables: 
		index: 	5


ZnCurrentServer class(DynamicVariable class)>>value:during:
	Receiver: ZnCurrentServer
	Arguments and temporary variables: 
		anObject: 	a ZnManagingMultiThreadedServer(running 8010)
		aBlock: 	[ self executeOneRequestResponseOn: stream ]
	Receiver's instance variables: 
		superclass: 	DynamicVariable
		methodDict: 	a MethodDictionary()
		format: 	132
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#ZnCurrentServer
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Zinc-HTTP-Variables'
		traitComposition: 	{}
		localSelectors: 	nil
		hash: 	nil
		soleInstance: 	a ZnCurrentServer


ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		stream: 	a ZdcSocketStream
		request: 	nil
		response: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream)


[ self executeRequestResponseLoopOn: stream ] in [ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ] in [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		listeningSocket: 	a Socket[waitingForConnection]
		stream: 	a ZdcSocketStream
		socket: 	a Socket[connected]
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream)


BlockClosure>>ensure:
	Receiver: [ self executeRequestResponseLoopOn: stream ]
	Arguments and temporary variables: 
		aBlock: 	[ 
self log debug: 'Closing stream'.
self closeSocketStream: stream ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		se...etc...
		startpc: 	118
		numArgs: 	0


[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ] in [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		listeningSocket: 	a Socket[waitingForConnection]
		stream: 	a ZdcSocketStream
		socket: 	a Socket[connected]
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream)


BlockClosure>>ifCurtailed:
	Receiver: [ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing st...etc...
	Arguments and temporary variables: 
		aBlock: 	[ 
self log debug: 'Destroying socket'.
socket destroy ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	[ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
	...etc...
		startpc: 	113
		numArgs: 	0


[ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		listeningSocket: 	a Socket[waitingForConnection]
		stream: 	a ZdcSocketStream
		socket: 	a Socket[connected]
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream)


[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnec...etc...
		startpc: 	108
		numArgs: 	0



--- The full stack ---
DIWebServiceAPI>>getResults
DIWebServiceHandler>>get
DIWebServiceHandler(ZnRestCall)>>execute
[ call execute ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
BlockClosure>>on:do:
ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
[ self execute: call ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
BlockClosure>>on:do:
ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ :delegate | delegate handleRequest: request ] ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateRequest:do:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
[ self authenticateAndDelegateRequest: request ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
BlockClosure>>on:do:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequest:
ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeOneRequestResponseOn:
[ self executeOneRequestResponseOn: stream ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
[ 
p psValueAt: index put: anObject.
aBlock value ] in ZnCurrentServer(DynamicVariable)>>value:during:
BlockClosure>>ensure:
ZnCurrentServer(DynamicVariable)>>value:during:
ZnCurrentServer class(DynamicVariable class)>>value:during:
ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
[ self executeRequestResponseLoopOn: stream ] in [ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ] in [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
BlockClosure>>ensure:
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ] in [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
BlockClosure>>ifCurtailed:
[ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Halt
18 February 2015 3:39:48.812973 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
NBCogit NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
https://github.com/pharo-project/pharo-vm.git Commit: 4a0d556150d478ff2de3c9624d2f18e6eaa3fa5c Date: 2014-12-18 18:42:53 +0100 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14893

Image: Pharo3.0 [Latest update: #30863]

DIWebServiceAPI>>getResults
	Receiver: a DIWebServiceAPI
	Arguments and temporary variables: 
		json: 	'{

	"results" : {

		"id" : "1424270353",

		"rules" : {

			"1" : {

		...etc...
		jsonFilePath: 	'/home/otruffer/dicto/bin/analysis/ArbitrarySuiteName/results.jso...etc...
	Receiver's instance variables: 
		request: 	nil
		response: 	nil
		variables: 	nil
		delegate: 	nil
		principal: 	nil
		credentials: 	nil


DIWebServiceHandler>>get
	Receiver: a DIWebServiceHandler
	Arguments and temporary variables: 
		api: 	a DIWebServiceAPI
	Receiver's instance variables: 
		request: 	a ZnRequest(GET /ArbitrarySuiteName/results)
		response: 	nil
		variables: 	an OrderedCollection('ArbitrarySuiteName' 'results')
		delegate: 	a ZnJSONRestServerDelegate
		principal: 	nil
		credentials: 	nil
		dicto: 	a DIDicto


DIWebServiceHandler(ZnRestCall)>>execute
	Receiver: a DIWebServiceHandler
	Arguments and temporary variables: 

	Receiver's instance variables: 
		request: 	a ZnRequest(GET /ArbitrarySuiteName/results)
		response: 	nil
		variables: 	an OrderedCollection('ArbitrarySuiteName' 'results')
		delegate: 	a ZnJSONRestServerDelegate
		principal: 	nil
		credentials: 	nil
		dicto: 	a DIDicto


[ call execute ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


BlockClosure>>on:do:
	Receiver: [ call execute ]
	Arguments and temporary variables: 
		exception: 	ZnRestCallUnauthorized
		handlerAction: 	[ :exception | self unauthorized: exception request ]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
		startpc: 	38
		numArgs: 	0


ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


[ self execute: call ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		request: 	a ZnRequest(GET /ArbitrarySuiteName/results)
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


BlockClosure>>on:do:
	Receiver: [ self execute: call ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :exception | 
request server debugMode
	ifTrue: [ exception pa...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
		startpc: 	99
		numArgs: 	0


ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		request: 	a ZnRequest(GET /ArbitrarySuiteName/results)
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ :delegate | delegate handleRequest: request ] ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(GET /ArbitrarySuiteName/results)
		delegate: 	a ZnJSONRestServerDelegate
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateRequest:do:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(GET /ArbitrarySuiteName/results)
		block: 	[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ ...etc...
		authenticator: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(GET /ArbitrarySuiteName/results)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream)


[ self authenticateAndDelegateRequest: request ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(GET /ArbitrarySuiteName/results)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream)


BlockClosure>>on:do:
	Receiver: [ self authenticateAndDelegateRequest: request ]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :exception | 
self debugMode
	ifTrue: [ exception pass ]
	ifFa...etc...
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequ...etc...
		startpc: 	58
		numArgs: 	0


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(GET /ArbitrarySuiteName/results)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(GET /ArbitrarySuiteName/results)
		response: 	nil
		initialMilliseconds: 	14899226
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeOneRequestResponseOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		stream: 	a ZdcSocketStream
		request: 	a ZnRequest(GET /ArbitrarySuiteName/results)
		response: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream)


[ self executeOneRequestResponseOn: stream ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		stream: 	a ZdcSocketStream
		request: 	nil
		response: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream)


[ 
p psValueAt: index put: anObject.
aBlock value ] in ZnCurrentServer(DynamicVariable)>>value:during:
	Receiver: a ZnCurrentServer
	Arguments and temporary variables: 
		anObject: 	a ZnManagingMultiThreadedServer(running 8010)
		aBlock: 	[ self executeOneRequestResponseOn: stream ]
		p: 	a Process in nil
		oldValue: 	nil
	Receiver's instance variables: 
		index: 	5


BlockClosure>>ensure:
	Receiver: [ 
p psValueAt: index put: anObject.
aBlock value ]
	Arguments and temporary variables: 
		aBlock: 	[ p psValueAt: index put: oldValue ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ZnCurrentServer(DynamicVariable)>>value:during:
		startpc: 	62
		numArgs: 	0


ZnCurrentServer(DynamicVariable)>>value:during:
	Receiver: a ZnCurrentServer
	Arguments and temporary variables: 
		anObject: 	a ZnManagingMultiThreadedServer(running 8010)
		aBlock: 	[ self executeOneRequestResponseOn: stream ]
		p: 	a Process in nil
		oldValue: 	nil
	Receiver's instance variables: 
		index: 	5


ZnCurrentServer class(DynamicVariable class)>>value:during:
	Receiver: ZnCurrentServer
	Arguments and temporary variables: 
		anObject: 	a ZnManagingMultiThreadedServer(running 8010)
		aBlock: 	[ self executeOneRequestResponseOn: stream ]
	Receiver's instance variables: 
		superclass: 	DynamicVariable
		methodDict: 	a MethodDictionary()
		format: 	132
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#ZnCurrentServer
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Zinc-HTTP-Variables'
		traitComposition: 	{}
		localSelectors: 	nil
		hash: 	nil
		soleInstance: 	a ZnCurrentServer


ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		stream: 	a ZdcSocketStream
		request: 	nil
		response: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream)


[ self executeRequestResponseLoopOn: stream ] in [ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ] in [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		listeningSocket: 	a Socket[waitingForConnection]
		stream: 	a ZdcSocketStream
		socket: 	a Socket[connected]
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream)


BlockClosure>>ensure:
	Receiver: [ self executeRequestResponseLoopOn: stream ]
	Arguments and temporary variables: 
		aBlock: 	[ 
self log debug: 'Closing stream'.
self closeSocketStream: stream ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		se...etc...
		startpc: 	118
		numArgs: 	0


[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ] in [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		listeningSocket: 	a Socket[waitingForConnection]
		stream: 	a ZdcSocketStream
		socket: 	a Socket[connected]
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream)


BlockClosure>>ifCurtailed:
	Receiver: [ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing st...etc...
	Arguments and temporary variables: 
		aBlock: 	[ 
self log debug: 'Destroying socket'.
socket destroy ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	[ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
	...etc...
		startpc: 	113
		numArgs: 	0


[ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		listeningSocket: 	a Socket[waitingForConnection]
		stream: 	a ZdcSocketStream
		socket: 	a Socket[connected]
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream)


[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnec...etc...
		startpc: 	108
		numArgs: 	0



--- The full stack ---
DIWebServiceAPI>>getResults
DIWebServiceHandler>>get
DIWebServiceHandler(ZnRestCall)>>execute
[ call execute ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
BlockClosure>>on:do:
ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
[ self execute: call ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
BlockClosure>>on:do:
ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ :delegate | delegate handleRequest: request ] ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateRequest:do:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
[ self authenticateAndDelegateRequest: request ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
BlockClosure>>on:do:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequest:
ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeOneRequestResponseOn:
[ self executeOneRequestResponseOn: stream ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
[ 
p psValueAt: index put: anObject.
aBlock value ] in ZnCurrentServer(DynamicVariable)>>value:during:
BlockClosure>>ensure:
ZnCurrentServer(DynamicVariable)>>value:during:
ZnCurrentServer class(DynamicVariable class)>>value:during:
ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
[ self executeRequestResponseLoopOn: stream ] in [ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ] in [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
BlockClosure>>ensure:
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ] in [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
BlockClosure>>ifCurtailed:
[ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Halt
18 February 2015 3:40:57.143538 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
NBCogit NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
https://github.com/pharo-project/pharo-vm.git Commit: 4a0d556150d478ff2de3c9624d2f18e6eaa3fa5c Date: 2014-12-18 18:42:53 +0100 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14893

Image: Pharo3.0 [Latest update: #30863]

DIWebServiceAPI>>getResults
	Receiver: a DIWebServiceAPI
	Arguments and temporary variables: 
		json: 	'{

	"results" : {

		"id" : "1424270427",

		"rules" : {

			"1" : {

		...etc...
		jsonFilePath: 	'/home/otruffer/dicto/bin/analysis/full-test/results.json'
	Receiver's instance variables: 
		request: 	nil
		response: 	nil
		variables: 	nil
		delegate: 	nil
		principal: 	nil
		credentials: 	nil


DIWebServiceHandler>>get
	Receiver: a DIWebServiceHandler
	Arguments and temporary variables: 
		api: 	a DIWebServiceAPI
	Receiver's instance variables: 
		request: 	a ZnRequest(GET /full-test/results)
		response: 	nil
		variables: 	an OrderedCollection('full-test' 'results')
		delegate: 	a ZnJSONRestServerDelegate
		principal: 	nil
		credentials: 	nil
		dicto: 	a DIDicto


DIWebServiceHandler(ZnRestCall)>>execute
	Receiver: a DIWebServiceHandler
	Arguments and temporary variables: 

	Receiver's instance variables: 
		request: 	a ZnRequest(GET /full-test/results)
		response: 	nil
		variables: 	an OrderedCollection('full-test' 'results')
		delegate: 	a ZnJSONRestServerDelegate
		principal: 	nil
		credentials: 	nil
		dicto: 	a DIDicto


[ call execute ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


BlockClosure>>on:do:
	Receiver: [ call execute ]
	Arguments and temporary variables: 
		exception: 	ZnRestCallUnauthorized
		handlerAction: 	[ :exception | self unauthorized: exception request ]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
		startpc: 	38
		numArgs: 	0


ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


[ self execute: call ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		request: 	a ZnRequest(GET /full-test/results)
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


BlockClosure>>on:do:
	Receiver: [ self execute: call ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :exception | 
request server debugMode
	ifTrue: [ exception pa...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
		startpc: 	99
		numArgs: 	0


ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		request: 	a ZnRequest(GET /full-test/results)
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ :delegate | delegate handleRequest: request ] ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(GET /full-test/results)
		delegate: 	a ZnJSONRestServerDelegate
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateRequest:do:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(GET /full-test/results)
		block: 	[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ ...etc...
		authenticator: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(GET /full-test/results)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream)


[ self authenticateAndDelegateRequest: request ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(GET /full-test/results)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream)


BlockClosure>>on:do:
	Receiver: [ self authenticateAndDelegateRequest: request ]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :exception | 
self debugMode
	ifTrue: [ exception pass ]
	ifFa...etc...
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequ...etc...
		startpc: 	58
		numArgs: 	0


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(GET /full-test/results)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(GET /full-test/results)
		response: 	nil
		initialMilliseconds: 	14967565
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeOneRequestResponseOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		stream: 	a ZdcSocketStream
		request: 	a ZnRequest(GET /full-test/results)
		response: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream)


[ self executeOneRequestResponseOn: stream ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		stream: 	a ZdcSocketStream
		request: 	nil
		response: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream)


[ 
p psValueAt: index put: anObject.
aBlock value ] in ZnCurrentServer(DynamicVariable)>>value:during:
	Receiver: a ZnCurrentServer
	Arguments and temporary variables: 
		anObject: 	a ZnManagingMultiThreadedServer(running 8010)
		aBlock: 	[ self executeOneRequestResponseOn: stream ]
		p: 	a Process in nil
		oldValue: 	nil
	Receiver's instance variables: 
		index: 	5


BlockClosure>>ensure:
	Receiver: [ 
p psValueAt: index put: anObject.
aBlock value ]
	Arguments and temporary variables: 
		aBlock: 	[ p psValueAt: index put: oldValue ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ZnCurrentServer(DynamicVariable)>>value:during:
		startpc: 	62
		numArgs: 	0


ZnCurrentServer(DynamicVariable)>>value:during:
	Receiver: a ZnCurrentServer
	Arguments and temporary variables: 
		anObject: 	a ZnManagingMultiThreadedServer(running 8010)
		aBlock: 	[ self executeOneRequestResponseOn: stream ]
		p: 	a Process in nil
		oldValue: 	nil
	Receiver's instance variables: 
		index: 	5


ZnCurrentServer class(DynamicVariable class)>>value:during:
	Receiver: ZnCurrentServer
	Arguments and temporary variables: 
		anObject: 	a ZnManagingMultiThreadedServer(running 8010)
		aBlock: 	[ self executeOneRequestResponseOn: stream ]
	Receiver's instance variables: 
		superclass: 	DynamicVariable
		methodDict: 	a MethodDictionary()
		format: 	132
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#ZnCurrentServer
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Zinc-HTTP-Variables'
		traitComposition: 	{}
		localSelectors: 	nil
		hash: 	nil
		soleInstance: 	a ZnCurrentServer


ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		stream: 	a ZdcSocketStream
		request: 	nil
		response: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream)


[ self executeRequestResponseLoopOn: stream ] in [ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ] in [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		listeningSocket: 	a Socket[waitingForConnection]
		stream: 	a ZdcSocketStream
		socket: 	a Socket[connected]
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream)


BlockClosure>>ensure:
	Receiver: [ self executeRequestResponseLoopOn: stream ]
	Arguments and temporary variables: 
		aBlock: 	[ 
self log debug: 'Closing stream'.
self closeSocketStream: stream ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		se...etc...
		startpc: 	118
		numArgs: 	0


[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ] in [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		listeningSocket: 	a Socket[waitingForConnection]
		stream: 	a ZdcSocketStream
		socket: 	a Socket[connected]
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream)


BlockClosure>>ifCurtailed:
	Receiver: [ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing st...etc...
	Arguments and temporary variables: 
		aBlock: 	[ 
self log debug: 'Destroying socket'.
socket destroy ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	[ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
	...etc...
		startpc: 	113
		numArgs: 	0


[ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		listeningSocket: 	a Socket[waitingForConnection]
		stream: 	a ZdcSocketStream
		socket: 	a Socket[connected]
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream)


[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnec...etc...
		startpc: 	108
		numArgs: 	0



--- The full stack ---
DIWebServiceAPI>>getResults
DIWebServiceHandler>>get
DIWebServiceHandler(ZnRestCall)>>execute
[ call execute ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
BlockClosure>>on:do:
ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
[ self execute: call ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
BlockClosure>>on:do:
ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ :delegate | delegate handleRequest: request ] ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateRequest:do:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
[ self authenticateAndDelegateRequest: request ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
BlockClosure>>on:do:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequest:
ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeOneRequestResponseOn:
[ self executeOneRequestResponseOn: stream ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
[ 
p psValueAt: index put: anObject.
aBlock value ] in ZnCurrentServer(DynamicVariable)>>value:during:
BlockClosure>>ensure:
ZnCurrentServer(DynamicVariable)>>value:during:
ZnCurrentServer class(DynamicVariable class)>>value:during:
ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
[ self executeRequestResponseLoopOn: stream ] in [ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ] in [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
BlockClosure>>ensure:
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ] in [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
BlockClosure>>ifCurtailed:
[ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
FileDoesNotExist: Path / 'home' / 'otruffer' / 'dicto' / 'bin' / 'analysis' / 'full-test' / '1424267673'
18 February 2015 3:41:46.07102 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
NBCogit NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
https://github.com/pharo-project/pharo-vm.git Commit: 4a0d556150d478ff2de3c9624d2f18e6eaa3fa5c Date: 2014-12-18 18:42:53 +0100 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14893

Image: Pharo3.0 [Latest update: #30863]

UnixStore(DiskStore)>>delete:
	Receiver: an UnixStore
	Arguments and temporary variables: 
		path: 	Path / 'home' / 'otruffer' / 'dicto' / 'bin' / 'analysis' / 'full-test' /...etc...
		pathString: 	nil
		encodedPathString: 	nil
	Receiver's instance variables: 
		maxFileNameLength: 	255


FileSystem>>delete:
	Receiver: a FileSystem
	Arguments and temporary variables: 
		aResolvable: 	Path / 'home' / 'otruffer' / 'dicto' / 'bin' / 'analysis' / 'full-...etc...
	Receiver's instance variables: 
		workingDirectory: 	Path / 'home' / 'otruffer' / 'dicto' / 'bin' / 'dicto-engine'...etc...
		store: 	an UnixStore


FileReference>>delete
	Receiver: File @ /home/otruffer/dicto/bin/analysis/full-test/1424267673
	Arguments and temporary variables: 

	Receiver's instance variables: 
		filesystem: 	a FileSystem
		path: 	Path / 'home' / 'otruffer' / 'dicto' / 'bin' / 'analysis' / 'full-test' /...etc...


DeleteVisitor>>visitReference:
	Receiver: a DeleteVisitor
	Arguments and temporary variables: 
		anEntry: 	DirectoryEntry: File @ /home/otruffer/dicto/bin/analysis/full-test/142...etc...
	Receiver's instance variables: 
a DeleteVisitor

DeleteVisitor(FileSystemVisitor)>>visitFile:
	Receiver: a DeleteVisitor
	Arguments and temporary variables: 
		aReference: 	DirectoryEntry: File @ /home/otruffer/dicto/bin/analysis/full-test/...etc...
	Receiver's instance variables: 
a DeleteVisitor

PostorderGuide>>visit:
	Receiver: a PostorderGuide
	Arguments and temporary variables: 
		anEntry: 	DirectoryEntry: File @ /home/otruffer/dicto/bin/analysis/full-test/142...etc...
	Receiver's instance variables: 
		visitor: 	a DeleteVisitor
		work: 	an OrderedCollection(visit: DirectoryEntry: File @ /home/otruffer/dicto/b...etc...
		selectChildren: 	[ :entry | entry isSymlink not ]


Message>>sendTo:
	Receiver: visit: DirectoryEntry: File @ /home/otruffer/dicto/bin/analysis/full-test/1424267673
	Arguments and temporary variables: 
		receiver: 	a PostorderGuide
	Receiver's instance variables: 
		selector: 	#visit:
		args: 	an Array(DirectoryEntry: File @ /home/otruffer/dicto/bin/analysis/full-te...etc...
		lookupClass: 	nil


[ self pop sendTo: self ] in PostorderGuide>>show:
	Receiver: a PostorderGuide
	Arguments and temporary variables: 
		aReference: 	File @ /home/otruffer/dicto/bin/analysis/full-test
	Receiver's instance variables: 
		visitor: 	a DeleteVisitor
		work: 	an OrderedCollection(visit: DirectoryEntry: File @ /home/otruffer/dicto/b...etc...
		selectChildren: 	[ :entry | entry isSymlink not ]


PostorderGuide(FileSystemGuide)>>whileNotDoneDo:
	Receiver: a PostorderGuide
	Arguments and temporary variables: 
		aBlock: 	[ self pop sendTo: self ]
	Receiver's instance variables: 
		visitor: 	a DeleteVisitor
		work: 	an OrderedCollection(visit: DirectoryEntry: File @ /home/otruffer/dicto/b...etc...
		selectChildren: 	[ :entry | entry isSymlink not ]


PostorderGuide>>show:
	Receiver: a PostorderGuide
	Arguments and temporary variables: 
		aReference: 	File @ /home/otruffer/dicto/bin/analysis/full-test
	Receiver's instance variables: 
		visitor: 	a DeleteVisitor
		work: 	an OrderedCollection(visit: DirectoryEntry: File @ /home/otruffer/dicto/b...etc...
		selectChildren: 	[ :entry | entry isSymlink not ]


PostorderGuide class(FileSystemGuide class)>>show:to:selecting:
	Receiver: PostorderGuide
	Arguments and temporary variables: 
		aReference: 	File @ /home/otruffer/dicto/bin/analysis/full-test
		aVisitor: 	a DeleteVisitor
		aBlock: 	[ :entry | entry isSymlink not ]
	Receiver's instance variables: 
		superclass: 	FileSystemGuide
		methodDict: 	a MethodDictionary(#pushTraverse:->PostorderGuide>>#pushTraverse: #...etc...
		format: 	136
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#PostorderGuide
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'FileSystem-Core-Implementation'
		traitComposition: 	{}
		localSelectors: 	nil


DeleteVisitor>>visit:
	Receiver: a DeleteVisitor
	Arguments and temporary variables: 
		aReference: 	File @ /home/otruffer/dicto/bin/analysis/full-test
	Receiver's instance variables: 
a DeleteVisitor

DeleteVisitor class>>delete:
	Receiver: DeleteVisitor
	Arguments and temporary variables: 
		aReference: 	File @ /home/otruffer/dicto/bin/analysis/full-test
	Receiver's instance variables: 
		superclass: 	FileSystemVisitor
		methodDict: 	a MethodDictionary(#visit:->DeleteVisitor>>#visit: #visitReference:...etc...
		format: 	2
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#DeleteVisitor
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'FileSystem-Core-Implementation'
		traitComposition: 	{}
		localSelectors: 	nil


FileReference(AbstractFileReference)>>deleteAll
	Receiver: File @ /home/otruffer/dicto/bin/analysis/full-test
	Arguments and temporary variables: 

	Receiver's instance variables: 
		filesystem: 	a FileSystem
		path: 	Path / 'home' / 'otruffer' / 'dicto' / 'bin' / 'analysis' / 'full-test'


DIUtil class>>folderRemove:
	Receiver: DIUtil
	Arguments and temporary variables: 
		aString: 	'/home/otruffer/dicto/bin/analysis/full-test'
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary()
		format: 	2
		layout: 	a FixedLayout
		instanceVariables: 	#()
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#DIUtil
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Dicto-var-util'
		traitComposition: 	{}
		localSelectors: 	nil


DIWebServiceAPI>>getSuiteKill
	Receiver: a DIWebServiceAPI
	Arguments and temporary variables: 

	Receiver's instance variables: 
		request: 	nil
		response: 	nil
		variables: 	nil
		delegate: 	nil
		principal: 	nil
		credentials: 	nil


DIWebServiceHandler>>delete
	Receiver: a DIWebServiceHandler
	Arguments and temporary variables: 
		api: 	a DIWebServiceAPI
	Receiver's instance variables: 
		request: 	a ZnRequest(DELETE /full-test/suite)
		response: 	nil
		variables: 	an OrderedCollection('full-test' 'suite')
		delegate: 	a ZnJSONRestServerDelegate
		principal: 	nil
		credentials: 	nil
		dicto: 	a DIDicto


DIWebServiceHandler(ZnRestCall)>>execute
	Receiver: a DIWebServiceHandler
	Arguments and temporary variables: 

	Receiver's instance variables: 
		request: 	a ZnRequest(DELETE /full-test/suite)
		response: 	nil
		variables: 	an OrderedCollection('full-test' 'suite')
		delegate: 	a ZnJSONRestServerDelegate
		principal: 	nil
		credentials: 	nil
		dicto: 	a DIDicto


[ call execute ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


BlockClosure>>on:do:
	Receiver: [ call execute ]
	Arguments and temporary variables: 
		exception: 	ZnRestCallUnauthorized
		handlerAction: 	[ :exception | self unauthorized: exception request ]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
		startpc: 	38
		numArgs: 	0


ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


[ self execute: call ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		request: 	a ZnRequest(DELETE /full-test/suite)
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


BlockClosure>>on:do:
	Receiver: [ self execute: call ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :exception | 
request server debugMode
	ifTrue: [ exception pa...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
		startpc: 	99
		numArgs: 	0


ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		request: 	a ZnRequest(DELETE /full-test/suite)
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ :delegate | delegate handleRequest: request ] ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(DELETE /full-test/suite)
		delegate: 	a ZnJSONRestServerDelegate
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateRequest:do:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(DELETE /full-test/suite)
		block: 	[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ ...etc...
		authenticator: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(DELETE /full-test/suite)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream)


[ self authenticateAndDelegateRequest: request ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(DELETE /full-test/suite)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream)


BlockClosure>>on:do:
	Receiver: [ self authenticateAndDelegateRequest: request ]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :exception | 
self debugMode
	ifTrue: [ exception pass ]
	ifFa...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequ...etc...
		startpc: 	58
		numArgs: 	0


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(DELETE /full-test/suite)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(DELETE /full-test/suite)
		response: 	nil
		initialMilliseconds: 	15016492
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeOneRequestResponseOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		stream: 	a ZdcSocketStream
		request: 	a ZnRequest(DELETE /full-test/suite)
		response: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream)


[ self executeOneRequestResponseOn: stream ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		stream: 	a ZdcSocketStream
		request: 	nil
		response: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream)


[ 
p psValueAt: index put: anObject.
aBlock value ] in ZnCurrentServer(DynamicVariable)>>value:during:
	Receiver: a ZnCurrentServer
	Arguments and temporary variables: 
		anObject: 	a ZnManagingMultiThreadedServer(running 8010)
		aBlock: 	[ self executeOneRequestResponseOn: stream ]
		p: 	a Process in nil
		oldValue: 	nil
	Receiver's instance variables: 
		index: 	5


BlockClosure>>ensure:
	Receiver: [ 
p psValueAt: index put: anObject.
aBlock value ]
	Arguments and temporary variables: 
		aBlock: 	[ p psValueAt: index put: oldValue ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ZnCurrentServer(DynamicVariable)>>value:during:
		startpc: 	62
		numArgs: 	0


ZnCurrentServer(DynamicVariable)>>value:during:
	Receiver: a ZnCurrentServer
	Arguments and temporary variables: 
		anObject: 	a ZnManagingMultiThreadedServer(running 8010)
		aBlock: 	[ self executeOneRequestResponseOn: stream ]
		p: 	a Process in nil
		oldValue: 	nil
	Receiver's instance variables: 
		index: 	5


ZnCurrentServer class(DynamicVariable class)>>value:during:
	Receiver: ZnCurrentServer
	Arguments and temporary variables: 
		anObject: 	a ZnManagingMultiThreadedServer(running 8010)
		aBlock: 	[ self executeOneRequestResponseOn: stream ]
	Receiver's instance variables: 
		superclass: 	DynamicVariable
		methodDict: 	a MethodDictionary()
		format: 	132
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#ZnCurrentServer
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Zinc-HTTP-Variables'
		traitComposition: 	{}
		localSelectors: 	nil
		hash: 	nil
		soleInstance: 	a ZnCurrentServer


ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		stream: 	a ZdcSocketStream
		request: 	nil
		response: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream)


[ self executeRequestResponseLoopOn: stream ] in [ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ] in [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		listeningSocket: 	a Socket[waitingForConnection]
		stream: 	a ZdcSocketStream
		socket: 	a Socket[connected]
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream)



--- The full stack ---
UnixStore(DiskStore)>>delete:
FileSystem>>delete:
FileReference>>delete
DeleteVisitor>>visitReference:
DeleteVisitor(FileSystemVisitor)>>visitFile:
PostorderGuide>>visit:
Message>>sendTo:
[ self pop sendTo: self ] in PostorderGuide>>show:
PostorderGuide(FileSystemGuide)>>whileNotDoneDo:
PostorderGuide>>show:
PostorderGuide class(FileSystemGuide class)>>show:to:selecting:
DeleteVisitor>>visit:
DeleteVisitor class>>delete:
FileReference(AbstractFileReference)>>deleteAll
DIUtil class>>folderRemove:
DIWebServiceAPI>>getSuiteKill
DIWebServiceHandler>>delete
DIWebServiceHandler(ZnRestCall)>>execute
[ call execute ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
BlockClosure>>on:do:
ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
[ self execute: call ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
BlockClosure>>on:do:
ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ :delegate | delegate handleRequest: request ] ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateRequest:do:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
[ self authenticateAndDelegateRequest: request ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
BlockClosure>>on:do:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequest:
ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeOneRequestResponseOn:
[ self executeOneRequestResponseOn: stream ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
[ 
p psValueAt: index put: anObject.
aBlock value ] in ZnCurrentServer(DynamicVariable)>>value:during:
BlockClosure>>ensure:
ZnCurrentServer(DynamicVariable)>>value:during:
ZnCurrentServer class(DynamicVariable class)>>value:during:
ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
[ self executeRequestResponseLoopOn: stream ] in [ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ] in [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
BlockClosure>>ensure:
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ] in [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
BlockClosure>>ifCurtailed:
[ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
FileDoesNotExist: Path / 'home' / 'otruffer' / 'dicto' / 'bin' / 'analysis' / 'full-test' / '1424267673'
18 February 2015 3:44:02.490474 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
NBCogit NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
https://github.com/pharo-project/pharo-vm.git Commit: 4a0d556150d478ff2de3c9624d2f18e6eaa3fa5c Date: 2014-12-18 18:42:53 +0100 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14893

Image: Pharo3.0 [Latest update: #30863]

UnixStore(DiskStore)>>delete:
	Receiver: an UnixStore
	Arguments and temporary variables: 
		path: 	Path / 'home' / 'otruffer' / 'dicto' / 'bin' / 'analysis' / 'full-test' /...etc...
		pathString: 	nil
		encodedPathString: 	nil
	Receiver's instance variables: 
		maxFileNameLength: 	255


FileSystem>>delete:
	Receiver: a FileSystem
	Arguments and temporary variables: 
		aResolvable: 	Path / 'home' / 'otruffer' / 'dicto' / 'bin' / 'analysis' / 'full-...etc...
	Receiver's instance variables: 
		workingDirectory: 	Path / 'home' / 'otruffer' / 'dicto' / 'bin' / 'dicto-engine'...etc...
		store: 	an UnixStore


FileReference>>delete
	Receiver: File @ /home/otruffer/dicto/bin/analysis/full-test/1424267673
	Arguments and temporary variables: 

	Receiver's instance variables: 
		filesystem: 	a FileSystem
		path: 	Path / 'home' / 'otruffer' / 'dicto' / 'bin' / 'analysis' / 'full-test' /...etc...


DeleteVisitor>>visitReference:
	Receiver: a DeleteVisitor
	Arguments and temporary variables: 
		anEntry: 	DirectoryEntry: File @ /home/otruffer/dicto/bin/analysis/full-test/142...etc...
	Receiver's instance variables: 
a DeleteVisitor

DeleteVisitor(FileSystemVisitor)>>visitFile:
	Receiver: a DeleteVisitor
	Arguments and temporary variables: 
		aReference: 	DirectoryEntry: File @ /home/otruffer/dicto/bin/analysis/full-test/...etc...
	Receiver's instance variables: 
a DeleteVisitor

PostorderGuide>>visit:
	Receiver: a PostorderGuide
	Arguments and temporary variables: 
		anEntry: 	DirectoryEntry: File @ /home/otruffer/dicto/bin/analysis/full-test/142...etc...
	Receiver's instance variables: 
		visitor: 	a DeleteVisitor
		work: 	an OrderedCollection(visit: DirectoryEntry: File @ /home/otruffer/dicto/b...etc...
		selectChildren: 	[ :entry | entry isSymlink not ]


Message>>sendTo:
	Receiver: visit: DirectoryEntry: File @ /home/otruffer/dicto/bin/analysis/full-test/1424267673
	Arguments and temporary variables: 
		receiver: 	a PostorderGuide
	Receiver's instance variables: 
		selector: 	#visit:
		args: 	an Array(DirectoryEntry: File @ /home/otruffer/dicto/bin/analysis/full-te...etc...
		lookupClass: 	nil


[ self pop sendTo: self ] in PostorderGuide>>show:
	Receiver: a PostorderGuide
	Arguments and temporary variables: 
		aReference: 	File @ /home/otruffer/dicto/bin/analysis/full-test
	Receiver's instance variables: 
		visitor: 	a DeleteVisitor
		work: 	an OrderedCollection(visit: DirectoryEntry: File @ /home/otruffer/dicto/b...etc...
		selectChildren: 	[ :entry | entry isSymlink not ]


PostorderGuide(FileSystemGuide)>>whileNotDoneDo:
	Receiver: a PostorderGuide
	Arguments and temporary variables: 
		aBlock: 	[ self pop sendTo: self ]
	Receiver's instance variables: 
		visitor: 	a DeleteVisitor
		work: 	an OrderedCollection(visit: DirectoryEntry: File @ /home/otruffer/dicto/b...etc...
		selectChildren: 	[ :entry | entry isSymlink not ]


PostorderGuide>>show:
	Receiver: a PostorderGuide
	Arguments and temporary variables: 
		aReference: 	File @ /home/otruffer/dicto/bin/analysis/full-test
	Receiver's instance variables: 
		visitor: 	a DeleteVisitor
		work: 	an OrderedCollection(visit: DirectoryEntry: File @ /home/otruffer/dicto/b...etc...
		selectChildren: 	[ :entry | entry isSymlink not ]


PostorderGuide class(FileSystemGuide class)>>show:to:selecting:
	Receiver: PostorderGuide
	Arguments and temporary variables: 
		aReference: 	File @ /home/otruffer/dicto/bin/analysis/full-test
		aVisitor: 	a DeleteVisitor
		aBlock: 	[ :entry | entry isSymlink not ]
	Receiver's instance variables: 
		superclass: 	FileSystemGuide
		methodDict: 	a MethodDictionary(#pushTraverse:->PostorderGuide>>#pushTraverse: #...etc...
		format: 	136
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#PostorderGuide
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'FileSystem-Core-Implementation'
		traitComposition: 	{}
		localSelectors: 	nil


DeleteVisitor>>visit:
	Receiver: a DeleteVisitor
	Arguments and temporary variables: 
		aReference: 	File @ /home/otruffer/dicto/bin/analysis/full-test
	Receiver's instance variables: 
a DeleteVisitor

DeleteVisitor class>>delete:
	Receiver: DeleteVisitor
	Arguments and temporary variables: 
		aReference: 	File @ /home/otruffer/dicto/bin/analysis/full-test
	Receiver's instance variables: 
		superclass: 	FileSystemVisitor
		methodDict: 	a MethodDictionary(#visit:->DeleteVisitor>>#visit: #visitReference:...etc...
		format: 	2
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#DeleteVisitor
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'FileSystem-Core-Implementation'
		traitComposition: 	{}
		localSelectors: 	nil


FileReference(AbstractFileReference)>>deleteAll
	Receiver: File @ /home/otruffer/dicto/bin/analysis/full-test
	Arguments and temporary variables: 

	Receiver's instance variables: 
		filesystem: 	a FileSystem
		path: 	Path / 'home' / 'otruffer' / 'dicto' / 'bin' / 'analysis' / 'full-test'


DIUtil class>>folderRemove:
	Receiver: DIUtil
	Arguments and temporary variables: 
		aString: 	'/home/otruffer/dicto/bin/analysis/full-test'
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary()
		format: 	2
		layout: 	a FixedLayout
		instanceVariables: 	#()
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#DIUtil
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Dicto-var-util'
		traitComposition: 	{}
		localSelectors: 	nil


DIWebServiceAPI>>getSuiteKill
	Receiver: a DIWebServiceAPI
	Arguments and temporary variables: 

	Receiver's instance variables: 
		request: 	nil
		response: 	nil
		variables: 	nil
		delegate: 	nil
		principal: 	nil
		credentials: 	nil


DIWebServiceHandler>>delete
	Receiver: a DIWebServiceHandler
	Arguments and temporary variables: 
		api: 	a DIWebServiceAPI
	Receiver's instance variables: 
		request: 	a ZnRequest(DELETE /full-test/suite)
		response: 	nil
		variables: 	an OrderedCollection('full-test' 'suite')
		delegate: 	a ZnJSONRestServerDelegate
		principal: 	nil
		credentials: 	nil
		dicto: 	a DIDicto


DIWebServiceHandler(ZnRestCall)>>execute
	Receiver: a DIWebServiceHandler
	Arguments and temporary variables: 

	Receiver's instance variables: 
		request: 	a ZnRequest(DELETE /full-test/suite)
		response: 	nil
		variables: 	an OrderedCollection('full-test' 'suite')
		delegate: 	a ZnJSONRestServerDelegate
		principal: 	nil
		credentials: 	nil
		dicto: 	a DIDicto


[ call execute ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


BlockClosure>>on:do:
	Receiver: [ call execute ]
	Arguments and temporary variables: 
		exception: 	ZnRestCallUnauthorized
		handlerAction: 	[ :exception | self unauthorized: exception request ]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
		startpc: 	38
		numArgs: 	0


ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


[ self execute: call ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		request: 	a ZnRequest(DELETE /full-test/suite)
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


BlockClosure>>on:do:
	Receiver: [ self execute: call ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :exception | 
request server debugMode
	ifTrue: [ exception pa...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
		startpc: 	99
		numArgs: 	0


ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		request: 	a ZnRequest(DELETE /full-test/suite)
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ :delegate | delegate handleRequest: request ] ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(DELETE /full-test/suite)
		delegate: 	a ZnJSONRestServerDelegate
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream a ZdcSock...etc...


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateRequest:do:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(DELETE /full-test/suite)
		block: 	[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ ...etc...
		authenticator: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream a ZdcSock...etc...


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(DELETE /full-test/suite)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream a ZdcSock...etc...


[ self authenticateAndDelegateRequest: request ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(DELETE /full-test/suite)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream a ZdcSock...etc...


BlockClosure>>on:do:
	Receiver: [ self authenticateAndDelegateRequest: request ]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :exception | 
self debugMode
	ifTrue: [ exception pass ]
	ifFa...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequ...etc...
		startpc: 	58
		numArgs: 	0


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(DELETE /full-test/suite)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream a ZdcSock...etc...


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(DELETE /full-test/suite)
		response: 	nil
		initialMilliseconds: 	15152902
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream a ZdcSock...etc...


ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeOneRequestResponseOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		stream: 	a ZdcSocketStream
		request: 	a ZnRequest(DELETE /full-test/suite)
		response: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream a ZdcSock...etc...


[ self executeOneRequestResponseOn: stream ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		stream: 	a ZdcSocketStream
		request: 	nil
		response: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream a ZdcSock...etc...


[ 
p psValueAt: index put: anObject.
aBlock value ] in ZnCurrentServer(DynamicVariable)>>value:during:
	Receiver: a ZnCurrentServer
	Arguments and temporary variables: 
		anObject: 	a ZnManagingMultiThreadedServer(running 8010)
		aBlock: 	[ self executeOneRequestResponseOn: stream ]
		p: 	a Process in nil
		oldValue: 	nil
	Receiver's instance variables: 
		index: 	5


BlockClosure>>ensure:
	Receiver: [ 
p psValueAt: index put: anObject.
aBlock value ]
	Arguments and temporary variables: 
		aBlock: 	[ p psValueAt: index put: oldValue ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ZnCurrentServer(DynamicVariable)>>value:during:
		startpc: 	62
		numArgs: 	0


ZnCurrentServer(DynamicVariable)>>value:during:
	Receiver: a ZnCurrentServer
	Arguments and temporary variables: 
		anObject: 	a ZnManagingMultiThreadedServer(running 8010)
		aBlock: 	[ self executeOneRequestResponseOn: stream ]
		p: 	a Process in nil
		oldValue: 	nil
	Receiver's instance variables: 
		index: 	5


ZnCurrentServer class(DynamicVariable class)>>value:during:
	Receiver: ZnCurrentServer
	Arguments and temporary variables: 
		anObject: 	a ZnManagingMultiThreadedServer(running 8010)
		aBlock: 	[ self executeOneRequestResponseOn: stream ]
	Receiver's instance variables: 
		superclass: 	DynamicVariable
		methodDict: 	a MethodDictionary()
		format: 	132
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#ZnCurrentServer
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Zinc-HTTP-Variables'
		traitComposition: 	{}
		localSelectors: 	nil
		hash: 	nil
		soleInstance: 	a ZnCurrentServer


ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		stream: 	a ZdcSocketStream
		request: 	nil
		response: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream a ZdcSock...etc...


[ self executeRequestResponseLoopOn: stream ] in [ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ] in [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		listeningSocket: 	a Socket[waitingForConnection]
		stream: 	a ZdcSocketStream
		socket: 	a Socket[connected]
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream a ZdcSock...etc...



--- The full stack ---
UnixStore(DiskStore)>>delete:
FileSystem>>delete:
FileReference>>delete
DeleteVisitor>>visitReference:
DeleteVisitor(FileSystemVisitor)>>visitFile:
PostorderGuide>>visit:
Message>>sendTo:
[ self pop sendTo: self ] in PostorderGuide>>show:
PostorderGuide(FileSystemGuide)>>whileNotDoneDo:
PostorderGuide>>show:
PostorderGuide class(FileSystemGuide class)>>show:to:selecting:
DeleteVisitor>>visit:
DeleteVisitor class>>delete:
FileReference(AbstractFileReference)>>deleteAll
DIUtil class>>folderRemove:
DIWebServiceAPI>>getSuiteKill
DIWebServiceHandler>>delete
DIWebServiceHandler(ZnRestCall)>>execute
[ call execute ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
BlockClosure>>on:do:
ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
[ self execute: call ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
BlockClosure>>on:do:
ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ :delegate | delegate handleRequest: request ] ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateRequest:do:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
[ self authenticateAndDelegateRequest: request ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
BlockClosure>>on:do:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequest:
ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeOneRequestResponseOn:
[ self executeOneRequestResponseOn: stream ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
[ 
p psValueAt: index put: anObject.
aBlock value ] in ZnCurrentServer(DynamicVariable)>>value:during:
BlockClosure>>ensure:
ZnCurrentServer(DynamicVariable)>>value:during:
ZnCurrentServer class(DynamicVariable class)>>value:during:
ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
[ self executeRequestResponseLoopOn: stream ] in [ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ] in [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
BlockClosure>>ensure:
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ] in [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
BlockClosure>>ifCurtailed:
[ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
FileDoesNotExist: Path / 'home' / 'otruffer' / 'dicto' / 'bin' / 'analysis' / 'full-test' / '1424267673'
18 February 2015 3:46:37.216832 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
NBCogit NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
https://github.com/pharo-project/pharo-vm.git Commit: 4a0d556150d478ff2de3c9624d2f18e6eaa3fa5c Date: 2014-12-18 18:42:53 +0100 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14893

Image: Pharo3.0 [Latest update: #30863]

UnixStore(DiskStore)>>delete:
	Receiver: an UnixStore
	Arguments and temporary variables: 
		path: 	Path / 'home' / 'otruffer' / 'dicto' / 'bin' / 'analysis' / 'full-test' /...etc...
		pathString: 	nil
		encodedPathString: 	nil
	Receiver's instance variables: 
		maxFileNameLength: 	255


FileSystem>>delete:
	Receiver: a FileSystem
	Arguments and temporary variables: 
		aResolvable: 	Path / 'home' / 'otruffer' / 'dicto' / 'bin' / 'analysis' / 'full-...etc...
	Receiver's instance variables: 
		workingDirectory: 	Path / 'home' / 'otruffer' / 'dicto' / 'bin' / 'dicto-engine'...etc...
		store: 	an UnixStore


FileReference>>delete
	Receiver: File @ /home/otruffer/dicto/bin/analysis/full-test/1424267673
	Arguments and temporary variables: 

	Receiver's instance variables: 
		filesystem: 	a FileSystem
		path: 	Path / 'home' / 'otruffer' / 'dicto' / 'bin' / 'analysis' / 'full-test' /...etc...


DeleteVisitor>>visitReference:
	Receiver: a DeleteVisitor
	Arguments and temporary variables: 
		anEntry: 	DirectoryEntry: File @ /home/otruffer/dicto/bin/analysis/full-test/142...etc...
	Receiver's instance variables: 
a DeleteVisitor

DeleteVisitor(FileSystemVisitor)>>visitFile:
	Receiver: a DeleteVisitor
	Arguments and temporary variables: 
		aReference: 	DirectoryEntry: File @ /home/otruffer/dicto/bin/analysis/full-test/...etc...
	Receiver's instance variables: 
a DeleteVisitor

PostorderGuide>>visit:
	Receiver: a PostorderGuide
	Arguments and temporary variables: 
		anEntry: 	DirectoryEntry: File @ /home/otruffer/dicto/bin/analysis/full-test/142...etc...
	Receiver's instance variables: 
		visitor: 	a DeleteVisitor
		work: 	an OrderedCollection(visit: DirectoryEntry: File @ /home/otruffer/dicto/b...etc...
		selectChildren: 	[ :entry | entry isSymlink not ]


Message>>sendTo:
	Receiver: visit: DirectoryEntry: File @ /home/otruffer/dicto/bin/analysis/full-test/1424267673
	Arguments and temporary variables: 
		receiver: 	a PostorderGuide
	Receiver's instance variables: 
		selector: 	#visit:
		args: 	an Array(DirectoryEntry: File @ /home/otruffer/dicto/bin/analysis/full-te...etc...
		lookupClass: 	nil


[ self pop sendTo: self ] in PostorderGuide>>show:
	Receiver: a PostorderGuide
	Arguments and temporary variables: 
		aReference: 	File @ /home/otruffer/dicto/bin/analysis/full-test
	Receiver's instance variables: 
		visitor: 	a DeleteVisitor
		work: 	an OrderedCollection(visit: DirectoryEntry: File @ /home/otruffer/dicto/b...etc...
		selectChildren: 	[ :entry | entry isSymlink not ]


PostorderGuide(FileSystemGuide)>>whileNotDoneDo:
	Receiver: a PostorderGuide
	Arguments and temporary variables: 
		aBlock: 	[ self pop sendTo: self ]
	Receiver's instance variables: 
		visitor: 	a DeleteVisitor
		work: 	an OrderedCollection(visit: DirectoryEntry: File @ /home/otruffer/dicto/b...etc...
		selectChildren: 	[ :entry | entry isSymlink not ]


PostorderGuide>>show:
	Receiver: a PostorderGuide
	Arguments and temporary variables: 
		aReference: 	File @ /home/otruffer/dicto/bin/analysis/full-test
	Receiver's instance variables: 
		visitor: 	a DeleteVisitor
		work: 	an OrderedCollection(visit: DirectoryEntry: File @ /home/otruffer/dicto/b...etc...
		selectChildren: 	[ :entry | entry isSymlink not ]


PostorderGuide class(FileSystemGuide class)>>show:to:selecting:
	Receiver: PostorderGuide
	Arguments and temporary variables: 
		aReference: 	File @ /home/otruffer/dicto/bin/analysis/full-test
		aVisitor: 	a DeleteVisitor
		aBlock: 	[ :entry | entry isSymlink not ]
	Receiver's instance variables: 
		superclass: 	FileSystemGuide
		methodDict: 	a MethodDictionary(#pushTraverse:->PostorderGuide>>#pushTraverse: #...etc...
		format: 	136
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#PostorderGuide
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'FileSystem-Core-Implementation'
		traitComposition: 	{}
		localSelectors: 	nil


DeleteVisitor>>visit:
	Receiver: a DeleteVisitor
	Arguments and temporary variables: 
		aReference: 	File @ /home/otruffer/dicto/bin/analysis/full-test
	Receiver's instance variables: 
a DeleteVisitor

DeleteVisitor class>>delete:
	Receiver: DeleteVisitor
	Arguments and temporary variables: 
		aReference: 	File @ /home/otruffer/dicto/bin/analysis/full-test
	Receiver's instance variables: 
		superclass: 	FileSystemVisitor
		methodDict: 	a MethodDictionary(#visit:->DeleteVisitor>>#visit: #visitReference:...etc...
		format: 	2
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#DeleteVisitor
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'FileSystem-Core-Implementation'
		traitComposition: 	{}
		localSelectors: 	nil


FileReference(AbstractFileReference)>>deleteAll
	Receiver: File @ /home/otruffer/dicto/bin/analysis/full-test
	Arguments and temporary variables: 

	Receiver's instance variables: 
		filesystem: 	a FileSystem
		path: 	Path / 'home' / 'otruffer' / 'dicto' / 'bin' / 'analysis' / 'full-test'


DIUtil class>>folderRemove:
	Receiver: DIUtil
	Arguments and temporary variables: 
		aString: 	'/home/otruffer/dicto/bin/analysis/full-test'
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary()
		format: 	2
		layout: 	a FixedLayout
		instanceVariables: 	#()
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#DIUtil
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Dicto-var-util'
		traitComposition: 	{}
		localSelectors: 	nil


DIWebServiceAPI>>getSuiteKill
	Receiver: a DIWebServiceAPI
	Arguments and temporary variables: 

	Receiver's instance variables: 
		request: 	nil
		response: 	nil
		variables: 	nil
		delegate: 	nil
		principal: 	nil
		credentials: 	nil


DIWebServiceHandler>>delete
	Receiver: a DIWebServiceHandler
	Arguments and temporary variables: 
		api: 	a DIWebServiceAPI
	Receiver's instance variables: 
		request: 	a ZnRequest(DELETE /full-test/suite)
		response: 	nil
		variables: 	an OrderedCollection('full-test' 'suite')
		delegate: 	a ZnJSONRestServerDelegate
		principal: 	nil
		credentials: 	nil
		dicto: 	a DIDicto


DIWebServiceHandler(ZnRestCall)>>execute
	Receiver: a DIWebServiceHandler
	Arguments and temporary variables: 

	Receiver's instance variables: 
		request: 	a ZnRequest(DELETE /full-test/suite)
		response: 	nil
		variables: 	an OrderedCollection('full-test' 'suite')
		delegate: 	a ZnJSONRestServerDelegate
		principal: 	nil
		credentials: 	nil
		dicto: 	a DIDicto


[ call execute ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


BlockClosure>>on:do:
	Receiver: [ call execute ]
	Arguments and temporary variables: 
		exception: 	ZnRestCallUnauthorized
		handlerAction: 	[ :exception | self unauthorized: exception request ]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
		startpc: 	38
		numArgs: 	0


ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


[ self execute: call ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		request: 	a ZnRequest(DELETE /full-test/suite)
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


BlockClosure>>on:do:
	Receiver: [ self execute: call ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :exception | 
request server debugMode
	ifTrue: [ exception pa...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
		startpc: 	99
		numArgs: 	0


ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		request: 	a ZnRequest(DELETE /full-test/suite)
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ :delegate | delegate handleRequest: request ] ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(DELETE /full-test/suite)
		delegate: 	a ZnJSONRestServerDelegate
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateRequest:do:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(DELETE /full-test/suite)
		block: 	[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ ...etc...
		authenticator: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(DELETE /full-test/suite)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream)


[ self authenticateAndDelegateRequest: request ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(DELETE /full-test/suite)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream)


BlockClosure>>on:do:
	Receiver: [ self authenticateAndDelegateRequest: request ]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :exception | 
self debugMode
	ifTrue: [ exception pass ]
	ifFa...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequ...etc...
		startpc: 	58
		numArgs: 	0


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(DELETE /full-test/suite)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(DELETE /full-test/suite)
		response: 	nil
		initialMilliseconds: 	15307632
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeOneRequestResponseOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		stream: 	a ZdcSocketStream
		request: 	a ZnRequest(DELETE /full-test/suite)
		response: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream)


[ self executeOneRequestResponseOn: stream ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		stream: 	a ZdcSocketStream
		request: 	nil
		response: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream)


[ 
p psValueAt: index put: anObject.
aBlock value ] in ZnCurrentServer(DynamicVariable)>>value:during:
	Receiver: a ZnCurrentServer
	Arguments and temporary variables: 
		anObject: 	a ZnManagingMultiThreadedServer(running 8010)
		aBlock: 	[ self executeOneRequestResponseOn: stream ]
		p: 	a Process in nil
		oldValue: 	nil
	Receiver's instance variables: 
		index: 	5


BlockClosure>>ensure:
	Receiver: [ 
p psValueAt: index put: anObject.
aBlock value ]
	Arguments and temporary variables: 
		aBlock: 	[ p psValueAt: index put: oldValue ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ZnCurrentServer(DynamicVariable)>>value:during:
		startpc: 	62
		numArgs: 	0


ZnCurrentServer(DynamicVariable)>>value:during:
	Receiver: a ZnCurrentServer
	Arguments and temporary variables: 
		anObject: 	a ZnManagingMultiThreadedServer(running 8010)
		aBlock: 	[ self executeOneRequestResponseOn: stream ]
		p: 	a Process in nil
		oldValue: 	nil
	Receiver's instance variables: 
		index: 	5


ZnCurrentServer class(DynamicVariable class)>>value:during:
	Receiver: ZnCurrentServer
	Arguments and temporary variables: 
		anObject: 	a ZnManagingMultiThreadedServer(running 8010)
		aBlock: 	[ self executeOneRequestResponseOn: stream ]
	Receiver's instance variables: 
		superclass: 	DynamicVariable
		methodDict: 	a MethodDictionary()
		format: 	132
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#ZnCurrentServer
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Zinc-HTTP-Variables'
		traitComposition: 	{}
		localSelectors: 	nil
		hash: 	nil
		soleInstance: 	a ZnCurrentServer


ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		stream: 	a ZdcSocketStream
		request: 	nil
		response: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream)


[ self executeRequestResponseLoopOn: stream ] in [ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ] in [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		listeningSocket: 	a Socket[waitingForConnection]
		stream: 	a ZdcSocketStream
		socket: 	a Socket[connected]
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream)



--- The full stack ---
UnixStore(DiskStore)>>delete:
FileSystem>>delete:
FileReference>>delete
DeleteVisitor>>visitReference:
DeleteVisitor(FileSystemVisitor)>>visitFile:
PostorderGuide>>visit:
Message>>sendTo:
[ self pop sendTo: self ] in PostorderGuide>>show:
PostorderGuide(FileSystemGuide)>>whileNotDoneDo:
PostorderGuide>>show:
PostorderGuide class(FileSystemGuide class)>>show:to:selecting:
DeleteVisitor>>visit:
DeleteVisitor class>>delete:
FileReference(AbstractFileReference)>>deleteAll
DIUtil class>>folderRemove:
DIWebServiceAPI>>getSuiteKill
DIWebServiceHandler>>delete
DIWebServiceHandler(ZnRestCall)>>execute
[ call execute ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
BlockClosure>>on:do:
ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
[ self execute: call ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
BlockClosure>>on:do:
ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ :delegate | delegate handleRequest: request ] ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateRequest:do:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
[ self authenticateAndDelegateRequest: request ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
BlockClosure>>on:do:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequest:
ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeOneRequestResponseOn:
[ self executeOneRequestResponseOn: stream ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
[ 
p psValueAt: index put: anObject.
aBlock value ] in ZnCurrentServer(DynamicVariable)>>value:during:
BlockClosure>>ensure:
ZnCurrentServer(DynamicVariable)>>value:during:
ZnCurrentServer class(DynamicVariable class)>>value:during:
ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
[ self executeRequestResponseLoopOn: stream ] in [ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ] in [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
BlockClosure>>ensure:
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ] in [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
BlockClosure>>ifCurtailed:
[ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
NeoJSONParseError: invalid input: nil
18 February 2015 3:47:25.26384 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
NBCogit NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
https://github.com/pharo-project/pharo-vm.git Commit: 4a0d556150d478ff2de3c9624d2f18e6eaa3fa5c Date: 2014-12-18 18:42:53 +0100 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14893

Image: Pharo3.0 [Latest update: #30863]

NeoJSONReader>>error:
	Receiver: a NeoJSONReader
	Arguments and temporary variables: 
		text: 	'invalid input: nil'
	Receiver's instance variables: 
		mappings: 	nil
		readStream: 	a ReadStream
		stringStream: 	nil
		listClass: 	nil
		mapClass: 	nil
		propertyNamesAsSymbols: 	false


NeoJSONReader>>parseValue
	Receiver: a NeoJSONReader
	Arguments and temporary variables: 
		char: 	nil
	Receiver's instance variables: 
		mappings: 	nil
		readStream: 	a ReadStream
		stringStream: 	nil
		listClass: 	nil
		mapClass: 	nil
		propertyNamesAsSymbols: 	false


NeoJSONReader>>next
	Receiver: a NeoJSONReader
	Arguments and temporary variables: 

	Receiver's instance variables: 
		mappings: 	nil
		readStream: 	a ReadStream
		stringStream: 	nil
		listClass: 	nil
		mapClass: 	nil
		propertyNamesAsSymbols: 	false


NeoJSONReader class>>fromString:
	Receiver: NeoJSONReader
	Arguments and temporary variables: 
		string: 	''
	Receiver's instance variables: 
		superclass: 	NeoJSONMapper
		methodDict: 	a MethodDictionary(#atEnd->NeoJSONReader>>#atEnd #close->NeoJSONRea...etc...
		format: 	142
		layout: 	a FixedLayout
		instanceVariables: 	#(#readStream #stringStream #listClass #mapClass #propertyNa...etc...
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#NeoJSONReader
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Neo-JSON-Core'
		traitComposition: 	{}
		localSelectors: 	nil


DIPhpModel>>_loadPhpModel
	Receiver: a DIPhpModel
	Arguments and temporary variables: 

	Receiver's instance variables: 
		defRules: 	a DICollectionRule()
		defVars: 	a DICollectionVar(SYSTEM)
		analysisID: 	'1424270845'
		additionalProperties: 	a Dictionary()
		ruleCounter: 	0
		varCounter: 	0
		defVarElements: 	a DICollectionVarElements()
		defVarInvertedElements: 	a DICollectionVarElements()
		model: 	nil


DIPhpModel>>model
	Receiver: a DIPhpModel
	Arguments and temporary variables: 

	Receiver's instance variables: 
		defRules: 	a DICollectionRule()
		defVars: 	a DICollectionVar(SYSTEM)
		analysisID: 	'1424270845'
		additionalProperties: 	a Dictionary()
		ruleCounter: 	0
		varCounter: 	0
		defVarElements: 	a DICollectionVarElements()
		defVarInvertedElements: 	a DICollectionVarElements()
		model: 	nil


DIVarPhpClass>>allElements
	Receiver: RuleResult
	Arguments and temporary variables: 

	Receiver's instance variables: 
		isFirst: 	false
		dslText: 	'RuleResult=PhpClass with name:"Dicto\\RuleResult"'
		type: 	'PhpClass'
		id: 	1
		entity: 	nil
		name: 	'RuleResult'
		specifiers: 	an OrderedCollection(name=Dicto\\RuleResult)
		isInverted: 	false
		elements: 	a DICollectionVarElements()
		invertedElements: 	a DICollectionVarElements()


DIVarPhpClass(DIVar)>>elements
	Receiver: RuleResult
	Arguments and temporary variables: 
		valid: 	nil
	Receiver's instance variables: 
		isFirst: 	false
		dslText: 	'RuleResult=PhpClass with name:"Dicto\\RuleResult"'
		type: 	'PhpClass'
		id: 	1
		entity: 	nil
		name: 	'RuleResult'
		specifiers: 	an OrderedCollection(name=Dicto\\RuleResult)
		isInverted: 	false
		elements: 	a DICollectionVarElements()
		invertedElements: 	a DICollectionVarElements()


DISimpleRule>>subjectElements
	Receiver: RuleResult cannot depend on DictoTalker
	Arguments and temporary variables: 
		subjectElements: 	nil
	Receiver's instance variables: 
		isFirst: 	nil
		dslText: 	'RuleResult cannot depend on DictoTalker'
		type: 	#cannot
		id: 	1001
		entity: 	nil
		subjects: 	an Array(RuleResult)
		predicates: 	an Array(depend on DictoTalker)
		subRules: 	nil
		candidateAdapters: 	a SortedCollection(DIPhpDependencies)
		chosenAdapter: 	DIPhpDependencies
		hasFailed: 	false
		failureMessage: 	''
		failingPredicates: 	a Set()
		hasSubjectInverted: 	false
		hasPredicateInverted: 	false


printRulesEntityRelationship: someRules
	| res processedPredicates |
	res := ''.
	processedPredicates := Set new.
	someRules
		do: [ :rule | 
			| predicateSelector subjectElements argumentElements data isPredicateInv isSubjectInv |
			predicateSelector := (rule predicate nameNormalized , ':') asSymbol.
			isPredicateInv := rule hasPredicateInverted.
			isSubjectInv := rule hasSubjectInverted.
			subjectElements := rule subjectElements.
			argumentElements := rule argumentElements.
			subjectElements
				do: [ :subject | 
					argumentElements
						do: [ :argument | 
							| relId spec msgPass msgFail |
							relId := subject id , '-' , argument id.
							msgPass := subject id , '.' , rule predicate name , '(' , argument id , ')=True'.
							msgFail := subject id , '.' , rule predicate name , '(' , argument id , ')=False'.
							(processedPredicates includes: relId)
								ifFalse: [ 
									data := {(#subject -> subject value).
									(#argument -> argument value).
									(#ruleId -> rule id).
									(#propertyId -> relId).
									(#msgPass -> msgPass).
									(#msgFail -> msgFail)} asDictionary.
									spec := self perform: predicateSelector withArguments: {data}.
									spec := spec
										dictoReplace:
											{('$subject' -> subject value).
											('$argument' -> argument value).
											('$ruleId' -> rule id).
											('$propertyId' -> relId).
											('$msgPass' -> msgPass).
											('$msgFail' -> msgFail)}.
									res := res , spec ].	"avoid duplicate predicate evaluations"
							processedPredicates add: relId ] ] ].
	^ res in DIPhpDependencies(DIAdapter)>>printRulesEntityRelationship:
	Receiver: a DIPhpDependencies
	Arguments and temporary variables: 
		someRules: 	a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalk...etc...
		processedPredicates: 	a Set()
		data: 	nil
		res: 	''
		rule: 	RuleResult cannot depend on DictoTalker
		predicateSelector: 	#dependOn:
		subjectElements: 	nil
		argumentElements: 	nil
		isPredicateInv: 	false
		isSubjectInv: 	false
	Receiver's instance variables: 
		output: 	''
		commandOutput: 	''
		NEWLINE: 	'
'
		rules: 	a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalker m...etc...
		varSynonyms: 	nil
		sessionId: 	'1424270845'
		TIMESTAMP: 	'1424270845'
		TOOLNAME: 	'DIPhpDependencies'
		PROJECTROOT: 	'/home/otruffer/DictoCLI/'
		PROJECTSRC: 	'./'
		PROJECTBIN: 	'./'
		RESULTFILE: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/full-test/142427...etc...
		TESTFILE: 	nil
		testInputFileExt: 	'.st'
		SYSTEM: 	SYSTEM


DICollectionRule(OrderedCollection)>>do:
	Receiver: a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalker must depend on Rule...etc...
	Arguments and temporary variables: 
		aBlock: 	printRulesEntityRelationship: someRules
	| res processedPredicates |
	r...etc...
		index: 	1
	Receiver's instance variables: 
		array: 	an Array(RuleResult cannot depend on DictoTalker DictoTalker must depend...etc...
		firstIndex: 	1
		lastIndex: 	3
		elements: 	nil
		elements: 	nil


DIPhpDependencies(DIAdapter)>>printRulesEntityRelationship:
	Receiver: a DIPhpDependencies
	Arguments and temporary variables: 
		res: 	''
		someRules: 	a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalk...etc...
		processedPredicates: 	a Set()
	Receiver's instance variables: 
		output: 	''
		commandOutput: 	''
		NEWLINE: 	'
'
		rules: 	a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalker m...etc...
		varSynonyms: 	nil
		sessionId: 	'1424270845'
		TIMESTAMP: 	'1424270845'
		TOOLNAME: 	'DIPhpDependencies'
		PROJECTROOT: 	'/home/otruffer/DictoCLI/'
		PROJECTSRC: 	'./'
		PROJECTBIN: 	'./'
		RESULTFILE: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/full-test/142427...etc...
		TESTFILE: 	nil
		testInputFileExt: 	'.st'
		SYSTEM: 	SYSTEM


DIPhpDependencies(DIAdapter)>>printRules
	Receiver: a DIPhpDependencies
	Arguments and temporary variables: 
		res: 	nil
		allRules: 	a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalke...etc...
	Receiver's instance variables: 
		output: 	''
		commandOutput: 	''
		NEWLINE: 	'
'
		rules: 	a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalker m...etc...
		varSynonyms: 	nil
		sessionId: 	'1424270845'
		TIMESTAMP: 	'1424270845'
		TOOLNAME: 	'DIPhpDependencies'
		PROJECTROOT: 	'/home/otruffer/DictoCLI/'
		PROJECTSRC: 	'./'
		PROJECTBIN: 	'./'
		RESULTFILE: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/full-test/142427...etc...
		TESTFILE: 	nil
		testInputFileExt: 	'.st'
		SYSTEM: 	SYSTEM


DIPhpDependencies>>testInput
	Receiver: a DIPhpDependencies
	Arguments and temporary variables: 
		strRules: 	nil
	Receiver's instance variables: 
		output: 	''
		commandOutput: 	''
		NEWLINE: 	'
'
		rules: 	a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalker m...etc...
		varSynonyms: 	nil
		sessionId: 	'1424270845'
		TIMESTAMP: 	'1424270845'
		TOOLNAME: 	'DIPhpDependencies'
		PROJECTROOT: 	'/home/otruffer/DictoCLI/'
		PROJECTSRC: 	'./'
		PROJECTBIN: 	'./'
		RESULTFILE: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/full-test/142427...etc...
		TESTFILE: 	nil
		testInputFileExt: 	'.st'
		SYSTEM: 	SYSTEM


DITestGroup>>build
	Receiver: a DITestGroup
	Arguments and temporary variables: 

	Receiver's instance variables: 
		rules: 	an OrderedCollection(RuleResult cannot depend on DictoTalker DictoTalker...etc...
		adapter: 	a DIPhpDependencies
		runCommandText: 	nil
		testSpecification: 	nil
		adapterID: 	'DIPhpDependencies'
		resultFile: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/full-test/142427...etc...
		specificationFile: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/full-test...etc...
		commandFile: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/full-test/14242...etc...


[ :testGroup | testGroup build ] in DIDicto>>dictoBuild:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = ...etc...
		adapterTestGroups: 	a Dictionary(DIGrepFileContent->a DITestGroup DIJMeterLoadTe...etc...
		testGroup: 	a DITestGroup
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424270845'
		singleShotTask: 	false


Array(SequenceableCollection)>>do:
	Receiver: an Array(a DITestGroup a DITestGroup a DITestGroup a DITestGroup a DITestGroup)
	Arguments and temporary variables: 
		aBlock: 	[ :testGroup | testGroup build ]
		index: 	4
	Receiver's instance variables: 
an Array(a DITestGroup a DITestGroup a DITestGroup a DITestGroup a DITestGroup)

DIDicto>>dictoBuild:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = ...etc...
		adapterTestGroups: 	a Dictionary(DIGrepFileContent->a DITestGroup DIJMeterLoadTe...etc...
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424270845'
		singleShotTask: 	false


DIDicto>>dictoRun:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = ...etc...
		adapterTestGroups: 	nil
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424270845'
		singleShotTask: 	false


DIDicto>>dictoAll:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = ...etc...
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424270845'
		singleShotTask: 	false


[ DIDicto new dictoAll: input ] in DIWebServiceAPI>>getRun
	Receiver: a DIWebServiceAPI
	Arguments and temporary variables: 
		in: 	'/home/otruffer/dicto/bin/analysis/full-test/dicto.rules'
		input: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = PhpCl...etc...
		rulesFailed: 	nil
		rulesTotal: 	nil
	Receiver's instance variables: 
		request: 	nil
		response: 	nil
		variables: 	nil
		delegate: 	nil
		principal: 	nil
		credentials: 	nil


BlockClosure>>on:do:
	Receiver: [ DIDicto new dictoAll: input ]
	Arguments and temporary variables: 
		exception: 	DIException
		handlerAction: 	[ :ex | ^ self error: ex description ]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	DIWebServiceAPI>>getRun
		startpc: 	138
		numArgs: 	0


DIWebServiceAPI>>getRun
	Receiver: a DIWebServiceAPI
	Arguments and temporary variables: 
		in: 	'/home/otruffer/dicto/bin/analysis/full-test/dicto.rules'
		input: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = PhpCl...etc...
		rulesFailed: 	nil
		rulesTotal: 	nil
	Receiver's instance variables: 
		request: 	nil
		response: 	nil
		variables: 	nil
		delegate: 	nil
		principal: 	nil
		credentials: 	nil


DIWebServiceHandler>>post
	Receiver: a DIWebServiceHandler
	Arguments and temporary variables: 
		api: 	a DIWebServiceAPI
	Receiver's instance variables: 
		request: 	a ZnRequest(POST /full-test/run)
		response: 	nil
		variables: 	an OrderedCollection('full-test' 'run')
		delegate: 	a ZnJSONRestServerDelegate
		principal: 	nil
		credentials: 	nil
		dicto: 	a DIDicto


DIWebServiceHandler(ZnRestCall)>>execute
	Receiver: a DIWebServiceHandler
	Arguments and temporary variables: 

	Receiver's instance variables: 
		request: 	a ZnRequest(POST /full-test/run)
		response: 	nil
		variables: 	an OrderedCollection('full-test' 'run')
		delegate: 	a ZnJSONRestServerDelegate
		principal: 	nil
		credentials: 	nil
		dicto: 	a DIDicto


[ call execute ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


BlockClosure>>on:do:
	Receiver: [ call execute ]
	Arguments and temporary variables: 
		exception: 	ZnRestCallUnauthorized
		handlerAction: 	[ :exception | self unauthorized: exception request ]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
		startpc: 	38
		numArgs: 	0


ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


[ self execute: call ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /full-test/run)
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


BlockClosure>>on:do:
	Receiver: [ self execute: call ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :exception | 
request server debugMode
	ifTrue: [ exception pa...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
		startpc: 	99
		numArgs: 	0


ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /full-test/run)
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ :delegate | delegate handleRequest: request ] ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /full-test/run)
		delegate: 	a ZnJSONRestServerDelegate
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateRequest:do:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /full-test/run)
		block: 	[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ ...etc...
		authenticator: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /full-test/run)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream)


[ self authenticateAndDelegateRequest: request ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /full-test/run)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream)


BlockClosure>>on:do:
	Receiver: [ self authenticateAndDelegateRequest: request ]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :exception | 
self debugMode
	ifTrue: [ exception pass ]
	ifFa...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequ...etc...
		startpc: 	58
		numArgs: 	0


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /full-test/run)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /full-test/run)
		response: 	nil
		initialMilliseconds: 	15355614
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeOneRequestResponseOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		stream: 	a ZdcSocketStream
		request: 	a ZnRequest(POST /full-test/run)
		response: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream)



--- The full stack ---
NeoJSONReader>>error:
NeoJSONReader>>parseValue
NeoJSONReader>>next
NeoJSONReader class>>fromString:
DIPhpModel>>_loadPhpModel
DIPhpModel>>model
DIVarPhpClass>>allElements
DIVarPhpClass(DIVar)>>elements
DISimpleRule>>subjectElements
printRulesEntityRelationship: someRules
	| res processedPredicates |
	res := ''.
	processedPredicates := Set new.
	someRules
		do: [ :rule | 
			| predicateSelector subjectElements argumentElements data isPredicateInv isSubjectInv |
			predicateSelector := (rule predicate nameNormalized , ':') asSymbol.
			isPredicateInv := rule hasPredicateInverted.
			isSubjectInv := rule hasSubjectInverted.
			subjectElements := rule subjectElements.
			argumentElements := rule argumentElements.
			subjectElements
				do: [ :subject | 
					argumentElements
						do: [ :argument | 
							| relId spec msgPass msgFail |
							relId := subject id , '-' , argument id.
							msgPass := subject id , '.' , rule predicate name , '(' , argument id , ')=True'.
							msgFail := subject id , '.' , rule predicate name , '(' , argument id , ')=False'.
							(processedPredicates includes: relId)
								ifFalse: [ 
									data := {(#subject -> subject value).
									(#argument -> argument value).
									(#ruleId -> rule id).
									(#propertyId -> relId).
									(#msgPass -> msgPass).
									(#msgFail -> msgFail)} asDictionary.
									spec := self perform: predicateSelector withArguments: {data}.
									spec := spec
										dictoReplace:
											{('$subject' -> subject value).
											('$argument' -> argument value).
											('$ruleId' -> rule id).
											('$propertyId' -> relId).
											('$msgPass' -> msgPass).
											('$msgFail' -> msgFail)}.
									res := res , spec ].	"avoid duplicate predicate evaluations"
							processedPredicates add: relId ] ] ].
	^ res in DIPhpDependencies(DIAdapter)>>printRulesEntityRelationship:
DICollectionRule(OrderedCollection)>>do:
DIPhpDependencies(DIAdapter)>>printRulesEntityRelationship:
DIPhpDependencies(DIAdapter)>>printRules
DIPhpDependencies>>testInput
DITestGroup>>build
[ :testGroup | testGroup build ] in DIDicto>>dictoBuild:
Array(SequenceableCollection)>>do:
DIDicto>>dictoBuild:
DIDicto>>dictoRun:
DIDicto>>dictoAll:
[ DIDicto new dictoAll: input ] in DIWebServiceAPI>>getRun
BlockClosure>>on:do:
DIWebServiceAPI>>getRun
DIWebServiceHandler>>post
DIWebServiceHandler(ZnRestCall)>>execute
[ call execute ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
BlockClosure>>on:do:
ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
[ self execute: call ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
BlockClosure>>on:do:
ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ :delegate | delegate handleRequest: request ] ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateRequest:do:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
[ self authenticateAndDelegateRequest: request ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
BlockClosure>>on:do:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequest:
ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeOneRequestResponseOn:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ self executeOneRequestResponseOn: stream ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
[ 
p psValueAt: index put: anObject.
aBlock value ] in ZnCurrentServer(DynamicVariable)>>value:during:
BlockClosure>>ensure:
ZnCurrentServer(DynamicVariable)>>value:during:
ZnCurrentServer class(DynamicVariable class)>>value:during:
ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
[ self executeRequestResponseLoopOn: stream ] in [ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ] in [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
BlockClosure>>ensure:
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ] in [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
BlockClosure>>ifCurtailed:
[ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
NeoJSONParseError: invalid input: nil
18 February 2015 3:47:39.111326 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
NBCogit NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
https://github.com/pharo-project/pharo-vm.git Commit: 4a0d556150d478ff2de3c9624d2f18e6eaa3fa5c Date: 2014-12-18 18:42:53 +0100 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14893

Image: Pharo3.0 [Latest update: #30863]

NeoJSONReader>>error:
	Receiver: a NeoJSONReader
	Arguments and temporary variables: 
		text: 	'invalid input: nil'
	Receiver's instance variables: 
		mappings: 	nil
		readStream: 	a ReadStream
		stringStream: 	nil
		listClass: 	nil
		mapClass: 	nil
		propertyNamesAsSymbols: 	false


NeoJSONReader>>parseValue
	Receiver: a NeoJSONReader
	Arguments and temporary variables: 
		char: 	nil
	Receiver's instance variables: 
		mappings: 	nil
		readStream: 	a ReadStream
		stringStream: 	nil
		listClass: 	nil
		mapClass: 	nil
		propertyNamesAsSymbols: 	false


NeoJSONReader>>next
	Receiver: a NeoJSONReader
	Arguments and temporary variables: 

	Receiver's instance variables: 
		mappings: 	nil
		readStream: 	a ReadStream
		stringStream: 	nil
		listClass: 	nil
		mapClass: 	nil
		propertyNamesAsSymbols: 	false


NeoJSONReader class>>fromString:
	Receiver: NeoJSONReader
	Arguments and temporary variables: 
		string: 	''
	Receiver's instance variables: 
		superclass: 	NeoJSONMapper
		methodDict: 	a MethodDictionary(#atEnd->NeoJSONReader>>#atEnd #close->NeoJSONRea...etc...
		format: 	142
		layout: 	a FixedLayout
		instanceVariables: 	#(#readStream #stringStream #listClass #mapClass #propertyNa...etc...
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#NeoJSONReader
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Neo-JSON-Core'
		traitComposition: 	{}
		localSelectors: 	nil


DIPhpModel>>_loadPhpModel
	Receiver: a DIPhpModel
	Arguments and temporary variables: 

	Receiver's instance variables: 
		defRules: 	a DICollectionRule()
		defVars: 	a DICollectionVar(SYSTEM)
		analysisID: 	'1424270859'
		additionalProperties: 	a Dictionary()
		ruleCounter: 	0
		varCounter: 	0
		defVarElements: 	a DICollectionVarElements()
		defVarInvertedElements: 	a DICollectionVarElements()
		model: 	nil


DIPhpModel>>model
	Receiver: a DIPhpModel
	Arguments and temporary variables: 

	Receiver's instance variables: 
		defRules: 	a DICollectionRule()
		defVars: 	a DICollectionVar(SYSTEM)
		analysisID: 	'1424270859'
		additionalProperties: 	a Dictionary()
		ruleCounter: 	0
		varCounter: 	0
		defVarElements: 	a DICollectionVarElements()
		defVarInvertedElements: 	a DICollectionVarElements()
		model: 	nil


DIVarPhpClass>>allElements
	Receiver: RuleResult
	Arguments and temporary variables: 

	Receiver's instance variables: 
		isFirst: 	false
		dslText: 	'RuleResult=PhpClass with name:"Dicto\\RuleResult"'
		type: 	'PhpClass'
		id: 	1
		entity: 	nil
		name: 	'RuleResult'
		specifiers: 	an OrderedCollection(name=Dicto\\RuleResult)
		isInverted: 	false
		elements: 	a DICollectionVarElements()
		invertedElements: 	a DICollectionVarElements()


DIVarPhpClass(DIVar)>>elements
	Receiver: RuleResult
	Arguments and temporary variables: 
		valid: 	nil
	Receiver's instance variables: 
		isFirst: 	false
		dslText: 	'RuleResult=PhpClass with name:"Dicto\\RuleResult"'
		type: 	'PhpClass'
		id: 	1
		entity: 	nil
		name: 	'RuleResult'
		specifiers: 	an OrderedCollection(name=Dicto\\RuleResult)
		isInverted: 	false
		elements: 	a DICollectionVarElements()
		invertedElements: 	a DICollectionVarElements()


DISimpleRule>>subjectElements
	Receiver: RuleResult cannot depend on DictoTalker
	Arguments and temporary variables: 
		subjectElements: 	nil
	Receiver's instance variables: 
		isFirst: 	nil
		dslText: 	'RuleResult cannot depend on DictoTalker'
		type: 	#cannot
		id: 	1001
		entity: 	nil
		subjects: 	an Array(RuleResult)
		predicates: 	an Array(depend on DictoTalker)
		subRules: 	nil
		candidateAdapters: 	a SortedCollection(DIPhpDependencies)
		chosenAdapter: 	DIPhpDependencies
		hasFailed: 	false
		failureMessage: 	''
		failingPredicates: 	a Set()
		hasSubjectInverted: 	false
		hasPredicateInverted: 	false


printRulesEntityRelationship: someRules
	| res processedPredicates |
	res := ''.
	processedPredicates := Set new.
	someRules
		do: [ :rule | 
			| predicateSelector subjectElements argumentElements data isPredicateInv isSubjectInv |
			predicateSelector := (rule predicate nameNormalized , ':') asSymbol.
			isPredicateInv := rule hasPredicateInverted.
			isSubjectInv := rule hasSubjectInverted.
			subjectElements := rule subjectElements.
			argumentElements := rule argumentElements.
			subjectElements
				do: [ :subject | 
					argumentElements
						do: [ :argument | 
							| relId spec msgPass msgFail |
							relId := subject id , '-' , argument id.
							msgPass := subject id , '.' , rule predicate name , '(' , argument id , ')=True'.
							msgFail := subject id , '.' , rule predicate name , '(' , argument id , ')=False'.
							(processedPredicates includes: relId)
								ifFalse: [ 
									data := {(#subject -> subject value).
									(#argument -> argument value).
									(#ruleId -> rule id).
									(#propertyId -> relId).
									(#msgPass -> msgPass).
									(#msgFail -> msgFail)} asDictionary.
									spec := self perform: predicateSelector withArguments: {data}.
									spec := spec
										dictoReplace:
											{('$subject' -> subject value).
											('$argument' -> argument value).
											('$ruleId' -> rule id).
											('$propertyId' -> relId).
											('$msgPass' -> msgPass).
											('$msgFail' -> msgFail)}.
									res := res , spec ].	"avoid duplicate predicate evaluations"
							processedPredicates add: relId ] ] ].
	^ res in DIPhpDependencies(DIAdapter)>>printRulesEntityRelationship:
	Receiver: a DIPhpDependencies
	Arguments and temporary variables: 
		someRules: 	a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalk...etc...
		processedPredicates: 	a Set()
		data: 	nil
		res: 	''
		rule: 	RuleResult cannot depend on DictoTalker
		predicateSelector: 	#dependOn:
		subjectElements: 	nil
		argumentElements: 	nil
		isPredicateInv: 	false
		isSubjectInv: 	false
	Receiver's instance variables: 
		output: 	''
		commandOutput: 	''
		NEWLINE: 	'
'
		rules: 	a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalker m...etc...
		varSynonyms: 	nil
		sessionId: 	'1424270859'
		TIMESTAMP: 	'1424270859'
		TOOLNAME: 	'DIPhpDependencies'
		PROJECTROOT: 	'/home/otruffer/DictoCLI/'
		PROJECTSRC: 	'./'
		PROJECTBIN: 	'./'
		RESULTFILE: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/full-test/142427...etc...
		TESTFILE: 	nil
		testInputFileExt: 	'.st'
		SYSTEM: 	SYSTEM


DICollectionRule(OrderedCollection)>>do:
	Receiver: a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalker must depend on Rule...etc...
	Arguments and temporary variables: 
		aBlock: 	printRulesEntityRelationship: someRules
	| res processedPredicates |
	r...etc...
		index: 	1
	Receiver's instance variables: 
		array: 	an Array(RuleResult cannot depend on DictoTalker DictoTalker must depend...etc...
		firstIndex: 	1
		lastIndex: 	3
		elements: 	nil
		elements: 	nil


DIPhpDependencies(DIAdapter)>>printRulesEntityRelationship:
	Receiver: a DIPhpDependencies
	Arguments and temporary variables: 
		res: 	''
		someRules: 	a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalk...etc...
		processedPredicates: 	a Set()
	Receiver's instance variables: 
		output: 	''
		commandOutput: 	''
		NEWLINE: 	'
'
		rules: 	a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalker m...etc...
		varSynonyms: 	nil
		sessionId: 	'1424270859'
		TIMESTAMP: 	'1424270859'
		TOOLNAME: 	'DIPhpDependencies'
		PROJECTROOT: 	'/home/otruffer/DictoCLI/'
		PROJECTSRC: 	'./'
		PROJECTBIN: 	'./'
		RESULTFILE: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/full-test/142427...etc...
		TESTFILE: 	nil
		testInputFileExt: 	'.st'
		SYSTEM: 	SYSTEM


DIPhpDependencies(DIAdapter)>>printRules
	Receiver: a DIPhpDependencies
	Arguments and temporary variables: 
		res: 	nil
		allRules: 	a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalke...etc...
	Receiver's instance variables: 
		output: 	''
		commandOutput: 	''
		NEWLINE: 	'
'
		rules: 	a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalker m...etc...
		varSynonyms: 	nil
		sessionId: 	'1424270859'
		TIMESTAMP: 	'1424270859'
		TOOLNAME: 	'DIPhpDependencies'
		PROJECTROOT: 	'/home/otruffer/DictoCLI/'
		PROJECTSRC: 	'./'
		PROJECTBIN: 	'./'
		RESULTFILE: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/full-test/142427...etc...
		TESTFILE: 	nil
		testInputFileExt: 	'.st'
		SYSTEM: 	SYSTEM


DIPhpDependencies>>testInput
	Receiver: a DIPhpDependencies
	Arguments and temporary variables: 
		strRules: 	nil
	Receiver's instance variables: 
		output: 	''
		commandOutput: 	''
		NEWLINE: 	'
'
		rules: 	a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalker m...etc...
		varSynonyms: 	nil
		sessionId: 	'1424270859'
		TIMESTAMP: 	'1424270859'
		TOOLNAME: 	'DIPhpDependencies'
		PROJECTROOT: 	'/home/otruffer/DictoCLI/'
		PROJECTSRC: 	'./'
		PROJECTBIN: 	'./'
		RESULTFILE: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/full-test/142427...etc...
		TESTFILE: 	nil
		testInputFileExt: 	'.st'
		SYSTEM: 	SYSTEM


DITestGroup>>build
	Receiver: a DITestGroup
	Arguments and temporary variables: 

	Receiver's instance variables: 
		rules: 	an OrderedCollection(RuleResult cannot depend on DictoTalker DictoTalker...etc...
		adapter: 	a DIPhpDependencies
		runCommandText: 	nil
		testSpecification: 	nil
		adapterID: 	'DIPhpDependencies'
		resultFile: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/full-test/142427...etc...
		specificationFile: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/full-test...etc...
		commandFile: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/full-test/14242...etc...


[ :testGroup | testGroup build ] in DIDicto>>dictoBuild:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = ...etc...
		adapterTestGroups: 	a Dictionary(DIGrepFileContent->a DITestGroup DIJMeterLoadTe...etc...
		testGroup: 	a DITestGroup
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424270859'
		singleShotTask: 	false


Array(SequenceableCollection)>>do:
	Receiver: an Array(a DITestGroup a DITestGroup a DITestGroup a DITestGroup a DITestGroup)
	Arguments and temporary variables: 
		aBlock: 	[ :testGroup | testGroup build ]
		index: 	4
	Receiver's instance variables: 
an Array(a DITestGroup a DITestGroup a DITestGroup a DITestGroup a DITestGroup)

DIDicto>>dictoBuild:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = ...etc...
		adapterTestGroups: 	a Dictionary(DIGrepFileContent->a DITestGroup DIJMeterLoadTe...etc...
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424270859'
		singleShotTask: 	false


DIDicto>>dictoRun:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = ...etc...
		adapterTestGroups: 	nil
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424270859'
		singleShotTask: 	false


DIDicto>>dictoAll:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = ...etc...
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424270859'
		singleShotTask: 	false


[ DIDicto new dictoAll: input ] in DIWebServiceAPI>>getRun
	Receiver: a DIWebServiceAPI
	Arguments and temporary variables: 
		in: 	'/home/otruffer/dicto/bin/analysis/full-test/dicto.rules'
		input: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = PhpCl...etc...
		rulesFailed: 	nil
		rulesTotal: 	nil
	Receiver's instance variables: 
		request: 	nil
		response: 	nil
		variables: 	nil
		delegate: 	nil
		principal: 	nil
		credentials: 	nil


BlockClosure>>on:do:
	Receiver: [ DIDicto new dictoAll: input ]
	Arguments and temporary variables: 
		exception: 	DIException
		handlerAction: 	[ :ex | ^ self error: ex description ]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	DIWebServiceAPI>>getRun
		startpc: 	138
		numArgs: 	0


DIWebServiceAPI>>getRun
	Receiver: a DIWebServiceAPI
	Arguments and temporary variables: 
		in: 	'/home/otruffer/dicto/bin/analysis/full-test/dicto.rules'
		input: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = PhpCl...etc...
		rulesFailed: 	nil
		rulesTotal: 	nil
	Receiver's instance variables: 
		request: 	nil
		response: 	nil
		variables: 	nil
		delegate: 	nil
		principal: 	nil
		credentials: 	nil


DIWebServiceHandler>>post
	Receiver: a DIWebServiceHandler
	Arguments and temporary variables: 
		api: 	a DIWebServiceAPI
	Receiver's instance variables: 
		request: 	a ZnRequest(POST /full-test/run)
		response: 	nil
		variables: 	an OrderedCollection('full-test' 'run')
		delegate: 	a ZnJSONRestServerDelegate
		principal: 	nil
		credentials: 	nil
		dicto: 	a DIDicto


DIWebServiceHandler(ZnRestCall)>>execute
	Receiver: a DIWebServiceHandler
	Arguments and temporary variables: 

	Receiver's instance variables: 
		request: 	a ZnRequest(POST /full-test/run)
		response: 	nil
		variables: 	an OrderedCollection('full-test' 'run')
		delegate: 	a ZnJSONRestServerDelegate
		principal: 	nil
		credentials: 	nil
		dicto: 	a DIDicto


[ call execute ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


BlockClosure>>on:do:
	Receiver: [ call execute ]
	Arguments and temporary variables: 
		exception: 	ZnRestCallUnauthorized
		handlerAction: 	[ :exception | self unauthorized: exception request ]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
		startpc: 	38
		numArgs: 	0


ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


[ self execute: call ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /full-test/run)
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


BlockClosure>>on:do:
	Receiver: [ self execute: call ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :exception | 
request server debugMode
	ifTrue: [ exception pa...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
		startpc: 	99
		numArgs: 	0


ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /full-test/run)
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ :delegate | delegate handleRequest: request ] ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /full-test/run)
		delegate: 	a ZnJSONRestServerDelegate
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateRequest:do:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /full-test/run)
		block: 	[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ ...etc...
		authenticator: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /full-test/run)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream)


[ self authenticateAndDelegateRequest: request ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /full-test/run)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream)


BlockClosure>>on:do:
	Receiver: [ self authenticateAndDelegateRequest: request ]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :exception | 
self debugMode
	ifTrue: [ exception pass ]
	ifFa...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequ...etc...
		startpc: 	58
		numArgs: 	0


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /full-test/run)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /full-test/run)
		response: 	nil
		initialMilliseconds: 	15369463
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeOneRequestResponseOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		stream: 	a ZdcSocketStream
		request: 	a ZnRequest(POST /full-test/run)
		response: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream)



--- The full stack ---
NeoJSONReader>>error:
NeoJSONReader>>parseValue
NeoJSONReader>>next
NeoJSONReader class>>fromString:
DIPhpModel>>_loadPhpModel
DIPhpModel>>model
DIVarPhpClass>>allElements
DIVarPhpClass(DIVar)>>elements
DISimpleRule>>subjectElements
printRulesEntityRelationship: someRules
	| res processedPredicates |
	res := ''.
	processedPredicates := Set new.
	someRules
		do: [ :rule | 
			| predicateSelector subjectElements argumentElements data isPredicateInv isSubjectInv |
			predicateSelector := (rule predicate nameNormalized , ':') asSymbol.
			isPredicateInv := rule hasPredicateInverted.
			isSubjectInv := rule hasSubjectInverted.
			subjectElements := rule subjectElements.
			argumentElements := rule argumentElements.
			subjectElements
				do: [ :subject | 
					argumentElements
						do: [ :argument | 
							| relId spec msgPass msgFail |
							relId := subject id , '-' , argument id.
							msgPass := subject id , '.' , rule predicate name , '(' , argument id , ')=True'.
							msgFail := subject id , '.' , rule predicate name , '(' , argument id , ')=False'.
							(processedPredicates includes: relId)
								ifFalse: [ 
									data := {(#subject -> subject value).
									(#argument -> argument value).
									(#ruleId -> rule id).
									(#propertyId -> relId).
									(#msgPass -> msgPass).
									(#msgFail -> msgFail)} asDictionary.
									spec := self perform: predicateSelector withArguments: {data}.
									spec := spec
										dictoReplace:
											{('$subject' -> subject value).
											('$argument' -> argument value).
											('$ruleId' -> rule id).
											('$propertyId' -> relId).
											('$msgPass' -> msgPass).
											('$msgFail' -> msgFail)}.
									res := res , spec ].	"avoid duplicate predicate evaluations"
							processedPredicates add: relId ] ] ].
	^ res in DIPhpDependencies(DIAdapter)>>printRulesEntityRelationship:
DICollectionRule(OrderedCollection)>>do:
DIPhpDependencies(DIAdapter)>>printRulesEntityRelationship:
DIPhpDependencies(DIAdapter)>>printRules
DIPhpDependencies>>testInput
DITestGroup>>build
[ :testGroup | testGroup build ] in DIDicto>>dictoBuild:
Array(SequenceableCollection)>>do:
DIDicto>>dictoBuild:
DIDicto>>dictoRun:
DIDicto>>dictoAll:
[ DIDicto new dictoAll: input ] in DIWebServiceAPI>>getRun
BlockClosure>>on:do:
DIWebServiceAPI>>getRun
DIWebServiceHandler>>post
DIWebServiceHandler(ZnRestCall)>>execute
[ call execute ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
BlockClosure>>on:do:
ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
[ self execute: call ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
BlockClosure>>on:do:
ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ :delegate | delegate handleRequest: request ] ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateRequest:do:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
[ self authenticateAndDelegateRequest: request ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
BlockClosure>>on:do:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequest:
ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeOneRequestResponseOn:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ self executeOneRequestResponseOn: stream ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
[ 
p psValueAt: index put: anObject.
aBlock value ] in ZnCurrentServer(DynamicVariable)>>value:during:
BlockClosure>>ensure:
ZnCurrentServer(DynamicVariable)>>value:during:
ZnCurrentServer class(DynamicVariable class)>>value:during:
ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
[ self executeRequestResponseLoopOn: stream ] in [ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ] in [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
BlockClosure>>ensure:
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ] in [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
BlockClosure>>ifCurtailed:
[ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
NeoJSONParseError: invalid input: nil
18 February 2015 3:47:51.816292 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
NBCogit NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
https://github.com/pharo-project/pharo-vm.git Commit: 4a0d556150d478ff2de3c9624d2f18e6eaa3fa5c Date: 2014-12-18 18:42:53 +0100 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14893

Image: Pharo3.0 [Latest update: #30863]

NeoJSONReader>>error:
	Receiver: a NeoJSONReader
	Arguments and temporary variables: 
		text: 	'invalid input: nil'
	Receiver's instance variables: 
		mappings: 	nil
		readStream: 	a ReadStream
		stringStream: 	nil
		listClass: 	nil
		mapClass: 	nil
		propertyNamesAsSymbols: 	false


NeoJSONReader>>parseValue
	Receiver: a NeoJSONReader
	Arguments and temporary variables: 
		char: 	nil
	Receiver's instance variables: 
		mappings: 	nil
		readStream: 	a ReadStream
		stringStream: 	nil
		listClass: 	nil
		mapClass: 	nil
		propertyNamesAsSymbols: 	false


NeoJSONReader>>next
	Receiver: a NeoJSONReader
	Arguments and temporary variables: 

	Receiver's instance variables: 
		mappings: 	nil
		readStream: 	a ReadStream
		stringStream: 	nil
		listClass: 	nil
		mapClass: 	nil
		propertyNamesAsSymbols: 	false


NeoJSONReader class>>fromString:
	Receiver: NeoJSONReader
	Arguments and temporary variables: 
		string: 	''
	Receiver's instance variables: 
		superclass: 	NeoJSONMapper
		methodDict: 	a MethodDictionary(#atEnd->NeoJSONReader>>#atEnd #close->NeoJSONRea...etc...
		format: 	142
		layout: 	a FixedLayout
		instanceVariables: 	#(#readStream #stringStream #listClass #mapClass #propertyNa...etc...
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#NeoJSONReader
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Neo-JSON-Core'
		traitComposition: 	{}
		localSelectors: 	nil


DIPhpModel>>_loadPhpModel
	Receiver: a DIPhpModel
	Arguments and temporary variables: 

	Receiver's instance variables: 
		defRules: 	a DICollectionRule()
		defVars: 	a DICollectionVar(SYSTEM)
		analysisID: 	'1424270872'
		additionalProperties: 	a Dictionary()
		ruleCounter: 	0
		varCounter: 	0
		defVarElements: 	a DICollectionVarElements()
		defVarInvertedElements: 	a DICollectionVarElements()
		model: 	nil


DIPhpModel>>model
	Receiver: a DIPhpModel
	Arguments and temporary variables: 

	Receiver's instance variables: 
		defRules: 	a DICollectionRule()
		defVars: 	a DICollectionVar(SYSTEM)
		analysisID: 	'1424270872'
		additionalProperties: 	a Dictionary()
		ruleCounter: 	0
		varCounter: 	0
		defVarElements: 	a DICollectionVarElements()
		defVarInvertedElements: 	a DICollectionVarElements()
		model: 	nil


DIVarPhpClass>>allElements
	Receiver: RuleResult
	Arguments and temporary variables: 

	Receiver's instance variables: 
		isFirst: 	false
		dslText: 	'RuleResult=PhpClass with name:"Dicto\\RuleResult"'
		type: 	'PhpClass'
		id: 	1
		entity: 	nil
		name: 	'RuleResult'
		specifiers: 	an OrderedCollection(name=Dicto\\RuleResult)
		isInverted: 	false
		elements: 	a DICollectionVarElements()
		invertedElements: 	a DICollectionVarElements()


DIVarPhpClass(DIVar)>>elements
	Receiver: RuleResult
	Arguments and temporary variables: 
		valid: 	nil
	Receiver's instance variables: 
		isFirst: 	false
		dslText: 	'RuleResult=PhpClass with name:"Dicto\\RuleResult"'
		type: 	'PhpClass'
		id: 	1
		entity: 	nil
		name: 	'RuleResult'
		specifiers: 	an OrderedCollection(name=Dicto\\RuleResult)
		isInverted: 	false
		elements: 	a DICollectionVarElements()
		invertedElements: 	a DICollectionVarElements()


DISimpleRule>>subjectElements
	Receiver: RuleResult cannot depend on DictoTalker
	Arguments and temporary variables: 
		subjectElements: 	nil
	Receiver's instance variables: 
		isFirst: 	nil
		dslText: 	'RuleResult cannot depend on DictoTalker'
		type: 	#cannot
		id: 	1001
		entity: 	nil
		subjects: 	an Array(RuleResult)
		predicates: 	an Array(depend on DictoTalker)
		subRules: 	nil
		candidateAdapters: 	a SortedCollection(DIPhpDependencies)
		chosenAdapter: 	DIPhpDependencies
		hasFailed: 	false
		failureMessage: 	''
		failingPredicates: 	a Set()
		hasSubjectInverted: 	false
		hasPredicateInverted: 	false


printRulesEntityRelationship: someRules
	| res processedPredicates |
	res := ''.
	processedPredicates := Set new.
	someRules
		do: [ :rule | 
			| predicateSelector subjectElements argumentElements data isPredicateInv isSubjectInv |
			predicateSelector := (rule predicate nameNormalized , ':') asSymbol.
			isPredicateInv := rule hasPredicateInverted.
			isSubjectInv := rule hasSubjectInverted.
			subjectElements := rule subjectElements.
			argumentElements := rule argumentElements.
			subjectElements
				do: [ :subject | 
					argumentElements
						do: [ :argument | 
							| relId spec msgPass msgFail |
							relId := subject id , '-' , argument id.
							msgPass := subject id , '.' , rule predicate name , '(' , argument id , ')=True'.
							msgFail := subject id , '.' , rule predicate name , '(' , argument id , ')=False'.
							(processedPredicates includes: relId)
								ifFalse: [ 
									data := {(#subject -> subject value).
									(#argument -> argument value).
									(#ruleId -> rule id).
									(#propertyId -> relId).
									(#msgPass -> msgPass).
									(#msgFail -> msgFail)} asDictionary.
									spec := self perform: predicateSelector withArguments: {data}.
									spec := spec
										dictoReplace:
											{('$subject' -> subject value).
											('$argument' -> argument value).
											('$ruleId' -> rule id).
											('$propertyId' -> relId).
											('$msgPass' -> msgPass).
											('$msgFail' -> msgFail)}.
									res := res , spec ].	"avoid duplicate predicate evaluations"
							processedPredicates add: relId ] ] ].
	^ res in DIPhpDependencies(DIAdapter)>>printRulesEntityRelationship:
	Receiver: a DIPhpDependencies
	Arguments and temporary variables: 
		someRules: 	a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalk...etc...
		processedPredicates: 	a Set()
		data: 	nil
		res: 	''
		rule: 	RuleResult cannot depend on DictoTalker
		predicateSelector: 	#dependOn:
		subjectElements: 	nil
		argumentElements: 	nil
		isPredicateInv: 	false
		isSubjectInv: 	false
	Receiver's instance variables: 
		output: 	''
		commandOutput: 	''
		NEWLINE: 	'
'
		rules: 	a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalker m...etc...
		varSynonyms: 	nil
		sessionId: 	'1424270872'
		TIMESTAMP: 	'1424270872'
		TOOLNAME: 	'DIPhpDependencies'
		PROJECTROOT: 	'/home/otruffer/DictoCLI/'
		PROJECTSRC: 	'./'
		PROJECTBIN: 	'./'
		RESULTFILE: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/full-test/142427...etc...
		TESTFILE: 	nil
		testInputFileExt: 	'.st'
		SYSTEM: 	SYSTEM


DICollectionRule(OrderedCollection)>>do:
	Receiver: a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalker must depend on Rule...etc...
	Arguments and temporary variables: 
		aBlock: 	printRulesEntityRelationship: someRules
	| res processedPredicates |
	r...etc...
		index: 	1
	Receiver's instance variables: 
		array: 	an Array(RuleResult cannot depend on DictoTalker DictoTalker must depend...etc...
		firstIndex: 	1
		lastIndex: 	3
		elements: 	nil
		elements: 	nil


DIPhpDependencies(DIAdapter)>>printRulesEntityRelationship:
	Receiver: a DIPhpDependencies
	Arguments and temporary variables: 
		res: 	''
		someRules: 	a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalk...etc...
		processedPredicates: 	a Set()
	Receiver's instance variables: 
		output: 	''
		commandOutput: 	''
		NEWLINE: 	'
'
		rules: 	a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalker m...etc...
		varSynonyms: 	nil
		sessionId: 	'1424270872'
		TIMESTAMP: 	'1424270872'
		TOOLNAME: 	'DIPhpDependencies'
		PROJECTROOT: 	'/home/otruffer/DictoCLI/'
		PROJECTSRC: 	'./'
		PROJECTBIN: 	'./'
		RESULTFILE: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/full-test/142427...etc...
		TESTFILE: 	nil
		testInputFileExt: 	'.st'
		SYSTEM: 	SYSTEM


DIPhpDependencies(DIAdapter)>>printRules
	Receiver: a DIPhpDependencies
	Arguments and temporary variables: 
		res: 	nil
		allRules: 	a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalke...etc...
	Receiver's instance variables: 
		output: 	''
		commandOutput: 	''
		NEWLINE: 	'
'
		rules: 	a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalker m...etc...
		varSynonyms: 	nil
		sessionId: 	'1424270872'
		TIMESTAMP: 	'1424270872'
		TOOLNAME: 	'DIPhpDependencies'
		PROJECTROOT: 	'/home/otruffer/DictoCLI/'
		PROJECTSRC: 	'./'
		PROJECTBIN: 	'./'
		RESULTFILE: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/full-test/142427...etc...
		TESTFILE: 	nil
		testInputFileExt: 	'.st'
		SYSTEM: 	SYSTEM


DIPhpDependencies>>testInput
	Receiver: a DIPhpDependencies
	Arguments and temporary variables: 
		strRules: 	nil
	Receiver's instance variables: 
		output: 	''
		commandOutput: 	''
		NEWLINE: 	'
'
		rules: 	a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalker m...etc...
		varSynonyms: 	nil
		sessionId: 	'1424270872'
		TIMESTAMP: 	'1424270872'
		TOOLNAME: 	'DIPhpDependencies'
		PROJECTROOT: 	'/home/otruffer/DictoCLI/'
		PROJECTSRC: 	'./'
		PROJECTBIN: 	'./'
		RESULTFILE: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/full-test/142427...etc...
		TESTFILE: 	nil
		testInputFileExt: 	'.st'
		SYSTEM: 	SYSTEM


DITestGroup>>build
	Receiver: a DITestGroup
	Arguments and temporary variables: 

	Receiver's instance variables: 
		rules: 	an OrderedCollection(RuleResult cannot depend on DictoTalker DictoTalker...etc...
		adapter: 	a DIPhpDependencies
		runCommandText: 	nil
		testSpecification: 	nil
		adapterID: 	'DIPhpDependencies'
		resultFile: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/full-test/142427...etc...
		specificationFile: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/full-test...etc...
		commandFile: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/full-test/14242...etc...


[ :testGroup | testGroup build ] in DIDicto>>dictoBuild:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = ...etc...
		adapterTestGroups: 	a Dictionary(DIGrepFileContent->a DITestGroup DIJMeterLoadTe...etc...
		testGroup: 	a DITestGroup
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424270872'
		singleShotTask: 	false


Array(SequenceableCollection)>>do:
	Receiver: an Array(a DITestGroup a DITestGroup a DITestGroup a DITestGroup a DITestGroup)
	Arguments and temporary variables: 
		aBlock: 	[ :testGroup | testGroup build ]
		index: 	4
	Receiver's instance variables: 
an Array(a DITestGroup a DITestGroup a DITestGroup a DITestGroup a DITestGroup)

DIDicto>>dictoBuild:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = ...etc...
		adapterTestGroups: 	a Dictionary(DIGrepFileContent->a DITestGroup DIJMeterLoadTe...etc...
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424270872'
		singleShotTask: 	false


DIDicto>>dictoRun:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = ...etc...
		adapterTestGroups: 	nil
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424270872'
		singleShotTask: 	false


DIDicto>>dictoAll:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = ...etc...
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424270872'
		singleShotTask: 	false


[ DIDicto new dictoAll: input ] in DIWebServiceAPI>>getRun
	Receiver: a DIWebServiceAPI
	Arguments and temporary variables: 
		in: 	'/home/otruffer/dicto/bin/analysis/full-test/dicto.rules'
		input: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = PhpCl...etc...
		rulesFailed: 	nil
		rulesTotal: 	nil
	Receiver's instance variables: 
		request: 	nil
		response: 	nil
		variables: 	nil
		delegate: 	nil
		principal: 	nil
		credentials: 	nil


BlockClosure>>on:do:
	Receiver: [ DIDicto new dictoAll: input ]
	Arguments and temporary variables: 
		exception: 	DIException
		handlerAction: 	[ :ex | ^ self error: ex description ]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	DIWebServiceAPI>>getRun
		startpc: 	138
		numArgs: 	0


DIWebServiceAPI>>getRun
	Receiver: a DIWebServiceAPI
	Arguments and temporary variables: 
		in: 	'/home/otruffer/dicto/bin/analysis/full-test/dicto.rules'
		input: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = PhpCl...etc...
		rulesFailed: 	nil
		rulesTotal: 	nil
	Receiver's instance variables: 
		request: 	nil
		response: 	nil
		variables: 	nil
		delegate: 	nil
		principal: 	nil
		credentials: 	nil


DIWebServiceHandler>>post
	Receiver: a DIWebServiceHandler
	Arguments and temporary variables: 
		api: 	a DIWebServiceAPI
	Receiver's instance variables: 
		request: 	a ZnRequest(POST /full-test/run)
		response: 	nil
		variables: 	an OrderedCollection('full-test' 'run')
		delegate: 	a ZnJSONRestServerDelegate
		principal: 	nil
		credentials: 	nil
		dicto: 	a DIDicto


DIWebServiceHandler(ZnRestCall)>>execute
	Receiver: a DIWebServiceHandler
	Arguments and temporary variables: 

	Receiver's instance variables: 
		request: 	a ZnRequest(POST /full-test/run)
		response: 	nil
		variables: 	an OrderedCollection('full-test' 'run')
		delegate: 	a ZnJSONRestServerDelegate
		principal: 	nil
		credentials: 	nil
		dicto: 	a DIDicto


[ call execute ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


BlockClosure>>on:do:
	Receiver: [ call execute ]
	Arguments and temporary variables: 
		exception: 	ZnRestCallUnauthorized
		handlerAction: 	[ :exception | self unauthorized: exception request ]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
		startpc: 	38
		numArgs: 	0


ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


[ self execute: call ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /full-test/run)
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


BlockClosure>>on:do:
	Receiver: [ self execute: call ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :exception | 
request server debugMode
	ifTrue: [ exception pa...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
		startpc: 	99
		numArgs: 	0


ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /full-test/run)
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ :delegate | delegate handleRequest: request ] ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /full-test/run)
		delegate: 	a ZnJSONRestServerDelegate
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateRequest:do:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /full-test/run)
		block: 	[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ ...etc...
		authenticator: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /full-test/run)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream)


[ self authenticateAndDelegateRequest: request ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /full-test/run)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream)


BlockClosure>>on:do:
	Receiver: [ self authenticateAndDelegateRequest: request ]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :exception | 
self debugMode
	ifTrue: [ exception pass ]
	ifFa...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequ...etc...
		startpc: 	58
		numArgs: 	0


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /full-test/run)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /full-test/run)
		response: 	nil
		initialMilliseconds: 	15382169
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeOneRequestResponseOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		stream: 	a ZdcSocketStream
		request: 	a ZnRequest(POST /full-test/run)
		response: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream)



--- The full stack ---
NeoJSONReader>>error:
NeoJSONReader>>parseValue
NeoJSONReader>>next
NeoJSONReader class>>fromString:
DIPhpModel>>_loadPhpModel
DIPhpModel>>model
DIVarPhpClass>>allElements
DIVarPhpClass(DIVar)>>elements
DISimpleRule>>subjectElements
printRulesEntityRelationship: someRules
	| res processedPredicates |
	res := ''.
	processedPredicates := Set new.
	someRules
		do: [ :rule | 
			| predicateSelector subjectElements argumentElements data isPredicateInv isSubjectInv |
			predicateSelector := (rule predicate nameNormalized , ':') asSymbol.
			isPredicateInv := rule hasPredicateInverted.
			isSubjectInv := rule hasSubjectInverted.
			subjectElements := rule subjectElements.
			argumentElements := rule argumentElements.
			subjectElements
				do: [ :subject | 
					argumentElements
						do: [ :argument | 
							| relId spec msgPass msgFail |
							relId := subject id , '-' , argument id.
							msgPass := subject id , '.' , rule predicate name , '(' , argument id , ')=True'.
							msgFail := subject id , '.' , rule predicate name , '(' , argument id , ')=False'.
							(processedPredicates includes: relId)
								ifFalse: [ 
									data := {(#subject -> subject value).
									(#argument -> argument value).
									(#ruleId -> rule id).
									(#propertyId -> relId).
									(#msgPass -> msgPass).
									(#msgFail -> msgFail)} asDictionary.
									spec := self perform: predicateSelector withArguments: {data}.
									spec := spec
										dictoReplace:
											{('$subject' -> subject value).
											('$argument' -> argument value).
											('$ruleId' -> rule id).
											('$propertyId' -> relId).
											('$msgPass' -> msgPass).
											('$msgFail' -> msgFail)}.
									res := res , spec ].	"avoid duplicate predicate evaluations"
							processedPredicates add: relId ] ] ].
	^ res in DIPhpDependencies(DIAdapter)>>printRulesEntityRelationship:
DICollectionRule(OrderedCollection)>>do:
DIPhpDependencies(DIAdapter)>>printRulesEntityRelationship:
DIPhpDependencies(DIAdapter)>>printRules
DIPhpDependencies>>testInput
DITestGroup>>build
[ :testGroup | testGroup build ] in DIDicto>>dictoBuild:
Array(SequenceableCollection)>>do:
DIDicto>>dictoBuild:
DIDicto>>dictoRun:
DIDicto>>dictoAll:
[ DIDicto new dictoAll: input ] in DIWebServiceAPI>>getRun
BlockClosure>>on:do:
DIWebServiceAPI>>getRun
DIWebServiceHandler>>post
DIWebServiceHandler(ZnRestCall)>>execute
[ call execute ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
BlockClosure>>on:do:
ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
[ self execute: call ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
BlockClosure>>on:do:
ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ :delegate | delegate handleRequest: request ] ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateRequest:do:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
[ self authenticateAndDelegateRequest: request ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
BlockClosure>>on:do:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequest:
ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeOneRequestResponseOn:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ self executeOneRequestResponseOn: stream ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
[ 
p psValueAt: index put: anObject.
aBlock value ] in ZnCurrentServer(DynamicVariable)>>value:during:
BlockClosure>>ensure:
ZnCurrentServer(DynamicVariable)>>value:during:
ZnCurrentServer class(DynamicVariable class)>>value:during:
ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
[ self executeRequestResponseLoopOn: stream ] in [ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ] in [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
BlockClosure>>ensure:
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ] in [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
BlockClosure>>ifCurtailed:
[ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
NeoJSONParseError: invalid input: nil
18 February 2015 3:58:23.48985 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
NBCogit NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
https://github.com/pharo-project/pharo-vm.git Commit: 4a0d556150d478ff2de3c9624d2f18e6eaa3fa5c Date: 2014-12-18 18:42:53 +0100 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14893

Image: Pharo3.0 [Latest update: #30863]

NeoJSONReader>>error:
	Receiver: a NeoJSONReader
	Arguments and temporary variables: 
		text: 	'invalid input: nil'
	Receiver's instance variables: 
		mappings: 	nil
		readStream: 	a ReadStream
		stringStream: 	nil
		listClass: 	nil
		mapClass: 	nil
		propertyNamesAsSymbols: 	false


NeoJSONReader>>parseValue
	Receiver: a NeoJSONReader
	Arguments and temporary variables: 
		char: 	nil
	Receiver's instance variables: 
		mappings: 	nil
		readStream: 	a ReadStream
		stringStream: 	nil
		listClass: 	nil
		mapClass: 	nil
		propertyNamesAsSymbols: 	false


NeoJSONReader>>next
	Receiver: a NeoJSONReader
	Arguments and temporary variables: 

	Receiver's instance variables: 
		mappings: 	nil
		readStream: 	a ReadStream
		stringStream: 	nil
		listClass: 	nil
		mapClass: 	nil
		propertyNamesAsSymbols: 	false


NeoJSONReader class>>fromString:
	Receiver: NeoJSONReader
	Arguments and temporary variables: 
		string: 	''
	Receiver's instance variables: 
		superclass: 	NeoJSONMapper
		methodDict: 	a MethodDictionary(#atEnd->NeoJSONReader>>#atEnd #close->NeoJSONRea...etc...
		format: 	142
		layout: 	a FixedLayout
		instanceVariables: 	#(#readStream #stringStream #listClass #mapClass #propertyNa...etc...
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#NeoJSONReader
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Neo-JSON-Core'
		traitComposition: 	{}
		localSelectors: 	nil


DIPhpModel>>_loadPhpModel
	Receiver: a DIPhpModel
	Arguments and temporary variables: 

	Receiver's instance variables: 
		defRules: 	a DICollectionRule()
		defVars: 	a DICollectionVar(SYSTEM)
		analysisID: 	'1424271503'
		additionalProperties: 	a Dictionary()
		ruleCounter: 	0
		varCounter: 	0
		defVarElements: 	a DICollectionVarElements()
		defVarInvertedElements: 	a DICollectionVarElements()
		model: 	nil


DIPhpModel>>model
	Receiver: a DIPhpModel
	Arguments and temporary variables: 

	Receiver's instance variables: 
		defRules: 	a DICollectionRule()
		defVars: 	a DICollectionVar(SYSTEM)
		analysisID: 	'1424271503'
		additionalProperties: 	a Dictionary()
		ruleCounter: 	0
		varCounter: 	0
		defVarElements: 	a DICollectionVarElements()
		defVarInvertedElements: 	a DICollectionVarElements()
		model: 	nil


DIVarPhpClass>>allElements
	Receiver: RuleResult
	Arguments and temporary variables: 

	Receiver's instance variables: 
		isFirst: 	false
		dslText: 	'RuleResult=PhpClass with name:"Dicto\\RuleResult"'
		type: 	'PhpClass'
		id: 	1
		entity: 	nil
		name: 	'RuleResult'
		specifiers: 	an OrderedCollection(name=Dicto\\RuleResult)
		isInverted: 	false
		elements: 	a DICollectionVarElements()
		invertedElements: 	a DICollectionVarElements()


DIVarPhpClass(DIVar)>>elements
	Receiver: RuleResult
	Arguments and temporary variables: 
		valid: 	nil
	Receiver's instance variables: 
		isFirst: 	false
		dslText: 	'RuleResult=PhpClass with name:"Dicto\\RuleResult"'
		type: 	'PhpClass'
		id: 	1
		entity: 	nil
		name: 	'RuleResult'
		specifiers: 	an OrderedCollection(name=Dicto\\RuleResult)
		isInverted: 	false
		elements: 	a DICollectionVarElements()
		invertedElements: 	a DICollectionVarElements()


DISimpleRule>>subjectElements
	Receiver: RuleResult cannot depend on DictoTalker
	Arguments and temporary variables: 
		subjectElements: 	nil
	Receiver's instance variables: 
		isFirst: 	nil
		dslText: 	'RuleResult cannot depend on DictoTalker'
		type: 	#cannot
		id: 	1001
		entity: 	nil
		subjects: 	an Array(RuleResult)
		predicates: 	an Array(depend on DictoTalker)
		subRules: 	nil
		candidateAdapters: 	a SortedCollection(DIPhpDependencies)
		chosenAdapter: 	DIPhpDependencies
		hasFailed: 	false
		failureMessage: 	''
		failingPredicates: 	a Set()
		hasSubjectInverted: 	false
		hasPredicateInverted: 	false


printRulesEntityRelationship: someRules
	| res processedPredicates |
	res := ''.
	processedPredicates := Set new.
	someRules
		do: [ :rule | 
			| predicateSelector subjectElements argumentElements data isPredicateInv isSubjectInv |
			predicateSelector := (rule predicate nameNormalized , ':') asSymbol.
			isPredicateInv := rule hasPredicateInverted.
			isSubjectInv := rule hasSubjectInverted.
			subjectElements := rule subjectElements.
			argumentElements := rule argumentElements.
			subjectElements
				do: [ :subject | 
					argumentElements
						do: [ :argument | 
							| relId spec msgPass msgFail |
							relId := subject id , '-' , argument id.
							msgPass := subject id , '.' , rule predicate name , '(' , argument id , ')=True'.
							msgFail := subject id , '.' , rule predicate name , '(' , argument id , ')=False'.
							(processedPredicates includes: relId)
								ifFalse: [ 
									data := {(#subject -> subject value).
									(#argument -> argument value).
									(#ruleId -> rule id).
									(#propertyId -> relId).
									(#msgPass -> msgPass).
									(#msgFail -> msgFail)} asDictionary.
									spec := self perform: predicateSelector withArguments: {data}.
									spec := spec
										dictoReplace:
											{('$subject' -> subject value).
											('$argument' -> argument value).
											('$ruleId' -> rule id).
											('$propertyId' -> relId).
											('$msgPass' -> msgPass).
											('$msgFail' -> msgFail)}.
									res := res , spec ].	"avoid duplicate predicate evaluations"
							processedPredicates add: relId ] ] ].
	^ res in DIPhpDependencies(DIAdapter)>>printRulesEntityRelationship:
	Receiver: a DIPhpDependencies
	Arguments and temporary variables: 
		someRules: 	a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalk...etc...
		processedPredicates: 	a Set()
		data: 	nil
		res: 	''
		rule: 	RuleResult cannot depend on DictoTalker
		predicateSelector: 	#dependOn:
		subjectElements: 	nil
		argumentElements: 	nil
		isPredicateInv: 	false
		isSubjectInv: 	false
	Receiver's instance variables: 
		output: 	''
		commandOutput: 	''
		NEWLINE: 	'
'
		rules: 	a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalker m...etc...
		varSynonyms: 	nil
		sessionId: 	'1424271503'
		TIMESTAMP: 	'1424271503'
		TOOLNAME: 	'DIPhpDependencies'
		PROJECTROOT: 	'/home/otruffer/DictoCLI/'
		PROJECTSRC: 	'./'
		PROJECTBIN: 	'./'
		RESULTFILE: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/full-test/142427...etc...
		TESTFILE: 	nil
		testInputFileExt: 	'.st'
		SYSTEM: 	SYSTEM


DICollectionRule(OrderedCollection)>>do:
	Receiver: a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalker must depend on Rule...etc...
	Arguments and temporary variables: 
		aBlock: 	printRulesEntityRelationship: someRules
	| res processedPredicates |
	r...etc...
		index: 	1
	Receiver's instance variables: 
		array: 	an Array(RuleResult cannot depend on DictoTalker DictoTalker must depend...etc...
		firstIndex: 	1
		lastIndex: 	3
		elements: 	nil
		elements: 	nil


DIPhpDependencies(DIAdapter)>>printRulesEntityRelationship:
	Receiver: a DIPhpDependencies
	Arguments and temporary variables: 
		res: 	''
		someRules: 	a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalk...etc...
		processedPredicates: 	a Set()
	Receiver's instance variables: 
		output: 	''
		commandOutput: 	''
		NEWLINE: 	'
'
		rules: 	a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalker m...etc...
		varSynonyms: 	nil
		sessionId: 	'1424271503'
		TIMESTAMP: 	'1424271503'
		TOOLNAME: 	'DIPhpDependencies'
		PROJECTROOT: 	'/home/otruffer/DictoCLI/'
		PROJECTSRC: 	'./'
		PROJECTBIN: 	'./'
		RESULTFILE: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/full-test/142427...etc...
		TESTFILE: 	nil
		testInputFileExt: 	'.st'
		SYSTEM: 	SYSTEM


DIPhpDependencies(DIAdapter)>>printRules
	Receiver: a DIPhpDependencies
	Arguments and temporary variables: 
		res: 	nil
		allRules: 	a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalke...etc...
	Receiver's instance variables: 
		output: 	''
		commandOutput: 	''
		NEWLINE: 	'
'
		rules: 	a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalker m...etc...
		varSynonyms: 	nil
		sessionId: 	'1424271503'
		TIMESTAMP: 	'1424271503'
		TOOLNAME: 	'DIPhpDependencies'
		PROJECTROOT: 	'/home/otruffer/DictoCLI/'
		PROJECTSRC: 	'./'
		PROJECTBIN: 	'./'
		RESULTFILE: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/full-test/142427...etc...
		TESTFILE: 	nil
		testInputFileExt: 	'.st'
		SYSTEM: 	SYSTEM


DIPhpDependencies>>testInput
	Receiver: a DIPhpDependencies
	Arguments and temporary variables: 
		strRules: 	nil
	Receiver's instance variables: 
		output: 	''
		commandOutput: 	''
		NEWLINE: 	'
'
		rules: 	a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalker m...etc...
		varSynonyms: 	nil
		sessionId: 	'1424271503'
		TIMESTAMP: 	'1424271503'
		TOOLNAME: 	'DIPhpDependencies'
		PROJECTROOT: 	'/home/otruffer/DictoCLI/'
		PROJECTSRC: 	'./'
		PROJECTBIN: 	'./'
		RESULTFILE: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/full-test/142427...etc...
		TESTFILE: 	nil
		testInputFileExt: 	'.st'
		SYSTEM: 	SYSTEM


DITestGroup>>build
	Receiver: a DITestGroup
	Arguments and temporary variables: 

	Receiver's instance variables: 
		rules: 	an OrderedCollection(RuleResult cannot depend on DictoTalker DictoTalker...etc...
		adapter: 	a DIPhpDependencies
		runCommandText: 	nil
		testSpecification: 	nil
		adapterID: 	'DIPhpDependencies'
		resultFile: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/full-test/142427...etc...
		specificationFile: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/full-test...etc...
		commandFile: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/full-test/14242...etc...


[ :testGroup | testGroup build ] in DIDicto>>dictoBuild:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = ...etc...
		adapterTestGroups: 	a Dictionary(DIGrepFileContent->a DITestGroup DIJMeterLoadTe...etc...
		testGroup: 	a DITestGroup
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424271503'
		singleShotTask: 	false


Array(SequenceableCollection)>>do:
	Receiver: an Array(a DITestGroup a DITestGroup a DITestGroup a DITestGroup a DITestGroup)
	Arguments and temporary variables: 
		aBlock: 	[ :testGroup | testGroup build ]
		index: 	4
	Receiver's instance variables: 
an Array(a DITestGroup a DITestGroup a DITestGroup a DITestGroup a DITestGroup)

DIDicto>>dictoBuild:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = ...etc...
		adapterTestGroups: 	a Dictionary(DIGrepFileContent->a DITestGroup DIJMeterLoadTe...etc...
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424271503'
		singleShotTask: 	false


DIDicto>>dictoRun:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = ...etc...
		adapterTestGroups: 	nil
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424271503'
		singleShotTask: 	false


DIDicto>>dictoAll:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = ...etc...
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424271503'
		singleShotTask: 	false


[ DIDicto new dictoAll: input ] in DIWebServiceAPI>>getRun
	Receiver: a DIWebServiceAPI
	Arguments and temporary variables: 
		in: 	'/home/otruffer/dicto/bin/analysis/full-test/dicto.rules'
		input: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = PhpCl...etc...
		rulesFailed: 	nil
		rulesTotal: 	nil
	Receiver's instance variables: 
		request: 	nil
		response: 	nil
		variables: 	nil
		delegate: 	nil
		principal: 	nil
		credentials: 	nil


BlockClosure>>on:do:
	Receiver: [ DIDicto new dictoAll: input ]
	Arguments and temporary variables: 
		exception: 	DIException
		handlerAction: 	[ :ex | ^ self error: ex description ]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	DIWebServiceAPI>>getRun
		startpc: 	138
		numArgs: 	0


DIWebServiceAPI>>getRun
	Receiver: a DIWebServiceAPI
	Arguments and temporary variables: 
		in: 	'/home/otruffer/dicto/bin/analysis/full-test/dicto.rules'
		input: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = PhpCl...etc...
		rulesFailed: 	nil
		rulesTotal: 	nil
	Receiver's instance variables: 
		request: 	nil
		response: 	nil
		variables: 	nil
		delegate: 	nil
		principal: 	nil
		credentials: 	nil


DIWebServiceHandler>>post
	Receiver: a DIWebServiceHandler
	Arguments and temporary variables: 
		api: 	a DIWebServiceAPI
	Receiver's instance variables: 
		request: 	a ZnRequest(POST /full-test/run)
		response: 	nil
		variables: 	an OrderedCollection('full-test' 'run')
		delegate: 	a ZnJSONRestServerDelegate
		principal: 	nil
		credentials: 	nil
		dicto: 	a DIDicto


DIWebServiceHandler(ZnRestCall)>>execute
	Receiver: a DIWebServiceHandler
	Arguments and temporary variables: 

	Receiver's instance variables: 
		request: 	a ZnRequest(POST /full-test/run)
		response: 	nil
		variables: 	an OrderedCollection('full-test' 'run')
		delegate: 	a ZnJSONRestServerDelegate
		principal: 	nil
		credentials: 	nil
		dicto: 	a DIDicto


[ call execute ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


BlockClosure>>on:do:
	Receiver: [ call execute ]
	Arguments and temporary variables: 
		exception: 	ZnRestCallUnauthorized
		handlerAction: 	[ :exception | self unauthorized: exception request ]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
		startpc: 	38
		numArgs: 	0


ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


[ self execute: call ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /full-test/run)
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


BlockClosure>>on:do:
	Receiver: [ self execute: call ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :exception | 
request server debugMode
	ifTrue: [ exception pa...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
		startpc: 	99
		numArgs: 	0


ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /full-test/run)
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ :delegate | delegate handleRequest: request ] ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /full-test/run)
		delegate: 	a ZnJSONRestServerDelegate
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateRequest:do:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /full-test/run)
		block: 	[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ ...etc...
		authenticator: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /full-test/run)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream)


[ self authenticateAndDelegateRequest: request ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /full-test/run)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream)


BlockClosure>>on:do:
	Receiver: [ self authenticateAndDelegateRequest: request ]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :exception | 
self debugMode
	ifTrue: [ exception pass ]
	ifFa...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequ...etc...
		startpc: 	58
		numArgs: 	0


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /full-test/run)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /full-test/run)
		response: 	nil
		initialMilliseconds: 	16013839
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeOneRequestResponseOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		stream: 	a ZdcSocketStream
		request: 	a ZnRequest(POST /full-test/run)
		response: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream)



--- The full stack ---
NeoJSONReader>>error:
NeoJSONReader>>parseValue
NeoJSONReader>>next
NeoJSONReader class>>fromString:
DIPhpModel>>_loadPhpModel
DIPhpModel>>model
DIVarPhpClass>>allElements
DIVarPhpClass(DIVar)>>elements
DISimpleRule>>subjectElements
printRulesEntityRelationship: someRules
	| res processedPredicates |
	res := ''.
	processedPredicates := Set new.
	someRules
		do: [ :rule | 
			| predicateSelector subjectElements argumentElements data isPredicateInv isSubjectInv |
			predicateSelector := (rule predicate nameNormalized , ':') asSymbol.
			isPredicateInv := rule hasPredicateInverted.
			isSubjectInv := rule hasSubjectInverted.
			subjectElements := rule subjectElements.
			argumentElements := rule argumentElements.
			subjectElements
				do: [ :subject | 
					argumentElements
						do: [ :argument | 
							| relId spec msgPass msgFail |
							relId := subject id , '-' , argument id.
							msgPass := subject id , '.' , rule predicate name , '(' , argument id , ')=True'.
							msgFail := subject id , '.' , rule predicate name , '(' , argument id , ')=False'.
							(processedPredicates includes: relId)
								ifFalse: [ 
									data := {(#subject -> subject value).
									(#argument -> argument value).
									(#ruleId -> rule id).
									(#propertyId -> relId).
									(#msgPass -> msgPass).
									(#msgFail -> msgFail)} asDictionary.
									spec := self perform: predicateSelector withArguments: {data}.
									spec := spec
										dictoReplace:
											{('$subject' -> subject value).
											('$argument' -> argument value).
											('$ruleId' -> rule id).
											('$propertyId' -> relId).
											('$msgPass' -> msgPass).
											('$msgFail' -> msgFail)}.
									res := res , spec ].	"avoid duplicate predicate evaluations"
							processedPredicates add: relId ] ] ].
	^ res in DIPhpDependencies(DIAdapter)>>printRulesEntityRelationship:
DICollectionRule(OrderedCollection)>>do:
DIPhpDependencies(DIAdapter)>>printRulesEntityRelationship:
DIPhpDependencies(DIAdapter)>>printRules
DIPhpDependencies>>testInput
DITestGroup>>build
[ :testGroup | testGroup build ] in DIDicto>>dictoBuild:
Array(SequenceableCollection)>>do:
DIDicto>>dictoBuild:
DIDicto>>dictoRun:
DIDicto>>dictoAll:
[ DIDicto new dictoAll: input ] in DIWebServiceAPI>>getRun
BlockClosure>>on:do:
DIWebServiceAPI>>getRun
DIWebServiceHandler>>post
DIWebServiceHandler(ZnRestCall)>>execute
[ call execute ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
BlockClosure>>on:do:
ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
[ self execute: call ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
BlockClosure>>on:do:
ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ :delegate | delegate handleRequest: request ] ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateRequest:do:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
[ self authenticateAndDelegateRequest: request ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
BlockClosure>>on:do:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequest:
ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeOneRequestResponseOn:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ self executeOneRequestResponseOn: stream ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
[ 
p psValueAt: index put: anObject.
aBlock value ] in ZnCurrentServer(DynamicVariable)>>value:during:
BlockClosure>>ensure:
ZnCurrentServer(DynamicVariable)>>value:during:
ZnCurrentServer class(DynamicVariable class)>>value:during:
ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
[ self executeRequestResponseLoopOn: stream ] in [ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ] in [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
BlockClosure>>ensure:
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ] in [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
BlockClosure>>ifCurtailed:
[ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
NeoJSONParseError: invalid input: nil
18 February 2015 4:00:18.227785 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
NBCogit NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
https://github.com/pharo-project/pharo-vm.git Commit: 4a0d556150d478ff2de3c9624d2f18e6eaa3fa5c Date: 2014-12-18 18:42:53 +0100 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14893

Image: Pharo3.0 [Latest update: #30863]

NeoJSONReader>>error:
	Receiver: a NeoJSONReader
	Arguments and temporary variables: 
		text: 	'invalid input: nil'
	Receiver's instance variables: 
		mappings: 	nil
		readStream: 	a ReadStream
		stringStream: 	nil
		listClass: 	nil
		mapClass: 	nil
		propertyNamesAsSymbols: 	false


NeoJSONReader>>parseValue
	Receiver: a NeoJSONReader
	Arguments and temporary variables: 
		char: 	nil
	Receiver's instance variables: 
		mappings: 	nil
		readStream: 	a ReadStream
		stringStream: 	nil
		listClass: 	nil
		mapClass: 	nil
		propertyNamesAsSymbols: 	false


NeoJSONReader>>next
	Receiver: a NeoJSONReader
	Arguments and temporary variables: 

	Receiver's instance variables: 
		mappings: 	nil
		readStream: 	a ReadStream
		stringStream: 	nil
		listClass: 	nil
		mapClass: 	nil
		propertyNamesAsSymbols: 	false


NeoJSONReader class>>fromString:
	Receiver: NeoJSONReader
	Arguments and temporary variables: 
		string: 	''
	Receiver's instance variables: 
		superclass: 	NeoJSONMapper
		methodDict: 	a MethodDictionary(#atEnd->NeoJSONReader>>#atEnd #close->NeoJSONRea...etc...
		format: 	142
		layout: 	a FixedLayout
		instanceVariables: 	#(#readStream #stringStream #listClass #mapClass #propertyNa...etc...
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#NeoJSONReader
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Neo-JSON-Core'
		traitComposition: 	{}
		localSelectors: 	nil


DIPhpModel>>_loadPhpModel
	Receiver: a DIPhpModel
	Arguments and temporary variables: 

	Receiver's instance variables: 
		defRules: 	a DICollectionRule()
		defVars: 	a DICollectionVar(SYSTEM)
		analysisID: 	'1424271618'
		additionalProperties: 	a Dictionary()
		ruleCounter: 	0
		varCounter: 	0
		defVarElements: 	a DICollectionVarElements()
		defVarInvertedElements: 	a DICollectionVarElements()
		model: 	nil


DIPhpModel>>model
	Receiver: a DIPhpModel
	Arguments and temporary variables: 

	Receiver's instance variables: 
		defRules: 	a DICollectionRule()
		defVars: 	a DICollectionVar(SYSTEM)
		analysisID: 	'1424271618'
		additionalProperties: 	a Dictionary()
		ruleCounter: 	0
		varCounter: 	0
		defVarElements: 	a DICollectionVarElements()
		defVarInvertedElements: 	a DICollectionVarElements()
		model: 	nil


DIVarPhpClass>>allElements
	Receiver: RuleResult
	Arguments and temporary variables: 

	Receiver's instance variables: 
		isFirst: 	false
		dslText: 	'RuleResult=PhpClass with name:"Dicto\\RuleResult"'
		type: 	'PhpClass'
		id: 	1
		entity: 	nil
		name: 	'RuleResult'
		specifiers: 	an OrderedCollection(name=Dicto\\RuleResult)
		isInverted: 	false
		elements: 	a DICollectionVarElements()
		invertedElements: 	a DICollectionVarElements()


DIVarPhpClass(DIVar)>>elements
	Receiver: RuleResult
	Arguments and temporary variables: 
		valid: 	nil
	Receiver's instance variables: 
		isFirst: 	false
		dslText: 	'RuleResult=PhpClass with name:"Dicto\\RuleResult"'
		type: 	'PhpClass'
		id: 	1
		entity: 	nil
		name: 	'RuleResult'
		specifiers: 	an OrderedCollection(name=Dicto\\RuleResult)
		isInverted: 	false
		elements: 	a DICollectionVarElements()
		invertedElements: 	a DICollectionVarElements()


DISimpleRule>>subjectElements
	Receiver: RuleResult cannot depend on DictoTalker
	Arguments and temporary variables: 
		subjectElements: 	nil
	Receiver's instance variables: 
		isFirst: 	nil
		dslText: 	'RuleResult cannot depend on DictoTalker'
		type: 	#cannot
		id: 	1001
		entity: 	nil
		subjects: 	an Array(RuleResult)
		predicates: 	an Array(depend on DictoTalker)
		subRules: 	nil
		candidateAdapters: 	a SortedCollection(DIPhpDependencies)
		chosenAdapter: 	DIPhpDependencies
		hasFailed: 	false
		failureMessage: 	''
		failingPredicates: 	a Set()
		hasSubjectInverted: 	false
		hasPredicateInverted: 	false


printRulesEntityRelationship: someRules
	| res processedPredicates |
	res := ''.
	processedPredicates := Set new.
	someRules
		do: [ :rule | 
			| predicateSelector subjectElements argumentElements data isPredicateInv isSubjectInv |
			predicateSelector := (rule predicate nameNormalized , ':') asSymbol.
			isPredicateInv := rule hasPredicateInverted.
			isSubjectInv := rule hasSubjectInverted.
			subjectElements := rule subjectElements.
			argumentElements := rule argumentElements.
			subjectElements
				do: [ :subject | 
					argumentElements
						do: [ :argument | 
							| relId spec msgPass msgFail |
							relId := subject id , '-' , argument id.
							msgPass := subject id , '.' , rule predicate name , '(' , argument id , ')=True'.
							msgFail := subject id , '.' , rule predicate name , '(' , argument id , ')=False'.
							(processedPredicates includes: relId)
								ifFalse: [ 
									data := {(#subject -> subject value).
									(#argument -> argument value).
									(#ruleId -> rule id).
									(#propertyId -> relId).
									(#msgPass -> msgPass).
									(#msgFail -> msgFail)} asDictionary.
									spec := self perform: predicateSelector withArguments: {data}.
									spec := spec
										dictoReplace:
											{('$subject' -> subject value).
											('$argument' -> argument value).
											('$ruleId' -> rule id).
											('$propertyId' -> relId).
											('$msgPass' -> msgPass).
											('$msgFail' -> msgFail)}.
									res := res , spec ].	"avoid duplicate predicate evaluations"
							processedPredicates add: relId ] ] ].
	^ res in DIPhpDependencies(DIAdapter)>>printRulesEntityRelationship:
	Receiver: a DIPhpDependencies
	Arguments and temporary variables: 
		someRules: 	a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalk...etc...
		processedPredicates: 	a Set()
		data: 	nil
		res: 	''
		rule: 	RuleResult cannot depend on DictoTalker
		predicateSelector: 	#dependOn:
		subjectElements: 	nil
		argumentElements: 	nil
		isPredicateInv: 	false
		isSubjectInv: 	false
	Receiver's instance variables: 
		output: 	''
		commandOutput: 	''
		NEWLINE: 	'
'
		rules: 	a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalker m...etc...
		varSynonyms: 	nil
		sessionId: 	'1424271618'
		TIMESTAMP: 	'1424271618'
		TOOLNAME: 	'DIPhpDependencies'
		PROJECTROOT: 	'/home/otruffer/DictoCLI/'
		PROJECTSRC: 	'./'
		PROJECTBIN: 	'./'
		RESULTFILE: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/full-test/142427...etc...
		TESTFILE: 	nil
		testInputFileExt: 	'.st'
		SYSTEM: 	SYSTEM


DICollectionRule(OrderedCollection)>>do:
	Receiver: a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalker must depend on Rule...etc...
	Arguments and temporary variables: 
		aBlock: 	printRulesEntityRelationship: someRules
	| res processedPredicates |
	r...etc...
		index: 	1
	Receiver's instance variables: 
		array: 	an Array(RuleResult cannot depend on DictoTalker DictoTalker must depend...etc...
		firstIndex: 	1
		lastIndex: 	3
		elements: 	nil
		elements: 	nil


DIPhpDependencies(DIAdapter)>>printRulesEntityRelationship:
	Receiver: a DIPhpDependencies
	Arguments and temporary variables: 
		res: 	''
		someRules: 	a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalk...etc...
		processedPredicates: 	a Set()
	Receiver's instance variables: 
		output: 	''
		commandOutput: 	''
		NEWLINE: 	'
'
		rules: 	a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalker m...etc...
		varSynonyms: 	nil
		sessionId: 	'1424271618'
		TIMESTAMP: 	'1424271618'
		TOOLNAME: 	'DIPhpDependencies'
		PROJECTROOT: 	'/home/otruffer/DictoCLI/'
		PROJECTSRC: 	'./'
		PROJECTBIN: 	'./'
		RESULTFILE: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/full-test/142427...etc...
		TESTFILE: 	nil
		testInputFileExt: 	'.st'
		SYSTEM: 	SYSTEM


DIPhpDependencies(DIAdapter)>>printRules
	Receiver: a DIPhpDependencies
	Arguments and temporary variables: 
		res: 	nil
		allRules: 	a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalke...etc...
	Receiver's instance variables: 
		output: 	''
		commandOutput: 	''
		NEWLINE: 	'
'
		rules: 	a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalker m...etc...
		varSynonyms: 	nil
		sessionId: 	'1424271618'
		TIMESTAMP: 	'1424271618'
		TOOLNAME: 	'DIPhpDependencies'
		PROJECTROOT: 	'/home/otruffer/DictoCLI/'
		PROJECTSRC: 	'./'
		PROJECTBIN: 	'./'
		RESULTFILE: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/full-test/142427...etc...
		TESTFILE: 	nil
		testInputFileExt: 	'.st'
		SYSTEM: 	SYSTEM


DIPhpDependencies>>testInput
	Receiver: a DIPhpDependencies
	Arguments and temporary variables: 
		strRules: 	nil
	Receiver's instance variables: 
		output: 	''
		commandOutput: 	''
		NEWLINE: 	'
'
		rules: 	a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalker m...etc...
		varSynonyms: 	nil
		sessionId: 	'1424271618'
		TIMESTAMP: 	'1424271618'
		TOOLNAME: 	'DIPhpDependencies'
		PROJECTROOT: 	'/home/otruffer/DictoCLI/'
		PROJECTSRC: 	'./'
		PROJECTBIN: 	'./'
		RESULTFILE: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/full-test/142427...etc...
		TESTFILE: 	nil
		testInputFileExt: 	'.st'
		SYSTEM: 	SYSTEM


DITestGroup>>build
	Receiver: a DITestGroup
	Arguments and temporary variables: 

	Receiver's instance variables: 
		rules: 	an OrderedCollection(RuleResult cannot depend on DictoTalker DictoTalker...etc...
		adapter: 	a DIPhpDependencies
		runCommandText: 	nil
		testSpecification: 	nil
		adapterID: 	'DIPhpDependencies'
		resultFile: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/full-test/142427...etc...
		specificationFile: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/full-test...etc...
		commandFile: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/full-test/14242...etc...


[ :testGroup | testGroup build ] in DIDicto>>dictoBuild:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = ...etc...
		adapterTestGroups: 	a Dictionary(DIGrepFileContent->a DITestGroup DIJMeterLoadTe...etc...
		testGroup: 	a DITestGroup
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424271618'
		singleShotTask: 	false


Array(SequenceableCollection)>>do:
	Receiver: an Array(a DITestGroup a DITestGroup a DITestGroup a DITestGroup a DITestGroup)
	Arguments and temporary variables: 
		aBlock: 	[ :testGroup | testGroup build ]
		index: 	4
	Receiver's instance variables: 
an Array(a DITestGroup a DITestGroup a DITestGroup a DITestGroup a DITestGroup)

DIDicto>>dictoBuild:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = ...etc...
		adapterTestGroups: 	a Dictionary(DIGrepFileContent->a DITestGroup DIJMeterLoadTe...etc...
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424271618'
		singleShotTask: 	false


DIDicto>>dictoRun:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = ...etc...
		adapterTestGroups: 	nil
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424271618'
		singleShotTask: 	false


DIDicto>>dictoAll:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = ...etc...
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424271618'
		singleShotTask: 	false


[ DIDicto new dictoAll: input ] in DIWebServiceAPI>>getRun
	Receiver: a DIWebServiceAPI
	Arguments and temporary variables: 
		in: 	'/home/otruffer/dicto/bin/analysis/full-test/dicto.rules'
		input: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = PhpCl...etc...
		rulesFailed: 	nil
		rulesTotal: 	nil
	Receiver's instance variables: 
		request: 	nil
		response: 	nil
		variables: 	nil
		delegate: 	nil
		principal: 	nil
		credentials: 	nil


BlockClosure>>on:do:
	Receiver: [ DIDicto new dictoAll: input ]
	Arguments and temporary variables: 
		exception: 	DIException
		handlerAction: 	[ :ex | ^ self error: ex description ]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	DIWebServiceAPI>>getRun
		startpc: 	138
		numArgs: 	0


DIWebServiceAPI>>getRun
	Receiver: a DIWebServiceAPI
	Arguments and temporary variables: 
		in: 	'/home/otruffer/dicto/bin/analysis/full-test/dicto.rules'
		input: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = PhpCl...etc...
		rulesFailed: 	nil
		rulesTotal: 	nil
	Receiver's instance variables: 
		request: 	nil
		response: 	nil
		variables: 	nil
		delegate: 	nil
		principal: 	nil
		credentials: 	nil


DIWebServiceHandler>>post
	Receiver: a DIWebServiceHandler
	Arguments and temporary variables: 
		api: 	a DIWebServiceAPI
	Receiver's instance variables: 
		request: 	a ZnRequest(POST /full-test/run)
		response: 	nil
		variables: 	an OrderedCollection('full-test' 'run')
		delegate: 	a ZnJSONRestServerDelegate
		principal: 	nil
		credentials: 	nil
		dicto: 	a DIDicto


DIWebServiceHandler(ZnRestCall)>>execute
	Receiver: a DIWebServiceHandler
	Arguments and temporary variables: 

	Receiver's instance variables: 
		request: 	a ZnRequest(POST /full-test/run)
		response: 	nil
		variables: 	an OrderedCollection('full-test' 'run')
		delegate: 	a ZnJSONRestServerDelegate
		principal: 	nil
		credentials: 	nil
		dicto: 	a DIDicto


[ call execute ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


BlockClosure>>on:do:
	Receiver: [ call execute ]
	Arguments and temporary variables: 
		exception: 	ZnRestCallUnauthorized
		handlerAction: 	[ :exception | self unauthorized: exception request ]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
		startpc: 	38
		numArgs: 	0


ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


[ self execute: call ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /full-test/run)
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


BlockClosure>>on:do:
	Receiver: [ self execute: call ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :exception | 
request server debugMode
	ifTrue: [ exception pa...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
		startpc: 	99
		numArgs: 	0


ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /full-test/run)
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ :delegate | delegate handleRequest: request ] ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /full-test/run)
		delegate: 	a ZnJSONRestServerDelegate
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateRequest:do:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /full-test/run)
		block: 	[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ ...etc...
		authenticator: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /full-test/run)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream)


[ self authenticateAndDelegateRequest: request ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /full-test/run)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream)


BlockClosure>>on:do:
	Receiver: [ self authenticateAndDelegateRequest: request ]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :exception | 
self debugMode
	ifTrue: [ exception pass ]
	ifFa...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequ...etc...
		startpc: 	58
		numArgs: 	0


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /full-test/run)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /full-test/run)
		response: 	nil
		initialMilliseconds: 	16128578
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeOneRequestResponseOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		stream: 	a ZdcSocketStream
		request: 	a ZnRequest(POST /full-test/run)
		response: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream)



--- The full stack ---
NeoJSONReader>>error:
NeoJSONReader>>parseValue
NeoJSONReader>>next
NeoJSONReader class>>fromString:
DIPhpModel>>_loadPhpModel
DIPhpModel>>model
DIVarPhpClass>>allElements
DIVarPhpClass(DIVar)>>elements
DISimpleRule>>subjectElements
printRulesEntityRelationship: someRules
	| res processedPredicates |
	res := ''.
	processedPredicates := Set new.
	someRules
		do: [ :rule | 
			| predicateSelector subjectElements argumentElements data isPredicateInv isSubjectInv |
			predicateSelector := (rule predicate nameNormalized , ':') asSymbol.
			isPredicateInv := rule hasPredicateInverted.
			isSubjectInv := rule hasSubjectInverted.
			subjectElements := rule subjectElements.
			argumentElements := rule argumentElements.
			subjectElements
				do: [ :subject | 
					argumentElements
						do: [ :argument | 
							| relId spec msgPass msgFail |
							relId := subject id , '-' , argument id.
							msgPass := subject id , '.' , rule predicate name , '(' , argument id , ')=True'.
							msgFail := subject id , '.' , rule predicate name , '(' , argument id , ')=False'.
							(processedPredicates includes: relId)
								ifFalse: [ 
									data := {(#subject -> subject value).
									(#argument -> argument value).
									(#ruleId -> rule id).
									(#propertyId -> relId).
									(#msgPass -> msgPass).
									(#msgFail -> msgFail)} asDictionary.
									spec := self perform: predicateSelector withArguments: {data}.
									spec := spec
										dictoReplace:
											{('$subject' -> subject value).
											('$argument' -> argument value).
											('$ruleId' -> rule id).
											('$propertyId' -> relId).
											('$msgPass' -> msgPass).
											('$msgFail' -> msgFail)}.
									res := res , spec ].	"avoid duplicate predicate evaluations"
							processedPredicates add: relId ] ] ].
	^ res in DIPhpDependencies(DIAdapter)>>printRulesEntityRelationship:
DICollectionRule(OrderedCollection)>>do:
DIPhpDependencies(DIAdapter)>>printRulesEntityRelationship:
DIPhpDependencies(DIAdapter)>>printRules
DIPhpDependencies>>testInput
DITestGroup>>build
[ :testGroup | testGroup build ] in DIDicto>>dictoBuild:
Array(SequenceableCollection)>>do:
DIDicto>>dictoBuild:
DIDicto>>dictoRun:
DIDicto>>dictoAll:
[ DIDicto new dictoAll: input ] in DIWebServiceAPI>>getRun
BlockClosure>>on:do:
DIWebServiceAPI>>getRun
DIWebServiceHandler>>post
DIWebServiceHandler(ZnRestCall)>>execute
[ call execute ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
BlockClosure>>on:do:
ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
[ self execute: call ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
BlockClosure>>on:do:
ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ :delegate | delegate handleRequest: request ] ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateRequest:do:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
[ self authenticateAndDelegateRequest: request ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
BlockClosure>>on:do:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequest:
ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeOneRequestResponseOn:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ self executeOneRequestResponseOn: stream ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
[ 
p psValueAt: index put: anObject.
aBlock value ] in ZnCurrentServer(DynamicVariable)>>value:during:
BlockClosure>>ensure:
ZnCurrentServer(DynamicVariable)>>value:during:
ZnCurrentServer class(DynamicVariable class)>>value:during:
ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
[ self executeRequestResponseLoopOn: stream ] in [ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ] in [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
BlockClosure>>ensure:
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ] in [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
BlockClosure>>ifCurtailed:
[ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
NeoJSONParseError: invalid input: nil
18 February 2015 4:06:24.186746 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
NBCogit NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
https://github.com/pharo-project/pharo-vm.git Commit: 4a0d556150d478ff2de3c9624d2f18e6eaa3fa5c Date: 2014-12-18 18:42:53 +0100 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14893

Image: Pharo3.0 [Latest update: #30863]

NeoJSONReader>>error:
	Receiver: a NeoJSONReader
	Arguments and temporary variables: 
		text: 	'invalid input: nil'
	Receiver's instance variables: 
		mappings: 	nil
		readStream: 	a ReadStream
		stringStream: 	nil
		listClass: 	nil
		mapClass: 	nil
		propertyNamesAsSymbols: 	false


NeoJSONReader>>parseValue
	Receiver: a NeoJSONReader
	Arguments and temporary variables: 
		char: 	nil
	Receiver's instance variables: 
		mappings: 	nil
		readStream: 	a ReadStream
		stringStream: 	nil
		listClass: 	nil
		mapClass: 	nil
		propertyNamesAsSymbols: 	false


NeoJSONReader>>next
	Receiver: a NeoJSONReader
	Arguments and temporary variables: 

	Receiver's instance variables: 
		mappings: 	nil
		readStream: 	a ReadStream
		stringStream: 	nil
		listClass: 	nil
		mapClass: 	nil
		propertyNamesAsSymbols: 	false


NeoJSONReader class>>fromString:
	Receiver: NeoJSONReader
	Arguments and temporary variables: 
		string: 	''
	Receiver's instance variables: 
		superclass: 	NeoJSONMapper
		methodDict: 	a MethodDictionary(#atEnd->NeoJSONReader>>#atEnd #close->NeoJSONRea...etc...
		format: 	142
		layout: 	a FixedLayout
		instanceVariables: 	#(#readStream #stringStream #listClass #mapClass #propertyNa...etc...
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#NeoJSONReader
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Neo-JSON-Core'
		traitComposition: 	{}
		localSelectors: 	nil


DIPhpModel>>_loadPhpModel
	Receiver: a DIPhpModel
	Arguments and temporary variables: 

	Receiver's instance variables: 
		defRules: 	a DICollectionRule()
		defVars: 	a DICollectionVar(SYSTEM)
		analysisID: 	'1424271984'
		additionalProperties: 	a Dictionary()
		ruleCounter: 	0
		varCounter: 	0
		defVarElements: 	a DICollectionVarElements()
		defVarInvertedElements: 	a DICollectionVarElements()
		model: 	nil


DIPhpModel>>model
	Receiver: a DIPhpModel
	Arguments and temporary variables: 

	Receiver's instance variables: 
		defRules: 	a DICollectionRule()
		defVars: 	a DICollectionVar(SYSTEM)
		analysisID: 	'1424271984'
		additionalProperties: 	a Dictionary()
		ruleCounter: 	0
		varCounter: 	0
		defVarElements: 	a DICollectionVarElements()
		defVarInvertedElements: 	a DICollectionVarElements()
		model: 	nil


DIVarPhpClass>>allElements
	Receiver: RuleResult
	Arguments and temporary variables: 

	Receiver's instance variables: 
		isFirst: 	false
		dslText: 	'RuleResult=PhpClass with name:"Dicto\\RuleResult"'
		type: 	'PhpClass'
		id: 	1
		entity: 	nil
		name: 	'RuleResult'
		specifiers: 	an OrderedCollection(name=Dicto\\RuleResult)
		isInverted: 	false
		elements: 	a DICollectionVarElements()
		invertedElements: 	a DICollectionVarElements()


DIVarPhpClass(DIVar)>>elements
	Receiver: RuleResult
	Arguments and temporary variables: 
		valid: 	nil
	Receiver's instance variables: 
		isFirst: 	false
		dslText: 	'RuleResult=PhpClass with name:"Dicto\\RuleResult"'
		type: 	'PhpClass'
		id: 	1
		entity: 	nil
		name: 	'RuleResult'
		specifiers: 	an OrderedCollection(name=Dicto\\RuleResult)
		isInverted: 	false
		elements: 	a DICollectionVarElements()
		invertedElements: 	a DICollectionVarElements()


DISimpleRule>>subjectElements
	Receiver: RuleResult cannot depend on DictoTalker
	Arguments and temporary variables: 
		subjectElements: 	nil
	Receiver's instance variables: 
		isFirst: 	nil
		dslText: 	'RuleResult cannot depend on DictoTalker'
		type: 	#cannot
		id: 	1001
		entity: 	nil
		subjects: 	an Array(RuleResult)
		predicates: 	an Array(depend on DictoTalker)
		subRules: 	nil
		candidateAdapters: 	a SortedCollection(DIPhpDependencies)
		chosenAdapter: 	DIPhpDependencies
		hasFailed: 	false
		failureMessage: 	''
		failingPredicates: 	a Set()
		hasSubjectInverted: 	false
		hasPredicateInverted: 	false


printRulesEntityRelationship: someRules
	| res processedPredicates |
	res := ''.
	processedPredicates := Set new.
	someRules
		do: [ :rule | 
			| predicateSelector subjectElements argumentElements data isPredicateInv isSubjectInv |
			predicateSelector := (rule predicate nameNormalized , ':') asSymbol.
			isPredicateInv := rule hasPredicateInverted.
			isSubjectInv := rule hasSubjectInverted.
			subjectElements := rule subjectElements.
			argumentElements := rule argumentElements.
			subjectElements
				do: [ :subject | 
					argumentElements
						do: [ :argument | 
							| relId spec msgPass msgFail |
							relId := subject id , '-' , argument id.
							msgPass := subject id , '.' , rule predicate name , '(' , argument id , ')=True'.
							msgFail := subject id , '.' , rule predicate name , '(' , argument id , ')=False'.
							(processedPredicates includes: relId)
								ifFalse: [ 
									data := {(#subject -> subject value).
									(#argument -> argument value).
									(#ruleId -> rule id).
									(#propertyId -> relId).
									(#msgPass -> msgPass).
									(#msgFail -> msgFail)} asDictionary.
									spec := self perform: predicateSelector withArguments: {data}.
									spec := spec
										dictoReplace:
											{('$subject' -> subject value).
											('$argument' -> argument value).
											('$ruleId' -> rule id).
											('$propertyId' -> relId).
											('$msgPass' -> msgPass).
											('$msgFail' -> msgFail)}.
									res := res , spec ].	"avoid duplicate predicate evaluations"
							processedPredicates add: relId ] ] ].
	^ res in DIPhpDependencies(DIAdapter)>>printRulesEntityRelationship:
	Receiver: a DIPhpDependencies
	Arguments and temporary variables: 
		someRules: 	a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalk...etc...
		processedPredicates: 	a Set()
		data: 	nil
		res: 	''
		rule: 	RuleResult cannot depend on DictoTalker
		predicateSelector: 	#dependOn:
		subjectElements: 	nil
		argumentElements: 	nil
		isPredicateInv: 	false
		isSubjectInv: 	false
	Receiver's instance variables: 
		output: 	''
		commandOutput: 	''
		NEWLINE: 	'
'
		rules: 	a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalker m...etc...
		varSynonyms: 	nil
		sessionId: 	'1424271984'
		TIMESTAMP: 	'1424271984'
		TOOLNAME: 	'DIPhpDependencies'
		PROJECTROOT: 	'/home/otruffer/DictoCLI/'
		PROJECTSRC: 	'./'
		PROJECTBIN: 	'./'
		RESULTFILE: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/full-test/142427...etc...
		TESTFILE: 	nil
		testInputFileExt: 	'.st'
		SYSTEM: 	SYSTEM


DICollectionRule(OrderedCollection)>>do:
	Receiver: a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalker must depend on Rule...etc...
	Arguments and temporary variables: 
		aBlock: 	printRulesEntityRelationship: someRules
	| res processedPredicates |
	r...etc...
		index: 	1
	Receiver's instance variables: 
		array: 	an Array(RuleResult cannot depend on DictoTalker DictoTalker must depend...etc...
		firstIndex: 	1
		lastIndex: 	3
		elements: 	nil
		elements: 	nil


DIPhpDependencies(DIAdapter)>>printRulesEntityRelationship:
	Receiver: a DIPhpDependencies
	Arguments and temporary variables: 
		res: 	''
		someRules: 	a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalk...etc...
		processedPredicates: 	a Set()
	Receiver's instance variables: 
		output: 	''
		commandOutput: 	''
		NEWLINE: 	'
'
		rules: 	a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalker m...etc...
		varSynonyms: 	nil
		sessionId: 	'1424271984'
		TIMESTAMP: 	'1424271984'
		TOOLNAME: 	'DIPhpDependencies'
		PROJECTROOT: 	'/home/otruffer/DictoCLI/'
		PROJECTSRC: 	'./'
		PROJECTBIN: 	'./'
		RESULTFILE: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/full-test/142427...etc...
		TESTFILE: 	nil
		testInputFileExt: 	'.st'
		SYSTEM: 	SYSTEM


DIPhpDependencies(DIAdapter)>>printRules
	Receiver: a DIPhpDependencies
	Arguments and temporary variables: 
		res: 	nil
		allRules: 	a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalke...etc...
	Receiver's instance variables: 
		output: 	''
		commandOutput: 	''
		NEWLINE: 	'
'
		rules: 	a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalker m...etc...
		varSynonyms: 	nil
		sessionId: 	'1424271984'
		TIMESTAMP: 	'1424271984'
		TOOLNAME: 	'DIPhpDependencies'
		PROJECTROOT: 	'/home/otruffer/DictoCLI/'
		PROJECTSRC: 	'./'
		PROJECTBIN: 	'./'
		RESULTFILE: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/full-test/142427...etc...
		TESTFILE: 	nil
		testInputFileExt: 	'.st'
		SYSTEM: 	SYSTEM


DIPhpDependencies>>testInput
	Receiver: a DIPhpDependencies
	Arguments and temporary variables: 
		strRules: 	nil
	Receiver's instance variables: 
		output: 	''
		commandOutput: 	''
		NEWLINE: 	'
'
		rules: 	a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalker m...etc...
		varSynonyms: 	nil
		sessionId: 	'1424271984'
		TIMESTAMP: 	'1424271984'
		TOOLNAME: 	'DIPhpDependencies'
		PROJECTROOT: 	'/home/otruffer/DictoCLI/'
		PROJECTSRC: 	'./'
		PROJECTBIN: 	'./'
		RESULTFILE: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/full-test/142427...etc...
		TESTFILE: 	nil
		testInputFileExt: 	'.st'
		SYSTEM: 	SYSTEM


DITestGroup>>build
	Receiver: a DITestGroup
	Arguments and temporary variables: 

	Receiver's instance variables: 
		rules: 	an OrderedCollection(RuleResult cannot depend on DictoTalker DictoTalker...etc...
		adapter: 	a DIPhpDependencies
		runCommandText: 	nil
		testSpecification: 	nil
		adapterID: 	'DIPhpDependencies'
		resultFile: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/full-test/142427...etc...
		specificationFile: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/full-test...etc...
		commandFile: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/full-test/14242...etc...


[ :testGroup | testGroup build ] in DIDicto>>dictoBuild:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = ...etc...
		adapterTestGroups: 	a Dictionary(DIGrepFileContent->a DITestGroup DIJMeterLoadTe...etc...
		testGroup: 	a DITestGroup
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424271984'
		singleShotTask: 	false


Array(SequenceableCollection)>>do:
	Receiver: an Array(a DITestGroup a DITestGroup a DITestGroup a DITestGroup a DITestGroup)
	Arguments and temporary variables: 
		aBlock: 	[ :testGroup | testGroup build ]
		index: 	4
	Receiver's instance variables: 
an Array(a DITestGroup a DITestGroup a DITestGroup a DITestGroup a DITestGroup)

DIDicto>>dictoBuild:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = ...etc...
		adapterTestGroups: 	a Dictionary(DIGrepFileContent->a DITestGroup DIJMeterLoadTe...etc...
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424271984'
		singleShotTask: 	false


DIDicto>>dictoRun:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = ...etc...
		adapterTestGroups: 	nil
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424271984'
		singleShotTask: 	false


DIDicto>>dictoAll:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = ...etc...
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424271984'
		singleShotTask: 	false


[ DIDicto new dictoAll: input ] in DIWebServiceAPI>>getRun
	Receiver: a DIWebServiceAPI
	Arguments and temporary variables: 
		in: 	'/home/otruffer/dicto/bin/analysis/full-test/dicto.rules'
		input: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = PhpCl...etc...
		rulesFailed: 	nil
		rulesTotal: 	nil
	Receiver's instance variables: 
		request: 	nil
		response: 	nil
		variables: 	nil
		delegate: 	nil
		principal: 	nil
		credentials: 	nil


BlockClosure>>on:do:
	Receiver: [ DIDicto new dictoAll: input ]
	Arguments and temporary variables: 
		exception: 	DIException
		handlerAction: 	[ :ex | ^ self error: ex description ]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	DIWebServiceAPI>>getRun
		startpc: 	138
		numArgs: 	0


DIWebServiceAPI>>getRun
	Receiver: a DIWebServiceAPI
	Arguments and temporary variables: 
		in: 	'/home/otruffer/dicto/bin/analysis/full-test/dicto.rules'
		input: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = PhpCl...etc...
		rulesFailed: 	nil
		rulesTotal: 	nil
	Receiver's instance variables: 
		request: 	nil
		response: 	nil
		variables: 	nil
		delegate: 	nil
		principal: 	nil
		credentials: 	nil


DIWebServiceHandler>>post
	Receiver: a DIWebServiceHandler
	Arguments and temporary variables: 
		api: 	a DIWebServiceAPI
	Receiver's instance variables: 
		request: 	a ZnRequest(POST /full-test/run)
		response: 	nil
		variables: 	an OrderedCollection('full-test' 'run')
		delegate: 	a ZnJSONRestServerDelegate
		principal: 	nil
		credentials: 	nil
		dicto: 	a DIDicto


DIWebServiceHandler(ZnRestCall)>>execute
	Receiver: a DIWebServiceHandler
	Arguments and temporary variables: 

	Receiver's instance variables: 
		request: 	a ZnRequest(POST /full-test/run)
		response: 	nil
		variables: 	an OrderedCollection('full-test' 'run')
		delegate: 	a ZnJSONRestServerDelegate
		principal: 	nil
		credentials: 	nil
		dicto: 	a DIDicto


[ call execute ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


BlockClosure>>on:do:
	Receiver: [ call execute ]
	Arguments and temporary variables: 
		exception: 	ZnRestCallUnauthorized
		handlerAction: 	[ :exception | self unauthorized: exception request ]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
		startpc: 	38
		numArgs: 	0


ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


[ self execute: call ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /full-test/run)
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


BlockClosure>>on:do:
	Receiver: [ self execute: call ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :exception | 
request server debugMode
	ifTrue: [ exception pa...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
		startpc: 	99
		numArgs: 	0


ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /full-test/run)
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ :delegate | delegate handleRequest: request ] ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /full-test/run)
		delegate: 	a ZnJSONRestServerDelegate
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateRequest:do:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /full-test/run)
		block: 	[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ ...etc...
		authenticator: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /full-test/run)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream)


[ self authenticateAndDelegateRequest: request ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /full-test/run)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream)


BlockClosure>>on:do:
	Receiver: [ self authenticateAndDelegateRequest: request ]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :exception | 
self debugMode
	ifTrue: [ exception pass ]
	ifFa...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequ...etc...
		startpc: 	58
		numArgs: 	0


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /full-test/run)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /full-test/run)
		response: 	nil
		initialMilliseconds: 	16494532
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeOneRequestResponseOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		stream: 	a ZdcSocketStream
		request: 	a ZnRequest(POST /full-test/run)
		response: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream)



--- The full stack ---
NeoJSONReader>>error:
NeoJSONReader>>parseValue
NeoJSONReader>>next
NeoJSONReader class>>fromString:
DIPhpModel>>_loadPhpModel
DIPhpModel>>model
DIVarPhpClass>>allElements
DIVarPhpClass(DIVar)>>elements
DISimpleRule>>subjectElements
printRulesEntityRelationship: someRules
	| res processedPredicates |
	res := ''.
	processedPredicates := Set new.
	someRules
		do: [ :rule | 
			| predicateSelector subjectElements argumentElements data isPredicateInv isSubjectInv |
			predicateSelector := (rule predicate nameNormalized , ':') asSymbol.
			isPredicateInv := rule hasPredicateInverted.
			isSubjectInv := rule hasSubjectInverted.
			subjectElements := rule subjectElements.
			argumentElements := rule argumentElements.
			subjectElements
				do: [ :subject | 
					argumentElements
						do: [ :argument | 
							| relId spec msgPass msgFail |
							relId := subject id , '-' , argument id.
							msgPass := subject id , '.' , rule predicate name , '(' , argument id , ')=True'.
							msgFail := subject id , '.' , rule predicate name , '(' , argument id , ')=False'.
							(processedPredicates includes: relId)
								ifFalse: [ 
									data := {(#subject -> subject value).
									(#argument -> argument value).
									(#ruleId -> rule id).
									(#propertyId -> relId).
									(#msgPass -> msgPass).
									(#msgFail -> msgFail)} asDictionary.
									spec := self perform: predicateSelector withArguments: {data}.
									spec := spec
										dictoReplace:
											{('$subject' -> subject value).
											('$argument' -> argument value).
											('$ruleId' -> rule id).
											('$propertyId' -> relId).
											('$msgPass' -> msgPass).
											('$msgFail' -> msgFail)}.
									res := res , spec ].	"avoid duplicate predicate evaluations"
							processedPredicates add: relId ] ] ].
	^ res in DIPhpDependencies(DIAdapter)>>printRulesEntityRelationship:
DICollectionRule(OrderedCollection)>>do:
DIPhpDependencies(DIAdapter)>>printRulesEntityRelationship:
DIPhpDependencies(DIAdapter)>>printRules
DIPhpDependencies>>testInput
DITestGroup>>build
[ :testGroup | testGroup build ] in DIDicto>>dictoBuild:
Array(SequenceableCollection)>>do:
DIDicto>>dictoBuild:
DIDicto>>dictoRun:
DIDicto>>dictoAll:
[ DIDicto new dictoAll: input ] in DIWebServiceAPI>>getRun
BlockClosure>>on:do:
DIWebServiceAPI>>getRun
DIWebServiceHandler>>post
DIWebServiceHandler(ZnRestCall)>>execute
[ call execute ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
BlockClosure>>on:do:
ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
[ self execute: call ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
BlockClosure>>on:do:
ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ :delegate | delegate handleRequest: request ] ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateRequest:do:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
[ self authenticateAndDelegateRequest: request ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
BlockClosure>>on:do:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequest:
ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeOneRequestResponseOn:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ self executeOneRequestResponseOn: stream ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
[ 
p psValueAt: index put: anObject.
aBlock value ] in ZnCurrentServer(DynamicVariable)>>value:during:
BlockClosure>>ensure:
ZnCurrentServer(DynamicVariable)>>value:during:
ZnCurrentServer class(DynamicVariable class)>>value:during:
ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
[ self executeRequestResponseLoopOn: stream ] in [ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ] in [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
BlockClosure>>ensure:
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ] in [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
BlockClosure>>ifCurtailed:
[ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
NeoJSONParseError: invalid input: nil
18 February 2015 4:42:26.814097 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
NBCogit NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
https://github.com/pharo-project/pharo-vm.git Commit: 4a0d556150d478ff2de3c9624d2f18e6eaa3fa5c Date: 2014-12-18 18:42:53 +0100 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14893

Image: Pharo3.0 [Latest update: #30863]

NeoJSONReader>>error:
	Receiver: a NeoJSONReader
	Arguments and temporary variables: 
		text: 	'invalid input: nil'
	Receiver's instance variables: 
		mappings: 	nil
		readStream: 	a ReadStream
		stringStream: 	nil
		listClass: 	nil
		mapClass: 	nil
		propertyNamesAsSymbols: 	false


NeoJSONReader>>parseValue
	Receiver: a NeoJSONReader
	Arguments and temporary variables: 
		char: 	nil
	Receiver's instance variables: 
		mappings: 	nil
		readStream: 	a ReadStream
		stringStream: 	nil
		listClass: 	nil
		mapClass: 	nil
		propertyNamesAsSymbols: 	false


NeoJSONReader>>next
	Receiver: a NeoJSONReader
	Arguments and temporary variables: 

	Receiver's instance variables: 
		mappings: 	nil
		readStream: 	a ReadStream
		stringStream: 	nil
		listClass: 	nil
		mapClass: 	nil
		propertyNamesAsSymbols: 	false


NeoJSONReader class>>fromString:
	Receiver: NeoJSONReader
	Arguments and temporary variables: 
		string: 	''
	Receiver's instance variables: 
		superclass: 	NeoJSONMapper
		methodDict: 	a MethodDictionary(#atEnd->NeoJSONReader>>#atEnd #close->NeoJSONRea...etc...
		format: 	142
		layout: 	a FixedLayout
		instanceVariables: 	#(#readStream #stringStream #listClass #mapClass #propertyNa...etc...
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#NeoJSONReader
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Neo-JSON-Core'
		traitComposition: 	{}
		localSelectors: 	nil


DIPhpModel>>_loadPhpModel
	Receiver: a DIPhpModel
	Arguments and temporary variables: 

	Receiver's instance variables: 
		defRules: 	a DICollectionRule()
		defVars: 	a DICollectionVar(SYSTEM)
		analysisID: 	'1424274147'
		additionalProperties: 	a Dictionary()
		ruleCounter: 	0
		varCounter: 	0
		defVarElements: 	a DICollectionVarElements()
		defVarInvertedElements: 	a DICollectionVarElements()
		model: 	nil


DIPhpModel>>model
	Receiver: a DIPhpModel
	Arguments and temporary variables: 

	Receiver's instance variables: 
		defRules: 	a DICollectionRule()
		defVars: 	a DICollectionVar(SYSTEM)
		analysisID: 	'1424274147'
		additionalProperties: 	a Dictionary()
		ruleCounter: 	0
		varCounter: 	0
		defVarElements: 	a DICollectionVarElements()
		defVarInvertedElements: 	a DICollectionVarElements()
		model: 	nil


DIVarPhpClass>>allElements
	Receiver: RuleResult
	Arguments and temporary variables: 

	Receiver's instance variables: 
		isFirst: 	false
		dslText: 	'RuleResult=PhpClass with name:"Dicto\\RuleResult"'
		type: 	'PhpClass'
		id: 	1
		entity: 	nil
		name: 	'RuleResult'
		specifiers: 	an OrderedCollection(name=Dicto\\RuleResult)
		isInverted: 	false
		elements: 	a DICollectionVarElements()
		invertedElements: 	a DICollectionVarElements()


DIVarPhpClass(DIVar)>>elements
	Receiver: RuleResult
	Arguments and temporary variables: 
		valid: 	nil
	Receiver's instance variables: 
		isFirst: 	false
		dslText: 	'RuleResult=PhpClass with name:"Dicto\\RuleResult"'
		type: 	'PhpClass'
		id: 	1
		entity: 	nil
		name: 	'RuleResult'
		specifiers: 	an OrderedCollection(name=Dicto\\RuleResult)
		isInverted: 	false
		elements: 	a DICollectionVarElements()
		invertedElements: 	a DICollectionVarElements()


DISimpleRule>>subjectElements
	Receiver: RuleResult cannot depend on DictoTalker
	Arguments and temporary variables: 
		subjectElements: 	nil
	Receiver's instance variables: 
		isFirst: 	nil
		dslText: 	'RuleResult cannot depend on DictoTalker'
		type: 	#cannot
		id: 	1001
		entity: 	nil
		subjects: 	an Array(RuleResult)
		predicates: 	an Array(depend on DictoTalker)
		subRules: 	nil
		candidateAdapters: 	a SortedCollection(DIPhpDependencies)
		chosenAdapter: 	DIPhpDependencies
		hasFailed: 	false
		failureMessage: 	''
		failingPredicates: 	a Set()
		hasSubjectInverted: 	false
		hasPredicateInverted: 	false


printRulesEntityRelationship: someRules
	| res processedPredicates |
	res := ''.
	processedPredicates := Set new.
	someRules
		do: [ :rule | 
			| predicateSelector subjectElements argumentElements data isPredicateInv isSubjectInv |
			predicateSelector := (rule predicate nameNormalized , ':') asSymbol.
			isPredicateInv := rule hasPredicateInverted.
			isSubjectInv := rule hasSubjectInverted.
			subjectElements := rule subjectElements.
			argumentElements := rule argumentElements.
			subjectElements
				do: [ :subject | 
					argumentElements
						do: [ :argument | 
							| relId spec msgPass msgFail |
							relId := subject id , '-' , argument id.
							msgPass := subject id , '.' , rule predicate name , '(' , argument id , ')=True'.
							msgFail := subject id , '.' , rule predicate name , '(' , argument id , ')=False'.
							(processedPredicates includes: relId)
								ifFalse: [ 
									data := {(#subject -> subject value).
									(#argument -> argument value).
									(#ruleId -> rule id).
									(#propertyId -> relId).
									(#msgPass -> msgPass).
									(#msgFail -> msgFail)} asDictionary.
									spec := self perform: predicateSelector withArguments: {data}.
									spec := spec
										dictoReplace:
											{('$subject' -> subject value).
											('$argument' -> argument value).
											('$ruleId' -> rule id).
											('$propertyId' -> relId).
											('$msgPass' -> msgPass).
											('$msgFail' -> msgFail)}.
									res := res , spec ].	"avoid duplicate predicate evaluations"
							processedPredicates add: relId ] ] ].
	^ res in DIPhpDependencies(DIAdapter)>>printRulesEntityRelationship:
	Receiver: a DIPhpDependencies
	Arguments and temporary variables: 
		someRules: 	a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalk...etc...
		processedPredicates: 	a Set()
		data: 	nil
		res: 	''
		rule: 	RuleResult cannot depend on DictoTalker
		predicateSelector: 	#dependOn:
		subjectElements: 	nil
		argumentElements: 	nil
		isPredicateInv: 	false
		isSubjectInv: 	false
	Receiver's instance variables: 
		output: 	''
		commandOutput: 	''
		NEWLINE: 	'
'
		rules: 	a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalker m...etc...
		varSynonyms: 	nil
		sessionId: 	'1424274147'
		TIMESTAMP: 	'1424274147'
		TOOLNAME: 	'DIPhpDependencies'
		PROJECTROOT: 	'/home/otruffer/DictoCLI/'
		PROJECTSRC: 	'./'
		PROJECTBIN: 	'./'
		RESULTFILE: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/full-test/142427...etc...
		TESTFILE: 	nil
		testInputFileExt: 	'.st'
		SYSTEM: 	SYSTEM


DICollectionRule(OrderedCollection)>>do:
	Receiver: a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalker must depend on Rule...etc...
	Arguments and temporary variables: 
		aBlock: 	printRulesEntityRelationship: someRules
	| res processedPredicates |
	r...etc...
		index: 	1
	Receiver's instance variables: 
		array: 	an Array(RuleResult cannot depend on DictoTalker DictoTalker must depend...etc...
		firstIndex: 	1
		lastIndex: 	3
		elements: 	nil
		elements: 	nil


DIPhpDependencies(DIAdapter)>>printRulesEntityRelationship:
	Receiver: a DIPhpDependencies
	Arguments and temporary variables: 
		res: 	''
		someRules: 	a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalk...etc...
		processedPredicates: 	a Set()
	Receiver's instance variables: 
		output: 	''
		commandOutput: 	''
		NEWLINE: 	'
'
		rules: 	a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalker m...etc...
		varSynonyms: 	nil
		sessionId: 	'1424274147'
		TIMESTAMP: 	'1424274147'
		TOOLNAME: 	'DIPhpDependencies'
		PROJECTROOT: 	'/home/otruffer/DictoCLI/'
		PROJECTSRC: 	'./'
		PROJECTBIN: 	'./'
		RESULTFILE: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/full-test/142427...etc...
		TESTFILE: 	nil
		testInputFileExt: 	'.st'
		SYSTEM: 	SYSTEM


DIPhpDependencies(DIAdapter)>>printRules
	Receiver: a DIPhpDependencies
	Arguments and temporary variables: 
		res: 	nil
		allRules: 	a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalke...etc...
	Receiver's instance variables: 
		output: 	''
		commandOutput: 	''
		NEWLINE: 	'
'
		rules: 	a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalker m...etc...
		varSynonyms: 	nil
		sessionId: 	'1424274147'
		TIMESTAMP: 	'1424274147'
		TOOLNAME: 	'DIPhpDependencies'
		PROJECTROOT: 	'/home/otruffer/DictoCLI/'
		PROJECTSRC: 	'./'
		PROJECTBIN: 	'./'
		RESULTFILE: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/full-test/142427...etc...
		TESTFILE: 	nil
		testInputFileExt: 	'.st'
		SYSTEM: 	SYSTEM


DIPhpDependencies>>testInput
	Receiver: a DIPhpDependencies
	Arguments and temporary variables: 
		strRules: 	nil
	Receiver's instance variables: 
		output: 	''
		commandOutput: 	''
		NEWLINE: 	'
'
		rules: 	a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalker m...etc...
		varSynonyms: 	nil
		sessionId: 	'1424274147'
		TIMESTAMP: 	'1424274147'
		TOOLNAME: 	'DIPhpDependencies'
		PROJECTROOT: 	'/home/otruffer/DictoCLI/'
		PROJECTSRC: 	'./'
		PROJECTBIN: 	'./'
		RESULTFILE: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/full-test/142427...etc...
		TESTFILE: 	nil
		testInputFileExt: 	'.st'
		SYSTEM: 	SYSTEM


DITestGroup>>build
	Receiver: a DITestGroup
	Arguments and temporary variables: 

	Receiver's instance variables: 
		rules: 	an OrderedCollection(RuleResult cannot depend on DictoTalker DictoTalker...etc...
		adapter: 	a DIPhpDependencies
		runCommandText: 	nil
		testSpecification: 	nil
		adapterID: 	'DIPhpDependencies'
		resultFile: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/full-test/142427...etc...
		specificationFile: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/full-test...etc...
		commandFile: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/full-test/14242...etc...


[ :testGroup | testGroup build ] in DIDicto>>dictoBuild:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = ...etc...
		adapterTestGroups: 	a Dictionary(DIGrepFileContent->a DITestGroup DIJMeterLoadTe...etc...
		testGroup: 	a DITestGroup
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424274147'
		singleShotTask: 	false


Array(SequenceableCollection)>>do:
	Receiver: an Array(a DITestGroup a DITestGroup a DITestGroup a DITestGroup a DITestGroup)
	Arguments and temporary variables: 
		aBlock: 	[ :testGroup | testGroup build ]
		index: 	4
	Receiver's instance variables: 
an Array(a DITestGroup a DITestGroup a DITestGroup a DITestGroup a DITestGroup)

DIDicto>>dictoBuild:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = ...etc...
		adapterTestGroups: 	a Dictionary(DIGrepFileContent->a DITestGroup DIJMeterLoadTe...etc...
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424274147'
		singleShotTask: 	false


DIDicto>>dictoRun:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = ...etc...
		adapterTestGroups: 	nil
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424274147'
		singleShotTask: 	false


DIDicto>>dictoAll:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = ...etc...
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424274147'
		singleShotTask: 	false


[ DIDicto new dictoAll: input ] in DIWebServiceAPI>>getRun
	Receiver: a DIWebServiceAPI
	Arguments and temporary variables: 
		in: 	'/home/otruffer/dicto/bin/analysis/full-test/dicto.rules'
		input: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = PhpCl...etc...
		rulesFailed: 	nil
		rulesTotal: 	nil
	Receiver's instance variables: 
		request: 	nil
		response: 	nil
		variables: 	nil
		delegate: 	nil
		principal: 	nil
		credentials: 	nil


BlockClosure>>on:do:
	Receiver: [ DIDicto new dictoAll: input ]
	Arguments and temporary variables: 
		exception: 	DIException
		handlerAction: 	[ :ex | ^ self error: ex description ]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	DIWebServiceAPI>>getRun
		startpc: 	138
		numArgs: 	0


DIWebServiceAPI>>getRun
	Receiver: a DIWebServiceAPI
	Arguments and temporary variables: 
		in: 	'/home/otruffer/dicto/bin/analysis/full-test/dicto.rules'
		input: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = PhpCl...etc...
		rulesFailed: 	nil
		rulesTotal: 	nil
	Receiver's instance variables: 
		request: 	nil
		response: 	nil
		variables: 	nil
		delegate: 	nil
		principal: 	nil
		credentials: 	nil


DIWebServiceHandler>>post
	Receiver: a DIWebServiceHandler
	Arguments and temporary variables: 
		api: 	a DIWebServiceAPI
	Receiver's instance variables: 
		request: 	a ZnRequest(POST /full-test/run)
		response: 	nil
		variables: 	an OrderedCollection('full-test' 'run')
		delegate: 	a ZnJSONRestServerDelegate
		principal: 	nil
		credentials: 	nil
		dicto: 	a DIDicto


DIWebServiceHandler(ZnRestCall)>>execute
	Receiver: a DIWebServiceHandler
	Arguments and temporary variables: 

	Receiver's instance variables: 
		request: 	a ZnRequest(POST /full-test/run)
		response: 	nil
		variables: 	an OrderedCollection('full-test' 'run')
		delegate: 	a ZnJSONRestServerDelegate
		principal: 	nil
		credentials: 	nil
		dicto: 	a DIDicto


[ call execute ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


BlockClosure>>on:do:
	Receiver: [ call execute ]
	Arguments and temporary variables: 
		exception: 	ZnRestCallUnauthorized
		handlerAction: 	[ :exception | self unauthorized: exception request ]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
		startpc: 	38
		numArgs: 	0


ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


[ self execute: call ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /full-test/run)
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


BlockClosure>>on:do:
	Receiver: [ self execute: call ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :exception | 
request server debugMode
	ifTrue: [ exception pa...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
		startpc: 	99
		numArgs: 	0


ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /full-test/run)
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ :delegate | delegate handleRequest: request ] ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /full-test/run)
		delegate: 	a ZnJSONRestServerDelegate
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateRequest:do:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /full-test/run)
		block: 	[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ ...etc...
		authenticator: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /full-test/run)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream)


[ self authenticateAndDelegateRequest: request ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /full-test/run)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream)


BlockClosure>>on:do:
	Receiver: [ self authenticateAndDelegateRequest: request ]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :exception | 
self debugMode
	ifTrue: [ exception pass ]
	ifFa...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequ...etc...
		startpc: 	58
		numArgs: 	0


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /full-test/run)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /full-test/run)
		response: 	nil
		initialMilliseconds: 	18657159
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeOneRequestResponseOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		stream: 	a ZdcSocketStream
		request: 	a ZnRequest(POST /full-test/run)
		response: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream)



--- The full stack ---
NeoJSONReader>>error:
NeoJSONReader>>parseValue
NeoJSONReader>>next
NeoJSONReader class>>fromString:
DIPhpModel>>_loadPhpModel
DIPhpModel>>model
DIVarPhpClass>>allElements
DIVarPhpClass(DIVar)>>elements
DISimpleRule>>subjectElements
printRulesEntityRelationship: someRules
	| res processedPredicates |
	res := ''.
	processedPredicates := Set new.
	someRules
		do: [ :rule | 
			| predicateSelector subjectElements argumentElements data isPredicateInv isSubjectInv |
			predicateSelector := (rule predicate nameNormalized , ':') asSymbol.
			isPredicateInv := rule hasPredicateInverted.
			isSubjectInv := rule hasSubjectInverted.
			subjectElements := rule subjectElements.
			argumentElements := rule argumentElements.
			subjectElements
				do: [ :subject | 
					argumentElements
						do: [ :argument | 
							| relId spec msgPass msgFail |
							relId := subject id , '-' , argument id.
							msgPass := subject id , '.' , rule predicate name , '(' , argument id , ')=True'.
							msgFail := subject id , '.' , rule predicate name , '(' , argument id , ')=False'.
							(processedPredicates includes: relId)
								ifFalse: [ 
									data := {(#subject -> subject value).
									(#argument -> argument value).
									(#ruleId -> rule id).
									(#propertyId -> relId).
									(#msgPass -> msgPass).
									(#msgFail -> msgFail)} asDictionary.
									spec := self perform: predicateSelector withArguments: {data}.
									spec := spec
										dictoReplace:
											{('$subject' -> subject value).
											('$argument' -> argument value).
											('$ruleId' -> rule id).
											('$propertyId' -> relId).
											('$msgPass' -> msgPass).
											('$msgFail' -> msgFail)}.
									res := res , spec ].	"avoid duplicate predicate evaluations"
							processedPredicates add: relId ] ] ].
	^ res in DIPhpDependencies(DIAdapter)>>printRulesEntityRelationship:
DICollectionRule(OrderedCollection)>>do:
DIPhpDependencies(DIAdapter)>>printRulesEntityRelationship:
DIPhpDependencies(DIAdapter)>>printRules
DIPhpDependencies>>testInput
DITestGroup>>build
[ :testGroup | testGroup build ] in DIDicto>>dictoBuild:
Array(SequenceableCollection)>>do:
DIDicto>>dictoBuild:
DIDicto>>dictoRun:
DIDicto>>dictoAll:
[ DIDicto new dictoAll: input ] in DIWebServiceAPI>>getRun
BlockClosure>>on:do:
DIWebServiceAPI>>getRun
DIWebServiceHandler>>post
DIWebServiceHandler(ZnRestCall)>>execute
[ call execute ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
BlockClosure>>on:do:
ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
[ self execute: call ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
BlockClosure>>on:do:
ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ :delegate | delegate handleRequest: request ] ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateRequest:do:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
[ self authenticateAndDelegateRequest: request ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
BlockClosure>>on:do:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequest:
ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeOneRequestResponseOn:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ self executeOneRequestResponseOn: stream ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
[ 
p psValueAt: index put: anObject.
aBlock value ] in ZnCurrentServer(DynamicVariable)>>value:during:
BlockClosure>>ensure:
ZnCurrentServer(DynamicVariable)>>value:during:
ZnCurrentServer class(DynamicVariable class)>>value:during:
ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
[ self executeRequestResponseLoopOn: stream ] in [ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ] in [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
BlockClosure>>ensure:
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ] in [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
BlockClosure>>ifCurtailed:
[ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
NeoJSONParseError: invalid input: nil
18 February 2015 4:47:08.578267 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
NBCogit NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
https://github.com/pharo-project/pharo-vm.git Commit: 4a0d556150d478ff2de3c9624d2f18e6eaa3fa5c Date: 2014-12-18 18:42:53 +0100 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14893

Image: Pharo3.0 [Latest update: #30863]

NeoJSONReader>>error:
	Receiver: a NeoJSONReader
	Arguments and temporary variables: 
		text: 	'invalid input: nil'
	Receiver's instance variables: 
		mappings: 	nil
		readStream: 	a ReadStream
		stringStream: 	nil
		listClass: 	nil
		mapClass: 	nil
		propertyNamesAsSymbols: 	false


NeoJSONReader>>parseValue
	Receiver: a NeoJSONReader
	Arguments and temporary variables: 
		char: 	nil
	Receiver's instance variables: 
		mappings: 	nil
		readStream: 	a ReadStream
		stringStream: 	nil
		listClass: 	nil
		mapClass: 	nil
		propertyNamesAsSymbols: 	false


NeoJSONReader>>next
	Receiver: a NeoJSONReader
	Arguments and temporary variables: 

	Receiver's instance variables: 
		mappings: 	nil
		readStream: 	a ReadStream
		stringStream: 	nil
		listClass: 	nil
		mapClass: 	nil
		propertyNamesAsSymbols: 	false


NeoJSONReader class>>fromString:
	Receiver: NeoJSONReader
	Arguments and temporary variables: 
		string: 	''
	Receiver's instance variables: 
		superclass: 	NeoJSONMapper
		methodDict: 	a MethodDictionary(#atEnd->NeoJSONReader>>#atEnd #close->NeoJSONRea...etc...
		format: 	142
		layout: 	a FixedLayout
		instanceVariables: 	#(#readStream #stringStream #listClass #mapClass #propertyNa...etc...
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#NeoJSONReader
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Neo-JSON-Core'
		traitComposition: 	{}
		localSelectors: 	nil


DIPhpModel>>_loadPhpModel
	Receiver: a DIPhpModel
	Arguments and temporary variables: 

	Receiver's instance variables: 
		defRules: 	a DICollectionRule()
		defVars: 	a DICollectionVar(SYSTEM)
		analysisID: 	'1424274429'
		additionalProperties: 	a Dictionary()
		ruleCounter: 	0
		varCounter: 	0
		defVarElements: 	a DICollectionVarElements()
		defVarInvertedElements: 	a DICollectionVarElements()
		model: 	nil


DIPhpModel>>model
	Receiver: a DIPhpModel
	Arguments and temporary variables: 

	Receiver's instance variables: 
		defRules: 	a DICollectionRule()
		defVars: 	a DICollectionVar(SYSTEM)
		analysisID: 	'1424274429'
		additionalProperties: 	a Dictionary()
		ruleCounter: 	0
		varCounter: 	0
		defVarElements: 	a DICollectionVarElements()
		defVarInvertedElements: 	a DICollectionVarElements()
		model: 	nil


DIVarPhpClass>>allElements
	Receiver: RuleResult
	Arguments and temporary variables: 

	Receiver's instance variables: 
		isFirst: 	false
		dslText: 	'RuleResult=PhpClass with name:"Dicto\\RuleResult"'
		type: 	'PhpClass'
		id: 	1
		entity: 	nil
		name: 	'RuleResult'
		specifiers: 	an OrderedCollection(name=Dicto\\RuleResult)
		isInverted: 	false
		elements: 	a DICollectionVarElements()
		invertedElements: 	a DICollectionVarElements()


DIVarPhpClass(DIVar)>>elements
	Receiver: RuleResult
	Arguments and temporary variables: 
		valid: 	nil
	Receiver's instance variables: 
		isFirst: 	false
		dslText: 	'RuleResult=PhpClass with name:"Dicto\\RuleResult"'
		type: 	'PhpClass'
		id: 	1
		entity: 	nil
		name: 	'RuleResult'
		specifiers: 	an OrderedCollection(name=Dicto\\RuleResult)
		isInverted: 	false
		elements: 	a DICollectionVarElements()
		invertedElements: 	a DICollectionVarElements()


DISimpleRule>>subjectElements
	Receiver: RuleResult cannot depend on DictoTalker
	Arguments and temporary variables: 
		subjectElements: 	nil
	Receiver's instance variables: 
		isFirst: 	nil
		dslText: 	'RuleResult cannot depend on DictoTalker'
		type: 	#cannot
		id: 	1001
		entity: 	nil
		subjects: 	an Array(RuleResult)
		predicates: 	an Array(depend on DictoTalker)
		subRules: 	nil
		candidateAdapters: 	a SortedCollection(DIPhpDependencies)
		chosenAdapter: 	DIPhpDependencies
		hasFailed: 	false
		failureMessage: 	''
		failingPredicates: 	a Set()
		hasSubjectInverted: 	false
		hasPredicateInverted: 	false


printRulesEntityRelationship: someRules
	| res processedPredicates |
	res := ''.
	processedPredicates := Set new.
	someRules
		do: [ :rule | 
			| predicateSelector subjectElements argumentElements data isPredicateInv isSubjectInv |
			predicateSelector := (rule predicate nameNormalized , ':') asSymbol.
			isPredicateInv := rule hasPredicateInverted.
			isSubjectInv := rule hasSubjectInverted.
			subjectElements := rule subjectElements.
			argumentElements := rule argumentElements.
			subjectElements
				do: [ :subject | 
					argumentElements
						do: [ :argument | 
							| relId spec msgPass msgFail |
							relId := subject id , '-' , argument id.
							msgPass := subject id , '.' , rule predicate name , '(' , argument id , ')=True'.
							msgFail := subject id , '.' , rule predicate name , '(' , argument id , ')=False'.
							(processedPredicates includes: relId)
								ifFalse: [ 
									data := {(#subject -> subject value).
									(#argument -> argument value).
									(#ruleId -> rule id).
									(#propertyId -> relId).
									(#msgPass -> msgPass).
									(#msgFail -> msgFail)} asDictionary.
									spec := self perform: predicateSelector withArguments: {data}.
									spec := spec
										dictoReplace:
											{('$subject' -> subject value).
											('$argument' -> argument value).
											('$ruleId' -> rule id).
											('$propertyId' -> relId).
											('$msgPass' -> msgPass).
											('$msgFail' -> msgFail)}.
									res := res , spec ].	"avoid duplicate predicate evaluations"
							processedPredicates add: relId ] ] ].
	^ res in DIPhpDependencies(DIAdapter)>>printRulesEntityRelationship:
	Receiver: a DIPhpDependencies
	Arguments and temporary variables: 
		someRules: 	a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalk...etc...
		processedPredicates: 	a Set()
		data: 	nil
		res: 	''
		rule: 	RuleResult cannot depend on DictoTalker
		predicateSelector: 	#dependOn:
		subjectElements: 	nil
		argumentElements: 	nil
		isPredicateInv: 	false
		isSubjectInv: 	false
	Receiver's instance variables: 
		output: 	''
		commandOutput: 	''
		NEWLINE: 	'
'
		rules: 	a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalker m...etc...
		varSynonyms: 	nil
		sessionId: 	'1424274429'
		TIMESTAMP: 	'1424274429'
		TOOLNAME: 	'DIPhpDependencies'
		PROJECTROOT: 	'/home/otruffer/DictoCLI/'
		PROJECTSRC: 	'./'
		PROJECTBIN: 	'./'
		RESULTFILE: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/full-test/142427...etc...
		TESTFILE: 	nil
		testInputFileExt: 	'.st'
		SYSTEM: 	SYSTEM


DICollectionRule(OrderedCollection)>>do:
	Receiver: a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalker must depend on Rule...etc...
	Arguments and temporary variables: 
		aBlock: 	printRulesEntityRelationship: someRules
	| res processedPredicates |
	r...etc...
		index: 	1
	Receiver's instance variables: 
		array: 	an Array(RuleResult cannot depend on DictoTalker DictoTalker must depend...etc...
		firstIndex: 	1
		lastIndex: 	3
		elements: 	nil
		elements: 	nil


DIPhpDependencies(DIAdapter)>>printRulesEntityRelationship:
	Receiver: a DIPhpDependencies
	Arguments and temporary variables: 
		res: 	''
		someRules: 	a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalk...etc...
		processedPredicates: 	a Set()
	Receiver's instance variables: 
		output: 	''
		commandOutput: 	''
		NEWLINE: 	'
'
		rules: 	a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalker m...etc...
		varSynonyms: 	nil
		sessionId: 	'1424274429'
		TIMESTAMP: 	'1424274429'
		TOOLNAME: 	'DIPhpDependencies'
		PROJECTROOT: 	'/home/otruffer/DictoCLI/'
		PROJECTSRC: 	'./'
		PROJECTBIN: 	'./'
		RESULTFILE: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/full-test/142427...etc...
		TESTFILE: 	nil
		testInputFileExt: 	'.st'
		SYSTEM: 	SYSTEM


DIPhpDependencies(DIAdapter)>>printRules
	Receiver: a DIPhpDependencies
	Arguments and temporary variables: 
		res: 	nil
		allRules: 	a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalke...etc...
	Receiver's instance variables: 
		output: 	''
		commandOutput: 	''
		NEWLINE: 	'
'
		rules: 	a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalker m...etc...
		varSynonyms: 	nil
		sessionId: 	'1424274429'
		TIMESTAMP: 	'1424274429'
		TOOLNAME: 	'DIPhpDependencies'
		PROJECTROOT: 	'/home/otruffer/DictoCLI/'
		PROJECTSRC: 	'./'
		PROJECTBIN: 	'./'
		RESULTFILE: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/full-test/142427...etc...
		TESTFILE: 	nil
		testInputFileExt: 	'.st'
		SYSTEM: 	SYSTEM


DIPhpDependencies>>testInput
	Receiver: a DIPhpDependencies
	Arguments and temporary variables: 
		strRules: 	nil
	Receiver's instance variables: 
		output: 	''
		commandOutput: 	''
		NEWLINE: 	'
'
		rules: 	a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalker m...etc...
		varSynonyms: 	nil
		sessionId: 	'1424274429'
		TIMESTAMP: 	'1424274429'
		TOOLNAME: 	'DIPhpDependencies'
		PROJECTROOT: 	'/home/otruffer/DictoCLI/'
		PROJECTSRC: 	'./'
		PROJECTBIN: 	'./'
		RESULTFILE: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/full-test/142427...etc...
		TESTFILE: 	nil
		testInputFileExt: 	'.st'
		SYSTEM: 	SYSTEM


DITestGroup>>build
	Receiver: a DITestGroup
	Arguments and temporary variables: 

	Receiver's instance variables: 
		rules: 	an OrderedCollection(RuleResult cannot depend on DictoTalker DictoTalker...etc...
		adapter: 	a DIPhpDependencies
		runCommandText: 	nil
		testSpecification: 	nil
		adapterID: 	'DIPhpDependencies'
		resultFile: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/full-test/142427...etc...
		specificationFile: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/full-test...etc...
		commandFile: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/full-test/14242...etc...


[ :testGroup | testGroup build ] in DIDicto>>dictoBuild:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = ...etc...
		adapterTestGroups: 	a Dictionary(DIGrepFileContent->a DITestGroup DIJMeterLoadTe...etc...
		testGroup: 	a DITestGroup
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424274429'
		singleShotTask: 	false


Array(SequenceableCollection)>>do:
	Receiver: an Array(a DITestGroup a DITestGroup a DITestGroup a DITestGroup a DITestGroup)
	Arguments and temporary variables: 
		aBlock: 	[ :testGroup | testGroup build ]
		index: 	4
	Receiver's instance variables: 
an Array(a DITestGroup a DITestGroup a DITestGroup a DITestGroup a DITestGroup)

DIDicto>>dictoBuild:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = ...etc...
		adapterTestGroups: 	a Dictionary(DIGrepFileContent->a DITestGroup DIJMeterLoadTe...etc...
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424274429'
		singleShotTask: 	false


DIDicto>>dictoRun:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = ...etc...
		adapterTestGroups: 	nil
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424274429'
		singleShotTask: 	false


DIDicto>>dictoAll:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = ...etc...
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424274429'
		singleShotTask: 	false


[ DIDicto new dictoAll: input ] in DIWebServiceAPI>>getRun
	Receiver: a DIWebServiceAPI
	Arguments and temporary variables: 
		in: 	'/home/otruffer/dicto/bin/analysis/full-test/dicto.rules'
		input: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = PhpCl...etc...
		rulesFailed: 	nil
		rulesTotal: 	nil
	Receiver's instance variables: 
		request: 	nil
		response: 	nil
		variables: 	nil
		delegate: 	nil
		principal: 	nil
		credentials: 	nil


BlockClosure>>on:do:
	Receiver: [ DIDicto new dictoAll: input ]
	Arguments and temporary variables: 
		exception: 	DIException
		handlerAction: 	[ :ex | ^ self error: ex description ]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	DIWebServiceAPI>>getRun
		startpc: 	138
		numArgs: 	0


DIWebServiceAPI>>getRun
	Receiver: a DIWebServiceAPI
	Arguments and temporary variables: 
		in: 	'/home/otruffer/dicto/bin/analysis/full-test/dicto.rules'
		input: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = PhpCl...etc...
		rulesFailed: 	nil
		rulesTotal: 	nil
	Receiver's instance variables: 
		request: 	nil
		response: 	nil
		variables: 	nil
		delegate: 	nil
		principal: 	nil
		credentials: 	nil


DIWebServiceHandler>>post
	Receiver: a DIWebServiceHandler
	Arguments and temporary variables: 
		api: 	a DIWebServiceAPI
	Receiver's instance variables: 
		request: 	a ZnRequest(POST /full-test/run)
		response: 	nil
		variables: 	an OrderedCollection('full-test' 'run')
		delegate: 	a ZnJSONRestServerDelegate
		principal: 	nil
		credentials: 	nil
		dicto: 	a DIDicto


DIWebServiceHandler(ZnRestCall)>>execute
	Receiver: a DIWebServiceHandler
	Arguments and temporary variables: 

	Receiver's instance variables: 
		request: 	a ZnRequest(POST /full-test/run)
		response: 	nil
		variables: 	an OrderedCollection('full-test' 'run')
		delegate: 	a ZnJSONRestServerDelegate
		principal: 	nil
		credentials: 	nil
		dicto: 	a DIDicto


[ call execute ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


BlockClosure>>on:do:
	Receiver: [ call execute ]
	Arguments and temporary variables: 
		exception: 	ZnRestCallUnauthorized
		handlerAction: 	[ :exception | self unauthorized: exception request ]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
		startpc: 	38
		numArgs: 	0


ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


[ self execute: call ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /full-test/run)
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


BlockClosure>>on:do:
	Receiver: [ self execute: call ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :exception | 
request server debugMode
	ifTrue: [ exception pa...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
		startpc: 	99
		numArgs: 	0


ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /full-test/run)
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ :delegate | delegate handleRequest: request ] ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /full-test/run)
		delegate: 	a ZnJSONRestServerDelegate
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateRequest:do:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /full-test/run)
		block: 	[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ ...etc...
		authenticator: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /full-test/run)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream)


[ self authenticateAndDelegateRequest: request ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /full-test/run)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream)


BlockClosure>>on:do:
	Receiver: [ self authenticateAndDelegateRequest: request ]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :exception | 
self debugMode
	ifTrue: [ exception pass ]
	ifFa...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequ...etc...
		startpc: 	58
		numArgs: 	0


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /full-test/run)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /full-test/run)
		response: 	nil
		initialMilliseconds: 	18938933
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeOneRequestResponseOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		stream: 	a ZdcSocketStream
		request: 	a ZnRequest(POST /full-test/run)
		response: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream)



--- The full stack ---
NeoJSONReader>>error:
NeoJSONReader>>parseValue
NeoJSONReader>>next
NeoJSONReader class>>fromString:
DIPhpModel>>_loadPhpModel
DIPhpModel>>model
DIVarPhpClass>>allElements
DIVarPhpClass(DIVar)>>elements
DISimpleRule>>subjectElements
printRulesEntityRelationship: someRules
	| res processedPredicates |
	res := ''.
	processedPredicates := Set new.
	someRules
		do: [ :rule | 
			| predicateSelector subjectElements argumentElements data isPredicateInv isSubjectInv |
			predicateSelector := (rule predicate nameNormalized , ':') asSymbol.
			isPredicateInv := rule hasPredicateInverted.
			isSubjectInv := rule hasSubjectInverted.
			subjectElements := rule subjectElements.
			argumentElements := rule argumentElements.
			subjectElements
				do: [ :subject | 
					argumentElements
						do: [ :argument | 
							| relId spec msgPass msgFail |
							relId := subject id , '-' , argument id.
							msgPass := subject id , '.' , rule predicate name , '(' , argument id , ')=True'.
							msgFail := subject id , '.' , rule predicate name , '(' , argument id , ')=False'.
							(processedPredicates includes: relId)
								ifFalse: [ 
									data := {(#subject -> subject value).
									(#argument -> argument value).
									(#ruleId -> rule id).
									(#propertyId -> relId).
									(#msgPass -> msgPass).
									(#msgFail -> msgFail)} asDictionary.
									spec := self perform: predicateSelector withArguments: {data}.
									spec := spec
										dictoReplace:
											{('$subject' -> subject value).
											('$argument' -> argument value).
											('$ruleId' -> rule id).
											('$propertyId' -> relId).
											('$msgPass' -> msgPass).
											('$msgFail' -> msgFail)}.
									res := res , spec ].	"avoid duplicate predicate evaluations"
							processedPredicates add: relId ] ] ].
	^ res in DIPhpDependencies(DIAdapter)>>printRulesEntityRelationship:
DICollectionRule(OrderedCollection)>>do:
DIPhpDependencies(DIAdapter)>>printRulesEntityRelationship:
DIPhpDependencies(DIAdapter)>>printRules
DIPhpDependencies>>testInput
DITestGroup>>build
[ :testGroup | testGroup build ] in DIDicto>>dictoBuild:
Array(SequenceableCollection)>>do:
DIDicto>>dictoBuild:
DIDicto>>dictoRun:
DIDicto>>dictoAll:
[ DIDicto new dictoAll: input ] in DIWebServiceAPI>>getRun
BlockClosure>>on:do:
DIWebServiceAPI>>getRun
DIWebServiceHandler>>post
DIWebServiceHandler(ZnRestCall)>>execute
[ call execute ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
BlockClosure>>on:do:
ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
[ self execute: call ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
BlockClosure>>on:do:
ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ :delegate | delegate handleRequest: request ] ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateRequest:do:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
[ self authenticateAndDelegateRequest: request ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
BlockClosure>>on:do:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequest:
ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeOneRequestResponseOn:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ self executeOneRequestResponseOn: stream ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
[ 
p psValueAt: index put: anObject.
aBlock value ] in ZnCurrentServer(DynamicVariable)>>value:during:
BlockClosure>>ensure:
ZnCurrentServer(DynamicVariable)>>value:during:
ZnCurrentServer class(DynamicVariable class)>>value:during:
ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
[ self executeRequestResponseLoopOn: stream ] in [ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ] in [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
BlockClosure>>ensure:
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ] in [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
BlockClosure>>ifCurtailed:
[ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
NeoJSONParseError: invalid input: nil
18 February 2015 4:50:29.549806 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
NBCogit NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
https://github.com/pharo-project/pharo-vm.git Commit: 4a0d556150d478ff2de3c9624d2f18e6eaa3fa5c Date: 2014-12-18 18:42:53 +0100 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14893

Image: Pharo3.0 [Latest update: #30863]

NeoJSONReader>>error:
	Receiver: a NeoJSONReader
	Arguments and temporary variables: 
		text: 	'invalid input: nil'
	Receiver's instance variables: 
		mappings: 	nil
		readStream: 	a ReadStream
		stringStream: 	nil
		listClass: 	nil
		mapClass: 	nil
		propertyNamesAsSymbols: 	false


NeoJSONReader>>parseValue
	Receiver: a NeoJSONReader
	Arguments and temporary variables: 
		char: 	nil
	Receiver's instance variables: 
		mappings: 	nil
		readStream: 	a ReadStream
		stringStream: 	nil
		listClass: 	nil
		mapClass: 	nil
		propertyNamesAsSymbols: 	false


NeoJSONReader>>next
	Receiver: a NeoJSONReader
	Arguments and temporary variables: 

	Receiver's instance variables: 
		mappings: 	nil
		readStream: 	a ReadStream
		stringStream: 	nil
		listClass: 	nil
		mapClass: 	nil
		propertyNamesAsSymbols: 	false


NeoJSONReader class>>fromString:
	Receiver: NeoJSONReader
	Arguments and temporary variables: 
		string: 	''
	Receiver's instance variables: 
		superclass: 	NeoJSONMapper
		methodDict: 	a MethodDictionary(#atEnd->NeoJSONReader>>#atEnd #close->NeoJSONRea...etc...
		format: 	142
		layout: 	a FixedLayout
		instanceVariables: 	#(#readStream #stringStream #listClass #mapClass #propertyNa...etc...
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#NeoJSONReader
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Neo-JSON-Core'
		traitComposition: 	{}
		localSelectors: 	nil


DIPhpModel>>_loadPhpModel
	Receiver: a DIPhpModel
	Arguments and temporary variables: 

	Receiver's instance variables: 
		defRules: 	a DICollectionRule()
		defVars: 	a DICollectionVar(SYSTEM)
		analysisID: 	'1424274629'
		additionalProperties: 	a Dictionary()
		ruleCounter: 	0
		varCounter: 	0
		defVarElements: 	a DICollectionVarElements()
		defVarInvertedElements: 	a DICollectionVarElements()
		model: 	nil


DIPhpModel>>model
	Receiver: a DIPhpModel
	Arguments and temporary variables: 

	Receiver's instance variables: 
		defRules: 	a DICollectionRule()
		defVars: 	a DICollectionVar(SYSTEM)
		analysisID: 	'1424274629'
		additionalProperties: 	a Dictionary()
		ruleCounter: 	0
		varCounter: 	0
		defVarElements: 	a DICollectionVarElements()
		defVarInvertedElements: 	a DICollectionVarElements()
		model: 	nil


DIVarPhpClass>>allElements
	Receiver: RuleResult
	Arguments and temporary variables: 

	Receiver's instance variables: 
		isFirst: 	false
		dslText: 	'RuleResult=PhpClass with name:"Dicto\\RuleResult"'
		type: 	'PhpClass'
		id: 	1
		entity: 	nil
		name: 	'RuleResult'
		specifiers: 	an OrderedCollection(name=Dicto\\RuleResult)
		isInverted: 	false
		elements: 	a DICollectionVarElements()
		invertedElements: 	a DICollectionVarElements()


DIVarPhpClass(DIVar)>>elements
	Receiver: RuleResult
	Arguments and temporary variables: 
		valid: 	nil
	Receiver's instance variables: 
		isFirst: 	false
		dslText: 	'RuleResult=PhpClass with name:"Dicto\\RuleResult"'
		type: 	'PhpClass'
		id: 	1
		entity: 	nil
		name: 	'RuleResult'
		specifiers: 	an OrderedCollection(name=Dicto\\RuleResult)
		isInverted: 	false
		elements: 	a DICollectionVarElements()
		invertedElements: 	a DICollectionVarElements()


DISimpleRule>>subjectElements
	Receiver: RuleResult cannot depend on DictoTalker
	Arguments and temporary variables: 
		subjectElements: 	nil
	Receiver's instance variables: 
		isFirst: 	nil
		dslText: 	'RuleResult cannot depend on DictoTalker'
		type: 	#cannot
		id: 	1001
		entity: 	nil
		subjects: 	an Array(RuleResult)
		predicates: 	an Array(depend on DictoTalker)
		subRules: 	nil
		candidateAdapters: 	a SortedCollection(DIPhpDependencies)
		chosenAdapter: 	DIPhpDependencies
		hasFailed: 	false
		failureMessage: 	''
		failingPredicates: 	a Set()
		hasSubjectInverted: 	false
		hasPredicateInverted: 	false


printRulesEntityRelationship: someRules
	| res processedPredicates |
	res := ''.
	processedPredicates := Set new.
	someRules
		do: [ :rule | 
			| predicateSelector subjectElements argumentElements data isPredicateInv isSubjectInv |
			predicateSelector := (rule predicate nameNormalized , ':') asSymbol.
			isPredicateInv := rule hasPredicateInverted.
			isSubjectInv := rule hasSubjectInverted.
			subjectElements := rule subjectElements.
			argumentElements := rule argumentElements.
			subjectElements
				do: [ :subject | 
					argumentElements
						do: [ :argument | 
							| relId spec msgPass msgFail |
							relId := subject id , '-' , argument id.
							msgPass := subject id , '.' , rule predicate name , '(' , argument id , ')=True'.
							msgFail := subject id , '.' , rule predicate name , '(' , argument id , ')=False'.
							(processedPredicates includes: relId)
								ifFalse: [ 
									data := {(#subject -> subject value).
									(#argument -> argument value).
									(#ruleId -> rule id).
									(#propertyId -> relId).
									(#msgPass -> msgPass).
									(#msgFail -> msgFail)} asDictionary.
									spec := self perform: predicateSelector withArguments: {data}.
									spec := spec
										dictoReplace:
											{('$subject' -> subject value).
											('$argument' -> argument value).
											('$ruleId' -> rule id).
											('$propertyId' -> relId).
											('$msgPass' -> msgPass).
											('$msgFail' -> msgFail)}.
									res := res , spec ].	"avoid duplicate predicate evaluations"
							processedPredicates add: relId ] ] ].
	^ res in DIPhpDependencies(DIAdapter)>>printRulesEntityRelationship:
	Receiver: a DIPhpDependencies
	Arguments and temporary variables: 
		someRules: 	a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalk...etc...
		processedPredicates: 	a Set()
		data: 	nil
		res: 	''
		rule: 	RuleResult cannot depend on DictoTalker
		predicateSelector: 	#dependOn:
		subjectElements: 	nil
		argumentElements: 	nil
		isPredicateInv: 	false
		isSubjectInv: 	false
	Receiver's instance variables: 
		output: 	''
		commandOutput: 	''
		NEWLINE: 	'
'
		rules: 	a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalker m...etc...
		varSynonyms: 	nil
		sessionId: 	'1424274629'
		TIMESTAMP: 	'1424274629'
		TOOLNAME: 	'DIPhpDependencies'
		PROJECTROOT: 	'/home/otruffer/DictoCLI/'
		PROJECTSRC: 	'./'
		PROJECTBIN: 	'./'
		RESULTFILE: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/full-test/142427...etc...
		TESTFILE: 	nil
		testInputFileExt: 	'.st'
		SYSTEM: 	SYSTEM


DICollectionRule(OrderedCollection)>>do:
	Receiver: a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalker must depend on Rule...etc...
	Arguments and temporary variables: 
		aBlock: 	printRulesEntityRelationship: someRules
	| res processedPredicates |
	r...etc...
		index: 	1
	Receiver's instance variables: 
		array: 	an Array(RuleResult cannot depend on DictoTalker DictoTalker must depend...etc...
		firstIndex: 	1
		lastIndex: 	3
		elements: 	nil
		elements: 	nil


DIPhpDependencies(DIAdapter)>>printRulesEntityRelationship:
	Receiver: a DIPhpDependencies
	Arguments and temporary variables: 
		res: 	''
		someRules: 	a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalk...etc...
		processedPredicates: 	a Set()
	Receiver's instance variables: 
		output: 	''
		commandOutput: 	''
		NEWLINE: 	'
'
		rules: 	a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalker m...etc...
		varSynonyms: 	nil
		sessionId: 	'1424274629'
		TIMESTAMP: 	'1424274629'
		TOOLNAME: 	'DIPhpDependencies'
		PROJECTROOT: 	'/home/otruffer/DictoCLI/'
		PROJECTSRC: 	'./'
		PROJECTBIN: 	'./'
		RESULTFILE: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/full-test/142427...etc...
		TESTFILE: 	nil
		testInputFileExt: 	'.st'
		SYSTEM: 	SYSTEM


DIPhpDependencies(DIAdapter)>>printRules
	Receiver: a DIPhpDependencies
	Arguments and temporary variables: 
		res: 	nil
		allRules: 	a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalke...etc...
	Receiver's instance variables: 
		output: 	''
		commandOutput: 	''
		NEWLINE: 	'
'
		rules: 	a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalker m...etc...
		varSynonyms: 	nil
		sessionId: 	'1424274629'
		TIMESTAMP: 	'1424274629'
		TOOLNAME: 	'DIPhpDependencies'
		PROJECTROOT: 	'/home/otruffer/DictoCLI/'
		PROJECTSRC: 	'./'
		PROJECTBIN: 	'./'
		RESULTFILE: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/full-test/142427...etc...
		TESTFILE: 	nil
		testInputFileExt: 	'.st'
		SYSTEM: 	SYSTEM


DIPhpDependencies>>testInput
	Receiver: a DIPhpDependencies
	Arguments and temporary variables: 
		strRules: 	nil
	Receiver's instance variables: 
		output: 	''
		commandOutput: 	''
		NEWLINE: 	'
'
		rules: 	a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalker m...etc...
		varSynonyms: 	nil
		sessionId: 	'1424274629'
		TIMESTAMP: 	'1424274629'
		TOOLNAME: 	'DIPhpDependencies'
		PROJECTROOT: 	'/home/otruffer/DictoCLI/'
		PROJECTSRC: 	'./'
		PROJECTBIN: 	'./'
		RESULTFILE: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/full-test/142427...etc...
		TESTFILE: 	nil
		testInputFileExt: 	'.st'
		SYSTEM: 	SYSTEM


DITestGroup>>build
	Receiver: a DITestGroup
	Arguments and temporary variables: 

	Receiver's instance variables: 
		rules: 	an OrderedCollection(RuleResult cannot depend on DictoTalker DictoTalker...etc...
		adapter: 	a DIPhpDependencies
		runCommandText: 	nil
		testSpecification: 	nil
		adapterID: 	'DIPhpDependencies'
		resultFile: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/full-test/142427...etc...
		specificationFile: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/full-test...etc...
		commandFile: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/full-test/14242...etc...


[ :testGroup | testGroup build ] in DIDicto>>dictoBuild:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = ...etc...
		adapterTestGroups: 	a Dictionary(DIGrepFileContent->a DITestGroup DIJMeterLoadTe...etc...
		testGroup: 	a DITestGroup
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424274629'
		singleShotTask: 	false


Array(SequenceableCollection)>>do:
	Receiver: an Array(a DITestGroup a DITestGroup a DITestGroup a DITestGroup a DITestGroup)
	Arguments and temporary variables: 
		aBlock: 	[ :testGroup | testGroup build ]
		index: 	4
	Receiver's instance variables: 
an Array(a DITestGroup a DITestGroup a DITestGroup a DITestGroup a DITestGroup)

DIDicto>>dictoBuild:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = ...etc...
		adapterTestGroups: 	a Dictionary(DIGrepFileContent->a DITestGroup DIJMeterLoadTe...etc...
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424274629'
		singleShotTask: 	false


DIDicto>>dictoRun:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = ...etc...
		adapterTestGroups: 	nil
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424274629'
		singleShotTask: 	false


DIDicto>>dictoAll:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = ...etc...
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424274629'
		singleShotTask: 	false


[ DIDicto new dictoAll: input ] in DIWebServiceAPI>>getRun
	Receiver: a DIWebServiceAPI
	Arguments and temporary variables: 
		in: 	'/home/otruffer/dicto/bin/analysis/full-test/dicto.rules'
		input: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = PhpCl...etc...
		rulesFailed: 	nil
		rulesTotal: 	nil
	Receiver's instance variables: 
		request: 	nil
		response: 	nil
		variables: 	nil
		delegate: 	nil
		principal: 	nil
		credentials: 	nil


BlockClosure>>on:do:
	Receiver: [ DIDicto new dictoAll: input ]
	Arguments and temporary variables: 
		exception: 	DIException
		handlerAction: 	[ :ex | ^ self error: ex description ]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	DIWebServiceAPI>>getRun
		startpc: 	138
		numArgs: 	0


DIWebServiceAPI>>getRun
	Receiver: a DIWebServiceAPI
	Arguments and temporary variables: 
		in: 	'/home/otruffer/dicto/bin/analysis/full-test/dicto.rules'
		input: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = PhpCl...etc...
		rulesFailed: 	nil
		rulesTotal: 	nil
	Receiver's instance variables: 
		request: 	nil
		response: 	nil
		variables: 	nil
		delegate: 	nil
		principal: 	nil
		credentials: 	nil


DIWebServiceHandler>>post
	Receiver: a DIWebServiceHandler
	Arguments and temporary variables: 
		api: 	a DIWebServiceAPI
	Receiver's instance variables: 
		request: 	a ZnRequest(POST /full-test/run)
		response: 	nil
		variables: 	an OrderedCollection('full-test' 'run')
		delegate: 	a ZnJSONRestServerDelegate
		principal: 	nil
		credentials: 	nil
		dicto: 	a DIDicto


DIWebServiceHandler(ZnRestCall)>>execute
	Receiver: a DIWebServiceHandler
	Arguments and temporary variables: 

	Receiver's instance variables: 
		request: 	a ZnRequest(POST /full-test/run)
		response: 	nil
		variables: 	an OrderedCollection('full-test' 'run')
		delegate: 	a ZnJSONRestServerDelegate
		principal: 	nil
		credentials: 	nil
		dicto: 	a DIDicto


[ call execute ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


BlockClosure>>on:do:
	Receiver: [ call execute ]
	Arguments and temporary variables: 
		exception: 	ZnRestCallUnauthorized
		handlerAction: 	[ :exception | self unauthorized: exception request ]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
		startpc: 	38
		numArgs: 	0


ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


[ self execute: call ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /full-test/run)
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


BlockClosure>>on:do:
	Receiver: [ self execute: call ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :exception | 
request server debugMode
	ifTrue: [ exception pa...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
		startpc: 	99
		numArgs: 	0


ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /full-test/run)
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ :delegate | delegate handleRequest: request ] ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /full-test/run)
		delegate: 	a ZnJSONRestServerDelegate
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateRequest:do:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /full-test/run)
		block: 	[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ ...etc...
		authenticator: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /full-test/run)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream)


[ self authenticateAndDelegateRequest: request ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /full-test/run)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream)


BlockClosure>>on:do:
	Receiver: [ self authenticateAndDelegateRequest: request ]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :exception | 
self debugMode
	ifTrue: [ exception pass ]
	ifFa...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequ...etc...
		startpc: 	58
		numArgs: 	0


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /full-test/run)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /full-test/run)
		response: 	nil
		initialMilliseconds: 	19139894
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeOneRequestResponseOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		stream: 	a ZdcSocketStream
		request: 	a ZnRequest(POST /full-test/run)
		response: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream)



--- The full stack ---
NeoJSONReader>>error:
NeoJSONReader>>parseValue
NeoJSONReader>>next
NeoJSONReader class>>fromString:
DIPhpModel>>_loadPhpModel
DIPhpModel>>model
DIVarPhpClass>>allElements
DIVarPhpClass(DIVar)>>elements
DISimpleRule>>subjectElements
printRulesEntityRelationship: someRules
	| res processedPredicates |
	res := ''.
	processedPredicates := Set new.
	someRules
		do: [ :rule | 
			| predicateSelector subjectElements argumentElements data isPredicateInv isSubjectInv |
			predicateSelector := (rule predicate nameNormalized , ':') asSymbol.
			isPredicateInv := rule hasPredicateInverted.
			isSubjectInv := rule hasSubjectInverted.
			subjectElements := rule subjectElements.
			argumentElements := rule argumentElements.
			subjectElements
				do: [ :subject | 
					argumentElements
						do: [ :argument | 
							| relId spec msgPass msgFail |
							relId := subject id , '-' , argument id.
							msgPass := subject id , '.' , rule predicate name , '(' , argument id , ')=True'.
							msgFail := subject id , '.' , rule predicate name , '(' , argument id , ')=False'.
							(processedPredicates includes: relId)
								ifFalse: [ 
									data := {(#subject -> subject value).
									(#argument -> argument value).
									(#ruleId -> rule id).
									(#propertyId -> relId).
									(#msgPass -> msgPass).
									(#msgFail -> msgFail)} asDictionary.
									spec := self perform: predicateSelector withArguments: {data}.
									spec := spec
										dictoReplace:
											{('$subject' -> subject value).
											('$argument' -> argument value).
											('$ruleId' -> rule id).
											('$propertyId' -> relId).
											('$msgPass' -> msgPass).
											('$msgFail' -> msgFail)}.
									res := res , spec ].	"avoid duplicate predicate evaluations"
							processedPredicates add: relId ] ] ].
	^ res in DIPhpDependencies(DIAdapter)>>printRulesEntityRelationship:
DICollectionRule(OrderedCollection)>>do:
DIPhpDependencies(DIAdapter)>>printRulesEntityRelationship:
DIPhpDependencies(DIAdapter)>>printRules
DIPhpDependencies>>testInput
DITestGroup>>build
[ :testGroup | testGroup build ] in DIDicto>>dictoBuild:
Array(SequenceableCollection)>>do:
DIDicto>>dictoBuild:
DIDicto>>dictoRun:
DIDicto>>dictoAll:
[ DIDicto new dictoAll: input ] in DIWebServiceAPI>>getRun
BlockClosure>>on:do:
DIWebServiceAPI>>getRun
DIWebServiceHandler>>post
DIWebServiceHandler(ZnRestCall)>>execute
[ call execute ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
BlockClosure>>on:do:
ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
[ self execute: call ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
BlockClosure>>on:do:
ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ :delegate | delegate handleRequest: request ] ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateRequest:do:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
[ self authenticateAndDelegateRequest: request ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
BlockClosure>>on:do:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequest:
ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeOneRequestResponseOn:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ self executeOneRequestResponseOn: stream ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
[ 
p psValueAt: index put: anObject.
aBlock value ] in ZnCurrentServer(DynamicVariable)>>value:during:
BlockClosure>>ensure:
ZnCurrentServer(DynamicVariable)>>value:during:
ZnCurrentServer class(DynamicVariable class)>>value:during:
ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
[ self executeRequestResponseLoopOn: stream ] in [ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ] in [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
BlockClosure>>ensure:
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ] in [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
BlockClosure>>ifCurtailed:
[ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
NeoJSONParseError: invalid input: nil
18 February 2015 4:52:34.653789 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
NBCogit NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
https://github.com/pharo-project/pharo-vm.git Commit: 4a0d556150d478ff2de3c9624d2f18e6eaa3fa5c Date: 2014-12-18 18:42:53 +0100 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14893

Image: Pharo3.0 [Latest update: #30863]

NeoJSONReader>>error:
	Receiver: a NeoJSONReader
	Arguments and temporary variables: 
		text: 	'invalid input: nil'
	Receiver's instance variables: 
		mappings: 	nil
		readStream: 	a ReadStream
		stringStream: 	nil
		listClass: 	nil
		mapClass: 	nil
		propertyNamesAsSymbols: 	false


NeoJSONReader>>parseValue
	Receiver: a NeoJSONReader
	Arguments and temporary variables: 
		char: 	nil
	Receiver's instance variables: 
		mappings: 	nil
		readStream: 	a ReadStream
		stringStream: 	nil
		listClass: 	nil
		mapClass: 	nil
		propertyNamesAsSymbols: 	false


NeoJSONReader>>next
	Receiver: a NeoJSONReader
	Arguments and temporary variables: 

	Receiver's instance variables: 
		mappings: 	nil
		readStream: 	a ReadStream
		stringStream: 	nil
		listClass: 	nil
		mapClass: 	nil
		propertyNamesAsSymbols: 	false


NeoJSONReader class>>fromString:
	Receiver: NeoJSONReader
	Arguments and temporary variables: 
		string: 	''
	Receiver's instance variables: 
		superclass: 	NeoJSONMapper
		methodDict: 	a MethodDictionary(#atEnd->NeoJSONReader>>#atEnd #close->NeoJSONRea...etc...
		format: 	142
		layout: 	a FixedLayout
		instanceVariables: 	#(#readStream #stringStream #listClass #mapClass #propertyNa...etc...
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#NeoJSONReader
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Neo-JSON-Core'
		traitComposition: 	{}
		localSelectors: 	nil


DIPhpModel>>_loadPhpModel
	Receiver: a DIPhpModel
	Arguments and temporary variables: 

	Receiver's instance variables: 
		defRules: 	a DICollectionRule()
		defVars: 	a DICollectionVar(SYSTEM)
		analysisID: 	'1424274755'
		additionalProperties: 	a Dictionary()
		ruleCounter: 	0
		varCounter: 	0
		defVarElements: 	a DICollectionVarElements()
		defVarInvertedElements: 	a DICollectionVarElements()
		model: 	nil


DIPhpModel>>model
	Receiver: a DIPhpModel
	Arguments and temporary variables: 

	Receiver's instance variables: 
		defRules: 	a DICollectionRule()
		defVars: 	a DICollectionVar(SYSTEM)
		analysisID: 	'1424274755'
		additionalProperties: 	a Dictionary()
		ruleCounter: 	0
		varCounter: 	0
		defVarElements: 	a DICollectionVarElements()
		defVarInvertedElements: 	a DICollectionVarElements()
		model: 	nil


DIVarPhpClass>>allElements
	Receiver: RuleResult
	Arguments and temporary variables: 

	Receiver's instance variables: 
		isFirst: 	false
		dslText: 	'RuleResult=PhpClass with name:"Dicto\\RuleResult"'
		type: 	'PhpClass'
		id: 	1
		entity: 	nil
		name: 	'RuleResult'
		specifiers: 	an OrderedCollection(name=Dicto\\RuleResult)
		isInverted: 	false
		elements: 	a DICollectionVarElements()
		invertedElements: 	a DICollectionVarElements()


DIVarPhpClass(DIVar)>>elements
	Receiver: RuleResult
	Arguments and temporary variables: 
		valid: 	nil
	Receiver's instance variables: 
		isFirst: 	false
		dslText: 	'RuleResult=PhpClass with name:"Dicto\\RuleResult"'
		type: 	'PhpClass'
		id: 	1
		entity: 	nil
		name: 	'RuleResult'
		specifiers: 	an OrderedCollection(name=Dicto\\RuleResult)
		isInverted: 	false
		elements: 	a DICollectionVarElements()
		invertedElements: 	a DICollectionVarElements()


DISimpleRule>>subjectElements
	Receiver: RuleResult cannot depend on DictoTalker
	Arguments and temporary variables: 
		subjectElements: 	nil
	Receiver's instance variables: 
		isFirst: 	nil
		dslText: 	'RuleResult cannot depend on DictoTalker'
		type: 	#cannot
		id: 	1001
		entity: 	nil
		subjects: 	an Array(RuleResult)
		predicates: 	an Array(depend on DictoTalker)
		subRules: 	nil
		candidateAdapters: 	a SortedCollection(DIPhpDependencies)
		chosenAdapter: 	DIPhpDependencies
		hasFailed: 	false
		failureMessage: 	''
		failingPredicates: 	a Set()
		hasSubjectInverted: 	false
		hasPredicateInverted: 	false


printRulesEntityRelationship: someRules
	| res processedPredicates |
	res := ''.
	processedPredicates := Set new.
	someRules
		do: [ :rule | 
			| predicateSelector subjectElements argumentElements data isPredicateInv isSubjectInv |
			predicateSelector := (rule predicate nameNormalized , ':') asSymbol.
			isPredicateInv := rule hasPredicateInverted.
			isSubjectInv := rule hasSubjectInverted.
			subjectElements := rule subjectElements.
			argumentElements := rule argumentElements.
			subjectElements
				do: [ :subject | 
					argumentElements
						do: [ :argument | 
							| relId spec msgPass msgFail |
							relId := subject id , '-' , argument id.
							msgPass := subject id , '.' , rule predicate name , '(' , argument id , ')=True'.
							msgFail := subject id , '.' , rule predicate name , '(' , argument id , ')=False'.
							(processedPredicates includes: relId)
								ifFalse: [ 
									data := {(#subject -> subject value).
									(#argument -> argument value).
									(#ruleId -> rule id).
									(#propertyId -> relId).
									(#msgPass -> msgPass).
									(#msgFail -> msgFail)} asDictionary.
									spec := self perform: predicateSelector withArguments: {data}.
									spec := spec
										dictoReplace:
											{('$subject' -> subject value).
											('$argument' -> argument value).
											('$ruleId' -> rule id).
											('$propertyId' -> relId).
											('$msgPass' -> msgPass).
											('$msgFail' -> msgFail)}.
									res := res , spec ].	"avoid duplicate predicate evaluations"
							processedPredicates add: relId ] ] ].
	^ res in DIPhpDependencies(DIAdapter)>>printRulesEntityRelationship:
	Receiver: a DIPhpDependencies
	Arguments and temporary variables: 
		someRules: 	a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalk...etc...
		processedPredicates: 	a Set()
		data: 	nil
		res: 	''
		rule: 	RuleResult cannot depend on DictoTalker
		predicateSelector: 	#dependOn:
		subjectElements: 	nil
		argumentElements: 	nil
		isPredicateInv: 	false
		isSubjectInv: 	false
	Receiver's instance variables: 
		output: 	''
		commandOutput: 	''
		NEWLINE: 	'
'
		rules: 	a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalker m...etc...
		varSynonyms: 	nil
		sessionId: 	'1424274755'
		TIMESTAMP: 	'1424274755'
		TOOLNAME: 	'DIPhpDependencies'
		PROJECTROOT: 	'/home/otruffer/DictoCLI/'
		PROJECTSRC: 	'./'
		PROJECTBIN: 	'./'
		RESULTFILE: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/full-test/142427...etc...
		TESTFILE: 	nil
		testInputFileExt: 	'.st'
		SYSTEM: 	SYSTEM


DICollectionRule(OrderedCollection)>>do:
	Receiver: a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalker must depend on Rule...etc...
	Arguments and temporary variables: 
		aBlock: 	printRulesEntityRelationship: someRules
	| res processedPredicates |
	r...etc...
		index: 	1
	Receiver's instance variables: 
		array: 	an Array(RuleResult cannot depend on DictoTalker DictoTalker must depend...etc...
		firstIndex: 	1
		lastIndex: 	3
		elements: 	nil
		elements: 	nil


DIPhpDependencies(DIAdapter)>>printRulesEntityRelationship:
	Receiver: a DIPhpDependencies
	Arguments and temporary variables: 
		res: 	''
		someRules: 	a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalk...etc...
		processedPredicates: 	a Set()
	Receiver's instance variables: 
		output: 	''
		commandOutput: 	''
		NEWLINE: 	'
'
		rules: 	a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalker m...etc...
		varSynonyms: 	nil
		sessionId: 	'1424274755'
		TIMESTAMP: 	'1424274755'
		TOOLNAME: 	'DIPhpDependencies'
		PROJECTROOT: 	'/home/otruffer/DictoCLI/'
		PROJECTSRC: 	'./'
		PROJECTBIN: 	'./'
		RESULTFILE: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/full-test/142427...etc...
		TESTFILE: 	nil
		testInputFileExt: 	'.st'
		SYSTEM: 	SYSTEM


DIPhpDependencies(DIAdapter)>>printRules
	Receiver: a DIPhpDependencies
	Arguments and temporary variables: 
		res: 	nil
		allRules: 	a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalke...etc...
	Receiver's instance variables: 
		output: 	''
		commandOutput: 	''
		NEWLINE: 	'
'
		rules: 	a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalker m...etc...
		varSynonyms: 	nil
		sessionId: 	'1424274755'
		TIMESTAMP: 	'1424274755'
		TOOLNAME: 	'DIPhpDependencies'
		PROJECTROOT: 	'/home/otruffer/DictoCLI/'
		PROJECTSRC: 	'./'
		PROJECTBIN: 	'./'
		RESULTFILE: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/full-test/142427...etc...
		TESTFILE: 	nil
		testInputFileExt: 	'.st'
		SYSTEM: 	SYSTEM


DIPhpDependencies>>testInput
	Receiver: a DIPhpDependencies
	Arguments and temporary variables: 
		strRules: 	nil
	Receiver's instance variables: 
		output: 	''
		commandOutput: 	''
		NEWLINE: 	'
'
		rules: 	a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalker m...etc...
		varSynonyms: 	nil
		sessionId: 	'1424274755'
		TIMESTAMP: 	'1424274755'
		TOOLNAME: 	'DIPhpDependencies'
		PROJECTROOT: 	'/home/otruffer/DictoCLI/'
		PROJECTSRC: 	'./'
		PROJECTBIN: 	'./'
		RESULTFILE: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/full-test/142427...etc...
		TESTFILE: 	nil
		testInputFileExt: 	'.st'
		SYSTEM: 	SYSTEM


DITestGroup>>build
	Receiver: a DITestGroup
	Arguments and temporary variables: 

	Receiver's instance variables: 
		rules: 	an OrderedCollection(RuleResult cannot depend on DictoTalker DictoTalker...etc...
		adapter: 	a DIPhpDependencies
		runCommandText: 	nil
		testSpecification: 	nil
		adapterID: 	'DIPhpDependencies'
		resultFile: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/full-test/142427...etc...
		specificationFile: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/full-test...etc...
		commandFile: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/full-test/14242...etc...


[ :testGroup | testGroup build ] in DIDicto>>dictoBuild:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = ...etc...
		adapterTestGroups: 	a Dictionary(DIGrepFileContent->a DITestGroup DIJMeterLoadTe...etc...
		testGroup: 	a DITestGroup
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424274755'
		singleShotTask: 	false


Array(SequenceableCollection)>>do:
	Receiver: an Array(a DITestGroup a DITestGroup a DITestGroup a DITestGroup a DITestGroup)
	Arguments and temporary variables: 
		aBlock: 	[ :testGroup | testGroup build ]
		index: 	4
	Receiver's instance variables: 
an Array(a DITestGroup a DITestGroup a DITestGroup a DITestGroup a DITestGroup)

DIDicto>>dictoBuild:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = ...etc...
		adapterTestGroups: 	a Dictionary(DIGrepFileContent->a DITestGroup DIJMeterLoadTe...etc...
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424274755'
		singleShotTask: 	false


DIDicto>>dictoRun:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = ...etc...
		adapterTestGroups: 	nil
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424274755'
		singleShotTask: 	false


DIDicto>>dictoAll:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = ...etc...
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424274755'
		singleShotTask: 	false


[ DIDicto new dictoAll: input ] in DIWebServiceAPI>>getRun
	Receiver: a DIWebServiceAPI
	Arguments and temporary variables: 
		in: 	'/home/otruffer/dicto/bin/analysis/full-test/dicto.rules'
		input: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = PhpCl...etc...
		rulesFailed: 	nil
		rulesTotal: 	nil
	Receiver's instance variables: 
		request: 	nil
		response: 	nil
		variables: 	nil
		delegate: 	nil
		principal: 	nil
		credentials: 	nil


BlockClosure>>on:do:
	Receiver: [ DIDicto new dictoAll: input ]
	Arguments and temporary variables: 
		exception: 	DIException
		handlerAction: 	[ :ex | ^ self error: ex description ]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	DIWebServiceAPI>>getRun
		startpc: 	138
		numArgs: 	0


DIWebServiceAPI>>getRun
	Receiver: a DIWebServiceAPI
	Arguments and temporary variables: 
		in: 	'/home/otruffer/dicto/bin/analysis/full-test/dicto.rules'
		input: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = PhpCl...etc...
		rulesFailed: 	nil
		rulesTotal: 	nil
	Receiver's instance variables: 
		request: 	nil
		response: 	nil
		variables: 	nil
		delegate: 	nil
		principal: 	nil
		credentials: 	nil


DIWebServiceHandler>>post
	Receiver: a DIWebServiceHandler
	Arguments and temporary variables: 
		api: 	a DIWebServiceAPI
	Receiver's instance variables: 
		request: 	a ZnRequest(POST /full-test/run)
		response: 	nil
		variables: 	an OrderedCollection('full-test' 'run')
		delegate: 	a ZnJSONRestServerDelegate
		principal: 	nil
		credentials: 	nil
		dicto: 	a DIDicto


DIWebServiceHandler(ZnRestCall)>>execute
	Receiver: a DIWebServiceHandler
	Arguments and temporary variables: 

	Receiver's instance variables: 
		request: 	a ZnRequest(POST /full-test/run)
		response: 	nil
		variables: 	an OrderedCollection('full-test' 'run')
		delegate: 	a ZnJSONRestServerDelegate
		principal: 	nil
		credentials: 	nil
		dicto: 	a DIDicto


[ call execute ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


BlockClosure>>on:do:
	Receiver: [ call execute ]
	Arguments and temporary variables: 
		exception: 	ZnRestCallUnauthorized
		handlerAction: 	[ :exception | self unauthorized: exception request ]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
		startpc: 	38
		numArgs: 	0


ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


[ self execute: call ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /full-test/run)
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


BlockClosure>>on:do:
	Receiver: [ self execute: call ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :exception | 
request server debugMode
	ifTrue: [ exception pa...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
		startpc: 	99
		numArgs: 	0


ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /full-test/run)
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ :delegate | delegate handleRequest: request ] ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /full-test/run)
		delegate: 	a ZnJSONRestServerDelegate
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateRequest:do:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /full-test/run)
		block: 	[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ ...etc...
		authenticator: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /full-test/run)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream)


[ self authenticateAndDelegateRequest: request ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /full-test/run)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream)


BlockClosure>>on:do:
	Receiver: [ self authenticateAndDelegateRequest: request ]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :exception | 
self debugMode
	ifTrue: [ exception pass ]
	ifFa...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequ...etc...
		startpc: 	58
		numArgs: 	0


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /full-test/run)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /full-test/run)
		response: 	nil
		initialMilliseconds: 	19265003
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeOneRequestResponseOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		stream: 	a ZdcSocketStream
		request: 	a ZnRequest(POST /full-test/run)
		response: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream)



--- The full stack ---
NeoJSONReader>>error:
NeoJSONReader>>parseValue
NeoJSONReader>>next
NeoJSONReader class>>fromString:
DIPhpModel>>_loadPhpModel
DIPhpModel>>model
DIVarPhpClass>>allElements
DIVarPhpClass(DIVar)>>elements
DISimpleRule>>subjectElements
printRulesEntityRelationship: someRules
	| res processedPredicates |
	res := ''.
	processedPredicates := Set new.
	someRules
		do: [ :rule | 
			| predicateSelector subjectElements argumentElements data isPredicateInv isSubjectInv |
			predicateSelector := (rule predicate nameNormalized , ':') asSymbol.
			isPredicateInv := rule hasPredicateInverted.
			isSubjectInv := rule hasSubjectInverted.
			subjectElements := rule subjectElements.
			argumentElements := rule argumentElements.
			subjectElements
				do: [ :subject | 
					argumentElements
						do: [ :argument | 
							| relId spec msgPass msgFail |
							relId := subject id , '-' , argument id.
							msgPass := subject id , '.' , rule predicate name , '(' , argument id , ')=True'.
							msgFail := subject id , '.' , rule predicate name , '(' , argument id , ')=False'.
							(processedPredicates includes: relId)
								ifFalse: [ 
									data := {(#subject -> subject value).
									(#argument -> argument value).
									(#ruleId -> rule id).
									(#propertyId -> relId).
									(#msgPass -> msgPass).
									(#msgFail -> msgFail)} asDictionary.
									spec := self perform: predicateSelector withArguments: {data}.
									spec := spec
										dictoReplace:
											{('$subject' -> subject value).
											('$argument' -> argument value).
											('$ruleId' -> rule id).
											('$propertyId' -> relId).
											('$msgPass' -> msgPass).
											('$msgFail' -> msgFail)}.
									res := res , spec ].	"avoid duplicate predicate evaluations"
							processedPredicates add: relId ] ] ].
	^ res in DIPhpDependencies(DIAdapter)>>printRulesEntityRelationship:
DICollectionRule(OrderedCollection)>>do:
DIPhpDependencies(DIAdapter)>>printRulesEntityRelationship:
DIPhpDependencies(DIAdapter)>>printRules
DIPhpDependencies>>testInput
DITestGroup>>build
[ :testGroup | testGroup build ] in DIDicto>>dictoBuild:
Array(SequenceableCollection)>>do:
DIDicto>>dictoBuild:
DIDicto>>dictoRun:
DIDicto>>dictoAll:
[ DIDicto new dictoAll: input ] in DIWebServiceAPI>>getRun
BlockClosure>>on:do:
DIWebServiceAPI>>getRun
DIWebServiceHandler>>post
DIWebServiceHandler(ZnRestCall)>>execute
[ call execute ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
BlockClosure>>on:do:
ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
[ self execute: call ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
BlockClosure>>on:do:
ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ :delegate | delegate handleRequest: request ] ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateRequest:do:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
[ self authenticateAndDelegateRequest: request ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
BlockClosure>>on:do:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequest:
ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeOneRequestResponseOn:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ self executeOneRequestResponseOn: stream ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
[ 
p psValueAt: index put: anObject.
aBlock value ] in ZnCurrentServer(DynamicVariable)>>value:during:
BlockClosure>>ensure:
ZnCurrentServer(DynamicVariable)>>value:during:
ZnCurrentServer class(DynamicVariable class)>>value:during:
ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
[ self executeRequestResponseLoopOn: stream ] in [ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ] in [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
BlockClosure>>ensure:
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ] in [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
BlockClosure>>ifCurtailed:
[ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
NeoJSONParseError: invalid input: nil
18 February 2015 4:52:41.573323 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
NBCogit NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
https://github.com/pharo-project/pharo-vm.git Commit: 4a0d556150d478ff2de3c9624d2f18e6eaa3fa5c Date: 2014-12-18 18:42:53 +0100 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14893

Image: Pharo3.0 [Latest update: #30863]

NeoJSONReader>>error:
	Receiver: a NeoJSONReader
	Arguments and temporary variables: 
		text: 	'invalid input: nil'
	Receiver's instance variables: 
		mappings: 	nil
		readStream: 	a ReadStream
		stringStream: 	nil
		listClass: 	nil
		mapClass: 	nil
		propertyNamesAsSymbols: 	false


NeoJSONReader>>parseValue
	Receiver: a NeoJSONReader
	Arguments and temporary variables: 
		char: 	nil
	Receiver's instance variables: 
		mappings: 	nil
		readStream: 	a ReadStream
		stringStream: 	nil
		listClass: 	nil
		mapClass: 	nil
		propertyNamesAsSymbols: 	false


NeoJSONReader>>next
	Receiver: a NeoJSONReader
	Arguments and temporary variables: 

	Receiver's instance variables: 
		mappings: 	nil
		readStream: 	a ReadStream
		stringStream: 	nil
		listClass: 	nil
		mapClass: 	nil
		propertyNamesAsSymbols: 	false


NeoJSONReader class>>fromString:
	Receiver: NeoJSONReader
	Arguments and temporary variables: 
		string: 	''
	Receiver's instance variables: 
		superclass: 	NeoJSONMapper
		methodDict: 	a MethodDictionary(#atEnd->NeoJSONReader>>#atEnd #close->NeoJSONRea...etc...
		format: 	142
		layout: 	a FixedLayout
		instanceVariables: 	#(#readStream #stringStream #listClass #mapClass #propertyNa...etc...
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#NeoJSONReader
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Neo-JSON-Core'
		traitComposition: 	{}
		localSelectors: 	nil


DIPhpModel>>_loadPhpModel
	Receiver: a DIPhpModel
	Arguments and temporary variables: 

	Receiver's instance variables: 
		defRules: 	a DICollectionRule()
		defVars: 	a DICollectionVar(SYSTEM)
		analysisID: 	'1424274762'
		additionalProperties: 	a Dictionary()
		ruleCounter: 	0
		varCounter: 	0
		defVarElements: 	a DICollectionVarElements()
		defVarInvertedElements: 	a DICollectionVarElements()
		model: 	nil


DIPhpModel>>model
	Receiver: a DIPhpModel
	Arguments and temporary variables: 

	Receiver's instance variables: 
		defRules: 	a DICollectionRule()
		defVars: 	a DICollectionVar(SYSTEM)
		analysisID: 	'1424274762'
		additionalProperties: 	a Dictionary()
		ruleCounter: 	0
		varCounter: 	0
		defVarElements: 	a DICollectionVarElements()
		defVarInvertedElements: 	a DICollectionVarElements()
		model: 	nil


DIVarPhpClass>>allElements
	Receiver: RuleResult
	Arguments and temporary variables: 

	Receiver's instance variables: 
		isFirst: 	false
		dslText: 	'RuleResult=PhpClass with name:"Dicto\\RuleResult"'
		type: 	'PhpClass'
		id: 	1
		entity: 	nil
		name: 	'RuleResult'
		specifiers: 	an OrderedCollection(name=Dicto\\RuleResult)
		isInverted: 	false
		elements: 	a DICollectionVarElements()
		invertedElements: 	a DICollectionVarElements()


DIVarPhpClass(DIVar)>>elements
	Receiver: RuleResult
	Arguments and temporary variables: 
		valid: 	nil
	Receiver's instance variables: 
		isFirst: 	false
		dslText: 	'RuleResult=PhpClass with name:"Dicto\\RuleResult"'
		type: 	'PhpClass'
		id: 	1
		entity: 	nil
		name: 	'RuleResult'
		specifiers: 	an OrderedCollection(name=Dicto\\RuleResult)
		isInverted: 	false
		elements: 	a DICollectionVarElements()
		invertedElements: 	a DICollectionVarElements()


DISimpleRule>>subjectElements
	Receiver: RuleResult cannot depend on DictoTalker
	Arguments and temporary variables: 
		subjectElements: 	nil
	Receiver's instance variables: 
		isFirst: 	nil
		dslText: 	'RuleResult cannot depend on DictoTalker'
		type: 	#cannot
		id: 	1001
		entity: 	nil
		subjects: 	an Array(RuleResult)
		predicates: 	an Array(depend on DictoTalker)
		subRules: 	nil
		candidateAdapters: 	a SortedCollection(DIPhpDependencies)
		chosenAdapter: 	DIPhpDependencies
		hasFailed: 	false
		failureMessage: 	''
		failingPredicates: 	a Set()
		hasSubjectInverted: 	false
		hasPredicateInverted: 	false


printRulesEntityRelationship: someRules
	| res processedPredicates |
	res := ''.
	processedPredicates := Set new.
	someRules
		do: [ :rule | 
			| predicateSelector subjectElements argumentElements data isPredicateInv isSubjectInv |
			predicateSelector := (rule predicate nameNormalized , ':') asSymbol.
			isPredicateInv := rule hasPredicateInverted.
			isSubjectInv := rule hasSubjectInverted.
			subjectElements := rule subjectElements.
			argumentElements := rule argumentElements.
			subjectElements
				do: [ :subject | 
					argumentElements
						do: [ :argument | 
							| relId spec msgPass msgFail |
							relId := subject id , '-' , argument id.
							msgPass := subject id , '.' , rule predicate name , '(' , argument id , ')=True'.
							msgFail := subject id , '.' , rule predicate name , '(' , argument id , ')=False'.
							(processedPredicates includes: relId)
								ifFalse: [ 
									data := {(#subject -> subject value).
									(#argument -> argument value).
									(#ruleId -> rule id).
									(#propertyId -> relId).
									(#msgPass -> msgPass).
									(#msgFail -> msgFail)} asDictionary.
									spec := self perform: predicateSelector withArguments: {data}.
									spec := spec
										dictoReplace:
											{('$subject' -> subject value).
											('$argument' -> argument value).
											('$ruleId' -> rule id).
											('$propertyId' -> relId).
											('$msgPass' -> msgPass).
											('$msgFail' -> msgFail)}.
									res := res , spec ].	"avoid duplicate predicate evaluations"
							processedPredicates add: relId ] ] ].
	^ res in DIPhpDependencies(DIAdapter)>>printRulesEntityRelationship:
	Receiver: a DIPhpDependencies
	Arguments and temporary variables: 
		someRules: 	a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalk...etc...
		processedPredicates: 	a Set()
		data: 	nil
		res: 	''
		rule: 	RuleResult cannot depend on DictoTalker
		predicateSelector: 	#dependOn:
		subjectElements: 	nil
		argumentElements: 	nil
		isPredicateInv: 	false
		isSubjectInv: 	false
	Receiver's instance variables: 
		output: 	''
		commandOutput: 	''
		NEWLINE: 	'
'
		rules: 	a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalker m...etc...
		varSynonyms: 	nil
		sessionId: 	'1424274761'
		TIMESTAMP: 	'1424274762'
		TOOLNAME: 	'DIPhpDependencies'
		PROJECTROOT: 	'/home/otruffer/DictoCLI/'
		PROJECTSRC: 	'./'
		PROJECTBIN: 	'./'
		RESULTFILE: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/full-test/142427...etc...
		TESTFILE: 	nil
		testInputFileExt: 	'.st'
		SYSTEM: 	SYSTEM


DICollectionRule(OrderedCollection)>>do:
	Receiver: a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalker must depend on Rule...etc...
	Arguments and temporary variables: 
		aBlock: 	printRulesEntityRelationship: someRules
	| res processedPredicates |
	r...etc...
		index: 	1
	Receiver's instance variables: 
		array: 	an Array(RuleResult cannot depend on DictoTalker DictoTalker must depend...etc...
		firstIndex: 	1
		lastIndex: 	3
		elements: 	nil
		elements: 	nil


DIPhpDependencies(DIAdapter)>>printRulesEntityRelationship:
	Receiver: a DIPhpDependencies
	Arguments and temporary variables: 
		res: 	''
		someRules: 	a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalk...etc...
		processedPredicates: 	a Set()
	Receiver's instance variables: 
		output: 	''
		commandOutput: 	''
		NEWLINE: 	'
'
		rules: 	a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalker m...etc...
		varSynonyms: 	nil
		sessionId: 	'1424274761'
		TIMESTAMP: 	'1424274762'
		TOOLNAME: 	'DIPhpDependencies'
		PROJECTROOT: 	'/home/otruffer/DictoCLI/'
		PROJECTSRC: 	'./'
		PROJECTBIN: 	'./'
		RESULTFILE: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/full-test/142427...etc...
		TESTFILE: 	nil
		testInputFileExt: 	'.st'
		SYSTEM: 	SYSTEM


DIPhpDependencies(DIAdapter)>>printRules
	Receiver: a DIPhpDependencies
	Arguments and temporary variables: 
		res: 	nil
		allRules: 	a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalke...etc...
	Receiver's instance variables: 
		output: 	''
		commandOutput: 	''
		NEWLINE: 	'
'
		rules: 	a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalker m...etc...
		varSynonyms: 	nil
		sessionId: 	'1424274761'
		TIMESTAMP: 	'1424274762'
		TOOLNAME: 	'DIPhpDependencies'
		PROJECTROOT: 	'/home/otruffer/DictoCLI/'
		PROJECTSRC: 	'./'
		PROJECTBIN: 	'./'
		RESULTFILE: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/full-test/142427...etc...
		TESTFILE: 	nil
		testInputFileExt: 	'.st'
		SYSTEM: 	SYSTEM


DIPhpDependencies>>testInput
	Receiver: a DIPhpDependencies
	Arguments and temporary variables: 
		strRules: 	nil
	Receiver's instance variables: 
		output: 	''
		commandOutput: 	''
		NEWLINE: 	'
'
		rules: 	a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalker m...etc...
		varSynonyms: 	nil
		sessionId: 	'1424274761'
		TIMESTAMP: 	'1424274762'
		TOOLNAME: 	'DIPhpDependencies'
		PROJECTROOT: 	'/home/otruffer/DictoCLI/'
		PROJECTSRC: 	'./'
		PROJECTBIN: 	'./'
		RESULTFILE: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/full-test/142427...etc...
		TESTFILE: 	nil
		testInputFileExt: 	'.st'
		SYSTEM: 	SYSTEM


DITestGroup>>build
	Receiver: a DITestGroup
	Arguments and temporary variables: 

	Receiver's instance variables: 
		rules: 	an OrderedCollection(RuleResult cannot depend on DictoTalker DictoTalker...etc...
		adapter: 	a DIPhpDependencies
		runCommandText: 	nil
		testSpecification: 	nil
		adapterID: 	'DIPhpDependencies'
		resultFile: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/full-test/142427...etc...
		specificationFile: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/full-test...etc...
		commandFile: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/full-test/14242...etc...


[ :testGroup | testGroup build ] in DIDicto>>dictoBuild:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = ...etc...
		adapterTestGroups: 	a Dictionary(DIGrepFileContent->a DITestGroup DIJMeterLoadTe...etc...
		testGroup: 	a DITestGroup
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424274761'
		singleShotTask: 	false


Array(SequenceableCollection)>>do:
	Receiver: an Array(a DITestGroup a DITestGroup a DITestGroup a DITestGroup a DITestGroup)
	Arguments and temporary variables: 
		aBlock: 	[ :testGroup | testGroup build ]
		index: 	4
	Receiver's instance variables: 
an Array(a DITestGroup a DITestGroup a DITestGroup a DITestGroup a DITestGroup)

DIDicto>>dictoBuild:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = ...etc...
		adapterTestGroups: 	a Dictionary(DIGrepFileContent->a DITestGroup DIJMeterLoadTe...etc...
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424274761'
		singleShotTask: 	false


DIDicto>>dictoRun:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = ...etc...
		adapterTestGroups: 	nil
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424274761'
		singleShotTask: 	false


DIDicto>>dictoAll:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = ...etc...
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424274761'
		singleShotTask: 	false


[ DIDicto new dictoAll: input ] in DIWebServiceAPI>>getRun
	Receiver: a DIWebServiceAPI
	Arguments and temporary variables: 
		in: 	'/home/otruffer/dicto/bin/analysis/full-test/dicto.rules'
		input: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = PhpCl...etc...
		rulesFailed: 	nil
		rulesTotal: 	nil
	Receiver's instance variables: 
		request: 	nil
		response: 	nil
		variables: 	nil
		delegate: 	nil
		principal: 	nil
		credentials: 	nil


BlockClosure>>on:do:
	Receiver: [ DIDicto new dictoAll: input ]
	Arguments and temporary variables: 
		exception: 	DIException
		handlerAction: 	[ :ex | ^ self error: ex description ]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	DIWebServiceAPI>>getRun
		startpc: 	138
		numArgs: 	0


DIWebServiceAPI>>getRun
	Receiver: a DIWebServiceAPI
	Arguments and temporary variables: 
		in: 	'/home/otruffer/dicto/bin/analysis/full-test/dicto.rules'
		input: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = PhpCl...etc...
		rulesFailed: 	nil
		rulesTotal: 	nil
	Receiver's instance variables: 
		request: 	nil
		response: 	nil
		variables: 	nil
		delegate: 	nil
		principal: 	nil
		credentials: 	nil


DIWebServiceHandler>>post
	Receiver: a DIWebServiceHandler
	Arguments and temporary variables: 
		api: 	a DIWebServiceAPI
	Receiver's instance variables: 
		request: 	a ZnRequest(POST /full-test/run)
		response: 	nil
		variables: 	an OrderedCollection('full-test' 'run')
		delegate: 	a ZnJSONRestServerDelegate
		principal: 	nil
		credentials: 	nil
		dicto: 	a DIDicto


DIWebServiceHandler(ZnRestCall)>>execute
	Receiver: a DIWebServiceHandler
	Arguments and temporary variables: 

	Receiver's instance variables: 
		request: 	a ZnRequest(POST /full-test/run)
		response: 	nil
		variables: 	an OrderedCollection('full-test' 'run')
		delegate: 	a ZnJSONRestServerDelegate
		principal: 	nil
		credentials: 	nil
		dicto: 	a DIDicto


[ call execute ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


BlockClosure>>on:do:
	Receiver: [ call execute ]
	Arguments and temporary variables: 
		exception: 	ZnRestCallUnauthorized
		handlerAction: 	[ :exception | self unauthorized: exception request ]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
		startpc: 	38
		numArgs: 	0


ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


[ self execute: call ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /full-test/run)
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


BlockClosure>>on:do:
	Receiver: [ self execute: call ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :exception | 
request server debugMode
	ifTrue: [ exception pa...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
		startpc: 	99
		numArgs: 	0


ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /full-test/run)
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ :delegate | delegate handleRequest: request ] ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /full-test/run)
		delegate: 	a ZnJSONRestServerDelegate
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateRequest:do:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /full-test/run)
		block: 	[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ ...etc...
		authenticator: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /full-test/run)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream)


[ self authenticateAndDelegateRequest: request ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /full-test/run)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream)


BlockClosure>>on:do:
	Receiver: [ self authenticateAndDelegateRequest: request ]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :exception | 
self debugMode
	ifTrue: [ exception pass ]
	ifFa...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequ...etc...
		startpc: 	58
		numArgs: 	0


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /full-test/run)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /full-test/run)
		response: 	nil
		initialMilliseconds: 	19271914
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeOneRequestResponseOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		stream: 	a ZdcSocketStream
		request: 	a ZnRequest(POST /full-test/run)
		response: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream)



--- The full stack ---
NeoJSONReader>>error:
NeoJSONReader>>parseValue
NeoJSONReader>>next
NeoJSONReader class>>fromString:
DIPhpModel>>_loadPhpModel
DIPhpModel>>model
DIVarPhpClass>>allElements
DIVarPhpClass(DIVar)>>elements
DISimpleRule>>subjectElements
printRulesEntityRelationship: someRules
	| res processedPredicates |
	res := ''.
	processedPredicates := Set new.
	someRules
		do: [ :rule | 
			| predicateSelector subjectElements argumentElements data isPredicateInv isSubjectInv |
			predicateSelector := (rule predicate nameNormalized , ':') asSymbol.
			isPredicateInv := rule hasPredicateInverted.
			isSubjectInv := rule hasSubjectInverted.
			subjectElements := rule subjectElements.
			argumentElements := rule argumentElements.
			subjectElements
				do: [ :subject | 
					argumentElements
						do: [ :argument | 
							| relId spec msgPass msgFail |
							relId := subject id , '-' , argument id.
							msgPass := subject id , '.' , rule predicate name , '(' , argument id , ')=True'.
							msgFail := subject id , '.' , rule predicate name , '(' , argument id , ')=False'.
							(processedPredicates includes: relId)
								ifFalse: [ 
									data := {(#subject -> subject value).
									(#argument -> argument value).
									(#ruleId -> rule id).
									(#propertyId -> relId).
									(#msgPass -> msgPass).
									(#msgFail -> msgFail)} asDictionary.
									spec := self perform: predicateSelector withArguments: {data}.
									spec := spec
										dictoReplace:
											{('$subject' -> subject value).
											('$argument' -> argument value).
											('$ruleId' -> rule id).
											('$propertyId' -> relId).
											('$msgPass' -> msgPass).
											('$msgFail' -> msgFail)}.
									res := res , spec ].	"avoid duplicate predicate evaluations"
							processedPredicates add: relId ] ] ].
	^ res in DIPhpDependencies(DIAdapter)>>printRulesEntityRelationship:
DICollectionRule(OrderedCollection)>>do:
DIPhpDependencies(DIAdapter)>>printRulesEntityRelationship:
DIPhpDependencies(DIAdapter)>>printRules
DIPhpDependencies>>testInput
DITestGroup>>build
[ :testGroup | testGroup build ] in DIDicto>>dictoBuild:
Array(SequenceableCollection)>>do:
DIDicto>>dictoBuild:
DIDicto>>dictoRun:
DIDicto>>dictoAll:
[ DIDicto new dictoAll: input ] in DIWebServiceAPI>>getRun
BlockClosure>>on:do:
DIWebServiceAPI>>getRun
DIWebServiceHandler>>post
DIWebServiceHandler(ZnRestCall)>>execute
[ call execute ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
BlockClosure>>on:do:
ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
[ self execute: call ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
BlockClosure>>on:do:
ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ :delegate | delegate handleRequest: request ] ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateRequest:do:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
[ self authenticateAndDelegateRequest: request ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
BlockClosure>>on:do:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequest:
ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeOneRequestResponseOn:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ self executeOneRequestResponseOn: stream ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
[ 
p psValueAt: index put: anObject.
aBlock value ] in ZnCurrentServer(DynamicVariable)>>value:during:
BlockClosure>>ensure:
ZnCurrentServer(DynamicVariable)>>value:during:
ZnCurrentServer class(DynamicVariable class)>>value:during:
ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
[ self executeRequestResponseLoopOn: stream ] in [ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ] in [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
BlockClosure>>ensure:
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ] in [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
BlockClosure>>ifCurtailed:
[ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
NeoJSONParseError: invalid input: nil
18 February 2015 5:06:18.906032 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
NBCogit NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
https://github.com/pharo-project/pharo-vm.git Commit: 4a0d556150d478ff2de3c9624d2f18e6eaa3fa5c Date: 2014-12-18 18:42:53 +0100 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14893

Image: Pharo3.0 [Latest update: #30863]

NeoJSONReader>>error:
	Receiver: a NeoJSONReader
	Arguments and temporary variables: 
		text: 	'invalid input: nil'
	Receiver's instance variables: 
		mappings: 	nil
		readStream: 	a ReadStream
		stringStream: 	nil
		listClass: 	nil
		mapClass: 	nil
		propertyNamesAsSymbols: 	false


NeoJSONReader>>parseValue
	Receiver: a NeoJSONReader
	Arguments and temporary variables: 
		char: 	nil
	Receiver's instance variables: 
		mappings: 	nil
		readStream: 	a ReadStream
		stringStream: 	nil
		listClass: 	nil
		mapClass: 	nil
		propertyNamesAsSymbols: 	false


NeoJSONReader>>next
	Receiver: a NeoJSONReader
	Arguments and temporary variables: 

	Receiver's instance variables: 
		mappings: 	nil
		readStream: 	a ReadStream
		stringStream: 	nil
		listClass: 	nil
		mapClass: 	nil
		propertyNamesAsSymbols: 	false


NeoJSONReader class>>fromString:
	Receiver: NeoJSONReader
	Arguments and temporary variables: 
		string: 	''
	Receiver's instance variables: 
		superclass: 	NeoJSONMapper
		methodDict: 	a MethodDictionary(#atEnd->NeoJSONReader>>#atEnd #close->NeoJSONRea...etc...
		format: 	142
		layout: 	a FixedLayout
		instanceVariables: 	#(#readStream #stringStream #listClass #mapClass #propertyNa...etc...
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#NeoJSONReader
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Neo-JSON-Core'
		traitComposition: 	{}
		localSelectors: 	nil


DIPhpModel>>_loadPhpModel
	Receiver: a DIPhpModel
	Arguments and temporary variables: 

	Receiver's instance variables: 
		defRules: 	a DICollectionRule()
		defVars: 	a DICollectionVar(SYSTEM)
		analysisID: 	'1424275579'
		additionalProperties: 	a Dictionary()
		ruleCounter: 	0
		varCounter: 	0
		defVarElements: 	a DICollectionVarElements()
		defVarInvertedElements: 	a DICollectionVarElements()
		model: 	nil


DIPhpModel>>model
	Receiver: a DIPhpModel
	Arguments and temporary variables: 

	Receiver's instance variables: 
		defRules: 	a DICollectionRule()
		defVars: 	a DICollectionVar(SYSTEM)
		analysisID: 	'1424275579'
		additionalProperties: 	a Dictionary()
		ruleCounter: 	0
		varCounter: 	0
		defVarElements: 	a DICollectionVarElements()
		defVarInvertedElements: 	a DICollectionVarElements()
		model: 	nil


DIVarPhpClass>>allElements
	Receiver: RuleResult
	Arguments and temporary variables: 

	Receiver's instance variables: 
		isFirst: 	false
		dslText: 	'RuleResult=PhpClass with name:"Dicto\\RuleResult"'
		type: 	'PhpClass'
		id: 	1
		entity: 	nil
		name: 	'RuleResult'
		specifiers: 	an OrderedCollection(name=Dicto\\RuleResult)
		isInverted: 	false
		elements: 	a DICollectionVarElements()
		invertedElements: 	a DICollectionVarElements()


DIVarPhpClass(DIVar)>>elements
	Receiver: RuleResult
	Arguments and temporary variables: 
		valid: 	nil
	Receiver's instance variables: 
		isFirst: 	false
		dslText: 	'RuleResult=PhpClass with name:"Dicto\\RuleResult"'
		type: 	'PhpClass'
		id: 	1
		entity: 	nil
		name: 	'RuleResult'
		specifiers: 	an OrderedCollection(name=Dicto\\RuleResult)
		isInverted: 	false
		elements: 	a DICollectionVarElements()
		invertedElements: 	a DICollectionVarElements()


DISimpleRule>>subjectElements
	Receiver: RuleResult cannot depend on DictoTalker
	Arguments and temporary variables: 
		subjectElements: 	nil
	Receiver's instance variables: 
		isFirst: 	nil
		dslText: 	'RuleResult cannot depend on DictoTalker'
		type: 	#cannot
		id: 	1001
		entity: 	nil
		subjects: 	an Array(RuleResult)
		predicates: 	an Array(depend on DictoTalker)
		subRules: 	nil
		candidateAdapters: 	a SortedCollection(DIPhpDependencies)
		chosenAdapter: 	DIPhpDependencies
		hasFailed: 	false
		failureMessage: 	''
		failingPredicates: 	a Set()
		hasSubjectInverted: 	false
		hasPredicateInverted: 	false


printRulesEntityRelationship: someRules
	| res processedPredicates |
	res := ''.
	processedPredicates := Set new.
	someRules
		do: [ :rule | 
			| predicateSelector subjectElements argumentElements data isPredicateInv isSubjectInv |
			predicateSelector := (rule predicate nameNormalized , ':') asSymbol.
			isPredicateInv := rule hasPredicateInverted.
			isSubjectInv := rule hasSubjectInverted.
			subjectElements := rule subjectElements.
			argumentElements := rule argumentElements.
			subjectElements
				do: [ :subject | 
					argumentElements
						do: [ :argument | 
							| relId spec msgPass msgFail |
							relId := subject id , '-' , argument id.
							msgPass := subject id , '.' , rule predicate name , '(' , argument id , ')=True'.
							msgFail := subject id , '.' , rule predicate name , '(' , argument id , ')=False'.
							(processedPredicates includes: relId)
								ifFalse: [ 
									data := {(#subject -> subject value).
									(#argument -> argument value).
									(#ruleId -> rule id).
									(#propertyId -> relId).
									(#msgPass -> msgPass).
									(#msgFail -> msgFail)} asDictionary.
									spec := self perform: predicateSelector withArguments: {data}.
									spec := spec
										dictoReplace:
											{('$subject' -> subject value).
											('$argument' -> argument value).
											('$ruleId' -> rule id).
											('$propertyId' -> relId).
											('$msgPass' -> msgPass).
											('$msgFail' -> msgFail)}.
									res := res , spec ].	"avoid duplicate predicate evaluations"
							processedPredicates add: relId ] ] ].
	^ res in DIPhpDependencies(DIAdapter)>>printRulesEntityRelationship:
	Receiver: a DIPhpDependencies
	Arguments and temporary variables: 
		someRules: 	a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalk...etc...
		processedPredicates: 	a Set()
		data: 	nil
		res: 	''
		rule: 	RuleResult cannot depend on DictoTalker
		predicateSelector: 	#dependOn:
		subjectElements: 	nil
		argumentElements: 	nil
		isPredicateInv: 	false
		isSubjectInv: 	false
	Receiver's instance variables: 
		output: 	''
		commandOutput: 	''
		NEWLINE: 	'
'
		rules: 	a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalker m...etc...
		varSynonyms: 	nil
		sessionId: 	'1424275579'
		TIMESTAMP: 	'1424275579'
		TOOLNAME: 	'DIPhpDependencies'
		PROJECTROOT: 	'/home/otruffer/DictoCLI/'
		PROJECTSRC: 	'./'
		PROJECTBIN: 	'./'
		RESULTFILE: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/full-test/142427...etc...
		TESTFILE: 	nil
		testInputFileExt: 	'.st'
		SYSTEM: 	SYSTEM


DICollectionRule(OrderedCollection)>>do:
	Receiver: a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalker must depend on Rule...etc...
	Arguments and temporary variables: 
		aBlock: 	printRulesEntityRelationship: someRules
	| res processedPredicates |
	r...etc...
		index: 	1
	Receiver's instance variables: 
		array: 	an Array(RuleResult cannot depend on DictoTalker DictoTalker must depend...etc...
		firstIndex: 	1
		lastIndex: 	3
		elements: 	nil
		elements: 	nil


DIPhpDependencies(DIAdapter)>>printRulesEntityRelationship:
	Receiver: a DIPhpDependencies
	Arguments and temporary variables: 
		res: 	''
		someRules: 	a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalk...etc...
		processedPredicates: 	a Set()
	Receiver's instance variables: 
		output: 	''
		commandOutput: 	''
		NEWLINE: 	'
'
		rules: 	a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalker m...etc...
		varSynonyms: 	nil
		sessionId: 	'1424275579'
		TIMESTAMP: 	'1424275579'
		TOOLNAME: 	'DIPhpDependencies'
		PROJECTROOT: 	'/home/otruffer/DictoCLI/'
		PROJECTSRC: 	'./'
		PROJECTBIN: 	'./'
		RESULTFILE: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/full-test/142427...etc...
		TESTFILE: 	nil
		testInputFileExt: 	'.st'
		SYSTEM: 	SYSTEM


DIPhpDependencies(DIAdapter)>>printRules
	Receiver: a DIPhpDependencies
	Arguments and temporary variables: 
		res: 	nil
		allRules: 	a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalke...etc...
	Receiver's instance variables: 
		output: 	''
		commandOutput: 	''
		NEWLINE: 	'
'
		rules: 	a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalker m...etc...
		varSynonyms: 	nil
		sessionId: 	'1424275579'
		TIMESTAMP: 	'1424275579'
		TOOLNAME: 	'DIPhpDependencies'
		PROJECTROOT: 	'/home/otruffer/DictoCLI/'
		PROJECTSRC: 	'./'
		PROJECTBIN: 	'./'
		RESULTFILE: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/full-test/142427...etc...
		TESTFILE: 	nil
		testInputFileExt: 	'.st'
		SYSTEM: 	SYSTEM


DIPhpDependencies>>testInput
	Receiver: a DIPhpDependencies
	Arguments and temporary variables: 
		strRules: 	nil
	Receiver's instance variables: 
		output: 	''
		commandOutput: 	''
		NEWLINE: 	'
'
		rules: 	a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalker m...etc...
		varSynonyms: 	nil
		sessionId: 	'1424275579'
		TIMESTAMP: 	'1424275579'
		TOOLNAME: 	'DIPhpDependencies'
		PROJECTROOT: 	'/home/otruffer/DictoCLI/'
		PROJECTSRC: 	'./'
		PROJECTBIN: 	'./'
		RESULTFILE: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/full-test/142427...etc...
		TESTFILE: 	nil
		testInputFileExt: 	'.st'
		SYSTEM: 	SYSTEM


DITestGroup>>build
	Receiver: a DITestGroup
	Arguments and temporary variables: 

	Receiver's instance variables: 
		rules: 	an OrderedCollection(RuleResult cannot depend on DictoTalker DictoTalker...etc...
		adapter: 	a DIPhpDependencies
		runCommandText: 	nil
		testSpecification: 	nil
		adapterID: 	'DIPhpDependencies'
		resultFile: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/full-test/142427...etc...
		specificationFile: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/full-test...etc...
		commandFile: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/full-test/14242...etc...


[ :testGroup | testGroup build ] in DIDicto>>dictoBuild:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = ...etc...
		adapterTestGroups: 	a Dictionary(DIGrepFileContent->a DITestGroup DIJMeterLoadTe...etc...
		testGroup: 	a DITestGroup
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424275579'
		singleShotTask: 	false


Array(SequenceableCollection)>>do:
	Receiver: an Array(a DITestGroup a DITestGroup a DITestGroup a DITestGroup a DITestGroup)
	Arguments and temporary variables: 
		aBlock: 	[ :testGroup | testGroup build ]
		index: 	4
	Receiver's instance variables: 
an Array(a DITestGroup a DITestGroup a DITestGroup a DITestGroup a DITestGroup)

DIDicto>>dictoBuild:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = ...etc...
		adapterTestGroups: 	a Dictionary(DIGrepFileContent->a DITestGroup DIJMeterLoadTe...etc...
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424275579'
		singleShotTask: 	false


DIDicto>>dictoRun:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = ...etc...
		adapterTestGroups: 	nil
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424275579'
		singleShotTask: 	false


DIDicto>>dictoAll:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = ...etc...
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424275579'
		singleShotTask: 	false


[ DIDicto new dictoAll: input ] in DIWebServiceAPI>>getRun
	Receiver: a DIWebServiceAPI
	Arguments and temporary variables: 
		in: 	'/home/otruffer/dicto/bin/analysis/full-test/dicto.rules'
		input: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = PhpCl...etc...
		rulesFailed: 	nil
		rulesTotal: 	nil
	Receiver's instance variables: 
		request: 	nil
		response: 	nil
		variables: 	nil
		delegate: 	nil
		principal: 	nil
		credentials: 	nil


BlockClosure>>on:do:
	Receiver: [ DIDicto new dictoAll: input ]
	Arguments and temporary variables: 
		exception: 	DIException
		handlerAction: 	[ :ex | ^ self error: ex description ]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	DIWebServiceAPI>>getRun
		startpc: 	138
		numArgs: 	0


DIWebServiceAPI>>getRun
	Receiver: a DIWebServiceAPI
	Arguments and temporary variables: 
		in: 	'/home/otruffer/dicto/bin/analysis/full-test/dicto.rules'
		input: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = PhpCl...etc...
		rulesFailed: 	nil
		rulesTotal: 	nil
	Receiver's instance variables: 
		request: 	nil
		response: 	nil
		variables: 	nil
		delegate: 	nil
		principal: 	nil
		credentials: 	nil


DIWebServiceHandler>>post
	Receiver: a DIWebServiceHandler
	Arguments and temporary variables: 
		api: 	a DIWebServiceAPI
	Receiver's instance variables: 
		request: 	a ZnRequest(POST /full-test/run)
		response: 	nil
		variables: 	an OrderedCollection('full-test' 'run')
		delegate: 	a ZnJSONRestServerDelegate
		principal: 	nil
		credentials: 	nil
		dicto: 	a DIDicto


DIWebServiceHandler(ZnRestCall)>>execute
	Receiver: a DIWebServiceHandler
	Arguments and temporary variables: 

	Receiver's instance variables: 
		request: 	a ZnRequest(POST /full-test/run)
		response: 	nil
		variables: 	an OrderedCollection('full-test' 'run')
		delegate: 	a ZnJSONRestServerDelegate
		principal: 	nil
		credentials: 	nil
		dicto: 	a DIDicto


[ call execute ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


BlockClosure>>on:do:
	Receiver: [ call execute ]
	Arguments and temporary variables: 
		exception: 	ZnRestCallUnauthorized
		handlerAction: 	[ :exception | self unauthorized: exception request ]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
		startpc: 	38
		numArgs: 	0


ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


[ self execute: call ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /full-test/run)
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


BlockClosure>>on:do:
	Receiver: [ self execute: call ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :exception | 
request server debugMode
	ifTrue: [ exception pa...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
		startpc: 	99
		numArgs: 	0


ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /full-test/run)
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ :delegate | delegate handleRequest: request ] ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /full-test/run)
		delegate: 	a ZnJSONRestServerDelegate
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateRequest:do:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /full-test/run)
		block: 	[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ ...etc...
		authenticator: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /full-test/run)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream)


[ self authenticateAndDelegateRequest: request ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /full-test/run)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream)


BlockClosure>>on:do:
	Receiver: [ self authenticateAndDelegateRequest: request ]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :exception | 
self debugMode
	ifTrue: [ exception pass ]
	ifFa...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequ...etc...
		startpc: 	58
		numArgs: 	0


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /full-test/run)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /full-test/run)
		response: 	nil
		initialMilliseconds: 	20089255
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeOneRequestResponseOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		stream: 	a ZdcSocketStream
		request: 	a ZnRequest(POST /full-test/run)
		response: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream)



--- The full stack ---
NeoJSONReader>>error:
NeoJSONReader>>parseValue
NeoJSONReader>>next
NeoJSONReader class>>fromString:
DIPhpModel>>_loadPhpModel
DIPhpModel>>model
DIVarPhpClass>>allElements
DIVarPhpClass(DIVar)>>elements
DISimpleRule>>subjectElements
printRulesEntityRelationship: someRules
	| res processedPredicates |
	res := ''.
	processedPredicates := Set new.
	someRules
		do: [ :rule | 
			| predicateSelector subjectElements argumentElements data isPredicateInv isSubjectInv |
			predicateSelector := (rule predicate nameNormalized , ':') asSymbol.
			isPredicateInv := rule hasPredicateInverted.
			isSubjectInv := rule hasSubjectInverted.
			subjectElements := rule subjectElements.
			argumentElements := rule argumentElements.
			subjectElements
				do: [ :subject | 
					argumentElements
						do: [ :argument | 
							| relId spec msgPass msgFail |
							relId := subject id , '-' , argument id.
							msgPass := subject id , '.' , rule predicate name , '(' , argument id , ')=True'.
							msgFail := subject id , '.' , rule predicate name , '(' , argument id , ')=False'.
							(processedPredicates includes: relId)
								ifFalse: [ 
									data := {(#subject -> subject value).
									(#argument -> argument value).
									(#ruleId -> rule id).
									(#propertyId -> relId).
									(#msgPass -> msgPass).
									(#msgFail -> msgFail)} asDictionary.
									spec := self perform: predicateSelector withArguments: {data}.
									spec := spec
										dictoReplace:
											{('$subject' -> subject value).
											('$argument' -> argument value).
											('$ruleId' -> rule id).
											('$propertyId' -> relId).
											('$msgPass' -> msgPass).
											('$msgFail' -> msgFail)}.
									res := res , spec ].	"avoid duplicate predicate evaluations"
							processedPredicates add: relId ] ] ].
	^ res in DIPhpDependencies(DIAdapter)>>printRulesEntityRelationship:
DICollectionRule(OrderedCollection)>>do:
DIPhpDependencies(DIAdapter)>>printRulesEntityRelationship:
DIPhpDependencies(DIAdapter)>>printRules
DIPhpDependencies>>testInput
DITestGroup>>build
[ :testGroup | testGroup build ] in DIDicto>>dictoBuild:
Array(SequenceableCollection)>>do:
DIDicto>>dictoBuild:
DIDicto>>dictoRun:
DIDicto>>dictoAll:
[ DIDicto new dictoAll: input ] in DIWebServiceAPI>>getRun
BlockClosure>>on:do:
DIWebServiceAPI>>getRun
DIWebServiceHandler>>post
DIWebServiceHandler(ZnRestCall)>>execute
[ call execute ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
BlockClosure>>on:do:
ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
[ self execute: call ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
BlockClosure>>on:do:
ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ :delegate | delegate handleRequest: request ] ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateRequest:do:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
[ self authenticateAndDelegateRequest: request ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
BlockClosure>>on:do:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequest:
ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeOneRequestResponseOn:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ self executeOneRequestResponseOn: stream ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
[ 
p psValueAt: index put: anObject.
aBlock value ] in ZnCurrentServer(DynamicVariable)>>value:during:
BlockClosure>>ensure:
ZnCurrentServer(DynamicVariable)>>value:during:
ZnCurrentServer class(DynamicVariable class)>>value:during:
ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
[ self executeRequestResponseLoopOn: stream ] in [ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ] in [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
BlockClosure>>ensure:
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ] in [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
BlockClosure>>ifCurtailed:
[ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: False>>trim
18 February 2015 5:50:52.995422 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
NBCogit NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
https://github.com/pharo-project/pharo-vm.git Commit: 4a0d556150d478ff2de3c9624d2f18e6eaa3fa5c Date: 2014-12-18 18:42:53 +0100 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14893

Image: Pharo3.0 [Latest update: #30863]

False(Object)>>doesNotUnderstand: #trim
	Receiver: false
	Arguments and temporary variables: 
		aMessage: 	trim
		exception: 	MessageNotUnderstood: False>>trim
		resumeValue: 	nil
	Receiver's instance variables: 
false

DILogger>>newSessionWithDSLText:
	Receiver: a DILogger
	Arguments and temporary variables: 
		aDSLText: 	false
		projectRoot: 	'/home/otruffer/applications/TeamCity/buildAgent/work/3de96e708f24...etc...
	Receiver's instance variables: 
		transcript: 	nil
		sessions: 	an OrderedCollection(an OrderedCollection('==========================...etc...
		lastSession: 	an OrderedCollection('===============================' '// Time: 1...etc...
		outputStream: 	MultiByteFileStream: '/home/otruffer/dicto/bin/analysis/full-test...etc...
		verbose: 	true


DIDicto>>_importText:withImporter:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aText: 	false
		anImporterClass: 	DIDSLImporter
		adjustedText: 	nil
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424278253'
		singleShotTask: 	true


DIDicto>>dictoParse:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	false
		adapterTestGroups: 	nil
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424278253'
		singleShotTask: 	true


[ dicto dictoParse: text ] in DIWebServiceAPI>>postRules:
	Receiver: a DIWebServiceAPI
	Arguments and temporary variables: 
		dict: 	a Dictionary('rules'->false )
		dicto: 	a DIDicto
		text: 	false
	Receiver's instance variables: 
		request: 	nil
		response: 	nil
		variables: 	nil
		delegate: 	nil
		principal: 	nil
		credentials: 	nil


BlockClosure>>on:do:
	Receiver: [ dicto dictoParse: text ]
	Arguments and temporary variables: 
		exception: 	DISyntaxErrorException
		handlerAction: 	[ :ex | ^ self error: 'syntax error' ]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	DIWebServiceAPI>>postRules:
		startpc: 	58
		numArgs: 	0


DIWebServiceAPI>>postRules:
	Receiver: a DIWebServiceAPI
	Arguments and temporary variables: 
		dict: 	a Dictionary('rules'->false )
		dicto: 	a DIDicto
		text: 	false
	Receiver's instance variables: 
		request: 	nil
		response: 	nil
		variables: 	nil
		delegate: 	nil
		principal: 	nil
		credentials: 	nil


DIWebServiceHandler>>post
	Receiver: a DIWebServiceHandler
	Arguments and temporary variables: 
		api: 	a DIWebServiceAPI
	Receiver's instance variables: 
		request: 	a ZnRequest(POST /full-test-full-test-1/rules)
		response: 	nil
		variables: 	an OrderedCollection('full-test-full-test-1' 'rules')
		delegate: 	a ZnJSONRestServerDelegate
		principal: 	nil
		credentials: 	nil
		dicto: 	a DIDicto


DIWebServiceHandler(ZnRestCall)>>execute
	Receiver: a DIWebServiceHandler
	Arguments and temporary variables: 

	Receiver's instance variables: 
		request: 	a ZnRequest(POST /full-test-full-test-1/rules)
		response: 	nil
		variables: 	an OrderedCollection('full-test-full-test-1' 'rules')
		delegate: 	a ZnJSONRestServerDelegate
		principal: 	nil
		credentials: 	nil
		dicto: 	a DIDicto


[ call execute ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


BlockClosure>>on:do:
	Receiver: [ call execute ]
	Arguments and temporary variables: 
		exception: 	ZnRestCallUnauthorized
		handlerAction: 	[ :exception | self unauthorized: exception request ]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
		startpc: 	38
		numArgs: 	0


ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


[ self execute: call ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /full-test-full-test-1/rules)
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


BlockClosure>>on:do:
	Receiver: [ self execute: call ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :exception | 
request server debugMode
	ifTrue: [ exception pa...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
		startpc: 	99
		numArgs: 	0


ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /full-test-full-test-1/rules)
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ :delegate | delegate handleRequest: request ] ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /full-test-full-test-1/rules)
		delegate: 	a ZnJSONRestServerDelegate
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateRequest:do:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /full-test-full-test-1/rules)
		block: 	[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ ...etc...
		authenticator: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /full-test-full-test-1/rules)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream)


[ self authenticateAndDelegateRequest: request ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /full-test-full-test-1/rules)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream)


BlockClosure>>on:do:
	Receiver: [ self authenticateAndDelegateRequest: request ]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :exception | 
self debugMode
	ifTrue: [ exception pass ]
	ifFa...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequ...etc...
		startpc: 	58
		numArgs: 	0


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /full-test-full-test-1/rules)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /full-test-full-test-1/rules)
		response: 	nil
		initialMilliseconds: 	22763370
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeOneRequestResponseOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		stream: 	a ZdcSocketStream
		request: 	a ZnRequest(POST /full-test-full-test-1/rules)
		response: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream)


[ self executeOneRequestResponseOn: stream ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		stream: 	a ZdcSocketStream
		request: 	nil
		response: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream)


[ 
p psValueAt: index put: anObject.
aBlock value ] in ZnCurrentServer(DynamicVariable)>>value:during:
	Receiver: a ZnCurrentServer
	Arguments and temporary variables: 
		anObject: 	a ZnManagingMultiThreadedServer(running 8010)
		aBlock: 	[ self executeOneRequestResponseOn: stream ]
		p: 	a Process in nil
		oldValue: 	nil
	Receiver's instance variables: 
		index: 	5


BlockClosure>>ensure:
	Receiver: [ 
p psValueAt: index put: anObject.
aBlock value ]
	Arguments and temporary variables: 
		aBlock: 	[ p psValueAt: index put: oldValue ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ZnCurrentServer(DynamicVariable)>>value:during:
		startpc: 	62
		numArgs: 	0


ZnCurrentServer(DynamicVariable)>>value:during:
	Receiver: a ZnCurrentServer
	Arguments and temporary variables: 
		anObject: 	a ZnManagingMultiThreadedServer(running 8010)
		aBlock: 	[ self executeOneRequestResponseOn: stream ]
		p: 	a Process in nil
		oldValue: 	nil
	Receiver's instance variables: 
		index: 	5


ZnCurrentServer class(DynamicVariable class)>>value:during:
	Receiver: ZnCurrentServer
	Arguments and temporary variables: 
		anObject: 	a ZnManagingMultiThreadedServer(running 8010)
		aBlock: 	[ self executeOneRequestResponseOn: stream ]
	Receiver's instance variables: 
		superclass: 	DynamicVariable
		methodDict: 	a MethodDictionary()
		format: 	132
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#ZnCurrentServer
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Zinc-HTTP-Variables'
		traitComposition: 	{}
		localSelectors: 	nil
		hash: 	nil
		soleInstance: 	a ZnCurrentServer


ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		stream: 	a ZdcSocketStream
		request: 	nil
		response: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream)


[ self executeRequestResponseLoopOn: stream ] in [ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ] in [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		listeningSocket: 	a Socket[waitingForConnection]
		stream: 	a ZdcSocketStream
		socket: 	a Socket[connected]
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream)


BlockClosure>>ensure:
	Receiver: [ self executeRequestResponseLoopOn: stream ]
	Arguments and temporary variables: 
		aBlock: 	[ 
self log debug: 'Closing stream'.
self closeSocketStream: stream ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		se...etc...
		startpc: 	118
		numArgs: 	0


[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ] in [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		listeningSocket: 	a Socket[waitingForConnection]
		stream: 	a ZdcSocketStream
		socket: 	a Socket[connected]
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream)


BlockClosure>>ifCurtailed:
	Receiver: [ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing st...etc...
	Arguments and temporary variables: 
		aBlock: 	[ 
self log debug: 'Destroying socket'.
socket destroy ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	[ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
	...etc...
		startpc: 	113
		numArgs: 	0


[ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		listeningSocket: 	a Socket[waitingForConnection]
		stream: 	a ZdcSocketStream
		socket: 	a Socket[connected]
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream)


[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnec...etc...
		startpc: 	108
		numArgs: 	0



--- The full stack ---
False(Object)>>doesNotUnderstand: #trim
DILogger>>newSessionWithDSLText:
DIDicto>>_importText:withImporter:
DIDicto>>dictoParse:
[ dicto dictoParse: text ] in DIWebServiceAPI>>postRules:
BlockClosure>>on:do:
DIWebServiceAPI>>postRules:
DIWebServiceHandler>>post
DIWebServiceHandler(ZnRestCall)>>execute
[ call execute ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
BlockClosure>>on:do:
ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
[ self execute: call ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
BlockClosure>>on:do:
ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ :delegate | delegate handleRequest: request ] ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateRequest:do:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
[ self authenticateAndDelegateRequest: request ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
BlockClosure>>on:do:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequest:
ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeOneRequestResponseOn:
[ self executeOneRequestResponseOn: stream ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
[ 
p psValueAt: index put: anObject.
aBlock value ] in ZnCurrentServer(DynamicVariable)>>value:during:
BlockClosure>>ensure:
ZnCurrentServer(DynamicVariable)>>value:during:
ZnCurrentServer class(DynamicVariable class)>>value:during:
ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
[ self executeRequestResponseLoopOn: stream ] in [ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ] in [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
BlockClosure>>ensure:
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ] in [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
BlockClosure>>ifCurtailed:
[ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
NeoJSONParseError: invalid input: nil
18 February 2015 5:59:06.603166 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
NBCogit NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
https://github.com/pharo-project/pharo-vm.git Commit: 4a0d556150d478ff2de3c9624d2f18e6eaa3fa5c Date: 2014-12-18 18:42:53 +0100 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14893

Image: Pharo3.0 [Latest update: #30863]

NeoJSONReader>>error:
	Receiver: a NeoJSONReader
	Arguments and temporary variables: 
		text: 	'invalid input: nil'
	Receiver's instance variables: 
		mappings: 	nil
		readStream: 	a ReadStream
		stringStream: 	nil
		listClass: 	nil
		mapClass: 	nil
		propertyNamesAsSymbols: 	false


NeoJSONReader>>parseValue
	Receiver: a NeoJSONReader
	Arguments and temporary variables: 
		char: 	nil
	Receiver's instance variables: 
		mappings: 	nil
		readStream: 	a ReadStream
		stringStream: 	nil
		listClass: 	nil
		mapClass: 	nil
		propertyNamesAsSymbols: 	false


NeoJSONReader>>next
	Receiver: a NeoJSONReader
	Arguments and temporary variables: 

	Receiver's instance variables: 
		mappings: 	nil
		readStream: 	a ReadStream
		stringStream: 	nil
		listClass: 	nil
		mapClass: 	nil
		propertyNamesAsSymbols: 	false


NeoJSONReader class>>fromString:
	Receiver: NeoJSONReader
	Arguments and temporary variables: 
		string: 	''
	Receiver's instance variables: 
		superclass: 	NeoJSONMapper
		methodDict: 	a MethodDictionary(#atEnd->NeoJSONReader>>#atEnd #close->NeoJSONRea...etc...
		format: 	142
		layout: 	a FixedLayout
		instanceVariables: 	#(#readStream #stringStream #listClass #mapClass #propertyNa...etc...
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#NeoJSONReader
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Neo-JSON-Core'
		traitComposition: 	{}
		localSelectors: 	nil


DIPhpModel>>_loadPhpModel
	Receiver: a DIPhpModel
	Arguments and temporary variables: 

	Receiver's instance variables: 
		defRules: 	a DICollectionRule()
		defVars: 	a DICollectionVar(SYSTEM)
		analysisID: 	'1424278747'
		additionalProperties: 	a Dictionary()
		ruleCounter: 	0
		varCounter: 	0
		defVarElements: 	a DICollectionVarElements()
		defVarInvertedElements: 	a DICollectionVarElements()
		model: 	nil


DIPhpModel>>model
	Receiver: a DIPhpModel
	Arguments and temporary variables: 

	Receiver's instance variables: 
		defRules: 	a DICollectionRule()
		defVars: 	a DICollectionVar(SYSTEM)
		analysisID: 	'1424278747'
		additionalProperties: 	a Dictionary()
		ruleCounter: 	0
		varCounter: 	0
		defVarElements: 	a DICollectionVarElements()
		defVarInvertedElements: 	a DICollectionVarElements()
		model: 	nil


DIVarPhpClass>>allElements
	Receiver: RuleResult
	Arguments and temporary variables: 

	Receiver's instance variables: 
		isFirst: 	false
		dslText: 	'RuleResult=PhpClass with name:"Dicto\\RuleResult"'
		type: 	'PhpClass'
		id: 	1
		entity: 	nil
		name: 	'RuleResult'
		specifiers: 	an OrderedCollection(name=Dicto\\RuleResult)
		isInverted: 	false
		elements: 	a DICollectionVarElements()
		invertedElements: 	a DICollectionVarElements()


DIVarPhpClass(DIVar)>>elements
	Receiver: RuleResult
	Arguments and temporary variables: 
		valid: 	nil
	Receiver's instance variables: 
		isFirst: 	false
		dslText: 	'RuleResult=PhpClass with name:"Dicto\\RuleResult"'
		type: 	'PhpClass'
		id: 	1
		entity: 	nil
		name: 	'RuleResult'
		specifiers: 	an OrderedCollection(name=Dicto\\RuleResult)
		isInverted: 	false
		elements: 	a DICollectionVarElements()
		invertedElements: 	a DICollectionVarElements()


DISimpleRule>>subjectElements
	Receiver: RuleResult cannot depend on DictoTalker
	Arguments and temporary variables: 
		subjectElements: 	nil
	Receiver's instance variables: 
		isFirst: 	nil
		dslText: 	'RuleResult cannot depend on DictoTalker'
		type: 	#cannot
		id: 	1001
		entity: 	nil
		subjects: 	an Array(RuleResult)
		predicates: 	an Array(depend on DictoTalker)
		subRules: 	nil
		candidateAdapters: 	a SortedCollection(DIPhpDependencies)
		chosenAdapter: 	DIPhpDependencies
		hasFailed: 	false
		failureMessage: 	''
		failingPredicates: 	a Set()
		hasSubjectInverted: 	false
		hasPredicateInverted: 	false


printRulesEntityRelationship: someRules
	| res processedPredicates |
	res := ''.
	processedPredicates := Set new.
	someRules
		do: [ :rule | 
			| predicateSelector subjectElements argumentElements data isPredicateInv isSubjectInv |
			predicateSelector := (rule predicate nameNormalized , ':') asSymbol.
			isPredicateInv := rule hasPredicateInverted.
			isSubjectInv := rule hasSubjectInverted.
			subjectElements := rule subjectElements.
			argumentElements := rule argumentElements.
			subjectElements
				do: [ :subject | 
					argumentElements
						do: [ :argument | 
							| relId spec msgPass msgFail |
							relId := subject id , '-' , argument id.
							msgPass := subject id , '.' , rule predicate name , '(' , argument id , ')=True'.
							msgFail := subject id , '.' , rule predicate name , '(' , argument id , ')=False'.
							(processedPredicates includes: relId)
								ifFalse: [ 
									data := {(#subject -> subject value).
									(#argument -> argument value).
									(#ruleId -> rule id).
									(#propertyId -> relId).
									(#msgPass -> msgPass).
									(#msgFail -> msgFail)} asDictionary.
									spec := self perform: predicateSelector withArguments: {data}.
									spec := spec
										dictoReplace:
											{('$subject' -> subject value).
											('$argument' -> argument value).
											('$ruleId' -> rule id).
											('$propertyId' -> relId).
											('$msgPass' -> msgPass).
											('$msgFail' -> msgFail)}.
									res := res , spec ].	"avoid duplicate predicate evaluations"
							processedPredicates add: relId ] ] ].
	^ res in DIPhpDependencies(DIAdapter)>>printRulesEntityRelationship:
	Receiver: a DIPhpDependencies
	Arguments and temporary variables: 
		someRules: 	a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalk...etc...
		processedPredicates: 	a Set()
		data: 	nil
		res: 	''
		rule: 	RuleResult cannot depend on DictoTalker
		predicateSelector: 	#dependOn:
		subjectElements: 	nil
		argumentElements: 	nil
		isPredicateInv: 	false
		isSubjectInv: 	false
	Receiver's instance variables: 
		output: 	''
		commandOutput: 	''
		NEWLINE: 	'
'
		rules: 	a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalker m...etc...
		varSynonyms: 	nil
		sessionId: 	'1424278747'
		TIMESTAMP: 	'1424278747'
		TOOLNAME: 	'DIPhpDependencies'
		PROJECTROOT: 	'/home/otruffer/applications/TeamCity/buildAgent/work/96a46dec2a79...etc...
		PROJECTSRC: 	'./'
		PROJECTBIN: 	'./'
		RESULTFILE: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/full-test-full-t...etc...
		TESTFILE: 	nil
		testInputFileExt: 	'.st'
		SYSTEM: 	SYSTEM


DICollectionRule(OrderedCollection)>>do:
	Receiver: a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalker must depend on Rule...etc...
	Arguments and temporary variables: 
		aBlock: 	printRulesEntityRelationship: someRules
	| res processedPredicates |
	r...etc...
		index: 	1
	Receiver's instance variables: 
		array: 	an Array(RuleResult cannot depend on DictoTalker DictoTalker must depend...etc...
		firstIndex: 	1
		lastIndex: 	3
		elements: 	nil
		elements: 	nil


DIPhpDependencies(DIAdapter)>>printRulesEntityRelationship:
	Receiver: a DIPhpDependencies
	Arguments and temporary variables: 
		res: 	''
		someRules: 	a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalk...etc...
		processedPredicates: 	a Set()
	Receiver's instance variables: 
		output: 	''
		commandOutput: 	''
		NEWLINE: 	'
'
		rules: 	a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalker m...etc...
		varSynonyms: 	nil
		sessionId: 	'1424278747'
		TIMESTAMP: 	'1424278747'
		TOOLNAME: 	'DIPhpDependencies'
		PROJECTROOT: 	'/home/otruffer/applications/TeamCity/buildAgent/work/96a46dec2a79...etc...
		PROJECTSRC: 	'./'
		PROJECTBIN: 	'./'
		RESULTFILE: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/full-test-full-t...etc...
		TESTFILE: 	nil
		testInputFileExt: 	'.st'
		SYSTEM: 	SYSTEM


DIPhpDependencies(DIAdapter)>>printRules
	Receiver: a DIPhpDependencies
	Arguments and temporary variables: 
		res: 	nil
		allRules: 	a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalke...etc...
	Receiver's instance variables: 
		output: 	''
		commandOutput: 	''
		NEWLINE: 	'
'
		rules: 	a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalker m...etc...
		varSynonyms: 	nil
		sessionId: 	'1424278747'
		TIMESTAMP: 	'1424278747'
		TOOLNAME: 	'DIPhpDependencies'
		PROJECTROOT: 	'/home/otruffer/applications/TeamCity/buildAgent/work/96a46dec2a79...etc...
		PROJECTSRC: 	'./'
		PROJECTBIN: 	'./'
		RESULTFILE: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/full-test-full-t...etc...
		TESTFILE: 	nil
		testInputFileExt: 	'.st'
		SYSTEM: 	SYSTEM


DIPhpDependencies>>testInput
	Receiver: a DIPhpDependencies
	Arguments and temporary variables: 
		strRules: 	nil
	Receiver's instance variables: 
		output: 	''
		commandOutput: 	''
		NEWLINE: 	'
'
		rules: 	a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalker m...etc...
		varSynonyms: 	nil
		sessionId: 	'1424278747'
		TIMESTAMP: 	'1424278747'
		TOOLNAME: 	'DIPhpDependencies'
		PROJECTROOT: 	'/home/otruffer/applications/TeamCity/buildAgent/work/96a46dec2a79...etc...
		PROJECTSRC: 	'./'
		PROJECTBIN: 	'./'
		RESULTFILE: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/full-test-full-t...etc...
		TESTFILE: 	nil
		testInputFileExt: 	'.st'
		SYSTEM: 	SYSTEM


DITestGroup>>build
	Receiver: a DITestGroup
	Arguments and temporary variables: 

	Receiver's instance variables: 
		rules: 	an OrderedCollection(RuleResult cannot depend on DictoTalker DictoTalker...etc...
		adapter: 	a DIPhpDependencies
		runCommandText: 	nil
		testSpecification: 	nil
		adapterID: 	'DIPhpDependencies'
		resultFile: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/full-test-full-t...etc...
		specificationFile: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/full-test...etc...
		commandFile: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/full-test-full-...etc...


[ :testGroup | testGroup build ] in DIDicto>>dictoBuild:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = ...etc...
		adapterTestGroups: 	a Dictionary(DIGrepFileContent->a DITestGroup DIJMeterLoadTe...etc...
		testGroup: 	a DITestGroup
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424278747'
		singleShotTask: 	false


Array(SequenceableCollection)>>do:
	Receiver: an Array(a DITestGroup a DITestGroup a DITestGroup a DITestGroup a DITestGroup)
	Arguments and temporary variables: 
		aBlock: 	[ :testGroup | testGroup build ]
		index: 	4
	Receiver's instance variables: 
an Array(a DITestGroup a DITestGroup a DITestGroup a DITestGroup a DITestGroup)

DIDicto>>dictoBuild:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = ...etc...
		adapterTestGroups: 	a Dictionary(DIGrepFileContent->a DITestGroup DIJMeterLoadTe...etc...
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424278747'
		singleShotTask: 	false


DIDicto>>dictoRun:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = ...etc...
		adapterTestGroups: 	nil
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424278747'
		singleShotTask: 	false


DIDicto>>dictoAll:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = ...etc...
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424278747'
		singleShotTask: 	false


[ DIDicto new dictoAll: input ] in DIWebServiceAPI>>getRun
	Receiver: a DIWebServiceAPI
	Arguments and temporary variables: 
		in: 	'/home/otruffer/dicto/bin/analysis/full-test-full-test-4/dicto.rules'
		input: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = PhpCl...etc...
		rulesFailed: 	nil
		rulesTotal: 	nil
	Receiver's instance variables: 
		request: 	nil
		response: 	nil
		variables: 	nil
		delegate: 	nil
		principal: 	nil
		credentials: 	nil


BlockClosure>>on:do:
	Receiver: [ DIDicto new dictoAll: input ]
	Arguments and temporary variables: 
		exception: 	DIException
		handlerAction: 	[ :ex | ^ self error: ex description ]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	DIWebServiceAPI>>getRun
		startpc: 	138
		numArgs: 	0


DIWebServiceAPI>>getRun
	Receiver: a DIWebServiceAPI
	Arguments and temporary variables: 
		in: 	'/home/otruffer/dicto/bin/analysis/full-test-full-test-4/dicto.rules'
		input: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = PhpCl...etc...
		rulesFailed: 	nil
		rulesTotal: 	nil
	Receiver's instance variables: 
		request: 	nil
		response: 	nil
		variables: 	nil
		delegate: 	nil
		principal: 	nil
		credentials: 	nil


DIWebServiceHandler>>post
	Receiver: a DIWebServiceHandler
	Arguments and temporary variables: 
		api: 	a DIWebServiceAPI
	Receiver's instance variables: 
		request: 	a ZnRequest(POST /full-test-full-test-4/run)
		response: 	nil
		variables: 	an OrderedCollection('full-test-full-test-4' 'run')
		delegate: 	a ZnJSONRestServerDelegate
		principal: 	nil
		credentials: 	nil
		dicto: 	a DIDicto


DIWebServiceHandler(ZnRestCall)>>execute
	Receiver: a DIWebServiceHandler
	Arguments and temporary variables: 

	Receiver's instance variables: 
		request: 	a ZnRequest(POST /full-test-full-test-4/run)
		response: 	nil
		variables: 	an OrderedCollection('full-test-full-test-4' 'run')
		delegate: 	a ZnJSONRestServerDelegate
		principal: 	nil
		credentials: 	nil
		dicto: 	a DIDicto


[ call execute ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


BlockClosure>>on:do:
	Receiver: [ call execute ]
	Arguments and temporary variables: 
		exception: 	ZnRestCallUnauthorized
		handlerAction: 	[ :exception | self unauthorized: exception request ]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
		startpc: 	38
		numArgs: 	0


ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


[ self execute: call ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /full-test-full-test-4/run)
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


BlockClosure>>on:do:
	Receiver: [ self execute: call ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :exception | 
request server debugMode
	ifTrue: [ exception pa...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
		startpc: 	99
		numArgs: 	0


ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /full-test-full-test-4/run)
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ :delegate | delegate handleRequest: request ] ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /full-test-full-test-4/run)
		delegate: 	a ZnJSONRestServerDelegate
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateRequest:do:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /full-test-full-test-4/run)
		block: 	[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ ...etc...
		authenticator: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /full-test-full-test-4/run)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream)


[ self authenticateAndDelegateRequest: request ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /full-test-full-test-4/run)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream)


BlockClosure>>on:do:
	Receiver: [ self authenticateAndDelegateRequest: request ]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :exception | 
self debugMode
	ifTrue: [ exception pass ]
	ifFa...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequ...etc...
		startpc: 	58
		numArgs: 	0


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /full-test-full-test-4/run)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /full-test-full-test-4/run)
		response: 	nil
		initialMilliseconds: 	23256940
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeOneRequestResponseOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		stream: 	a ZdcSocketStream
		request: 	a ZnRequest(POST /full-test-full-test-4/run)
		response: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream)



--- The full stack ---
NeoJSONReader>>error:
NeoJSONReader>>parseValue
NeoJSONReader>>next
NeoJSONReader class>>fromString:
DIPhpModel>>_loadPhpModel
DIPhpModel>>model
DIVarPhpClass>>allElements
DIVarPhpClass(DIVar)>>elements
DISimpleRule>>subjectElements
printRulesEntityRelationship: someRules
	| res processedPredicates |
	res := ''.
	processedPredicates := Set new.
	someRules
		do: [ :rule | 
			| predicateSelector subjectElements argumentElements data isPredicateInv isSubjectInv |
			predicateSelector := (rule predicate nameNormalized , ':') asSymbol.
			isPredicateInv := rule hasPredicateInverted.
			isSubjectInv := rule hasSubjectInverted.
			subjectElements := rule subjectElements.
			argumentElements := rule argumentElements.
			subjectElements
				do: [ :subject | 
					argumentElements
						do: [ :argument | 
							| relId spec msgPass msgFail |
							relId := subject id , '-' , argument id.
							msgPass := subject id , '.' , rule predicate name , '(' , argument id , ')=True'.
							msgFail := subject id , '.' , rule predicate name , '(' , argument id , ')=False'.
							(processedPredicates includes: relId)
								ifFalse: [ 
									data := {(#subject -> subject value).
									(#argument -> argument value).
									(#ruleId -> rule id).
									(#propertyId -> relId).
									(#msgPass -> msgPass).
									(#msgFail -> msgFail)} asDictionary.
									spec := self perform: predicateSelector withArguments: {data}.
									spec := spec
										dictoReplace:
											{('$subject' -> subject value).
											('$argument' -> argument value).
											('$ruleId' -> rule id).
											('$propertyId' -> relId).
											('$msgPass' -> msgPass).
											('$msgFail' -> msgFail)}.
									res := res , spec ].	"avoid duplicate predicate evaluations"
							processedPredicates add: relId ] ] ].
	^ res in DIPhpDependencies(DIAdapter)>>printRulesEntityRelationship:
DICollectionRule(OrderedCollection)>>do:
DIPhpDependencies(DIAdapter)>>printRulesEntityRelationship:
DIPhpDependencies(DIAdapter)>>printRules
DIPhpDependencies>>testInput
DITestGroup>>build
[ :testGroup | testGroup build ] in DIDicto>>dictoBuild:
Array(SequenceableCollection)>>do:
DIDicto>>dictoBuild:
DIDicto>>dictoRun:
DIDicto>>dictoAll:
[ DIDicto new dictoAll: input ] in DIWebServiceAPI>>getRun
BlockClosure>>on:do:
DIWebServiceAPI>>getRun
DIWebServiceHandler>>post
DIWebServiceHandler(ZnRestCall)>>execute
[ call execute ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
BlockClosure>>on:do:
ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
[ self execute: call ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
BlockClosure>>on:do:
ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ :delegate | delegate handleRequest: request ] ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateRequest:do:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
[ self authenticateAndDelegateRequest: request ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
BlockClosure>>on:do:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequest:
ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeOneRequestResponseOn:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ self executeOneRequestResponseOn: stream ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
[ 
p psValueAt: index put: anObject.
aBlock value ] in ZnCurrentServer(DynamicVariable)>>value:during:
BlockClosure>>ensure:
ZnCurrentServer(DynamicVariable)>>value:during:
ZnCurrentServer class(DynamicVariable class)>>value:during:
ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
[ self executeRequestResponseLoopOn: stream ] in [ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ] in [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
BlockClosure>>ensure:
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ] in [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
BlockClosure>>ifCurtailed:
[ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
NeoJSONParseError: invalid input: nil
18 February 2015 6:01:51.748941 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
NBCogit NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
https://github.com/pharo-project/pharo-vm.git Commit: 4a0d556150d478ff2de3c9624d2f18e6eaa3fa5c Date: 2014-12-18 18:42:53 +0100 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14893

Image: Pharo3.0 [Latest update: #30863]

NeoJSONReader>>error:
	Receiver: a NeoJSONReader
	Arguments and temporary variables: 
		text: 	'invalid input: nil'
	Receiver's instance variables: 
		mappings: 	nil
		readStream: 	a ReadStream
		stringStream: 	nil
		listClass: 	nil
		mapClass: 	nil
		propertyNamesAsSymbols: 	false


NeoJSONReader>>parseValue
	Receiver: a NeoJSONReader
	Arguments and temporary variables: 
		char: 	nil
	Receiver's instance variables: 
		mappings: 	nil
		readStream: 	a ReadStream
		stringStream: 	nil
		listClass: 	nil
		mapClass: 	nil
		propertyNamesAsSymbols: 	false


NeoJSONReader>>next
	Receiver: a NeoJSONReader
	Arguments and temporary variables: 

	Receiver's instance variables: 
		mappings: 	nil
		readStream: 	a ReadStream
		stringStream: 	nil
		listClass: 	nil
		mapClass: 	nil
		propertyNamesAsSymbols: 	false


NeoJSONReader class>>fromString:
	Receiver: NeoJSONReader
	Arguments and temporary variables: 
		string: 	''
	Receiver's instance variables: 
		superclass: 	NeoJSONMapper
		methodDict: 	a MethodDictionary(#atEnd->NeoJSONReader>>#atEnd #close->NeoJSONRea...etc...
		format: 	142
		layout: 	a FixedLayout
		instanceVariables: 	#(#readStream #stringStream #listClass #mapClass #propertyNa...etc...
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#NeoJSONReader
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Neo-JSON-Core'
		traitComposition: 	{}
		localSelectors: 	nil


DIPhpModel>>_loadPhpModel
	Receiver: a DIPhpModel
	Arguments and temporary variables: 

	Receiver's instance variables: 
		defRules: 	a DICollectionRule()
		defVars: 	a DICollectionVar(SYSTEM)
		analysisID: 	'1424278912'
		additionalProperties: 	a Dictionary()
		ruleCounter: 	0
		varCounter: 	0
		defVarElements: 	a DICollectionVarElements()
		defVarInvertedElements: 	a DICollectionVarElements()
		model: 	nil


DIPhpModel>>model
	Receiver: a DIPhpModel
	Arguments and temporary variables: 

	Receiver's instance variables: 
		defRules: 	a DICollectionRule()
		defVars: 	a DICollectionVar(SYSTEM)
		analysisID: 	'1424278912'
		additionalProperties: 	a Dictionary()
		ruleCounter: 	0
		varCounter: 	0
		defVarElements: 	a DICollectionVarElements()
		defVarInvertedElements: 	a DICollectionVarElements()
		model: 	nil


DIVarPhpClass>>allElements
	Receiver: RuleResult
	Arguments and temporary variables: 

	Receiver's instance variables: 
		isFirst: 	false
		dslText: 	'RuleResult=PhpClass with name:"Dicto\\RuleResult"'
		type: 	'PhpClass'
		id: 	1
		entity: 	nil
		name: 	'RuleResult'
		specifiers: 	an OrderedCollection(name=Dicto\\RuleResult)
		isInverted: 	false
		elements: 	a DICollectionVarElements()
		invertedElements: 	a DICollectionVarElements()


DIVarPhpClass(DIVar)>>elements
	Receiver: RuleResult
	Arguments and temporary variables: 
		valid: 	nil
	Receiver's instance variables: 
		isFirst: 	false
		dslText: 	'RuleResult=PhpClass with name:"Dicto\\RuleResult"'
		type: 	'PhpClass'
		id: 	1
		entity: 	nil
		name: 	'RuleResult'
		specifiers: 	an OrderedCollection(name=Dicto\\RuleResult)
		isInverted: 	false
		elements: 	a DICollectionVarElements()
		invertedElements: 	a DICollectionVarElements()


DISimpleRule>>subjectElements
	Receiver: RuleResult cannot depend on DictoTalker
	Arguments and temporary variables: 
		subjectElements: 	nil
	Receiver's instance variables: 
		isFirst: 	nil
		dslText: 	'RuleResult cannot depend on DictoTalker'
		type: 	#cannot
		id: 	1001
		entity: 	nil
		subjects: 	an Array(RuleResult)
		predicates: 	an Array(depend on DictoTalker)
		subRules: 	nil
		candidateAdapters: 	a SortedCollection(DIPhpDependencies)
		chosenAdapter: 	DIPhpDependencies
		hasFailed: 	false
		failureMessage: 	''
		failingPredicates: 	a Set()
		hasSubjectInverted: 	false
		hasPredicateInverted: 	false


printRulesEntityRelationship: someRules
	| res processedPredicates |
	res := ''.
	processedPredicates := Set new.
	someRules
		do: [ :rule | 
			| predicateSelector subjectElements argumentElements data isPredicateInv isSubjectInv |
			predicateSelector := (rule predicate nameNormalized , ':') asSymbol.
			isPredicateInv := rule hasPredicateInverted.
			isSubjectInv := rule hasSubjectInverted.
			subjectElements := rule subjectElements.
			argumentElements := rule argumentElements.
			subjectElements
				do: [ :subject | 
					argumentElements
						do: [ :argument | 
							| relId spec msgPass msgFail |
							relId := subject id , '-' , argument id.
							msgPass := subject id , '.' , rule predicate name , '(' , argument id , ')=True'.
							msgFail := subject id , '.' , rule predicate name , '(' , argument id , ')=False'.
							(processedPredicates includes: relId)
								ifFalse: [ 
									data := {(#subject -> subject value).
									(#argument -> argument value).
									(#ruleId -> rule id).
									(#propertyId -> relId).
									(#msgPass -> msgPass).
									(#msgFail -> msgFail)} asDictionary.
									spec := self perform: predicateSelector withArguments: {data}.
									spec := spec
										dictoReplace:
											{('$subject' -> subject value).
											('$argument' -> argument value).
											('$ruleId' -> rule id).
											('$propertyId' -> relId).
											('$msgPass' -> msgPass).
											('$msgFail' -> msgFail)}.
									res := res , spec ].	"avoid duplicate predicate evaluations"
							processedPredicates add: relId ] ] ].
	^ res in DIPhpDependencies(DIAdapter)>>printRulesEntityRelationship:
	Receiver: a DIPhpDependencies
	Arguments and temporary variables: 
		someRules: 	a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalk...etc...
		processedPredicates: 	a Set()
		data: 	nil
		res: 	''
		rule: 	RuleResult cannot depend on DictoTalker
		predicateSelector: 	#dependOn:
		subjectElements: 	nil
		argumentElements: 	nil
		isPredicateInv: 	false
		isSubjectInv: 	false
	Receiver's instance variables: 
		output: 	''
		commandOutput: 	''
		NEWLINE: 	'
'
		rules: 	a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalker m...etc...
		varSynonyms: 	nil
		sessionId: 	'1424278912'
		TIMESTAMP: 	'1424278912'
		TOOLNAME: 	'DIPhpDependencies'
		PROJECTROOT: 	'/home/otruffer/applications/TeamCity/buildAgent/work/96a46dec2a79...etc...
		PROJECTSRC: 	'./'
		PROJECTBIN: 	'./'
		RESULTFILE: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/full-test-full-t...etc...
		TESTFILE: 	nil
		testInputFileExt: 	'.st'
		SYSTEM: 	SYSTEM


DICollectionRule(OrderedCollection)>>do:
	Receiver: a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalker must depend on Rule...etc...
	Arguments and temporary variables: 
		aBlock: 	printRulesEntityRelationship: someRules
	| res processedPredicates |
	r...etc...
		index: 	1
	Receiver's instance variables: 
		array: 	an Array(RuleResult cannot depend on DictoTalker DictoTalker must depend...etc...
		firstIndex: 	1
		lastIndex: 	3
		elements: 	nil
		elements: 	nil


DIPhpDependencies(DIAdapter)>>printRulesEntityRelationship:
	Receiver: a DIPhpDependencies
	Arguments and temporary variables: 
		res: 	''
		someRules: 	a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalk...etc...
		processedPredicates: 	a Set()
	Receiver's instance variables: 
		output: 	''
		commandOutput: 	''
		NEWLINE: 	'
'
		rules: 	a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalker m...etc...
		varSynonyms: 	nil
		sessionId: 	'1424278912'
		TIMESTAMP: 	'1424278912'
		TOOLNAME: 	'DIPhpDependencies'
		PROJECTROOT: 	'/home/otruffer/applications/TeamCity/buildAgent/work/96a46dec2a79...etc...
		PROJECTSRC: 	'./'
		PROJECTBIN: 	'./'
		RESULTFILE: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/full-test-full-t...etc...
		TESTFILE: 	nil
		testInputFileExt: 	'.st'
		SYSTEM: 	SYSTEM


DIPhpDependencies(DIAdapter)>>printRules
	Receiver: a DIPhpDependencies
	Arguments and temporary variables: 
		res: 	nil
		allRules: 	a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalke...etc...
	Receiver's instance variables: 
		output: 	''
		commandOutput: 	''
		NEWLINE: 	'
'
		rules: 	a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalker m...etc...
		varSynonyms: 	nil
		sessionId: 	'1424278912'
		TIMESTAMP: 	'1424278912'
		TOOLNAME: 	'DIPhpDependencies'
		PROJECTROOT: 	'/home/otruffer/applications/TeamCity/buildAgent/work/96a46dec2a79...etc...
		PROJECTSRC: 	'./'
		PROJECTBIN: 	'./'
		RESULTFILE: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/full-test-full-t...etc...
		TESTFILE: 	nil
		testInputFileExt: 	'.st'
		SYSTEM: 	SYSTEM


DIPhpDependencies>>testInput
	Receiver: a DIPhpDependencies
	Arguments and temporary variables: 
		strRules: 	nil
	Receiver's instance variables: 
		output: 	''
		commandOutput: 	''
		NEWLINE: 	'
'
		rules: 	a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalker m...etc...
		varSynonyms: 	nil
		sessionId: 	'1424278912'
		TIMESTAMP: 	'1424278912'
		TOOLNAME: 	'DIPhpDependencies'
		PROJECTROOT: 	'/home/otruffer/applications/TeamCity/buildAgent/work/96a46dec2a79...etc...
		PROJECTSRC: 	'./'
		PROJECTBIN: 	'./'
		RESULTFILE: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/full-test-full-t...etc...
		TESTFILE: 	nil
		testInputFileExt: 	'.st'
		SYSTEM: 	SYSTEM


DITestGroup>>build
	Receiver: a DITestGroup
	Arguments and temporary variables: 

	Receiver's instance variables: 
		rules: 	an OrderedCollection(RuleResult cannot depend on DictoTalker DictoTalker...etc...
		adapter: 	a DIPhpDependencies
		runCommandText: 	nil
		testSpecification: 	nil
		adapterID: 	'DIPhpDependencies'
		resultFile: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/full-test-full-t...etc...
		specificationFile: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/full-test...etc...
		commandFile: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/full-test-full-...etc...


[ :testGroup | testGroup build ] in DIDicto>>dictoBuild:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = ...etc...
		adapterTestGroups: 	a Dictionary(DIGrepFileContent->a DITestGroup DIJMeterLoadTe...etc...
		testGroup: 	a DITestGroup
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424278912'
		singleShotTask: 	false


Array(SequenceableCollection)>>do:
	Receiver: an Array(a DITestGroup a DITestGroup a DITestGroup a DITestGroup a DITestGroup)
	Arguments and temporary variables: 
		aBlock: 	[ :testGroup | testGroup build ]
		index: 	4
	Receiver's instance variables: 
an Array(a DITestGroup a DITestGroup a DITestGroup a DITestGroup a DITestGroup)

DIDicto>>dictoBuild:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = ...etc...
		adapterTestGroups: 	a Dictionary(DIGrepFileContent->a DITestGroup DIJMeterLoadTe...etc...
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424278912'
		singleShotTask: 	false


DIDicto>>dictoRun:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = ...etc...
		adapterTestGroups: 	nil
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424278912'
		singleShotTask: 	false


DIDicto>>dictoAll:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = ...etc...
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424278912'
		singleShotTask: 	false


[ DIDicto new dictoAll: input ] in DIWebServiceAPI>>getRun
	Receiver: a DIWebServiceAPI
	Arguments and temporary variables: 
		in: 	'/home/otruffer/dicto/bin/analysis/full-test-full-test-7/dicto.rules'
		input: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = PhpCl...etc...
		rulesFailed: 	nil
		rulesTotal: 	nil
	Receiver's instance variables: 
		request: 	nil
		response: 	nil
		variables: 	nil
		delegate: 	nil
		principal: 	nil
		credentials: 	nil


BlockClosure>>on:do:
	Receiver: [ DIDicto new dictoAll: input ]
	Arguments and temporary variables: 
		exception: 	DIException
		handlerAction: 	[ :ex | ^ self error: ex description ]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	DIWebServiceAPI>>getRun
		startpc: 	138
		numArgs: 	0


DIWebServiceAPI>>getRun
	Receiver: a DIWebServiceAPI
	Arguments and temporary variables: 
		in: 	'/home/otruffer/dicto/bin/analysis/full-test-full-test-7/dicto.rules'
		input: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = PhpCl...etc...
		rulesFailed: 	nil
		rulesTotal: 	nil
	Receiver's instance variables: 
		request: 	nil
		response: 	nil
		variables: 	nil
		delegate: 	nil
		principal: 	nil
		credentials: 	nil


DIWebServiceHandler>>post
	Receiver: a DIWebServiceHandler
	Arguments and temporary variables: 
		api: 	a DIWebServiceAPI
	Receiver's instance variables: 
		request: 	a ZnRequest(POST /full-test-full-test-7/run)
		response: 	nil
		variables: 	an OrderedCollection('full-test-full-test-7' 'run')
		delegate: 	a ZnJSONRestServerDelegate
		principal: 	nil
		credentials: 	nil
		dicto: 	a DIDicto


DIWebServiceHandler(ZnRestCall)>>execute
	Receiver: a DIWebServiceHandler
	Arguments and temporary variables: 

	Receiver's instance variables: 
		request: 	a ZnRequest(POST /full-test-full-test-7/run)
		response: 	nil
		variables: 	an OrderedCollection('full-test-full-test-7' 'run')
		delegate: 	a ZnJSONRestServerDelegate
		principal: 	nil
		credentials: 	nil
		dicto: 	a DIDicto


[ call execute ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


BlockClosure>>on:do:
	Receiver: [ call execute ]
	Arguments and temporary variables: 
		exception: 	ZnRestCallUnauthorized
		handlerAction: 	[ :exception | self unauthorized: exception request ]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
		startpc: 	38
		numArgs: 	0


ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


[ self execute: call ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /full-test-full-test-7/run)
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


BlockClosure>>on:do:
	Receiver: [ self execute: call ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :exception | 
request server debugMode
	ifTrue: [ exception pa...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
		startpc: 	99
		numArgs: 	0


ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /full-test-full-test-7/run)
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ :delegate | delegate handleRequest: request ] ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /full-test-full-test-7/run)
		delegate: 	a ZnJSONRestServerDelegate
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateRequest:do:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /full-test-full-test-7/run)
		block: 	[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ ...etc...
		authenticator: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /full-test-full-test-7/run)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream)


[ self authenticateAndDelegateRequest: request ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /full-test-full-test-7/run)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream)


BlockClosure>>on:do:
	Receiver: [ self authenticateAndDelegateRequest: request ]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :exception | 
self debugMode
	ifTrue: [ exception pass ]
	ifFa...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequ...etc...
		startpc: 	58
		numArgs: 	0


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /full-test-full-test-7/run)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /full-test-full-test-7/run)
		response: 	nil
		initialMilliseconds: 	23422098
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeOneRequestResponseOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		stream: 	a ZdcSocketStream
		request: 	a ZnRequest(POST /full-test-full-test-7/run)
		response: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream)



--- The full stack ---
NeoJSONReader>>error:
NeoJSONReader>>parseValue
NeoJSONReader>>next
NeoJSONReader class>>fromString:
DIPhpModel>>_loadPhpModel
DIPhpModel>>model
DIVarPhpClass>>allElements
DIVarPhpClass(DIVar)>>elements
DISimpleRule>>subjectElements
printRulesEntityRelationship: someRules
	| res processedPredicates |
	res := ''.
	processedPredicates := Set new.
	someRules
		do: [ :rule | 
			| predicateSelector subjectElements argumentElements data isPredicateInv isSubjectInv |
			predicateSelector := (rule predicate nameNormalized , ':') asSymbol.
			isPredicateInv := rule hasPredicateInverted.
			isSubjectInv := rule hasSubjectInverted.
			subjectElements := rule subjectElements.
			argumentElements := rule argumentElements.
			subjectElements
				do: [ :subject | 
					argumentElements
						do: [ :argument | 
							| relId spec msgPass msgFail |
							relId := subject id , '-' , argument id.
							msgPass := subject id , '.' , rule predicate name , '(' , argument id , ')=True'.
							msgFail := subject id , '.' , rule predicate name , '(' , argument id , ')=False'.
							(processedPredicates includes: relId)
								ifFalse: [ 
									data := {(#subject -> subject value).
									(#argument -> argument value).
									(#ruleId -> rule id).
									(#propertyId -> relId).
									(#msgPass -> msgPass).
									(#msgFail -> msgFail)} asDictionary.
									spec := self perform: predicateSelector withArguments: {data}.
									spec := spec
										dictoReplace:
											{('$subject' -> subject value).
											('$argument' -> argument value).
											('$ruleId' -> rule id).
											('$propertyId' -> relId).
											('$msgPass' -> msgPass).
											('$msgFail' -> msgFail)}.
									res := res , spec ].	"avoid duplicate predicate evaluations"
							processedPredicates add: relId ] ] ].
	^ res in DIPhpDependencies(DIAdapter)>>printRulesEntityRelationship:
DICollectionRule(OrderedCollection)>>do:
DIPhpDependencies(DIAdapter)>>printRulesEntityRelationship:
DIPhpDependencies(DIAdapter)>>printRules
DIPhpDependencies>>testInput
DITestGroup>>build
[ :testGroup | testGroup build ] in DIDicto>>dictoBuild:
Array(SequenceableCollection)>>do:
DIDicto>>dictoBuild:
DIDicto>>dictoRun:
DIDicto>>dictoAll:
[ DIDicto new dictoAll: input ] in DIWebServiceAPI>>getRun
BlockClosure>>on:do:
DIWebServiceAPI>>getRun
DIWebServiceHandler>>post
DIWebServiceHandler(ZnRestCall)>>execute
[ call execute ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
BlockClosure>>on:do:
ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
[ self execute: call ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
BlockClosure>>on:do:
ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ :delegate | delegate handleRequest: request ] ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateRequest:do:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
[ self authenticateAndDelegateRequest: request ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
BlockClosure>>on:do:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequest:
ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeOneRequestResponseOn:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ self executeOneRequestResponseOn: stream ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
[ 
p psValueAt: index put: anObject.
aBlock value ] in ZnCurrentServer(DynamicVariable)>>value:during:
BlockClosure>>ensure:
ZnCurrentServer(DynamicVariable)>>value:during:
ZnCurrentServer class(DynamicVariable class)>>value:during:
ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
[ self executeRequestResponseLoopOn: stream ] in [ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ] in [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
BlockClosure>>ensure:
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ] in [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
BlockClosure>>ifCurtailed:
[ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
NeoJSONParseError: invalid input: nil
18 February 2015 6:07:07.668177 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
NBCogit NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
https://github.com/pharo-project/pharo-vm.git Commit: 4a0d556150d478ff2de3c9624d2f18e6eaa3fa5c Date: 2014-12-18 18:42:53 +0100 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14893

Image: Pharo3.0 [Latest update: #30863]

NeoJSONReader>>error:
	Receiver: a NeoJSONReader
	Arguments and temporary variables: 
		text: 	'invalid input: nil'
	Receiver's instance variables: 
		mappings: 	nil
		readStream: 	a ReadStream
		stringStream: 	nil
		listClass: 	nil
		mapClass: 	nil
		propertyNamesAsSymbols: 	false


NeoJSONReader>>parseValue
	Receiver: a NeoJSONReader
	Arguments and temporary variables: 
		char: 	nil
	Receiver's instance variables: 
		mappings: 	nil
		readStream: 	a ReadStream
		stringStream: 	nil
		listClass: 	nil
		mapClass: 	nil
		propertyNamesAsSymbols: 	false


NeoJSONReader>>next
	Receiver: a NeoJSONReader
	Arguments and temporary variables: 

	Receiver's instance variables: 
		mappings: 	nil
		readStream: 	a ReadStream
		stringStream: 	nil
		listClass: 	nil
		mapClass: 	nil
		propertyNamesAsSymbols: 	false


NeoJSONReader class>>fromString:
	Receiver: NeoJSONReader
	Arguments and temporary variables: 
		string: 	''
	Receiver's instance variables: 
		superclass: 	NeoJSONMapper
		methodDict: 	a MethodDictionary(#atEnd->NeoJSONReader>>#atEnd #close->NeoJSONRea...etc...
		format: 	142
		layout: 	a FixedLayout
		instanceVariables: 	#(#readStream #stringStream #listClass #mapClass #propertyNa...etc...
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#NeoJSONReader
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Neo-JSON-Core'
		traitComposition: 	{}
		localSelectors: 	nil


DIPhpModel>>_loadPhpModel
	Receiver: a DIPhpModel
	Arguments and temporary variables: 

	Receiver's instance variables: 
		defRules: 	a DICollectionRule()
		defVars: 	a DICollectionVar(SYSTEM)
		analysisID: 	'1424279228'
		additionalProperties: 	a Dictionary()
		ruleCounter: 	0
		varCounter: 	0
		defVarElements: 	a DICollectionVarElements()
		defVarInvertedElements: 	a DICollectionVarElements()
		model: 	nil


DIPhpModel>>model
	Receiver: a DIPhpModel
	Arguments and temporary variables: 

	Receiver's instance variables: 
		defRules: 	a DICollectionRule()
		defVars: 	a DICollectionVar(SYSTEM)
		analysisID: 	'1424279228'
		additionalProperties: 	a Dictionary()
		ruleCounter: 	0
		varCounter: 	0
		defVarElements: 	a DICollectionVarElements()
		defVarInvertedElements: 	a DICollectionVarElements()
		model: 	nil


DIVarPhpClass>>allElements
	Receiver: RuleResult
	Arguments and temporary variables: 

	Receiver's instance variables: 
		isFirst: 	false
		dslText: 	'RuleResult=PhpClass with name:"Dicto\\RuleResult"'
		type: 	'PhpClass'
		id: 	1
		entity: 	nil
		name: 	'RuleResult'
		specifiers: 	an OrderedCollection(name=Dicto\\RuleResult)
		isInverted: 	false
		elements: 	a DICollectionVarElements()
		invertedElements: 	a DICollectionVarElements()


DIVarPhpClass(DIVar)>>elements
	Receiver: RuleResult
	Arguments and temporary variables: 
		valid: 	nil
	Receiver's instance variables: 
		isFirst: 	false
		dslText: 	'RuleResult=PhpClass with name:"Dicto\\RuleResult"'
		type: 	'PhpClass'
		id: 	1
		entity: 	nil
		name: 	'RuleResult'
		specifiers: 	an OrderedCollection(name=Dicto\\RuleResult)
		isInverted: 	false
		elements: 	a DICollectionVarElements()
		invertedElements: 	a DICollectionVarElements()


DISimpleRule>>subjectElements
	Receiver: RuleResult cannot depend on DictoTalker
	Arguments and temporary variables: 
		subjectElements: 	nil
	Receiver's instance variables: 
		isFirst: 	nil
		dslText: 	'RuleResult cannot depend on DictoTalker'
		type: 	#cannot
		id: 	1001
		entity: 	nil
		subjects: 	an Array(RuleResult)
		predicates: 	an Array(depend on DictoTalker)
		subRules: 	nil
		candidateAdapters: 	a SortedCollection(DIPhpDependencies)
		chosenAdapter: 	DIPhpDependencies
		hasFailed: 	false
		failureMessage: 	''
		failingPredicates: 	a Set()
		hasSubjectInverted: 	false
		hasPredicateInverted: 	false


printRulesEntityRelationship: someRules
	| res processedPredicates |
	res := ''.
	processedPredicates := Set new.
	someRules
		do: [ :rule | 
			| predicateSelector subjectElements argumentElements data isPredicateInv isSubjectInv |
			predicateSelector := (rule predicate nameNormalized , ':') asSymbol.
			isPredicateInv := rule hasPredicateInverted.
			isSubjectInv := rule hasSubjectInverted.
			subjectElements := rule subjectElements.
			argumentElements := rule argumentElements.
			subjectElements
				do: [ :subject | 
					argumentElements
						do: [ :argument | 
							| relId spec msgPass msgFail |
							relId := subject id , '-' , argument id.
							msgPass := subject id , '.' , rule predicate name , '(' , argument id , ')=True'.
							msgFail := subject id , '.' , rule predicate name , '(' , argument id , ')=False'.
							(processedPredicates includes: relId)
								ifFalse: [ 
									data := {(#subject -> subject value).
									(#argument -> argument value).
									(#ruleId -> rule id).
									(#propertyId -> relId).
									(#msgPass -> msgPass).
									(#msgFail -> msgFail)} asDictionary.
									spec := self perform: predicateSelector withArguments: {data}.
									spec := spec
										dictoReplace:
											{('$subject' -> subject value).
											('$argument' -> argument value).
											('$ruleId' -> rule id).
											('$propertyId' -> relId).
											('$msgPass' -> msgPass).
											('$msgFail' -> msgFail)}.
									res := res , spec ].	"avoid duplicate predicate evaluations"
							processedPredicates add: relId ] ] ].
	^ res in DIPhpDependencies(DIAdapter)>>printRulesEntityRelationship:
	Receiver: a DIPhpDependencies
	Arguments and temporary variables: 
		someRules: 	a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalk...etc...
		processedPredicates: 	a Set()
		data: 	nil
		res: 	''
		rule: 	RuleResult cannot depend on DictoTalker
		predicateSelector: 	#dependOn:
		subjectElements: 	nil
		argumentElements: 	nil
		isPredicateInv: 	false
		isSubjectInv: 	false
	Receiver's instance variables: 
		output: 	''
		commandOutput: 	''
		NEWLINE: 	'
'
		rules: 	a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalker m...etc...
		varSynonyms: 	nil
		sessionId: 	'1424279228'
		TIMESTAMP: 	'1424279228'
		TOOLNAME: 	'DIPhpDependencies'
		PROJECTROOT: 	'/home/otruffer/applications/TeamCity/buildAgent/work/96a46dec2a79...etc...
		PROJECTSRC: 	'./'
		PROJECTBIN: 	'./'
		RESULTFILE: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/full-test-full-t...etc...
		TESTFILE: 	nil
		testInputFileExt: 	'.st'
		SYSTEM: 	SYSTEM


DICollectionRule(OrderedCollection)>>do:
	Receiver: a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalker must depend on Rule...etc...
	Arguments and temporary variables: 
		aBlock: 	printRulesEntityRelationship: someRules
	| res processedPredicates |
	r...etc...
		index: 	1
	Receiver's instance variables: 
		array: 	an Array(RuleResult cannot depend on DictoTalker DictoTalker must depend...etc...
		firstIndex: 	1
		lastIndex: 	3
		elements: 	nil
		elements: 	nil


DIPhpDependencies(DIAdapter)>>printRulesEntityRelationship:
	Receiver: a DIPhpDependencies
	Arguments and temporary variables: 
		res: 	''
		someRules: 	a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalk...etc...
		processedPredicates: 	a Set()
	Receiver's instance variables: 
		output: 	''
		commandOutput: 	''
		NEWLINE: 	'
'
		rules: 	a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalker m...etc...
		varSynonyms: 	nil
		sessionId: 	'1424279228'
		TIMESTAMP: 	'1424279228'
		TOOLNAME: 	'DIPhpDependencies'
		PROJECTROOT: 	'/home/otruffer/applications/TeamCity/buildAgent/work/96a46dec2a79...etc...
		PROJECTSRC: 	'./'
		PROJECTBIN: 	'./'
		RESULTFILE: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/full-test-full-t...etc...
		TESTFILE: 	nil
		testInputFileExt: 	'.st'
		SYSTEM: 	SYSTEM


DIPhpDependencies(DIAdapter)>>printRules
	Receiver: a DIPhpDependencies
	Arguments and temporary variables: 
		res: 	nil
		allRules: 	a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalke...etc...
	Receiver's instance variables: 
		output: 	''
		commandOutput: 	''
		NEWLINE: 	'
'
		rules: 	a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalker m...etc...
		varSynonyms: 	nil
		sessionId: 	'1424279228'
		TIMESTAMP: 	'1424279228'
		TOOLNAME: 	'DIPhpDependencies'
		PROJECTROOT: 	'/home/otruffer/applications/TeamCity/buildAgent/work/96a46dec2a79...etc...
		PROJECTSRC: 	'./'
		PROJECTBIN: 	'./'
		RESULTFILE: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/full-test-full-t...etc...
		TESTFILE: 	nil
		testInputFileExt: 	'.st'
		SYSTEM: 	SYSTEM


DIPhpDependencies>>testInput
	Receiver: a DIPhpDependencies
	Arguments and temporary variables: 
		strRules: 	nil
	Receiver's instance variables: 
		output: 	''
		commandOutput: 	''
		NEWLINE: 	'
'
		rules: 	a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalker m...etc...
		varSynonyms: 	nil
		sessionId: 	'1424279228'
		TIMESTAMP: 	'1424279228'
		TOOLNAME: 	'DIPhpDependencies'
		PROJECTROOT: 	'/home/otruffer/applications/TeamCity/buildAgent/work/96a46dec2a79...etc...
		PROJECTSRC: 	'./'
		PROJECTBIN: 	'./'
		RESULTFILE: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/full-test-full-t...etc...
		TESTFILE: 	nil
		testInputFileExt: 	'.st'
		SYSTEM: 	SYSTEM


DITestGroup>>build
	Receiver: a DITestGroup
	Arguments and temporary variables: 

	Receiver's instance variables: 
		rules: 	an OrderedCollection(RuleResult cannot depend on DictoTalker DictoTalker...etc...
		adapter: 	a DIPhpDependencies
		runCommandText: 	nil
		testSpecification: 	nil
		adapterID: 	'DIPhpDependencies'
		resultFile: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/full-test-full-t...etc...
		specificationFile: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/full-test...etc...
		commandFile: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/full-test-full-...etc...


[ :testGroup | testGroup build ] in DIDicto>>dictoBuild:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = ...etc...
		adapterTestGroups: 	a Dictionary(DIGrepFileContent->a DITestGroup DIJMeterLoadTe...etc...
		testGroup: 	a DITestGroup
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424279228'
		singleShotTask: 	false


Array(SequenceableCollection)>>do:
	Receiver: an Array(a DITestGroup a DITestGroup a DITestGroup a DITestGroup a DITestGroup)
	Arguments and temporary variables: 
		aBlock: 	[ :testGroup | testGroup build ]
		index: 	4
	Receiver's instance variables: 
an Array(a DITestGroup a DITestGroup a DITestGroup a DITestGroup a DITestGroup)

DIDicto>>dictoBuild:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = ...etc...
		adapterTestGroups: 	a Dictionary(DIGrepFileContent->a DITestGroup DIJMeterLoadTe...etc...
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424279228'
		singleShotTask: 	false


DIDicto>>dictoRun:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = ...etc...
		adapterTestGroups: 	nil
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424279228'
		singleShotTask: 	false


DIDicto>>dictoAll:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = ...etc...
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424279228'
		singleShotTask: 	false


[ DIDicto new dictoAll: input ] in DIWebServiceAPI>>getRun
	Receiver: a DIWebServiceAPI
	Arguments and temporary variables: 
		in: 	'/home/otruffer/dicto/bin/analysis/full-test-full-test-9/dicto.rules'
		input: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = PhpCl...etc...
		rulesFailed: 	nil
		rulesTotal: 	nil
	Receiver's instance variables: 
		request: 	nil
		response: 	nil
		variables: 	nil
		delegate: 	nil
		principal: 	nil
		credentials: 	nil


BlockClosure>>on:do:
	Receiver: [ DIDicto new dictoAll: input ]
	Arguments and temporary variables: 
		exception: 	DIException
		handlerAction: 	[ :ex | ^ self error: ex description ]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	DIWebServiceAPI>>getRun
		startpc: 	138
		numArgs: 	0


DIWebServiceAPI>>getRun
	Receiver: a DIWebServiceAPI
	Arguments and temporary variables: 
		in: 	'/home/otruffer/dicto/bin/analysis/full-test-full-test-9/dicto.rules'
		input: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = PhpCl...etc...
		rulesFailed: 	nil
		rulesTotal: 	nil
	Receiver's instance variables: 
		request: 	nil
		response: 	nil
		variables: 	nil
		delegate: 	nil
		principal: 	nil
		credentials: 	nil


DIWebServiceHandler>>post
	Receiver: a DIWebServiceHandler
	Arguments and temporary variables: 
		api: 	a DIWebServiceAPI
	Receiver's instance variables: 
		request: 	a ZnRequest(POST /full-test-full-test-9/run)
		response: 	nil
		variables: 	an OrderedCollection('full-test-full-test-9' 'run')
		delegate: 	a ZnJSONRestServerDelegate
		principal: 	nil
		credentials: 	nil
		dicto: 	a DIDicto


DIWebServiceHandler(ZnRestCall)>>execute
	Receiver: a DIWebServiceHandler
	Arguments and temporary variables: 

	Receiver's instance variables: 
		request: 	a ZnRequest(POST /full-test-full-test-9/run)
		response: 	nil
		variables: 	an OrderedCollection('full-test-full-test-9' 'run')
		delegate: 	a ZnJSONRestServerDelegate
		principal: 	nil
		credentials: 	nil
		dicto: 	a DIDicto


[ call execute ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


BlockClosure>>on:do:
	Receiver: [ call execute ]
	Arguments and temporary variables: 
		exception: 	ZnRestCallUnauthorized
		handlerAction: 	[ :exception | self unauthorized: exception request ]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
		startpc: 	38
		numArgs: 	0


ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


[ self execute: call ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /full-test-full-test-9/run)
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


BlockClosure>>on:do:
	Receiver: [ self execute: call ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :exception | 
request server debugMode
	ifTrue: [ exception pa...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
		startpc: 	99
		numArgs: 	0


ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /full-test-full-test-9/run)
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ :delegate | delegate handleRequest: request ] ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /full-test-full-test-9/run)
		delegate: 	a ZnJSONRestServerDelegate
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateRequest:do:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /full-test-full-test-9/run)
		block: 	[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ ...etc...
		authenticator: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /full-test-full-test-9/run)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream)


[ self authenticateAndDelegateRequest: request ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /full-test-full-test-9/run)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream)


BlockClosure>>on:do:
	Receiver: [ self authenticateAndDelegateRequest: request ]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :exception | 
self debugMode
	ifTrue: [ exception pass ]
	ifFa...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequ...etc...
		startpc: 	58
		numArgs: 	0


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /full-test-full-test-9/run)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /full-test-full-test-9/run)
		response: 	nil
		initialMilliseconds: 	23738012
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeOneRequestResponseOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		stream: 	a ZdcSocketStream
		request: 	a ZnRequest(POST /full-test-full-test-9/run)
		response: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream)



--- The full stack ---
NeoJSONReader>>error:
NeoJSONReader>>parseValue
NeoJSONReader>>next
NeoJSONReader class>>fromString:
DIPhpModel>>_loadPhpModel
DIPhpModel>>model
DIVarPhpClass>>allElements
DIVarPhpClass(DIVar)>>elements
DISimpleRule>>subjectElements
printRulesEntityRelationship: someRules
	| res processedPredicates |
	res := ''.
	processedPredicates := Set new.
	someRules
		do: [ :rule | 
			| predicateSelector subjectElements argumentElements data isPredicateInv isSubjectInv |
			predicateSelector := (rule predicate nameNormalized , ':') asSymbol.
			isPredicateInv := rule hasPredicateInverted.
			isSubjectInv := rule hasSubjectInverted.
			subjectElements := rule subjectElements.
			argumentElements := rule argumentElements.
			subjectElements
				do: [ :subject | 
					argumentElements
						do: [ :argument | 
							| relId spec msgPass msgFail |
							relId := subject id , '-' , argument id.
							msgPass := subject id , '.' , rule predicate name , '(' , argument id , ')=True'.
							msgFail := subject id , '.' , rule predicate name , '(' , argument id , ')=False'.
							(processedPredicates includes: relId)
								ifFalse: [ 
									data := {(#subject -> subject value).
									(#argument -> argument value).
									(#ruleId -> rule id).
									(#propertyId -> relId).
									(#msgPass -> msgPass).
									(#msgFail -> msgFail)} asDictionary.
									spec := self perform: predicateSelector withArguments: {data}.
									spec := spec
										dictoReplace:
											{('$subject' -> subject value).
											('$argument' -> argument value).
											('$ruleId' -> rule id).
											('$propertyId' -> relId).
											('$msgPass' -> msgPass).
											('$msgFail' -> msgFail)}.
									res := res , spec ].	"avoid duplicate predicate evaluations"
							processedPredicates add: relId ] ] ].
	^ res in DIPhpDependencies(DIAdapter)>>printRulesEntityRelationship:
DICollectionRule(OrderedCollection)>>do:
DIPhpDependencies(DIAdapter)>>printRulesEntityRelationship:
DIPhpDependencies(DIAdapter)>>printRules
DIPhpDependencies>>testInput
DITestGroup>>build
[ :testGroup | testGroup build ] in DIDicto>>dictoBuild:
Array(SequenceableCollection)>>do:
DIDicto>>dictoBuild:
DIDicto>>dictoRun:
DIDicto>>dictoAll:
[ DIDicto new dictoAll: input ] in DIWebServiceAPI>>getRun
BlockClosure>>on:do:
DIWebServiceAPI>>getRun
DIWebServiceHandler>>post
DIWebServiceHandler(ZnRestCall)>>execute
[ call execute ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
BlockClosure>>on:do:
ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
[ self execute: call ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
BlockClosure>>on:do:
ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ :delegate | delegate handleRequest: request ] ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateRequest:do:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
[ self authenticateAndDelegateRequest: request ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
BlockClosure>>on:do:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequest:
ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeOneRequestResponseOn:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ self executeOneRequestResponseOn: stream ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
[ 
p psValueAt: index put: anObject.
aBlock value ] in ZnCurrentServer(DynamicVariable)>>value:during:
BlockClosure>>ensure:
ZnCurrentServer(DynamicVariable)>>value:during:
ZnCurrentServer class(DynamicVariable class)>>value:during:
ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
[ self executeRequestResponseLoopOn: stream ] in [ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ] in [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
BlockClosure>>ensure:
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ] in [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
BlockClosure>>ifCurtailed:
[ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
NeoJSONParseError: invalid input: nil
18 February 2015 6:17:47.986522 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
NBCogit NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
https://github.com/pharo-project/pharo-vm.git Commit: 4a0d556150d478ff2de3c9624d2f18e6eaa3fa5c Date: 2014-12-18 18:42:53 +0100 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14893

Image: Pharo3.0 [Latest update: #30863]

NeoJSONReader>>error:
	Receiver: a NeoJSONReader
	Arguments and temporary variables: 
		text: 	'invalid input: nil'
	Receiver's instance variables: 
		mappings: 	nil
		readStream: 	a ReadStream
		stringStream: 	nil
		listClass: 	nil
		mapClass: 	nil
		propertyNamesAsSymbols: 	false


NeoJSONReader>>parseValue
	Receiver: a NeoJSONReader
	Arguments and temporary variables: 
		char: 	nil
	Receiver's instance variables: 
		mappings: 	nil
		readStream: 	a ReadStream
		stringStream: 	nil
		listClass: 	nil
		mapClass: 	nil
		propertyNamesAsSymbols: 	false


NeoJSONReader>>next
	Receiver: a NeoJSONReader
	Arguments and temporary variables: 

	Receiver's instance variables: 
		mappings: 	nil
		readStream: 	a ReadStream
		stringStream: 	nil
		listClass: 	nil
		mapClass: 	nil
		propertyNamesAsSymbols: 	false


NeoJSONReader class>>fromString:
	Receiver: NeoJSONReader
	Arguments and temporary variables: 
		string: 	''
	Receiver's instance variables: 
		superclass: 	NeoJSONMapper
		methodDict: 	a MethodDictionary(#atEnd->NeoJSONReader>>#atEnd #close->NeoJSONRea...etc...
		format: 	142
		layout: 	a FixedLayout
		instanceVariables: 	#(#readStream #stringStream #listClass #mapClass #propertyNa...etc...
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#NeoJSONReader
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Neo-JSON-Core'
		traitComposition: 	{}
		localSelectors: 	nil


DIPhpModel>>_loadPhpModel
	Receiver: a DIPhpModel
	Arguments and temporary variables: 

	Receiver's instance variables: 
		defRules: 	a DICollectionRule()
		defVars: 	a DICollectionVar(SYSTEM)
		analysisID: 	'1424279868'
		additionalProperties: 	a Dictionary()
		ruleCounter: 	0
		varCounter: 	0
		defVarElements: 	a DICollectionVarElements()
		defVarInvertedElements: 	a DICollectionVarElements()
		model: 	nil


DIPhpModel>>model
	Receiver: a DIPhpModel
	Arguments and temporary variables: 

	Receiver's instance variables: 
		defRules: 	a DICollectionRule()
		defVars: 	a DICollectionVar(SYSTEM)
		analysisID: 	'1424279868'
		additionalProperties: 	a Dictionary()
		ruleCounter: 	0
		varCounter: 	0
		defVarElements: 	a DICollectionVarElements()
		defVarInvertedElements: 	a DICollectionVarElements()
		model: 	nil


DIVarPhpClass>>allElements
	Receiver: RuleResult
	Arguments and temporary variables: 

	Receiver's instance variables: 
		isFirst: 	false
		dslText: 	'RuleResult=PhpClass with name:"Dicto\\RuleResult"'
		type: 	'PhpClass'
		id: 	1
		entity: 	nil
		name: 	'RuleResult'
		specifiers: 	an OrderedCollection(name=Dicto\\RuleResult)
		isInverted: 	false
		elements: 	a DICollectionVarElements()
		invertedElements: 	a DICollectionVarElements()


DIVarPhpClass(DIVar)>>elements
	Receiver: RuleResult
	Arguments and temporary variables: 
		valid: 	nil
	Receiver's instance variables: 
		isFirst: 	false
		dslText: 	'RuleResult=PhpClass with name:"Dicto\\RuleResult"'
		type: 	'PhpClass'
		id: 	1
		entity: 	nil
		name: 	'RuleResult'
		specifiers: 	an OrderedCollection(name=Dicto\\RuleResult)
		isInverted: 	false
		elements: 	a DICollectionVarElements()
		invertedElements: 	a DICollectionVarElements()


DISimpleRule>>subjectElements
	Receiver: RuleResult cannot depend on DictoTalker
	Arguments and temporary variables: 
		subjectElements: 	nil
	Receiver's instance variables: 
		isFirst: 	nil
		dslText: 	'RuleResult cannot depend on DictoTalker'
		type: 	#cannot
		id: 	1001
		entity: 	nil
		subjects: 	an Array(RuleResult)
		predicates: 	an Array(depend on DictoTalker)
		subRules: 	nil
		candidateAdapters: 	a SortedCollection(DIPhpDependencies)
		chosenAdapter: 	DIPhpDependencies
		hasFailed: 	false
		failureMessage: 	''
		failingPredicates: 	a Set()
		hasSubjectInverted: 	false
		hasPredicateInverted: 	false


printRulesEntityRelationship: someRules
	| res processedPredicates |
	res := ''.
	processedPredicates := Set new.
	someRules
		do: [ :rule | 
			| predicateSelector subjectElements argumentElements data isPredicateInv isSubjectInv |
			predicateSelector := (rule predicate nameNormalized , ':') asSymbol.
			isPredicateInv := rule hasPredicateInverted.
			isSubjectInv := rule hasSubjectInverted.
			subjectElements := rule subjectElements.
			argumentElements := rule argumentElements.
			subjectElements
				do: [ :subject | 
					argumentElements
						do: [ :argument | 
							| relId spec msgPass msgFail |
							relId := subject id , '-' , argument id.
							msgPass := subject id , '.' , rule predicate name , '(' , argument id , ')=True'.
							msgFail := subject id , '.' , rule predicate name , '(' , argument id , ')=False'.
							(processedPredicates includes: relId)
								ifFalse: [ 
									data := {(#subject -> subject value).
									(#argument -> argument value).
									(#ruleId -> rule id).
									(#propertyId -> relId).
									(#msgPass -> msgPass).
									(#msgFail -> msgFail)} asDictionary.
									spec := self perform: predicateSelector withArguments: {data}.
									spec := spec
										dictoReplace:
											{('$subject' -> subject value).
											('$argument' -> argument value).
											('$ruleId' -> rule id).
											('$propertyId' -> relId).
											('$msgPass' -> msgPass).
											('$msgFail' -> msgFail)}.
									res := res , spec ].	"avoid duplicate predicate evaluations"
							processedPredicates add: relId ] ] ].
	^ res in DIPhpDependencies(DIAdapter)>>printRulesEntityRelationship:
	Receiver: a DIPhpDependencies
	Arguments and temporary variables: 
		someRules: 	a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalk...etc...
		processedPredicates: 	a Set()
		data: 	nil
		res: 	''
		rule: 	RuleResult cannot depend on DictoTalker
		predicateSelector: 	#dependOn:
		subjectElements: 	nil
		argumentElements: 	nil
		isPredicateInv: 	false
		isSubjectInv: 	false
	Receiver's instance variables: 
		output: 	''
		commandOutput: 	''
		NEWLINE: 	'
'
		rules: 	a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalker m...etc...
		varSynonyms: 	nil
		sessionId: 	'1424279868'
		TIMESTAMP: 	'1424279868'
		TOOLNAME: 	'DIPhpDependencies'
		PROJECTROOT: 	'/home/otruffer/applications/TeamCity/buildAgent/work/96a46dec2a79...etc...
		PROJECTSRC: 	'./'
		PROJECTBIN: 	'./'
		RESULTFILE: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/full-test-full-t...etc...
		TESTFILE: 	nil
		testInputFileExt: 	'.st'
		SYSTEM: 	SYSTEM


DICollectionRule(OrderedCollection)>>do:
	Receiver: a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalker must depend on Rule...etc...
	Arguments and temporary variables: 
		aBlock: 	printRulesEntityRelationship: someRules
	| res processedPredicates |
	r...etc...
		index: 	1
	Receiver's instance variables: 
		array: 	an Array(RuleResult cannot depend on DictoTalker DictoTalker must depend...etc...
		firstIndex: 	1
		lastIndex: 	3
		elements: 	nil
		elements: 	nil


DIPhpDependencies(DIAdapter)>>printRulesEntityRelationship:
	Receiver: a DIPhpDependencies
	Arguments and temporary variables: 
		res: 	''
		someRules: 	a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalk...etc...
		processedPredicates: 	a Set()
	Receiver's instance variables: 
		output: 	''
		commandOutput: 	''
		NEWLINE: 	'
'
		rules: 	a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalker m...etc...
		varSynonyms: 	nil
		sessionId: 	'1424279868'
		TIMESTAMP: 	'1424279868'
		TOOLNAME: 	'DIPhpDependencies'
		PROJECTROOT: 	'/home/otruffer/applications/TeamCity/buildAgent/work/96a46dec2a79...etc...
		PROJECTSRC: 	'./'
		PROJECTBIN: 	'./'
		RESULTFILE: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/full-test-full-t...etc...
		TESTFILE: 	nil
		testInputFileExt: 	'.st'
		SYSTEM: 	SYSTEM


DIPhpDependencies(DIAdapter)>>printRules
	Receiver: a DIPhpDependencies
	Arguments and temporary variables: 
		res: 	nil
		allRules: 	a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalke...etc...
	Receiver's instance variables: 
		output: 	''
		commandOutput: 	''
		NEWLINE: 	'
'
		rules: 	a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalker m...etc...
		varSynonyms: 	nil
		sessionId: 	'1424279868'
		TIMESTAMP: 	'1424279868'
		TOOLNAME: 	'DIPhpDependencies'
		PROJECTROOT: 	'/home/otruffer/applications/TeamCity/buildAgent/work/96a46dec2a79...etc...
		PROJECTSRC: 	'./'
		PROJECTBIN: 	'./'
		RESULTFILE: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/full-test-full-t...etc...
		TESTFILE: 	nil
		testInputFileExt: 	'.st'
		SYSTEM: 	SYSTEM


DIPhpDependencies>>testInput
	Receiver: a DIPhpDependencies
	Arguments and temporary variables: 
		strRules: 	nil
	Receiver's instance variables: 
		output: 	''
		commandOutput: 	''
		NEWLINE: 	'
'
		rules: 	a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalker m...etc...
		varSynonyms: 	nil
		sessionId: 	'1424279868'
		TIMESTAMP: 	'1424279868'
		TOOLNAME: 	'DIPhpDependencies'
		PROJECTROOT: 	'/home/otruffer/applications/TeamCity/buildAgent/work/96a46dec2a79...etc...
		PROJECTSRC: 	'./'
		PROJECTBIN: 	'./'
		RESULTFILE: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/full-test-full-t...etc...
		TESTFILE: 	nil
		testInputFileExt: 	'.st'
		SYSTEM: 	SYSTEM


DITestGroup>>build
	Receiver: a DITestGroup
	Arguments and temporary variables: 

	Receiver's instance variables: 
		rules: 	an OrderedCollection(RuleResult cannot depend on DictoTalker DictoTalker...etc...
		adapter: 	a DIPhpDependencies
		runCommandText: 	nil
		testSpecification: 	nil
		adapterID: 	'DIPhpDependencies'
		resultFile: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/full-test-full-t...etc...
		specificationFile: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/full-test...etc...
		commandFile: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/full-test-full-...etc...


[ :testGroup | testGroup build ] in DIDicto>>dictoBuild:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = ...etc...
		adapterTestGroups: 	a Dictionary(DIGrepFileContent->a DITestGroup DIJMeterLoadTe...etc...
		testGroup: 	a DITestGroup
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424279868'
		singleShotTask: 	false


Array(SequenceableCollection)>>do:
	Receiver: an Array(a DITestGroup a DITestGroup a DITestGroup a DITestGroup a DITestGroup)
	Arguments and temporary variables: 
		aBlock: 	[ :testGroup | testGroup build ]
		index: 	4
	Receiver's instance variables: 
an Array(a DITestGroup a DITestGroup a DITestGroup a DITestGroup a DITestGroup)

DIDicto>>dictoBuild:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = ...etc...
		adapterTestGroups: 	a Dictionary(DIGrepFileContent->a DITestGroup DIJMeterLoadTe...etc...
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424279868'
		singleShotTask: 	false


DIDicto>>dictoRun:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = ...etc...
		adapterTestGroups: 	nil
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424279868'
		singleShotTask: 	false


DIDicto>>dictoAll:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = ...etc...
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424279868'
		singleShotTask: 	false


[ DIDicto new dictoAll: input ] in DIWebServiceAPI>>getRun
	Receiver: a DIWebServiceAPI
	Arguments and temporary variables: 
		in: 	'/home/otruffer/dicto/bin/analysis/full-test-full-test-11/dicto.rules'
		input: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = PhpCl...etc...
		rulesFailed: 	nil
		rulesTotal: 	nil
	Receiver's instance variables: 
		request: 	nil
		response: 	nil
		variables: 	nil
		delegate: 	nil
		principal: 	nil
		credentials: 	nil


BlockClosure>>on:do:
	Receiver: [ DIDicto new dictoAll: input ]
	Arguments and temporary variables: 
		exception: 	DIException
		handlerAction: 	[ :ex | ^ self error: ex description ]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	DIWebServiceAPI>>getRun
		startpc: 	138
		numArgs: 	0


DIWebServiceAPI>>getRun
	Receiver: a DIWebServiceAPI
	Arguments and temporary variables: 
		in: 	'/home/otruffer/dicto/bin/analysis/full-test-full-test-11/dicto.rules'
		input: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = PhpCl...etc...
		rulesFailed: 	nil
		rulesTotal: 	nil
	Receiver's instance variables: 
		request: 	nil
		response: 	nil
		variables: 	nil
		delegate: 	nil
		principal: 	nil
		credentials: 	nil


DIWebServiceHandler>>post
	Receiver: a DIWebServiceHandler
	Arguments and temporary variables: 
		api: 	a DIWebServiceAPI
	Receiver's instance variables: 
		request: 	a ZnRequest(POST /full-test-full-test-11/run)
		response: 	nil
		variables: 	an OrderedCollection('full-test-full-test-11' 'run')
		delegate: 	a ZnJSONRestServerDelegate
		principal: 	nil
		credentials: 	nil
		dicto: 	a DIDicto


DIWebServiceHandler(ZnRestCall)>>execute
	Receiver: a DIWebServiceHandler
	Arguments and temporary variables: 

	Receiver's instance variables: 
		request: 	a ZnRequest(POST /full-test-full-test-11/run)
		response: 	nil
		variables: 	an OrderedCollection('full-test-full-test-11' 'run')
		delegate: 	a ZnJSONRestServerDelegate
		principal: 	nil
		credentials: 	nil
		dicto: 	a DIDicto


[ call execute ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


BlockClosure>>on:do:
	Receiver: [ call execute ]
	Arguments and temporary variables: 
		exception: 	ZnRestCallUnauthorized
		handlerAction: 	[ :exception | self unauthorized: exception request ]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
		startpc: 	38
		numArgs: 	0


ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


[ self execute: call ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /full-test-full-test-11/run)
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


BlockClosure>>on:do:
	Receiver: [ self execute: call ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :exception | 
request server debugMode
	ifTrue: [ exception pa...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
		startpc: 	99
		numArgs: 	0


ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /full-test-full-test-11/run)
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ :delegate | delegate handleRequest: request ] ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /full-test-full-test-11/run)
		delegate: 	a ZnJSONRestServerDelegate
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateRequest:do:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /full-test-full-test-11/run)
		block: 	[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ ...etc...
		authenticator: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /full-test-full-test-11/run)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream)


[ self authenticateAndDelegateRequest: request ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /full-test-full-test-11/run)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream)


BlockClosure>>on:do:
	Receiver: [ self authenticateAndDelegateRequest: request ]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :exception | 
self debugMode
	ifTrue: [ exception pass ]
	ifFa...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequ...etc...
		startpc: 	58
		numArgs: 	0


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /full-test-full-test-11/run)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /full-test-full-test-11/run)
		response: 	nil
		initialMilliseconds: 	24378334
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeOneRequestResponseOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		stream: 	a ZdcSocketStream
		request: 	a ZnRequest(POST /full-test-full-test-11/run)
		response: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream)



--- The full stack ---
NeoJSONReader>>error:
NeoJSONReader>>parseValue
NeoJSONReader>>next
NeoJSONReader class>>fromString:
DIPhpModel>>_loadPhpModel
DIPhpModel>>model
DIVarPhpClass>>allElements
DIVarPhpClass(DIVar)>>elements
DISimpleRule>>subjectElements
printRulesEntityRelationship: someRules
	| res processedPredicates |
	res := ''.
	processedPredicates := Set new.
	someRules
		do: [ :rule | 
			| predicateSelector subjectElements argumentElements data isPredicateInv isSubjectInv |
			predicateSelector := (rule predicate nameNormalized , ':') asSymbol.
			isPredicateInv := rule hasPredicateInverted.
			isSubjectInv := rule hasSubjectInverted.
			subjectElements := rule subjectElements.
			argumentElements := rule argumentElements.
			subjectElements
				do: [ :subject | 
					argumentElements
						do: [ :argument | 
							| relId spec msgPass msgFail |
							relId := subject id , '-' , argument id.
							msgPass := subject id , '.' , rule predicate name , '(' , argument id , ')=True'.
							msgFail := subject id , '.' , rule predicate name , '(' , argument id , ')=False'.
							(processedPredicates includes: relId)
								ifFalse: [ 
									data := {(#subject -> subject value).
									(#argument -> argument value).
									(#ruleId -> rule id).
									(#propertyId -> relId).
									(#msgPass -> msgPass).
									(#msgFail -> msgFail)} asDictionary.
									spec := self perform: predicateSelector withArguments: {data}.
									spec := spec
										dictoReplace:
											{('$subject' -> subject value).
											('$argument' -> argument value).
											('$ruleId' -> rule id).
											('$propertyId' -> relId).
											('$msgPass' -> msgPass).
											('$msgFail' -> msgFail)}.
									res := res , spec ].	"avoid duplicate predicate evaluations"
							processedPredicates add: relId ] ] ].
	^ res in DIPhpDependencies(DIAdapter)>>printRulesEntityRelationship:
DICollectionRule(OrderedCollection)>>do:
DIPhpDependencies(DIAdapter)>>printRulesEntityRelationship:
DIPhpDependencies(DIAdapter)>>printRules
DIPhpDependencies>>testInput
DITestGroup>>build
[ :testGroup | testGroup build ] in DIDicto>>dictoBuild:
Array(SequenceableCollection)>>do:
DIDicto>>dictoBuild:
DIDicto>>dictoRun:
DIDicto>>dictoAll:
[ DIDicto new dictoAll: input ] in DIWebServiceAPI>>getRun
BlockClosure>>on:do:
DIWebServiceAPI>>getRun
DIWebServiceHandler>>post
DIWebServiceHandler(ZnRestCall)>>execute
[ call execute ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
BlockClosure>>on:do:
ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
[ self execute: call ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
BlockClosure>>on:do:
ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ :delegate | delegate handleRequest: request ] ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateRequest:do:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
[ self authenticateAndDelegateRequest: request ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
BlockClosure>>on:do:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequest:
ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeOneRequestResponseOn:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ self executeOneRequestResponseOn: stream ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
[ 
p psValueAt: index put: anObject.
aBlock value ] in ZnCurrentServer(DynamicVariable)>>value:during:
BlockClosure>>ensure:
ZnCurrentServer(DynamicVariable)>>value:during:
ZnCurrentServer class(DynamicVariable class)>>value:during:
ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
[ self executeRequestResponseLoopOn: stream ] in [ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ] in [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
BlockClosure>>ensure:
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ] in [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
BlockClosure>>ifCurtailed:
[ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
NeoJSONParseError: invalid input: nil
18 February 2015 6:17:58.566772 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
NBCogit NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
https://github.com/pharo-project/pharo-vm.git Commit: 4a0d556150d478ff2de3c9624d2f18e6eaa3fa5c Date: 2014-12-18 18:42:53 +0100 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14893

Image: Pharo3.0 [Latest update: #30863]

NeoJSONReader>>error:
	Receiver: a NeoJSONReader
	Arguments and temporary variables: 
		text: 	'invalid input: nil'
	Receiver's instance variables: 
		mappings: 	nil
		readStream: 	a ReadStream
		stringStream: 	nil
		listClass: 	nil
		mapClass: 	nil
		propertyNamesAsSymbols: 	false


NeoJSONReader>>parseValue
	Receiver: a NeoJSONReader
	Arguments and temporary variables: 
		char: 	nil
	Receiver's instance variables: 
		mappings: 	nil
		readStream: 	a ReadStream
		stringStream: 	nil
		listClass: 	nil
		mapClass: 	nil
		propertyNamesAsSymbols: 	false


NeoJSONReader>>next
	Receiver: a NeoJSONReader
	Arguments and temporary variables: 

	Receiver's instance variables: 
		mappings: 	nil
		readStream: 	a ReadStream
		stringStream: 	nil
		listClass: 	nil
		mapClass: 	nil
		propertyNamesAsSymbols: 	false


NeoJSONReader class>>fromString:
	Receiver: NeoJSONReader
	Arguments and temporary variables: 
		string: 	''
	Receiver's instance variables: 
		superclass: 	NeoJSONMapper
		methodDict: 	a MethodDictionary(#atEnd->NeoJSONReader>>#atEnd #close->NeoJSONRea...etc...
		format: 	142
		layout: 	a FixedLayout
		instanceVariables: 	#(#readStream #stringStream #listClass #mapClass #propertyNa...etc...
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#NeoJSONReader
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Neo-JSON-Core'
		traitComposition: 	{}
		localSelectors: 	nil


DIPhpModel>>_loadPhpModel
	Receiver: a DIPhpModel
	Arguments and temporary variables: 

	Receiver's instance variables: 
		defRules: 	a DICollectionRule()
		defVars: 	a DICollectionVar(SYSTEM)
		analysisID: 	'1424279879'
		additionalProperties: 	a Dictionary()
		ruleCounter: 	0
		varCounter: 	0
		defVarElements: 	a DICollectionVarElements()
		defVarInvertedElements: 	a DICollectionVarElements()
		model: 	nil


DIPhpModel>>model
	Receiver: a DIPhpModel
	Arguments and temporary variables: 

	Receiver's instance variables: 
		defRules: 	a DICollectionRule()
		defVars: 	a DICollectionVar(SYSTEM)
		analysisID: 	'1424279879'
		additionalProperties: 	a Dictionary()
		ruleCounter: 	0
		varCounter: 	0
		defVarElements: 	a DICollectionVarElements()
		defVarInvertedElements: 	a DICollectionVarElements()
		model: 	nil


DIVarPhpClass>>allElements
	Receiver: RuleResult
	Arguments and temporary variables: 

	Receiver's instance variables: 
		isFirst: 	false
		dslText: 	'RuleResult=PhpClass with name:"Dicto\\RuleResult"'
		type: 	'PhpClass'
		id: 	1
		entity: 	nil
		name: 	'RuleResult'
		specifiers: 	an OrderedCollection(name=Dicto\\RuleResult)
		isInverted: 	false
		elements: 	a DICollectionVarElements()
		invertedElements: 	a DICollectionVarElements()


DIVarPhpClass(DIVar)>>elements
	Receiver: RuleResult
	Arguments and temporary variables: 
		valid: 	nil
	Receiver's instance variables: 
		isFirst: 	false
		dslText: 	'RuleResult=PhpClass with name:"Dicto\\RuleResult"'
		type: 	'PhpClass'
		id: 	1
		entity: 	nil
		name: 	'RuleResult'
		specifiers: 	an OrderedCollection(name=Dicto\\RuleResult)
		isInverted: 	false
		elements: 	a DICollectionVarElements()
		invertedElements: 	a DICollectionVarElements()


DISimpleRule>>subjectElements
	Receiver: RuleResult cannot depend on DictoTalker
	Arguments and temporary variables: 
		subjectElements: 	nil
	Receiver's instance variables: 
		isFirst: 	nil
		dslText: 	'RuleResult cannot depend on DictoTalker'
		type: 	#cannot
		id: 	1001
		entity: 	nil
		subjects: 	an Array(RuleResult)
		predicates: 	an Array(depend on DictoTalker)
		subRules: 	nil
		candidateAdapters: 	a SortedCollection(DIPhpDependencies)
		chosenAdapter: 	DIPhpDependencies
		hasFailed: 	false
		failureMessage: 	''
		failingPredicates: 	a Set()
		hasSubjectInverted: 	false
		hasPredicateInverted: 	false


printRulesEntityRelationship: someRules
	| res processedPredicates |
	res := ''.
	processedPredicates := Set new.
	someRules
		do: [ :rule | 
			| predicateSelector subjectElements argumentElements data isPredicateInv isSubjectInv |
			predicateSelector := (rule predicate nameNormalized , ':') asSymbol.
			isPredicateInv := rule hasPredicateInverted.
			isSubjectInv := rule hasSubjectInverted.
			subjectElements := rule subjectElements.
			argumentElements := rule argumentElements.
			subjectElements
				do: [ :subject | 
					argumentElements
						do: [ :argument | 
							| relId spec msgPass msgFail |
							relId := subject id , '-' , argument id.
							msgPass := subject id , '.' , rule predicate name , '(' , argument id , ')=True'.
							msgFail := subject id , '.' , rule predicate name , '(' , argument id , ')=False'.
							(processedPredicates includes: relId)
								ifFalse: [ 
									data := {(#subject -> subject value).
									(#argument -> argument value).
									(#ruleId -> rule id).
									(#propertyId -> relId).
									(#msgPass -> msgPass).
									(#msgFail -> msgFail)} asDictionary.
									spec := self perform: predicateSelector withArguments: {data}.
									spec := spec
										dictoReplace:
											{('$subject' -> subject value).
											('$argument' -> argument value).
											('$ruleId' -> rule id).
											('$propertyId' -> relId).
											('$msgPass' -> msgPass).
											('$msgFail' -> msgFail)}.
									res := res , spec ].	"avoid duplicate predicate evaluations"
							processedPredicates add: relId ] ] ].
	^ res in DIPhpDependencies(DIAdapter)>>printRulesEntityRelationship:
	Receiver: a DIPhpDependencies
	Arguments and temporary variables: 
		someRules: 	a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalk...etc...
		processedPredicates: 	a Set()
		data: 	nil
		res: 	''
		rule: 	RuleResult cannot depend on DictoTalker
		predicateSelector: 	#dependOn:
		subjectElements: 	nil
		argumentElements: 	nil
		isPredicateInv: 	false
		isSubjectInv: 	false
	Receiver's instance variables: 
		output: 	''
		commandOutput: 	''
		NEWLINE: 	'
'
		rules: 	a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalker m...etc...
		varSynonyms: 	nil
		sessionId: 	'1424279878'
		TIMESTAMP: 	'1424279879'
		TOOLNAME: 	'DIPhpDependencies'
		PROJECTROOT: 	'/home/otruffer/applications/TeamCity/buildAgent/work/96a46dec2a79...etc...
		PROJECTSRC: 	'./'
		PROJECTBIN: 	'./'
		RESULTFILE: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/full-test-full-t...etc...
		TESTFILE: 	nil
		testInputFileExt: 	'.st'
		SYSTEM: 	SYSTEM


DICollectionRule(OrderedCollection)>>do:
	Receiver: a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalker must depend on Rule...etc...
	Arguments and temporary variables: 
		aBlock: 	printRulesEntityRelationship: someRules
	| res processedPredicates |
	r...etc...
		index: 	1
	Receiver's instance variables: 
		array: 	an Array(RuleResult cannot depend on DictoTalker DictoTalker must depend...etc...
		firstIndex: 	1
		lastIndex: 	3
		elements: 	nil
		elements: 	nil


DIPhpDependencies(DIAdapter)>>printRulesEntityRelationship:
	Receiver: a DIPhpDependencies
	Arguments and temporary variables: 
		res: 	''
		someRules: 	a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalk...etc...
		processedPredicates: 	a Set()
	Receiver's instance variables: 
		output: 	''
		commandOutput: 	''
		NEWLINE: 	'
'
		rules: 	a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalker m...etc...
		varSynonyms: 	nil
		sessionId: 	'1424279878'
		TIMESTAMP: 	'1424279879'
		TOOLNAME: 	'DIPhpDependencies'
		PROJECTROOT: 	'/home/otruffer/applications/TeamCity/buildAgent/work/96a46dec2a79...etc...
		PROJECTSRC: 	'./'
		PROJECTBIN: 	'./'
		RESULTFILE: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/full-test-full-t...etc...
		TESTFILE: 	nil
		testInputFileExt: 	'.st'
		SYSTEM: 	SYSTEM


DIPhpDependencies(DIAdapter)>>printRules
	Receiver: a DIPhpDependencies
	Arguments and temporary variables: 
		res: 	nil
		allRules: 	a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalke...etc...
	Receiver's instance variables: 
		output: 	''
		commandOutput: 	''
		NEWLINE: 	'
'
		rules: 	a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalker m...etc...
		varSynonyms: 	nil
		sessionId: 	'1424279878'
		TIMESTAMP: 	'1424279879'
		TOOLNAME: 	'DIPhpDependencies'
		PROJECTROOT: 	'/home/otruffer/applications/TeamCity/buildAgent/work/96a46dec2a79...etc...
		PROJECTSRC: 	'./'
		PROJECTBIN: 	'./'
		RESULTFILE: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/full-test-full-t...etc...
		TESTFILE: 	nil
		testInputFileExt: 	'.st'
		SYSTEM: 	SYSTEM


DIPhpDependencies>>testInput
	Receiver: a DIPhpDependencies
	Arguments and temporary variables: 
		strRules: 	nil
	Receiver's instance variables: 
		output: 	''
		commandOutput: 	''
		NEWLINE: 	'
'
		rules: 	a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalker m...etc...
		varSynonyms: 	nil
		sessionId: 	'1424279878'
		TIMESTAMP: 	'1424279879'
		TOOLNAME: 	'DIPhpDependencies'
		PROJECTROOT: 	'/home/otruffer/applications/TeamCity/buildAgent/work/96a46dec2a79...etc...
		PROJECTSRC: 	'./'
		PROJECTBIN: 	'./'
		RESULTFILE: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/full-test-full-t...etc...
		TESTFILE: 	nil
		testInputFileExt: 	'.st'
		SYSTEM: 	SYSTEM


DITestGroup>>build
	Receiver: a DITestGroup
	Arguments and temporary variables: 

	Receiver's instance variables: 
		rules: 	an OrderedCollection(RuleResult cannot depend on DictoTalker DictoTalker...etc...
		adapter: 	a DIPhpDependencies
		runCommandText: 	nil
		testSpecification: 	nil
		adapterID: 	'DIPhpDependencies'
		resultFile: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/full-test-full-t...etc...
		specificationFile: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/full-test...etc...
		commandFile: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/full-test-full-...etc...


[ :testGroup | testGroup build ] in DIDicto>>dictoBuild:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = ...etc...
		adapterTestGroups: 	a Dictionary(DIGrepFileContent->a DITestGroup DIJMeterLoadTe...etc...
		testGroup: 	a DITestGroup
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424279878'
		singleShotTask: 	false


Array(SequenceableCollection)>>do:
	Receiver: an Array(a DITestGroup a DITestGroup a DITestGroup a DITestGroup a DITestGroup)
	Arguments and temporary variables: 
		aBlock: 	[ :testGroup | testGroup build ]
		index: 	4
	Receiver's instance variables: 
an Array(a DITestGroup a DITestGroup a DITestGroup a DITestGroup a DITestGroup)

DIDicto>>dictoBuild:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = ...etc...
		adapterTestGroups: 	a Dictionary(DIGrepFileContent->a DITestGroup DIJMeterLoadTe...etc...
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424279878'
		singleShotTask: 	false


DIDicto>>dictoRun:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = ...etc...
		adapterTestGroups: 	nil
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424279878'
		singleShotTask: 	false


DIDicto>>dictoAll:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = ...etc...
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424279878'
		singleShotTask: 	false


[ DIDicto new dictoAll: input ] in DIWebServiceAPI>>getRun
	Receiver: a DIWebServiceAPI
	Arguments and temporary variables: 
		in: 	'/home/otruffer/dicto/bin/analysis/full-test-full-test-12/dicto.rules'
		input: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = PhpCl...etc...
		rulesFailed: 	nil
		rulesTotal: 	nil
	Receiver's instance variables: 
		request: 	nil
		response: 	nil
		variables: 	nil
		delegate: 	nil
		principal: 	nil
		credentials: 	nil


BlockClosure>>on:do:
	Receiver: [ DIDicto new dictoAll: input ]
	Arguments and temporary variables: 
		exception: 	DIException
		handlerAction: 	[ :ex | ^ self error: ex description ]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	DIWebServiceAPI>>getRun
		startpc: 	138
		numArgs: 	0


DIWebServiceAPI>>getRun
	Receiver: a DIWebServiceAPI
	Arguments and temporary variables: 
		in: 	'/home/otruffer/dicto/bin/analysis/full-test-full-test-12/dicto.rules'
		input: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = PhpCl...etc...
		rulesFailed: 	nil
		rulesTotal: 	nil
	Receiver's instance variables: 
		request: 	nil
		response: 	nil
		variables: 	nil
		delegate: 	nil
		principal: 	nil
		credentials: 	nil


DIWebServiceHandler>>post
	Receiver: a DIWebServiceHandler
	Arguments and temporary variables: 
		api: 	a DIWebServiceAPI
	Receiver's instance variables: 
		request: 	a ZnRequest(POST /full-test-full-test-12/run)
		response: 	nil
		variables: 	an OrderedCollection('full-test-full-test-12' 'run')
		delegate: 	a ZnJSONRestServerDelegate
		principal: 	nil
		credentials: 	nil
		dicto: 	a DIDicto


DIWebServiceHandler(ZnRestCall)>>execute
	Receiver: a DIWebServiceHandler
	Arguments and temporary variables: 

	Receiver's instance variables: 
		request: 	a ZnRequest(POST /full-test-full-test-12/run)
		response: 	nil
		variables: 	an OrderedCollection('full-test-full-test-12' 'run')
		delegate: 	a ZnJSONRestServerDelegate
		principal: 	nil
		credentials: 	nil
		dicto: 	a DIDicto


[ call execute ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


BlockClosure>>on:do:
	Receiver: [ call execute ]
	Arguments and temporary variables: 
		exception: 	ZnRestCallUnauthorized
		handlerAction: 	[ :exception | self unauthorized: exception request ]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
		startpc: 	38
		numArgs: 	0


ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


[ self execute: call ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /full-test-full-test-12/run)
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


BlockClosure>>on:do:
	Receiver: [ self execute: call ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :exception | 
request server debugMode
	ifTrue: [ exception pa...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
		startpc: 	99
		numArgs: 	0


ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /full-test-full-test-12/run)
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ :delegate | delegate handleRequest: request ] ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /full-test-full-test-12/run)
		delegate: 	a ZnJSONRestServerDelegate
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateRequest:do:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /full-test-full-test-12/run)
		block: 	[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ ...etc...
		authenticator: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /full-test-full-test-12/run)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream)


[ self authenticateAndDelegateRequest: request ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /full-test-full-test-12/run)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream)


BlockClosure>>on:do:
	Receiver: [ self authenticateAndDelegateRequest: request ]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :exception | 
self debugMode
	ifTrue: [ exception pass ]
	ifFa...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequ...etc...
		startpc: 	58
		numArgs: 	0


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /full-test-full-test-12/run)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /full-test-full-test-12/run)
		response: 	nil
		initialMilliseconds: 	24388904
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeOneRequestResponseOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		stream: 	a ZdcSocketStream
		request: 	a ZnRequest(POST /full-test-full-test-12/run)
		response: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream)



--- The full stack ---
NeoJSONReader>>error:
NeoJSONReader>>parseValue
NeoJSONReader>>next
NeoJSONReader class>>fromString:
DIPhpModel>>_loadPhpModel
DIPhpModel>>model
DIVarPhpClass>>allElements
DIVarPhpClass(DIVar)>>elements
DISimpleRule>>subjectElements
printRulesEntityRelationship: someRules
	| res processedPredicates |
	res := ''.
	processedPredicates := Set new.
	someRules
		do: [ :rule | 
			| predicateSelector subjectElements argumentElements data isPredicateInv isSubjectInv |
			predicateSelector := (rule predicate nameNormalized , ':') asSymbol.
			isPredicateInv := rule hasPredicateInverted.
			isSubjectInv := rule hasSubjectInverted.
			subjectElements := rule subjectElements.
			argumentElements := rule argumentElements.
			subjectElements
				do: [ :subject | 
					argumentElements
						do: [ :argument | 
							| relId spec msgPass msgFail |
							relId := subject id , '-' , argument id.
							msgPass := subject id , '.' , rule predicate name , '(' , argument id , ')=True'.
							msgFail := subject id , '.' , rule predicate name , '(' , argument id , ')=False'.
							(processedPredicates includes: relId)
								ifFalse: [ 
									data := {(#subject -> subject value).
									(#argument -> argument value).
									(#ruleId -> rule id).
									(#propertyId -> relId).
									(#msgPass -> msgPass).
									(#msgFail -> msgFail)} asDictionary.
									spec := self perform: predicateSelector withArguments: {data}.
									spec := spec
										dictoReplace:
											{('$subject' -> subject value).
											('$argument' -> argument value).
											('$ruleId' -> rule id).
											('$propertyId' -> relId).
											('$msgPass' -> msgPass).
											('$msgFail' -> msgFail)}.
									res := res , spec ].	"avoid duplicate predicate evaluations"
							processedPredicates add: relId ] ] ].
	^ res in DIPhpDependencies(DIAdapter)>>printRulesEntityRelationship:
DICollectionRule(OrderedCollection)>>do:
DIPhpDependencies(DIAdapter)>>printRulesEntityRelationship:
DIPhpDependencies(DIAdapter)>>printRules
DIPhpDependencies>>testInput
DITestGroup>>build
[ :testGroup | testGroup build ] in DIDicto>>dictoBuild:
Array(SequenceableCollection)>>do:
DIDicto>>dictoBuild:
DIDicto>>dictoRun:
DIDicto>>dictoAll:
[ DIDicto new dictoAll: input ] in DIWebServiceAPI>>getRun
BlockClosure>>on:do:
DIWebServiceAPI>>getRun
DIWebServiceHandler>>post
DIWebServiceHandler(ZnRestCall)>>execute
[ call execute ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
BlockClosure>>on:do:
ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
[ self execute: call ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
BlockClosure>>on:do:
ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ :delegate | delegate handleRequest: request ] ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateRequest:do:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
[ self authenticateAndDelegateRequest: request ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
BlockClosure>>on:do:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequest:
ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeOneRequestResponseOn:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ self executeOneRequestResponseOn: stream ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
[ 
p psValueAt: index put: anObject.
aBlock value ] in ZnCurrentServer(DynamicVariable)>>value:during:
BlockClosure>>ensure:
ZnCurrentServer(DynamicVariable)>>value:during:
ZnCurrentServer class(DynamicVariable class)>>value:during:
ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
[ self executeRequestResponseLoopOn: stream ] in [ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ] in [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
BlockClosure>>ensure:
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ] in [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
BlockClosure>>ifCurtailed:
[ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
NeoJSONParseError: invalid input: nil
18 February 2015 6:19:13.568577 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
NBCogit NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
https://github.com/pharo-project/pharo-vm.git Commit: 4a0d556150d478ff2de3c9624d2f18e6eaa3fa5c Date: 2014-12-18 18:42:53 +0100 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14893

Image: Pharo3.0 [Latest update: #30863]

NeoJSONReader>>error:
	Receiver: a NeoJSONReader
	Arguments and temporary variables: 
		text: 	'invalid input: nil'
	Receiver's instance variables: 
		mappings: 	nil
		readStream: 	a ReadStream
		stringStream: 	nil
		listClass: 	nil
		mapClass: 	nil
		propertyNamesAsSymbols: 	false


NeoJSONReader>>parseValue
	Receiver: a NeoJSONReader
	Arguments and temporary variables: 
		char: 	nil
	Receiver's instance variables: 
		mappings: 	nil
		readStream: 	a ReadStream
		stringStream: 	nil
		listClass: 	nil
		mapClass: 	nil
		propertyNamesAsSymbols: 	false


NeoJSONReader>>next
	Receiver: a NeoJSONReader
	Arguments and temporary variables: 

	Receiver's instance variables: 
		mappings: 	nil
		readStream: 	a ReadStream
		stringStream: 	nil
		listClass: 	nil
		mapClass: 	nil
		propertyNamesAsSymbols: 	false


NeoJSONReader class>>fromString:
	Receiver: NeoJSONReader
	Arguments and temporary variables: 
		string: 	''
	Receiver's instance variables: 
		superclass: 	NeoJSONMapper
		methodDict: 	a MethodDictionary(#atEnd->NeoJSONReader>>#atEnd #close->NeoJSONRea...etc...
		format: 	142
		layout: 	a FixedLayout
		instanceVariables: 	#(#readStream #stringStream #listClass #mapClass #propertyNa...etc...
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#NeoJSONReader
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Neo-JSON-Core'
		traitComposition: 	{}
		localSelectors: 	nil


DIPhpModel>>_loadPhpModel
	Receiver: a DIPhpModel
	Arguments and temporary variables: 

	Receiver's instance variables: 
		defRules: 	a DICollectionRule()
		defVars: 	a DICollectionVar(SYSTEM)
		analysisID: 	'1424279954'
		additionalProperties: 	a Dictionary()
		ruleCounter: 	0
		varCounter: 	0
		defVarElements: 	a DICollectionVarElements()
		defVarInvertedElements: 	a DICollectionVarElements()
		model: 	nil


DIPhpModel>>model
	Receiver: a DIPhpModel
	Arguments and temporary variables: 

	Receiver's instance variables: 
		defRules: 	a DICollectionRule()
		defVars: 	a DICollectionVar(SYSTEM)
		analysisID: 	'1424279954'
		additionalProperties: 	a Dictionary()
		ruleCounter: 	0
		varCounter: 	0
		defVarElements: 	a DICollectionVarElements()
		defVarInvertedElements: 	a DICollectionVarElements()
		model: 	nil


DIVarPhpClass>>allElements
	Receiver: RuleResult
	Arguments and temporary variables: 

	Receiver's instance variables: 
		isFirst: 	false
		dslText: 	'RuleResult=PhpClass with name:"Dicto\\RuleResult"'
		type: 	'PhpClass'
		id: 	1
		entity: 	nil
		name: 	'RuleResult'
		specifiers: 	an OrderedCollection(name=Dicto\\RuleResult)
		isInverted: 	false
		elements: 	a DICollectionVarElements()
		invertedElements: 	a DICollectionVarElements()


DIVarPhpClass(DIVar)>>elements
	Receiver: RuleResult
	Arguments and temporary variables: 
		valid: 	nil
	Receiver's instance variables: 
		isFirst: 	false
		dslText: 	'RuleResult=PhpClass with name:"Dicto\\RuleResult"'
		type: 	'PhpClass'
		id: 	1
		entity: 	nil
		name: 	'RuleResult'
		specifiers: 	an OrderedCollection(name=Dicto\\RuleResult)
		isInverted: 	false
		elements: 	a DICollectionVarElements()
		invertedElements: 	a DICollectionVarElements()


DISimpleRule>>subjectElements
	Receiver: RuleResult cannot depend on DictoTalker
	Arguments and temporary variables: 
		subjectElements: 	nil
	Receiver's instance variables: 
		isFirst: 	nil
		dslText: 	'RuleResult cannot depend on DictoTalker'
		type: 	#cannot
		id: 	1001
		entity: 	nil
		subjects: 	an Array(RuleResult)
		predicates: 	an Array(depend on DictoTalker)
		subRules: 	nil
		candidateAdapters: 	a SortedCollection(DIPhpDependencies)
		chosenAdapter: 	DIPhpDependencies
		hasFailed: 	false
		failureMessage: 	''
		failingPredicates: 	a Set()
		hasSubjectInverted: 	false
		hasPredicateInverted: 	false


printRulesEntityRelationship: someRules
	| res processedPredicates |
	res := ''.
	processedPredicates := Set new.
	someRules
		do: [ :rule | 
			| predicateSelector subjectElements argumentElements data isPredicateInv isSubjectInv |
			predicateSelector := (rule predicate nameNormalized , ':') asSymbol.
			isPredicateInv := rule hasPredicateInverted.
			isSubjectInv := rule hasSubjectInverted.
			subjectElements := rule subjectElements.
			argumentElements := rule argumentElements.
			subjectElements
				do: [ :subject | 
					argumentElements
						do: [ :argument | 
							| relId spec msgPass msgFail |
							relId := subject id , '-' , argument id.
							msgPass := subject id , '.' , rule predicate name , '(' , argument id , ')=True'.
							msgFail := subject id , '.' , rule predicate name , '(' , argument id , ')=False'.
							(processedPredicates includes: relId)
								ifFalse: [ 
									data := {(#subject -> subject value).
									(#argument -> argument value).
									(#ruleId -> rule id).
									(#propertyId -> relId).
									(#msgPass -> msgPass).
									(#msgFail -> msgFail)} asDictionary.
									spec := self perform: predicateSelector withArguments: {data}.
									spec := spec
										dictoReplace:
											{('$subject' -> subject value).
											('$argument' -> argument value).
											('$ruleId' -> rule id).
											('$propertyId' -> relId).
											('$msgPass' -> msgPass).
											('$msgFail' -> msgFail)}.
									res := res , spec ].	"avoid duplicate predicate evaluations"
							processedPredicates add: relId ] ] ].
	^ res in DIPhpDependencies(DIAdapter)>>printRulesEntityRelationship:
	Receiver: a DIPhpDependencies
	Arguments and temporary variables: 
		someRules: 	a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalk...etc...
		processedPredicates: 	a Set()
		data: 	nil
		res: 	''
		rule: 	RuleResult cannot depend on DictoTalker
		predicateSelector: 	#dependOn:
		subjectElements: 	nil
		argumentElements: 	nil
		isPredicateInv: 	false
		isSubjectInv: 	false
	Receiver's instance variables: 
		output: 	''
		commandOutput: 	''
		NEWLINE: 	'
'
		rules: 	a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalker m...etc...
		varSynonyms: 	nil
		sessionId: 	'1424279953'
		TIMESTAMP: 	'1424279954'
		TOOLNAME: 	'DIPhpDependencies'
		PROJECTROOT: 	'/home/otruffer/applications/TeamCity/buildAgent/work/96a46dec2a79...etc...
		PROJECTSRC: 	'./'
		PROJECTBIN: 	'./'
		RESULTFILE: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/full-test-full-t...etc...
		TESTFILE: 	nil
		testInputFileExt: 	'.st'
		SYSTEM: 	SYSTEM


DICollectionRule(OrderedCollection)>>do:
	Receiver: a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalker must depend on Rule...etc...
	Arguments and temporary variables: 
		aBlock: 	printRulesEntityRelationship: someRules
	| res processedPredicates |
	r...etc...
		index: 	1
	Receiver's instance variables: 
		array: 	an Array(RuleResult cannot depend on DictoTalker DictoTalker must depend...etc...
		firstIndex: 	1
		lastIndex: 	3
		elements: 	nil
		elements: 	nil


DIPhpDependencies(DIAdapter)>>printRulesEntityRelationship:
	Receiver: a DIPhpDependencies
	Arguments and temporary variables: 
		res: 	''
		someRules: 	a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalk...etc...
		processedPredicates: 	a Set()
	Receiver's instance variables: 
		output: 	''
		commandOutput: 	''
		NEWLINE: 	'
'
		rules: 	a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalker m...etc...
		varSynonyms: 	nil
		sessionId: 	'1424279953'
		TIMESTAMP: 	'1424279954'
		TOOLNAME: 	'DIPhpDependencies'
		PROJECTROOT: 	'/home/otruffer/applications/TeamCity/buildAgent/work/96a46dec2a79...etc...
		PROJECTSRC: 	'./'
		PROJECTBIN: 	'./'
		RESULTFILE: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/full-test-full-t...etc...
		TESTFILE: 	nil
		testInputFileExt: 	'.st'
		SYSTEM: 	SYSTEM


DIPhpDependencies(DIAdapter)>>printRules
	Receiver: a DIPhpDependencies
	Arguments and temporary variables: 
		res: 	nil
		allRules: 	a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalke...etc...
	Receiver's instance variables: 
		output: 	''
		commandOutput: 	''
		NEWLINE: 	'
'
		rules: 	a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalker m...etc...
		varSynonyms: 	nil
		sessionId: 	'1424279953'
		TIMESTAMP: 	'1424279954'
		TOOLNAME: 	'DIPhpDependencies'
		PROJECTROOT: 	'/home/otruffer/applications/TeamCity/buildAgent/work/96a46dec2a79...etc...
		PROJECTSRC: 	'./'
		PROJECTBIN: 	'./'
		RESULTFILE: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/full-test-full-t...etc...
		TESTFILE: 	nil
		testInputFileExt: 	'.st'
		SYSTEM: 	SYSTEM


DIPhpDependencies>>testInput
	Receiver: a DIPhpDependencies
	Arguments and temporary variables: 
		strRules: 	nil
	Receiver's instance variables: 
		output: 	''
		commandOutput: 	''
		NEWLINE: 	'
'
		rules: 	a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalker m...etc...
		varSynonyms: 	nil
		sessionId: 	'1424279953'
		TIMESTAMP: 	'1424279954'
		TOOLNAME: 	'DIPhpDependencies'
		PROJECTROOT: 	'/home/otruffer/applications/TeamCity/buildAgent/work/96a46dec2a79...etc...
		PROJECTSRC: 	'./'
		PROJECTBIN: 	'./'
		RESULTFILE: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/full-test-full-t...etc...
		TESTFILE: 	nil
		testInputFileExt: 	'.st'
		SYSTEM: 	SYSTEM


DITestGroup>>build
	Receiver: a DITestGroup
	Arguments and temporary variables: 

	Receiver's instance variables: 
		rules: 	an OrderedCollection(RuleResult cannot depend on DictoTalker DictoTalker...etc...
		adapter: 	a DIPhpDependencies
		runCommandText: 	nil
		testSpecification: 	nil
		adapterID: 	'DIPhpDependencies'
		resultFile: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/full-test-full-t...etc...
		specificationFile: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/full-test...etc...
		commandFile: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/full-test-full-...etc...


[ :testGroup | testGroup build ] in DIDicto>>dictoBuild:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = ...etc...
		adapterTestGroups: 	a Dictionary(DIGrepFileContent->a DITestGroup DIJMeterLoadTe...etc...
		testGroup: 	a DITestGroup
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424279953'
		singleShotTask: 	false


Array(SequenceableCollection)>>do:
	Receiver: an Array(a DITestGroup a DITestGroup a DITestGroup a DITestGroup a DITestGroup)
	Arguments and temporary variables: 
		aBlock: 	[ :testGroup | testGroup build ]
		index: 	4
	Receiver's instance variables: 
an Array(a DITestGroup a DITestGroup a DITestGroup a DITestGroup a DITestGroup)

DIDicto>>dictoBuild:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = ...etc...
		adapterTestGroups: 	a Dictionary(DIGrepFileContent->a DITestGroup DIJMeterLoadTe...etc...
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424279953'
		singleShotTask: 	false


DIDicto>>dictoRun:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = ...etc...
		adapterTestGroups: 	nil
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424279953'
		singleShotTask: 	false


DIDicto>>dictoAll:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = ...etc...
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424279953'
		singleShotTask: 	false


[ DIDicto new dictoAll: input ] in DIWebServiceAPI>>getRun
	Receiver: a DIWebServiceAPI
	Arguments and temporary variables: 
		in: 	'/home/otruffer/dicto/bin/analysis/full-test-full-test-14/dicto.rules'
		input: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = PhpCl...etc...
		rulesFailed: 	nil
		rulesTotal: 	nil
	Receiver's instance variables: 
		request: 	nil
		response: 	nil
		variables: 	nil
		delegate: 	nil
		principal: 	nil
		credentials: 	nil


BlockClosure>>on:do:
	Receiver: [ DIDicto new dictoAll: input ]
	Arguments and temporary variables: 
		exception: 	DIException
		handlerAction: 	[ :ex | ^ self error: ex description ]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	DIWebServiceAPI>>getRun
		startpc: 	138
		numArgs: 	0


DIWebServiceAPI>>getRun
	Receiver: a DIWebServiceAPI
	Arguments and temporary variables: 
		in: 	'/home/otruffer/dicto/bin/analysis/full-test-full-test-14/dicto.rules'
		input: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = PhpCl...etc...
		rulesFailed: 	nil
		rulesTotal: 	nil
	Receiver's instance variables: 
		request: 	nil
		response: 	nil
		variables: 	nil
		delegate: 	nil
		principal: 	nil
		credentials: 	nil


DIWebServiceHandler>>post
	Receiver: a DIWebServiceHandler
	Arguments and temporary variables: 
		api: 	a DIWebServiceAPI
	Receiver's instance variables: 
		request: 	a ZnRequest(POST /full-test-full-test-14/run)
		response: 	nil
		variables: 	an OrderedCollection('full-test-full-test-14' 'run')
		delegate: 	a ZnJSONRestServerDelegate
		principal: 	nil
		credentials: 	nil
		dicto: 	a DIDicto


DIWebServiceHandler(ZnRestCall)>>execute
	Receiver: a DIWebServiceHandler
	Arguments and temporary variables: 

	Receiver's instance variables: 
		request: 	a ZnRequest(POST /full-test-full-test-14/run)
		response: 	nil
		variables: 	an OrderedCollection('full-test-full-test-14' 'run')
		delegate: 	a ZnJSONRestServerDelegate
		principal: 	nil
		credentials: 	nil
		dicto: 	a DIDicto


[ call execute ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


BlockClosure>>on:do:
	Receiver: [ call execute ]
	Arguments and temporary variables: 
		exception: 	ZnRestCallUnauthorized
		handlerAction: 	[ :exception | self unauthorized: exception request ]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
		startpc: 	38
		numArgs: 	0


ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


[ self execute: call ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /full-test-full-test-14/run)
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


BlockClosure>>on:do:
	Receiver: [ self execute: call ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :exception | 
request server debugMode
	ifTrue: [ exception pa...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
		startpc: 	99
		numArgs: 	0


ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /full-test-full-test-14/run)
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ :delegate | delegate handleRequest: request ] ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /full-test-full-test-14/run)
		delegate: 	a ZnJSONRestServerDelegate
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateRequest:do:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /full-test-full-test-14/run)
		block: 	[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ ...etc...
		authenticator: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /full-test-full-test-14/run)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream)


[ self authenticateAndDelegateRequest: request ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /full-test-full-test-14/run)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream)


BlockClosure>>on:do:
	Receiver: [ self authenticateAndDelegateRequest: request ]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :exception | 
self debugMode
	ifTrue: [ exception pass ]
	ifFa...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequ...etc...
		startpc: 	58
		numArgs: 	0


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /full-test-full-test-14/run)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /full-test-full-test-14/run)
		response: 	nil
		initialMilliseconds: 	24463917
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeOneRequestResponseOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		stream: 	a ZdcSocketStream
		request: 	a ZnRequest(POST /full-test-full-test-14/run)
		response: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream)



--- The full stack ---
NeoJSONReader>>error:
NeoJSONReader>>parseValue
NeoJSONReader>>next
NeoJSONReader class>>fromString:
DIPhpModel>>_loadPhpModel
DIPhpModel>>model
DIVarPhpClass>>allElements
DIVarPhpClass(DIVar)>>elements
DISimpleRule>>subjectElements
printRulesEntityRelationship: someRules
	| res processedPredicates |
	res := ''.
	processedPredicates := Set new.
	someRules
		do: [ :rule | 
			| predicateSelector subjectElements argumentElements data isPredicateInv isSubjectInv |
			predicateSelector := (rule predicate nameNormalized , ':') asSymbol.
			isPredicateInv := rule hasPredicateInverted.
			isSubjectInv := rule hasSubjectInverted.
			subjectElements := rule subjectElements.
			argumentElements := rule argumentElements.
			subjectElements
				do: [ :subject | 
					argumentElements
						do: [ :argument | 
							| relId spec msgPass msgFail |
							relId := subject id , '-' , argument id.
							msgPass := subject id , '.' , rule predicate name , '(' , argument id , ')=True'.
							msgFail := subject id , '.' , rule predicate name , '(' , argument id , ')=False'.
							(processedPredicates includes: relId)
								ifFalse: [ 
									data := {(#subject -> subject value).
									(#argument -> argument value).
									(#ruleId -> rule id).
									(#propertyId -> relId).
									(#msgPass -> msgPass).
									(#msgFail -> msgFail)} asDictionary.
									spec := self perform: predicateSelector withArguments: {data}.
									spec := spec
										dictoReplace:
											{('$subject' -> subject value).
											('$argument' -> argument value).
											('$ruleId' -> rule id).
											('$propertyId' -> relId).
											('$msgPass' -> msgPass).
											('$msgFail' -> msgFail)}.
									res := res , spec ].	"avoid duplicate predicate evaluations"
							processedPredicates add: relId ] ] ].
	^ res in DIPhpDependencies(DIAdapter)>>printRulesEntityRelationship:
DICollectionRule(OrderedCollection)>>do:
DIPhpDependencies(DIAdapter)>>printRulesEntityRelationship:
DIPhpDependencies(DIAdapter)>>printRules
DIPhpDependencies>>testInput
DITestGroup>>build
[ :testGroup | testGroup build ] in DIDicto>>dictoBuild:
Array(SequenceableCollection)>>do:
DIDicto>>dictoBuild:
DIDicto>>dictoRun:
DIDicto>>dictoAll:
[ DIDicto new dictoAll: input ] in DIWebServiceAPI>>getRun
BlockClosure>>on:do:
DIWebServiceAPI>>getRun
DIWebServiceHandler>>post
DIWebServiceHandler(ZnRestCall)>>execute
[ call execute ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
BlockClosure>>on:do:
ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
[ self execute: call ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
BlockClosure>>on:do:
ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ :delegate | delegate handleRequest: request ] ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateRequest:do:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
[ self authenticateAndDelegateRequest: request ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
BlockClosure>>on:do:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequest:
ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeOneRequestResponseOn:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ self executeOneRequestResponseOn: stream ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
[ 
p psValueAt: index put: anObject.
aBlock value ] in ZnCurrentServer(DynamicVariable)>>value:during:
BlockClosure>>ensure:
ZnCurrentServer(DynamicVariable)>>value:during:
ZnCurrentServer class(DynamicVariable class)>>value:during:
ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
[ self executeRequestResponseLoopOn: stream ] in [ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ] in [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
BlockClosure>>ensure:
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ] in [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
BlockClosure>>ifCurtailed:
[ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Halt
24 February 2015 11:56:46.548953 am

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
NBCogit NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
https://github.com/pharo-project/pharo-vm.git Commit: 4a0d556150d478ff2de3c9624d2f18e6eaa3fa5c Date: 2014-12-18 18:42:53 +0100 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14893

Image: Pharo3.0 [Latest update: #30863]

DIUtil class>>saveString:ToFile:
	Receiver: DIUtil
	Arguments and temporary variables: 
		aString: 	'{"$DICTO.SUITEID":"mai","$DICTO.PROJECT-ROOT":"/home/otruffer/DictoCL...etc...
		aFileName: 	'/home/otruffer/dicto/bin/analysis/mai/dicto.config'
		stream: 	MultiByteFileStream: '/home/otruffer/dicto/bin/analysis/mai/dicto.confi...etc...
		newFileName: 	'/home/otruffer/dicto/bin/analysis/mai/dicto.config'
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary()
		format: 	2
		layout: 	a FixedLayout
		instanceVariables: 	#()
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#DIUtil
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Dicto-var-util'
		traitComposition: 	{}
		localSelectors: 	nil


DIWebServiceAPI>>postSuiteNew:
	Receiver: a DIWebServiceAPI
	Arguments and temporary variables: 
		dict: 	a Dictionary('$DICTO.PROJECT-BIN'->'./' '$DICTO.PROJECT-ROOT'->'/home/otr...etc...
	Receiver's instance variables: 
		request: 	nil
		response: 	nil
		variables: 	nil
		delegate: 	nil
		principal: 	nil
		credentials: 	nil


DIWebServiceHandler>>post
	Receiver: a DIWebServiceHandler
	Arguments and temporary variables: 
		api: 	a DIWebServiceAPI
	Receiver's instance variables: 
		request: 	a ZnRequest(POST /suite)
		response: 	nil
		variables: 	an OrderedCollection('suite')
		delegate: 	a ZnJSONRestServerDelegate
		principal: 	nil
		credentials: 	nil
		dicto: 	a DIDicto


DIWebServiceHandler(ZnRestCall)>>execute
	Receiver: a DIWebServiceHandler
	Arguments and temporary variables: 

	Receiver's instance variables: 
		request: 	a ZnRequest(POST /suite)
		response: 	nil
		variables: 	an OrderedCollection('suite')
		delegate: 	a ZnJSONRestServerDelegate
		principal: 	nil
		credentials: 	nil
		dicto: 	a DIDicto


[ call execute ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


BlockClosure>>on:do:
	Receiver: [ call execute ]
	Arguments and temporary variables: 
		exception: 	ZnRestCallUnauthorized
		handlerAction: 	[ :exception | self unauthorized: exception request ]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
		startpc: 	38
		numArgs: 	0


ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


[ self execute: call ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /suite)
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


BlockClosure>>on:do:
	Receiver: [ self execute: call ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :exception | 
request server debugMode
	ifTrue: [ exception pa...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
		startpc: 	99
		numArgs: 	0


ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /suite)
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ :delegate | delegate handleRequest: request ] ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /suite)
		delegate: 	a ZnJSONRestServerDelegate
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateRequest:do:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /suite)
		block: 	[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ ...etc...
		authenticator: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /suite)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


[ self authenticateAndDelegateRequest: request ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /suite)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


BlockClosure>>on:do:
	Receiver: [ self authenticateAndDelegateRequest: request ]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :exception | 
self debugMode
	ifTrue: [ exception pass ]
	ifFa...etc...
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequ...etc...
		startpc: 	58
		numArgs: 	0


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /suite)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /suite)
		response: 	nil
		initialMilliseconds: 	206821
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeOneRequestResponseOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		stream: 	a ZdcSocketStream
		request: 	a ZnRequest(POST /suite)
		response: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


[ self executeOneRequestResponseOn: stream ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		stream: 	a ZdcSocketStream
		request: 	nil
		response: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


[ 
p psValueAt: index put: anObject.
aBlock value ] in ZnCurrentServer(DynamicVariable)>>value:during:
	Receiver: a ZnCurrentServer
	Arguments and temporary variables: 
		anObject: 	a ZnManagingMultiThreadedServer(running 8010)
		aBlock: 	[ self executeOneRequestResponseOn: stream ]
		p: 	a Process in nil
		oldValue: 	nil
	Receiver's instance variables: 
		index: 	5


BlockClosure>>ensure:
	Receiver: [ 
p psValueAt: index put: anObject.
aBlock value ]
	Arguments and temporary variables: 
		aBlock: 	[ p psValueAt: index put: oldValue ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ZnCurrentServer(DynamicVariable)>>value:during:
		startpc: 	62
		numArgs: 	0


ZnCurrentServer(DynamicVariable)>>value:during:
	Receiver: a ZnCurrentServer
	Arguments and temporary variables: 
		anObject: 	a ZnManagingMultiThreadedServer(running 8010)
		aBlock: 	[ self executeOneRequestResponseOn: stream ]
		p: 	a Process in nil
		oldValue: 	nil
	Receiver's instance variables: 
		index: 	5


ZnCurrentServer class(DynamicVariable class)>>value:during:
	Receiver: ZnCurrentServer
	Arguments and temporary variables: 
		anObject: 	a ZnManagingMultiThreadedServer(running 8010)
		aBlock: 	[ self executeOneRequestResponseOn: stream ]
	Receiver's instance variables: 
		superclass: 	DynamicVariable
		methodDict: 	a MethodDictionary()
		format: 	132
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#ZnCurrentServer
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Zinc-HTTP-Variables'
		traitComposition: 	{}
		localSelectors: 	nil
		hash: 	nil
		soleInstance: 	a ZnCurrentServer


ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		stream: 	a ZdcSocketStream
		request: 	nil
		response: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


[ self executeRequestResponseLoopOn: stream ] in [ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ] in [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		listeningSocket: 	a Socket[waitingForConnection]
		stream: 	a ZdcSocketStream
		socket: 	a Socket[connected]
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


BlockClosure>>ensure:
	Receiver: [ self executeRequestResponseLoopOn: stream ]
	Arguments and temporary variables: 
		aBlock: 	[ 
self log debug: 'Closing stream'.
self closeSocketStream: stream ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		se...etc...
		startpc: 	118
		numArgs: 	0


[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ] in [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		listeningSocket: 	a Socket[waitingForConnection]
		stream: 	a ZdcSocketStream
		socket: 	a Socket[connected]
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


BlockClosure>>ifCurtailed:
	Receiver: [ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing st...etc...
	Arguments and temporary variables: 
		aBlock: 	[ 
self log debug: 'Destroying socket'.
socket destroy ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	[ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
	...etc...
		startpc: 	113
		numArgs: 	0


[ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		listeningSocket: 	a Socket[waitingForConnection]
		stream: 	a ZdcSocketStream
		socket: 	a Socket[connected]
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnec...etc...
		startpc: 	108
		numArgs: 	0



--- The full stack ---
DIUtil class>>saveString:ToFile:
DIWebServiceAPI>>postSuiteNew:
DIWebServiceHandler>>post
DIWebServiceHandler(ZnRestCall)>>execute
[ call execute ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
BlockClosure>>on:do:
ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
[ self execute: call ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
BlockClosure>>on:do:
ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ :delegate | delegate handleRequest: request ] ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateRequest:do:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
[ self authenticateAndDelegateRequest: request ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
BlockClosure>>on:do:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequest:
ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeOneRequestResponseOn:
[ self executeOneRequestResponseOn: stream ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
[ 
p psValueAt: index put: anObject.
aBlock value ] in ZnCurrentServer(DynamicVariable)>>value:during:
BlockClosure>>ensure:
ZnCurrentServer(DynamicVariable)>>value:during:
ZnCurrentServer class(DynamicVariable class)>>value:during:
ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
[ self executeRequestResponseLoopOn: stream ] in [ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ] in [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
BlockClosure>>ensure:
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ] in [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
BlockClosure>>ifCurtailed:
[ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Halt
24 February 2015 11:57:31.754517 am

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
NBCogit NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
https://github.com/pharo-project/pharo-vm.git Commit: 4a0d556150d478ff2de3c9624d2f18e6eaa3fa5c Date: 2014-12-18 18:42:53 +0100 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14893

Image: Pharo3.0 [Latest update: #30863]

DIUtil class>>saveString:ToFile:
	Receiver: DIUtil
	Arguments and temporary variables: 
		aString: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = Php...etc...
		aFileName: 	'/home/otruffer/dicto/bin/analysis/mai/dicto.rules'
		stream: 	MultiByteFileStream: '/home/otruffer/dicto/bin/analysis/mai/dicto.rules...etc...
		newFileName: 	'/home/otruffer/dicto/bin/analysis/mai/dicto.rules'
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary()
		format: 	2
		layout: 	a FixedLayout
		instanceVariables: 	#()
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#DIUtil
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Dicto-var-util'
		traitComposition: 	{}
		localSelectors: 	nil


DIDicto>>dictoParse:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = ...etc...
		adapterTestGroups: 	nil
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424775452'
		singleShotTask: 	true


[ dicto dictoParse: text ] in DIWebServiceAPI>>postRules:
	Receiver: a DIWebServiceAPI
	Arguments and temporary variables: 
		dict: 	a Dictionary('rules'->'RuleResult = PhpClass with name:"Dicto\\RuleResult...etc...
		dicto: 	a DIDicto
		text: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = PhpCla...etc...
	Receiver's instance variables: 
		request: 	nil
		response: 	nil
		variables: 	nil
		delegate: 	nil
		principal: 	nil
		credentials: 	nil


BlockClosure>>on:do:
	Receiver: [ dicto dictoParse: text ]
	Arguments and temporary variables: 
		exception: 	DISyntaxErrorException
		handlerAction: 	[ :ex | ^ self error: 'syntax error' ]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	DIWebServiceAPI>>postRules:
		startpc: 	58
		numArgs: 	0


DIWebServiceAPI>>postRules:
	Receiver: a DIWebServiceAPI
	Arguments and temporary variables: 
		dict: 	a Dictionary('rules'->'RuleResult = PhpClass with name:"Dicto\\RuleResult...etc...
		dicto: 	a DIDicto
		text: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = PhpCla...etc...
	Receiver's instance variables: 
		request: 	nil
		response: 	nil
		variables: 	nil
		delegate: 	nil
		principal: 	nil
		credentials: 	nil


DIWebServiceHandler>>post
	Receiver: a DIWebServiceHandler
	Arguments and temporary variables: 
		api: 	a DIWebServiceAPI
	Receiver's instance variables: 
		request: 	a ZnRequest(POST /mai/rules)
		response: 	nil
		variables: 	an OrderedCollection('mai' 'rules')
		delegate: 	a ZnJSONRestServerDelegate
		principal: 	nil
		credentials: 	nil
		dicto: 	a DIDicto


DIWebServiceHandler(ZnRestCall)>>execute
	Receiver: a DIWebServiceHandler
	Arguments and temporary variables: 

	Receiver's instance variables: 
		request: 	a ZnRequest(POST /mai/rules)
		response: 	nil
		variables: 	an OrderedCollection('mai' 'rules')
		delegate: 	a ZnJSONRestServerDelegate
		principal: 	nil
		credentials: 	nil
		dicto: 	a DIDicto


[ call execute ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


BlockClosure>>on:do:
	Receiver: [ call execute ]
	Arguments and temporary variables: 
		exception: 	ZnRestCallUnauthorized
		handlerAction: 	[ :exception | self unauthorized: exception request ]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
		startpc: 	38
		numArgs: 	0


ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


[ self execute: call ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /mai/rules)
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


BlockClosure>>on:do:
	Receiver: [ self execute: call ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :exception | 
request server debugMode
	ifTrue: [ exception pa...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
		startpc: 	99
		numArgs: 	0


ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /mai/rules)
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ :delegate | delegate handleRequest: request ] ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /mai/rules)
		delegate: 	a ZnJSONRestServerDelegate
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateRequest:do:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /mai/rules)
		block: 	[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ ...etc...
		authenticator: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /mai/rules)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


[ self authenticateAndDelegateRequest: request ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /mai/rules)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


BlockClosure>>on:do:
	Receiver: [ self authenticateAndDelegateRequest: request ]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :exception | 
self debugMode
	ifTrue: [ exception pass ]
	ifFa...etc...
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequ...etc...
		startpc: 	58
		numArgs: 	0


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /mai/rules)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /mai/rules)
		response: 	nil
		initialMilliseconds: 	252039
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeOneRequestResponseOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		stream: 	a ZdcSocketStream
		request: 	a ZnRequest(POST /mai/rules)
		response: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


[ self executeOneRequestResponseOn: stream ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		stream: 	a ZdcSocketStream
		request: 	nil
		response: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


[ 
p psValueAt: index put: anObject.
aBlock value ] in ZnCurrentServer(DynamicVariable)>>value:during:
	Receiver: a ZnCurrentServer
	Arguments and temporary variables: 
		anObject: 	a ZnManagingMultiThreadedServer(running 8010)
		aBlock: 	[ self executeOneRequestResponseOn: stream ]
		p: 	a Process in nil
		oldValue: 	nil
	Receiver's instance variables: 
		index: 	5


BlockClosure>>ensure:
	Receiver: [ 
p psValueAt: index put: anObject.
aBlock value ]
	Arguments and temporary variables: 
		aBlock: 	[ p psValueAt: index put: oldValue ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ZnCurrentServer(DynamicVariable)>>value:during:
		startpc: 	62
		numArgs: 	0


ZnCurrentServer(DynamicVariable)>>value:during:
	Receiver: a ZnCurrentServer
	Arguments and temporary variables: 
		anObject: 	a ZnManagingMultiThreadedServer(running 8010)
		aBlock: 	[ self executeOneRequestResponseOn: stream ]
		p: 	a Process in nil
		oldValue: 	nil
	Receiver's instance variables: 
		index: 	5


ZnCurrentServer class(DynamicVariable class)>>value:during:
	Receiver: ZnCurrentServer
	Arguments and temporary variables: 
		anObject: 	a ZnManagingMultiThreadedServer(running 8010)
		aBlock: 	[ self executeOneRequestResponseOn: stream ]
	Receiver's instance variables: 
		superclass: 	DynamicVariable
		methodDict: 	a MethodDictionary()
		format: 	132
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#ZnCurrentServer
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Zinc-HTTP-Variables'
		traitComposition: 	{}
		localSelectors: 	nil
		hash: 	nil
		soleInstance: 	a ZnCurrentServer


ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		stream: 	a ZdcSocketStream
		request: 	nil
		response: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


[ self executeRequestResponseLoopOn: stream ] in [ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ] in [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		listeningSocket: 	a Socket[waitingForConnection]
		stream: 	a ZdcSocketStream
		socket: 	a Socket[connected]
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


BlockClosure>>ensure:
	Receiver: [ self executeRequestResponseLoopOn: stream ]
	Arguments and temporary variables: 
		aBlock: 	[ 
self log debug: 'Closing stream'.
self closeSocketStream: stream ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		se...etc...
		startpc: 	118
		numArgs: 	0


[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ] in [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		listeningSocket: 	a Socket[waitingForConnection]
		stream: 	a ZdcSocketStream
		socket: 	a Socket[connected]
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


BlockClosure>>ifCurtailed:
	Receiver: [ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing st...etc...
	Arguments and temporary variables: 
		aBlock: 	[ 
self log debug: 'Destroying socket'.
socket destroy ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	[ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
	...etc...
		startpc: 	113
		numArgs: 	0


[ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		listeningSocket: 	a Socket[waitingForConnection]
		stream: 	a ZdcSocketStream
		socket: 	a Socket[connected]
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnec...etc...
		startpc: 	108
		numArgs: 	0



--- The full stack ---
DIUtil class>>saveString:ToFile:
DIDicto>>dictoParse:
[ dicto dictoParse: text ] in DIWebServiceAPI>>postRules:
BlockClosure>>on:do:
DIWebServiceAPI>>postRules:
DIWebServiceHandler>>post
DIWebServiceHandler(ZnRestCall)>>execute
[ call execute ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
BlockClosure>>on:do:
ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
[ self execute: call ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
BlockClosure>>on:do:
ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ :delegate | delegate handleRequest: request ] ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateRequest:do:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
[ self authenticateAndDelegateRequest: request ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
BlockClosure>>on:do:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequest:
ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeOneRequestResponseOn:
[ self executeOneRequestResponseOn: stream ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
[ 
p psValueAt: index put: anObject.
aBlock value ] in ZnCurrentServer(DynamicVariable)>>value:during:
BlockClosure>>ensure:
ZnCurrentServer(DynamicVariable)>>value:during:
ZnCurrentServer class(DynamicVariable class)>>value:during:
ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
[ self executeRequestResponseLoopOn: stream ] in [ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ] in [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
BlockClosure>>ensure:
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ] in [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
BlockClosure>>ifCurtailed:
[ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Halt
24 February 2015 11:57:58.017929 am

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
NBCogit NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
https://github.com/pharo-project/pharo-vm.git Commit: 4a0d556150d478ff2de3c9624d2f18e6eaa3fa5c Date: 2014-12-18 18:42:53 +0100 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14893

Image: Pharo3.0 [Latest update: #30863]

DIUtil class>>saveString:ToFile:
	Receiver: DIUtil
	Arguments and temporary variables: 
		aString: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = Php...etc...
		aFileName: 	'/home/otruffer/dicto/bin/analysis/mai/dicto.rules'
		stream: 	MultiByteFileStream: '/home/otruffer/dicto/bin/analysis/mai/dicto.rules...etc...
		newFileName: 	'/home/otruffer/dicto/bin/analysis/mai/dicto.rules'
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary()
		format: 	2
		layout: 	a FixedLayout
		instanceVariables: 	#()
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#DIUtil
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Dicto-var-util'
		traitComposition: 	{}
		localSelectors: 	nil


DIDicto>>dictoParse:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = ...etc...
		adapterTestGroups: 	nil
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424775478'
		singleShotTask: 	false


DIDicto>>dictoBuild:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = ...etc...
		adapterTestGroups: 	nil
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424775478'
		singleShotTask: 	false


DIDicto>>dictoRun:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = ...etc...
		adapterTestGroups: 	nil
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424775478'
		singleShotTask: 	false


DIDicto>>dictoAll:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = ...etc...
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424775478'
		singleShotTask: 	false


[ DIDicto new dictoAll: input ] in DIWebServiceAPI>>getRun
	Receiver: a DIWebServiceAPI
	Arguments and temporary variables: 
		in: 	'/home/otruffer/dicto/bin/analysis/mai/dicto.rules'
		input: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = PhpCl...etc...
		rulesFailed: 	nil
		rulesTotal: 	nil
	Receiver's instance variables: 
		request: 	nil
		response: 	nil
		variables: 	nil
		delegate: 	nil
		principal: 	nil
		credentials: 	nil


BlockClosure>>on:do:
	Receiver: [ DIDicto new dictoAll: input ]
	Arguments and temporary variables: 
		exception: 	DIException
		handlerAction: 	[ :ex | ^ self error: ex description ]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	DIWebServiceAPI>>getRun
		startpc: 	138
		numArgs: 	0


DIWebServiceAPI>>getRun
	Receiver: a DIWebServiceAPI
	Arguments and temporary variables: 
		in: 	'/home/otruffer/dicto/bin/analysis/mai/dicto.rules'
		input: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = PhpCl...etc...
		rulesFailed: 	nil
		rulesTotal: 	nil
	Receiver's instance variables: 
		request: 	nil
		response: 	nil
		variables: 	nil
		delegate: 	nil
		principal: 	nil
		credentials: 	nil


DIWebServiceHandler>>post
	Receiver: a DIWebServiceHandler
	Arguments and temporary variables: 
		api: 	a DIWebServiceAPI
	Receiver's instance variables: 
		request: 	a ZnRequest(POST /mai/run)
		response: 	nil
		variables: 	an OrderedCollection('mai' 'run')
		delegate: 	a ZnJSONRestServerDelegate
		principal: 	nil
		credentials: 	nil
		dicto: 	a DIDicto


DIWebServiceHandler(ZnRestCall)>>execute
	Receiver: a DIWebServiceHandler
	Arguments and temporary variables: 

	Receiver's instance variables: 
		request: 	a ZnRequest(POST /mai/run)
		response: 	nil
		variables: 	an OrderedCollection('mai' 'run')
		delegate: 	a ZnJSONRestServerDelegate
		principal: 	nil
		credentials: 	nil
		dicto: 	a DIDicto


[ call execute ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


BlockClosure>>on:do:
	Receiver: [ call execute ]
	Arguments and temporary variables: 
		exception: 	ZnRestCallUnauthorized
		handlerAction: 	[ :exception | self unauthorized: exception request ]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
		startpc: 	38
		numArgs: 	0


ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


[ self execute: call ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /mai/run)
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


BlockClosure>>on:do:
	Receiver: [ self execute: call ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :exception | 
request server debugMode
	ifTrue: [ exception pa...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
		startpc: 	99
		numArgs: 	0


ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /mai/run)
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ :delegate | delegate handleRequest: request ] ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /mai/run)
		delegate: 	a ZnJSONRestServerDelegate
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateRequest:do:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /mai/run)
		block: 	[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ ...etc...
		authenticator: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /mai/run)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


[ self authenticateAndDelegateRequest: request ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /mai/run)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


BlockClosure>>on:do:
	Receiver: [ self authenticateAndDelegateRequest: request ]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :exception | 
self debugMode
	ifTrue: [ exception pass ]
	ifFa...etc...
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequ...etc...
		startpc: 	58
		numArgs: 	0


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /mai/run)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /mai/run)
		response: 	nil
		initialMilliseconds: 	278301
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeOneRequestResponseOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		stream: 	a ZdcSocketStream
		request: 	a ZnRequest(POST /mai/run)
		response: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


[ self executeOneRequestResponseOn: stream ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		stream: 	a ZdcSocketStream
		request: 	nil
		response: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


[ 
p psValueAt: index put: anObject.
aBlock value ] in ZnCurrentServer(DynamicVariable)>>value:during:
	Receiver: a ZnCurrentServer
	Arguments and temporary variables: 
		anObject: 	a ZnManagingMultiThreadedServer(running 8010)
		aBlock: 	[ self executeOneRequestResponseOn: stream ]
		p: 	a Process in nil
		oldValue: 	nil
	Receiver's instance variables: 
		index: 	5


BlockClosure>>ensure:
	Receiver: [ 
p psValueAt: index put: anObject.
aBlock value ]
	Arguments and temporary variables: 
		aBlock: 	[ p psValueAt: index put: oldValue ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ZnCurrentServer(DynamicVariable)>>value:during:
		startpc: 	62
		numArgs: 	0


ZnCurrentServer(DynamicVariable)>>value:during:
	Receiver: a ZnCurrentServer
	Arguments and temporary variables: 
		anObject: 	a ZnManagingMultiThreadedServer(running 8010)
		aBlock: 	[ self executeOneRequestResponseOn: stream ]
		p: 	a Process in nil
		oldValue: 	nil
	Receiver's instance variables: 
		index: 	5


ZnCurrentServer class(DynamicVariable class)>>value:during:
	Receiver: ZnCurrentServer
	Arguments and temporary variables: 
		anObject: 	a ZnManagingMultiThreadedServer(running 8010)
		aBlock: 	[ self executeOneRequestResponseOn: stream ]
	Receiver's instance variables: 
		superclass: 	DynamicVariable
		methodDict: 	a MethodDictionary()
		format: 	132
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#ZnCurrentServer
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Zinc-HTTP-Variables'
		traitComposition: 	{}
		localSelectors: 	nil
		hash: 	nil
		soleInstance: 	a ZnCurrentServer


ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		stream: 	a ZdcSocketStream
		request: 	nil
		response: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


[ self executeRequestResponseLoopOn: stream ] in [ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ] in [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		listeningSocket: 	a Socket[waitingForConnection]
		stream: 	a ZdcSocketStream
		socket: 	a Socket[connected]
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


BlockClosure>>ensure:
	Receiver: [ self executeRequestResponseLoopOn: stream ]
	Arguments and temporary variables: 
		aBlock: 	[ 
self log debug: 'Closing stream'.
self closeSocketStream: stream ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		se...etc...
		startpc: 	118
		numArgs: 	0


[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ] in [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		listeningSocket: 	a Socket[waitingForConnection]
		stream: 	a ZdcSocketStream
		socket: 	a Socket[connected]
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


BlockClosure>>ifCurtailed:
	Receiver: [ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing st...etc...
	Arguments and temporary variables: 
		aBlock: 	[ 
self log debug: 'Destroying socket'.
socket destroy ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	[ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
	...etc...
		startpc: 	113
		numArgs: 	0


[ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		listeningSocket: 	a Socket[waitingForConnection]
		stream: 	a ZdcSocketStream
		socket: 	a Socket[connected]
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnec...etc...
		startpc: 	108
		numArgs: 	0



--- The full stack ---
DIUtil class>>saveString:ToFile:
DIDicto>>dictoParse:
DIDicto>>dictoBuild:
DIDicto>>dictoRun:
DIDicto>>dictoAll:
[ DIDicto new dictoAll: input ] in DIWebServiceAPI>>getRun
BlockClosure>>on:do:
DIWebServiceAPI>>getRun
DIWebServiceHandler>>post
DIWebServiceHandler(ZnRestCall)>>execute
[ call execute ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
BlockClosure>>on:do:
ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
[ self execute: call ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
BlockClosure>>on:do:
ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ :delegate | delegate handleRequest: request ] ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateRequest:do:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
[ self authenticateAndDelegateRequest: request ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
BlockClosure>>on:do:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequest:
ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeOneRequestResponseOn:
[ self executeOneRequestResponseOn: stream ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
[ 
p psValueAt: index put: anObject.
aBlock value ] in ZnCurrentServer(DynamicVariable)>>value:during:
BlockClosure>>ensure:
ZnCurrentServer(DynamicVariable)>>value:during:
ZnCurrentServer class(DynamicVariable class)>>value:during:
ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
[ self executeRequestResponseLoopOn: stream ] in [ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ] in [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
BlockClosure>>ensure:
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ] in [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
BlockClosure>>ifCurtailed:
[ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Halt
24 February 2015 11:58:17.098543 am

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
NBCogit NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
https://github.com/pharo-project/pharo-vm.git Commit: 4a0d556150d478ff2de3c9624d2f18e6eaa3fa5c Date: 2014-12-18 18:42:53 +0100 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14893

Image: Pharo3.0 [Latest update: #30863]

DIUtil class>>saveString:ToFile:
	Receiver: DIUtil
	Arguments and temporary variables: 
		aString: 	'source: ''/home/otruffer/DictoCLI''
filePattern: ''*.php''
ignore: ''...etc...
		aFileName: 	'/home/otruffer/dicto/bin/tools/phpda/configs/config-1424775497.yaml...etc...
		stream: 	MultiByteFileStream: '/home/otruffer/dicto/bin/tools/phpda/configs/conf...etc...
		newFileName: 	'/home/otruffer/dicto/bin/tools/phpda/configs/config-1424775497.ya...etc...
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary()
		format: 	2
		layout: 	a FixedLayout
		instanceVariables: 	#()
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#DIUtil
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Dicto-var-util'
		traitComposition: 	{}
		localSelectors: 	nil


DIPhpModel>>_createConfigFile
	Receiver: a DIPhpModel
	Arguments and temporary variables: 
		configFile: 	'source: ''/home/otruffer/DictoCLI''
filePattern: ''*.php''
ignore:...etc...
	Receiver's instance variables: 
		defRules: 	a DICollectionRule()
		defVars: 	a DICollectionVar(SYSTEM)
		analysisID: 	'1424775497'
		additionalProperties: 	a Dictionary()
		ruleCounter: 	0
		varCounter: 	0
		defVarElements: 	a DICollectionVarElements()
		defVarInvertedElements: 	a DICollectionVarElements()
		model: 	nil


DIPhpModel>>_loadPhpModel
	Receiver: a DIPhpModel
	Arguments and temporary variables: 

	Receiver's instance variables: 
		defRules: 	a DICollectionRule()
		defVars: 	a DICollectionVar(SYSTEM)
		analysisID: 	'1424775497'
		additionalProperties: 	a Dictionary()
		ruleCounter: 	0
		varCounter: 	0
		defVarElements: 	a DICollectionVarElements()
		defVarInvertedElements: 	a DICollectionVarElements()
		model: 	nil


DIPhpModel>>model
	Receiver: a DIPhpModel
	Arguments and temporary variables: 

	Receiver's instance variables: 
		defRules: 	a DICollectionRule()
		defVars: 	a DICollectionVar(SYSTEM)
		analysisID: 	'1424775497'
		additionalProperties: 	a Dictionary()
		ruleCounter: 	0
		varCounter: 	0
		defVarElements: 	a DICollectionVarElements()
		defVarInvertedElements: 	a DICollectionVarElements()
		model: 	nil


DIVarPhpClass>>allElements
	Receiver: RuleResult
	Arguments and temporary variables: 

	Receiver's instance variables: 
		isFirst: 	false
		dslText: 	'RuleResult=PhpClass with name:"Dicto\\RuleResult"'
		type: 	'PhpClass'
		id: 	1
		entity: 	nil
		name: 	'RuleResult'
		specifiers: 	an OrderedCollection(name=Dicto\\RuleResult)
		isInverted: 	false
		elements: 	a DICollectionVarElements()
		invertedElements: 	a DICollectionVarElements()


DIVarPhpClass(DIVar)>>elements
	Receiver: RuleResult
	Arguments and temporary variables: 
		valid: 	nil
	Receiver's instance variables: 
		isFirst: 	false
		dslText: 	'RuleResult=PhpClass with name:"Dicto\\RuleResult"'
		type: 	'PhpClass'
		id: 	1
		entity: 	nil
		name: 	'RuleResult'
		specifiers: 	an OrderedCollection(name=Dicto\\RuleResult)
		isInverted: 	false
		elements: 	a DICollectionVarElements()
		invertedElements: 	a DICollectionVarElements()


DISimpleRule>>subjectElements
	Receiver: RuleResult cannot depend on DictoTalker
	Arguments and temporary variables: 
		subjectElements: 	nil
	Receiver's instance variables: 
		isFirst: 	nil
		dslText: 	'RuleResult cannot depend on DictoTalker'
		type: 	#cannot
		id: 	1001
		entity: 	nil
		subjects: 	an Array(RuleResult)
		predicates: 	an Array(depend on DictoTalker)
		subRules: 	nil
		candidateAdapters: 	a SortedCollection(DIPhpDependencies)
		chosenAdapter: 	DIPhpDependencies
		hasFailed: 	false
		failureMessage: 	''
		failingPredicates: 	a Set()
		hasSubjectInverted: 	false
		hasPredicateInverted: 	false


printRulesEntityRelationship: someRules
	| res processedPredicates |
	res := ''.
	processedPredicates := Set new.
	someRules
		do: [ :rule | 
			| predicateSelector subjectElements argumentElements data isPredicateInv isSubjectInv |
			predicateSelector := (rule predicate nameNormalized , ':') asSymbol.
			isPredicateInv := rule hasPredicateInverted.
			isSubjectInv := rule hasSubjectInverted.
			subjectElements := rule subjectElements.
			argumentElements := rule argumentElements.
			subjectElements
				do: [ :subject | 
					argumentElements
						do: [ :argument | 
							| relId spec msgPass msgFail |
							relId := subject id , '-' , argument id.
							msgPass := subject id , '.' , rule predicate name , '(' , argument id , ')=True'.
							msgFail := subject id , '.' , rule predicate name , '(' , argument id , ')=False'.
							(processedPredicates includes: relId)
								ifFalse: [ 
									data := {(#subject -> subject value).
									(#argument -> argument value).
									(#ruleId -> rule id).
									(#propertyId -> relId).
									(#msgPass -> msgPass).
									(#msgFail -> msgFail)} asDictionary.
									spec := self perform: predicateSelector withArguments: {data}.
									spec := spec
										dictoReplace:
											{('$subject' -> subject value).
											('$argument' -> argument value).
											('$ruleId' -> rule id).
											('$propertyId' -> relId).
											('$msgPass' -> msgPass).
											('$msgFail' -> msgFail)}.
									res := res , spec ].	"avoid duplicate predicate evaluations"
							processedPredicates add: relId ] ] ].
	^ res in DIPhpDependencies(DIAdapter)>>printRulesEntityRelationship:
	Receiver: a DIPhpDependencies
	Arguments and temporary variables: 
		someRules: 	a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalk...etc...
		processedPredicates: 	a Set()
		data: 	nil
		res: 	''
		rule: 	RuleResult cannot depend on DictoTalker
		predicateSelector: 	#dependOn:
		subjectElements: 	nil
		argumentElements: 	nil
		isPredicateInv: 	false
		isSubjectInv: 	false
	Receiver's instance variables: 
		output: 	''
		commandOutput: 	''
		NEWLINE: 	'
'
		rules: 	a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalker m...etc...
		varSynonyms: 	nil
		sessionId: 	'1424775478'
		TIMESTAMP: 	'1424775497'
		TOOLNAME: 	'DIPhpDependencies'
		PROJECTROOT: 	'/home/otruffer/DictoCLI'
		PROJECTSRC: 	'./'
		PROJECTBIN: 	'./'
		RESULTFILE: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/mai/1424775497/D...etc...
		TESTFILE: 	nil
		testInputFileExt: 	'.st'
		SYSTEM: 	SYSTEM


DICollectionRule(OrderedCollection)>>do:
	Receiver: a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalker must depend on Rule...etc...
	Arguments and temporary variables: 
		aBlock: 	printRulesEntityRelationship: someRules
	| res processedPredicates |
	r...etc...
		index: 	1
	Receiver's instance variables: 
		array: 	an Array(RuleResult cannot depend on DictoTalker DictoTalker must depend...etc...
		firstIndex: 	1
		lastIndex: 	3
		elements: 	nil
		elements: 	nil


DIPhpDependencies(DIAdapter)>>printRulesEntityRelationship:
	Receiver: a DIPhpDependencies
	Arguments and temporary variables: 
		res: 	''
		someRules: 	a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalk...etc...
		processedPredicates: 	a Set()
	Receiver's instance variables: 
		output: 	''
		commandOutput: 	''
		NEWLINE: 	'
'
		rules: 	a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalker m...etc...
		varSynonyms: 	nil
		sessionId: 	'1424775478'
		TIMESTAMP: 	'1424775497'
		TOOLNAME: 	'DIPhpDependencies'
		PROJECTROOT: 	'/home/otruffer/DictoCLI'
		PROJECTSRC: 	'./'
		PROJECTBIN: 	'./'
		RESULTFILE: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/mai/1424775497/D...etc...
		TESTFILE: 	nil
		testInputFileExt: 	'.st'
		SYSTEM: 	SYSTEM


DIPhpDependencies(DIAdapter)>>printRules
	Receiver: a DIPhpDependencies
	Arguments and temporary variables: 
		res: 	nil
		allRules: 	a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalke...etc...
	Receiver's instance variables: 
		output: 	''
		commandOutput: 	''
		NEWLINE: 	'
'
		rules: 	a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalker m...etc...
		varSynonyms: 	nil
		sessionId: 	'1424775478'
		TIMESTAMP: 	'1424775497'
		TOOLNAME: 	'DIPhpDependencies'
		PROJECTROOT: 	'/home/otruffer/DictoCLI'
		PROJECTSRC: 	'./'
		PROJECTBIN: 	'./'
		RESULTFILE: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/mai/1424775497/D...etc...
		TESTFILE: 	nil
		testInputFileExt: 	'.st'
		SYSTEM: 	SYSTEM


DIPhpDependencies>>testInput
	Receiver: a DIPhpDependencies
	Arguments and temporary variables: 
		strRules: 	nil
	Receiver's instance variables: 
		output: 	''
		commandOutput: 	''
		NEWLINE: 	'
'
		rules: 	a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalker m...etc...
		varSynonyms: 	nil
		sessionId: 	'1424775478'
		TIMESTAMP: 	'1424775497'
		TOOLNAME: 	'DIPhpDependencies'
		PROJECTROOT: 	'/home/otruffer/DictoCLI'
		PROJECTSRC: 	'./'
		PROJECTBIN: 	'./'
		RESULTFILE: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/mai/1424775497/D...etc...
		TESTFILE: 	nil
		testInputFileExt: 	'.st'
		SYSTEM: 	SYSTEM


DITestGroup>>build
	Receiver: a DITestGroup
	Arguments and temporary variables: 

	Receiver's instance variables: 
		rules: 	an OrderedCollection(RuleResult cannot depend on DictoTalker DictoTalker...etc...
		adapter: 	a DIPhpDependencies
		runCommandText: 	nil
		testSpecification: 	nil
		adapterID: 	'DIPhpDependencies'
		resultFile: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/mai/1424775497/D...etc...
		specificationFile: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/mai/14247...etc...
		commandFile: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/mai/1424775497/...etc...


[ :testGroup | testGroup build ] in DIDicto>>dictoBuild:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = ...etc...
		adapterTestGroups: 	a Dictionary(DIGrepFileContent->a DITestGroup DIJMeterLoadTe...etc...
		testGroup: 	a DITestGroup
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424775478'
		singleShotTask: 	false


Array(SequenceableCollection)>>do:
	Receiver: an Array(a DITestGroup a DITestGroup a DITestGroup a DITestGroup a DITestGroup)
	Arguments and temporary variables: 
		aBlock: 	[ :testGroup | testGroup build ]
		index: 	4
	Receiver's instance variables: 
an Array(a DITestGroup a DITestGroup a DITestGroup a DITestGroup a DITestGroup)

DIDicto>>dictoBuild:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = ...etc...
		adapterTestGroups: 	a Dictionary(DIGrepFileContent->a DITestGroup DIJMeterLoadTe...etc...
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424775478'
		singleShotTask: 	false


DIDicto>>dictoRun:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = ...etc...
		adapterTestGroups: 	nil
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424775478'
		singleShotTask: 	false


DIDicto>>dictoAll:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = ...etc...
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424775478'
		singleShotTask: 	false


[ DIDicto new dictoAll: input ] in DIWebServiceAPI>>getRun
	Receiver: a DIWebServiceAPI
	Arguments and temporary variables: 
		in: 	'/home/otruffer/dicto/bin/analysis/mai/dicto.rules'
		input: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = PhpCl...etc...
		rulesFailed: 	nil
		rulesTotal: 	nil
	Receiver's instance variables: 
		request: 	nil
		response: 	nil
		variables: 	nil
		delegate: 	nil
		principal: 	nil
		credentials: 	nil


BlockClosure>>on:do:
	Receiver: [ DIDicto new dictoAll: input ]
	Arguments and temporary variables: 
		exception: 	DIException
		handlerAction: 	[ :ex | ^ self error: ex description ]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	DIWebServiceAPI>>getRun
		startpc: 	138
		numArgs: 	0


DIWebServiceAPI>>getRun
	Receiver: a DIWebServiceAPI
	Arguments and temporary variables: 
		in: 	'/home/otruffer/dicto/bin/analysis/mai/dicto.rules'
		input: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = PhpCl...etc...
		rulesFailed: 	nil
		rulesTotal: 	nil
	Receiver's instance variables: 
		request: 	nil
		response: 	nil
		variables: 	nil
		delegate: 	nil
		principal: 	nil
		credentials: 	nil


DIWebServiceHandler>>post
	Receiver: a DIWebServiceHandler
	Arguments and temporary variables: 
		api: 	a DIWebServiceAPI
	Receiver's instance variables: 
		request: 	a ZnRequest(POST /mai/run)
		response: 	nil
		variables: 	an OrderedCollection('mai' 'run')
		delegate: 	a ZnJSONRestServerDelegate
		principal: 	nil
		credentials: 	nil
		dicto: 	a DIDicto


DIWebServiceHandler(ZnRestCall)>>execute
	Receiver: a DIWebServiceHandler
	Arguments and temporary variables: 

	Receiver's instance variables: 
		request: 	a ZnRequest(POST /mai/run)
		response: 	nil
		variables: 	an OrderedCollection('mai' 'run')
		delegate: 	a ZnJSONRestServerDelegate
		principal: 	nil
		credentials: 	nil
		dicto: 	a DIDicto


[ call execute ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


BlockClosure>>on:do:
	Receiver: [ call execute ]
	Arguments and temporary variables: 
		exception: 	ZnRestCallUnauthorized
		handlerAction: 	[ :exception | self unauthorized: exception request ]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
		startpc: 	38
		numArgs: 	0


ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


[ self execute: call ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /mai/run)
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


BlockClosure>>on:do:
	Receiver: [ self execute: call ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :exception | 
request server debugMode
	ifTrue: [ exception pa...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
		startpc: 	99
		numArgs: 	0


ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /mai/run)
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ :delegate | delegate handleRequest: request ] ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /mai/run)
		delegate: 	a ZnJSONRestServerDelegate
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateRequest:do:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /mai/run)
		block: 	[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ ...etc...
		authenticator: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /mai/run)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


[ self authenticateAndDelegateRequest: request ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /mai/run)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


BlockClosure>>on:do:
	Receiver: [ self authenticateAndDelegateRequest: request ]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :exception | 
self debugMode
	ifTrue: [ exception pass ]
	ifFa...etc...
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequ...etc...
		startpc: 	58
		numArgs: 	0


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /mai/run)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /mai/run)
		response: 	nil
		initialMilliseconds: 	278301
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeOneRequestResponseOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		stream: 	a ZdcSocketStream
		request: 	a ZnRequest(POST /mai/run)
		response: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


[ self executeOneRequestResponseOn: stream ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		stream: 	a ZdcSocketStream
		request: 	nil
		response: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


[ 
p psValueAt: index put: anObject.
aBlock value ] in ZnCurrentServer(DynamicVariable)>>value:during:
	Receiver: a ZnCurrentServer
	Arguments and temporary variables: 
		anObject: 	a ZnManagingMultiThreadedServer(running 8010)
		aBlock: 	[ self executeOneRequestResponseOn: stream ]
		p: 	a Process in nil
		oldValue: 	nil
	Receiver's instance variables: 
		index: 	5



--- The full stack ---
DIUtil class>>saveString:ToFile:
DIPhpModel>>_createConfigFile
DIPhpModel>>_loadPhpModel
DIPhpModel>>model
DIVarPhpClass>>allElements
DIVarPhpClass(DIVar)>>elements
DISimpleRule>>subjectElements
printRulesEntityRelationship: someRules
	| res processedPredicates |
	res := ''.
	processedPredicates := Set new.
	someRules
		do: [ :rule | 
			| predicateSelector subjectElements argumentElements data isPredicateInv isSubjectInv |
			predicateSelector := (rule predicate nameNormalized , ':') asSymbol.
			isPredicateInv := rule hasPredicateInverted.
			isSubjectInv := rule hasSubjectInverted.
			subjectElements := rule subjectElements.
			argumentElements := rule argumentElements.
			subjectElements
				do: [ :subject | 
					argumentElements
						do: [ :argument | 
							| relId spec msgPass msgFail |
							relId := subject id , '-' , argument id.
							msgPass := subject id , '.' , rule predicate name , '(' , argument id , ')=True'.
							msgFail := subject id , '.' , rule predicate name , '(' , argument id , ')=False'.
							(processedPredicates includes: relId)
								ifFalse: [ 
									data := {(#subject -> subject value).
									(#argument -> argument value).
									(#ruleId -> rule id).
									(#propertyId -> relId).
									(#msgPass -> msgPass).
									(#msgFail -> msgFail)} asDictionary.
									spec := self perform: predicateSelector withArguments: {data}.
									spec := spec
										dictoReplace:
											{('$subject' -> subject value).
											('$argument' -> argument value).
											('$ruleId' -> rule id).
											('$propertyId' -> relId).
											('$msgPass' -> msgPass).
											('$msgFail' -> msgFail)}.
									res := res , spec ].	"avoid duplicate predicate evaluations"
							processedPredicates add: relId ] ] ].
	^ res in DIPhpDependencies(DIAdapter)>>printRulesEntityRelationship:
DICollectionRule(OrderedCollection)>>do:
DIPhpDependencies(DIAdapter)>>printRulesEntityRelationship:
DIPhpDependencies(DIAdapter)>>printRules
DIPhpDependencies>>testInput
DITestGroup>>build
[ :testGroup | testGroup build ] in DIDicto>>dictoBuild:
Array(SequenceableCollection)>>do:
DIDicto>>dictoBuild:
DIDicto>>dictoRun:
DIDicto>>dictoAll:
[ DIDicto new dictoAll: input ] in DIWebServiceAPI>>getRun
BlockClosure>>on:do:
DIWebServiceAPI>>getRun
DIWebServiceHandler>>post
DIWebServiceHandler(ZnRestCall)>>execute
[ call execute ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
BlockClosure>>on:do:
ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
[ self execute: call ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
BlockClosure>>on:do:
ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ :delegate | delegate handleRequest: request ] ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateRequest:do:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
[ self authenticateAndDelegateRequest: request ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
BlockClosure>>on:do:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequest:
ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeOneRequestResponseOn:
[ self executeOneRequestResponseOn: stream ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
[ 
p psValueAt: index put: anObject.
aBlock value ] in ZnCurrentServer(DynamicVariable)>>value:during:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
BlockClosure>>ensure:
ZnCurrentServer(DynamicVariable)>>value:during:
ZnCurrentServer class(DynamicVariable class)>>value:during:
ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
[ self executeRequestResponseLoopOn: stream ] in [ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ] in [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
BlockClosure>>ensure:
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ] in [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
BlockClosure>>ifCurtailed:
[ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Halt
24 February 2015 11:58:41.247932 am

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
NBCogit NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
https://github.com/pharo-project/pharo-vm.git Commit: 4a0d556150d478ff2de3c9624d2f18e6eaa3fa5c Date: 2014-12-18 18:42:53 +0100 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14893

Image: Pharo3.0 [Latest update: #30863]

DIUtil class>>saveString:ToFile:
	Receiver: DIUtil
	Arguments and temporary variables: 
		aString: 	'#!/bin/bash
type -P hhvm &>/dev/null && hhvm /home/otruffer/dicto/bin...etc...
		aFileName: 	'/home/otruffer/dicto/bin/tools/phpda/configs/modelScript-1424775497...etc...
		stream: 	MultiByteFileStream: '/home/otruffer/dicto/bin/tools/phpda/configs/mode...etc...
		newFileName: 	'/home/otruffer/dicto/bin/tools/phpda/configs/modelScript-14247754...etc...
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary()
		format: 	2
		layout: 	a FixedLayout
		instanceVariables: 	#()
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#DIUtil
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Dicto-var-util'
		traitComposition: 	{}
		localSelectors: 	nil


DIPhpModel>>_createModelScript
	Receiver: a DIPhpModel
	Arguments and temporary variables: 
		modelScriptFile: 	'#!/bin/bash
type -P hhvm &>/dev/null && hhvm /home/otruffer/d...etc...
	Receiver's instance variables: 
		defRules: 	a DICollectionRule()
		defVars: 	a DICollectionVar(SYSTEM)
		analysisID: 	'1424775497'
		additionalProperties: 	a Dictionary()
		ruleCounter: 	0
		varCounter: 	0
		defVarElements: 	a DICollectionVarElements()
		defVarInvertedElements: 	a DICollectionVarElements()
		model: 	nil


DIPhpModel>>_createModelFile
	Receiver: a DIPhpModel
	Arguments and temporary variables: 

	Receiver's instance variables: 
		defRules: 	a DICollectionRule()
		defVars: 	a DICollectionVar(SYSTEM)
		analysisID: 	'1424775497'
		additionalProperties: 	a Dictionary()
		ruleCounter: 	0
		varCounter: 	0
		defVarElements: 	a DICollectionVarElements()
		defVarInvertedElements: 	a DICollectionVarElements()
		model: 	nil


DIPhpModel>>_loadPhpModel
	Receiver: a DIPhpModel
	Arguments and temporary variables: 

	Receiver's instance variables: 
		defRules: 	a DICollectionRule()
		defVars: 	a DICollectionVar(SYSTEM)
		analysisID: 	'1424775497'
		additionalProperties: 	a Dictionary()
		ruleCounter: 	0
		varCounter: 	0
		defVarElements: 	a DICollectionVarElements()
		defVarInvertedElements: 	a DICollectionVarElements()
		model: 	nil


DIPhpModel>>model
	Receiver: a DIPhpModel
	Arguments and temporary variables: 

	Receiver's instance variables: 
		defRules: 	a DICollectionRule()
		defVars: 	a DICollectionVar(SYSTEM)
		analysisID: 	'1424775497'
		additionalProperties: 	a Dictionary()
		ruleCounter: 	0
		varCounter: 	0
		defVarElements: 	a DICollectionVarElements()
		defVarInvertedElements: 	a DICollectionVarElements()
		model: 	nil


DIVarPhpClass>>allElements
	Receiver: RuleResult
	Arguments and temporary variables: 

	Receiver's instance variables: 
		isFirst: 	false
		dslText: 	'RuleResult=PhpClass with name:"Dicto\\RuleResult"'
		type: 	'PhpClass'
		id: 	1
		entity: 	nil
		name: 	'RuleResult'
		specifiers: 	an OrderedCollection(name=Dicto\\RuleResult)
		isInverted: 	false
		elements: 	a DICollectionVarElements()
		invertedElements: 	a DICollectionVarElements()


DIVarPhpClass(DIVar)>>elements
	Receiver: RuleResult
	Arguments and temporary variables: 
		valid: 	nil
	Receiver's instance variables: 
		isFirst: 	false
		dslText: 	'RuleResult=PhpClass with name:"Dicto\\RuleResult"'
		type: 	'PhpClass'
		id: 	1
		entity: 	nil
		name: 	'RuleResult'
		specifiers: 	an OrderedCollection(name=Dicto\\RuleResult)
		isInverted: 	false
		elements: 	a DICollectionVarElements()
		invertedElements: 	a DICollectionVarElements()


DISimpleRule>>subjectElements
	Receiver: RuleResult cannot depend on DictoTalker
	Arguments and temporary variables: 
		subjectElements: 	nil
	Receiver's instance variables: 
		isFirst: 	nil
		dslText: 	'RuleResult cannot depend on DictoTalker'
		type: 	#cannot
		id: 	1001
		entity: 	nil
		subjects: 	an Array(RuleResult)
		predicates: 	an Array(depend on DictoTalker)
		subRules: 	nil
		candidateAdapters: 	a SortedCollection(DIPhpDependencies)
		chosenAdapter: 	DIPhpDependencies
		hasFailed: 	false
		failureMessage: 	''
		failingPredicates: 	a Set()
		hasSubjectInverted: 	false
		hasPredicateInverted: 	false


printRulesEntityRelationship: someRules
	| res processedPredicates |
	res := ''.
	processedPredicates := Set new.
	someRules
		do: [ :rule | 
			| predicateSelector subjectElements argumentElements data isPredicateInv isSubjectInv |
			predicateSelector := (rule predicate nameNormalized , ':') asSymbol.
			isPredicateInv := rule hasPredicateInverted.
			isSubjectInv := rule hasSubjectInverted.
			subjectElements := rule subjectElements.
			argumentElements := rule argumentElements.
			subjectElements
				do: [ :subject | 
					argumentElements
						do: [ :argument | 
							| relId spec msgPass msgFail |
							relId := subject id , '-' , argument id.
							msgPass := subject id , '.' , rule predicate name , '(' , argument id , ')=True'.
							msgFail := subject id , '.' , rule predicate name , '(' , argument id , ')=False'.
							(processedPredicates includes: relId)
								ifFalse: [ 
									data := {(#subject -> subject value).
									(#argument -> argument value).
									(#ruleId -> rule id).
									(#propertyId -> relId).
									(#msgPass -> msgPass).
									(#msgFail -> msgFail)} asDictionary.
									spec := self perform: predicateSelector withArguments: {data}.
									spec := spec
										dictoReplace:
											{('$subject' -> subject value).
											('$argument' -> argument value).
											('$ruleId' -> rule id).
											('$propertyId' -> relId).
											('$msgPass' -> msgPass).
											('$msgFail' -> msgFail)}.
									res := res , spec ].	"avoid duplicate predicate evaluations"
							processedPredicates add: relId ] ] ].
	^ res in DIPhpDependencies(DIAdapter)>>printRulesEntityRelationship:
	Receiver: a DIPhpDependencies
	Arguments and temporary variables: 
		someRules: 	a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalk...etc...
		processedPredicates: 	a Set()
		data: 	nil
		res: 	''
		rule: 	RuleResult cannot depend on DictoTalker
		predicateSelector: 	#dependOn:
		subjectElements: 	nil
		argumentElements: 	nil
		isPredicateInv: 	false
		isSubjectInv: 	false
	Receiver's instance variables: 
		output: 	''
		commandOutput: 	''
		NEWLINE: 	'
'
		rules: 	a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalker m...etc...
		varSynonyms: 	nil
		sessionId: 	'1424775478'
		TIMESTAMP: 	'1424775497'
		TOOLNAME: 	'DIPhpDependencies'
		PROJECTROOT: 	'/home/otruffer/DictoCLI'
		PROJECTSRC: 	'./'
		PROJECTBIN: 	'./'
		RESULTFILE: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/mai/1424775497/D...etc...
		TESTFILE: 	nil
		testInputFileExt: 	'.st'
		SYSTEM: 	SYSTEM


DICollectionRule(OrderedCollection)>>do:
	Receiver: a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalker must depend on Rule...etc...
	Arguments and temporary variables: 
		aBlock: 	printRulesEntityRelationship: someRules
	| res processedPredicates |
	r...etc...
		index: 	1
	Receiver's instance variables: 
		array: 	an Array(RuleResult cannot depend on DictoTalker DictoTalker must depend...etc...
		firstIndex: 	1
		lastIndex: 	3
		elements: 	nil
		elements: 	nil


DIPhpDependencies(DIAdapter)>>printRulesEntityRelationship:
	Receiver: a DIPhpDependencies
	Arguments and temporary variables: 
		res: 	''
		someRules: 	a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalk...etc...
		processedPredicates: 	a Set()
	Receiver's instance variables: 
		output: 	''
		commandOutput: 	''
		NEWLINE: 	'
'
		rules: 	a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalker m...etc...
		varSynonyms: 	nil
		sessionId: 	'1424775478'
		TIMESTAMP: 	'1424775497'
		TOOLNAME: 	'DIPhpDependencies'
		PROJECTROOT: 	'/home/otruffer/DictoCLI'
		PROJECTSRC: 	'./'
		PROJECTBIN: 	'./'
		RESULTFILE: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/mai/1424775497/D...etc...
		TESTFILE: 	nil
		testInputFileExt: 	'.st'
		SYSTEM: 	SYSTEM


DIPhpDependencies(DIAdapter)>>printRules
	Receiver: a DIPhpDependencies
	Arguments and temporary variables: 
		res: 	nil
		allRules: 	a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalke...etc...
	Receiver's instance variables: 
		output: 	''
		commandOutput: 	''
		NEWLINE: 	'
'
		rules: 	a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalker m...etc...
		varSynonyms: 	nil
		sessionId: 	'1424775478'
		TIMESTAMP: 	'1424775497'
		TOOLNAME: 	'DIPhpDependencies'
		PROJECTROOT: 	'/home/otruffer/DictoCLI'
		PROJECTSRC: 	'./'
		PROJECTBIN: 	'./'
		RESULTFILE: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/mai/1424775497/D...etc...
		TESTFILE: 	nil
		testInputFileExt: 	'.st'
		SYSTEM: 	SYSTEM


DIPhpDependencies>>testInput
	Receiver: a DIPhpDependencies
	Arguments and temporary variables: 
		strRules: 	nil
	Receiver's instance variables: 
		output: 	''
		commandOutput: 	''
		NEWLINE: 	'
'
		rules: 	a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalker m...etc...
		varSynonyms: 	nil
		sessionId: 	'1424775478'
		TIMESTAMP: 	'1424775497'
		TOOLNAME: 	'DIPhpDependencies'
		PROJECTROOT: 	'/home/otruffer/DictoCLI'
		PROJECTSRC: 	'./'
		PROJECTBIN: 	'./'
		RESULTFILE: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/mai/1424775497/D...etc...
		TESTFILE: 	nil
		testInputFileExt: 	'.st'
		SYSTEM: 	SYSTEM


DITestGroup>>build
	Receiver: a DITestGroup
	Arguments and temporary variables: 

	Receiver's instance variables: 
		rules: 	an OrderedCollection(RuleResult cannot depend on DictoTalker DictoTalker...etc...
		adapter: 	a DIPhpDependencies
		runCommandText: 	nil
		testSpecification: 	nil
		adapterID: 	'DIPhpDependencies'
		resultFile: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/mai/1424775497/D...etc...
		specificationFile: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/mai/14247...etc...
		commandFile: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/mai/1424775497/...etc...


[ :testGroup | testGroup build ] in DIDicto>>dictoBuild:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = ...etc...
		adapterTestGroups: 	a Dictionary(DIGrepFileContent->a DITestGroup DIJMeterLoadTe...etc...
		testGroup: 	a DITestGroup
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424775478'
		singleShotTask: 	false


Array(SequenceableCollection)>>do:
	Receiver: an Array(a DITestGroup a DITestGroup a DITestGroup a DITestGroup a DITestGroup)
	Arguments and temporary variables: 
		aBlock: 	[ :testGroup | testGroup build ]
		index: 	4
	Receiver's instance variables: 
an Array(a DITestGroup a DITestGroup a DITestGroup a DITestGroup a DITestGroup)

DIDicto>>dictoBuild:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = ...etc...
		adapterTestGroups: 	a Dictionary(DIGrepFileContent->a DITestGroup DIJMeterLoadTe...etc...
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424775478'
		singleShotTask: 	false


DIDicto>>dictoRun:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = ...etc...
		adapterTestGroups: 	nil
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424775478'
		singleShotTask: 	false


DIDicto>>dictoAll:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = ...etc...
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424775478'
		singleShotTask: 	false


[ DIDicto new dictoAll: input ] in DIWebServiceAPI>>getRun
	Receiver: a DIWebServiceAPI
	Arguments and temporary variables: 
		in: 	'/home/otruffer/dicto/bin/analysis/mai/dicto.rules'
		input: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = PhpCl...etc...
		rulesFailed: 	nil
		rulesTotal: 	nil
	Receiver's instance variables: 
		request: 	nil
		response: 	nil
		variables: 	nil
		delegate: 	nil
		principal: 	nil
		credentials: 	nil


BlockClosure>>on:do:
	Receiver: [ DIDicto new dictoAll: input ]
	Arguments and temporary variables: 
		exception: 	DIException
		handlerAction: 	[ :ex | ^ self error: ex description ]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	DIWebServiceAPI>>getRun
		startpc: 	138
		numArgs: 	0


DIWebServiceAPI>>getRun
	Receiver: a DIWebServiceAPI
	Arguments and temporary variables: 
		in: 	'/home/otruffer/dicto/bin/analysis/mai/dicto.rules'
		input: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = PhpCl...etc...
		rulesFailed: 	nil
		rulesTotal: 	nil
	Receiver's instance variables: 
		request: 	nil
		response: 	nil
		variables: 	nil
		delegate: 	nil
		principal: 	nil
		credentials: 	nil


DIWebServiceHandler>>post
	Receiver: a DIWebServiceHandler
	Arguments and temporary variables: 
		api: 	a DIWebServiceAPI
	Receiver's instance variables: 
		request: 	a ZnRequest(POST /mai/run)
		response: 	nil
		variables: 	an OrderedCollection('mai' 'run')
		delegate: 	a ZnJSONRestServerDelegate
		principal: 	nil
		credentials: 	nil
		dicto: 	a DIDicto


DIWebServiceHandler(ZnRestCall)>>execute
	Receiver: a DIWebServiceHandler
	Arguments and temporary variables: 

	Receiver's instance variables: 
		request: 	a ZnRequest(POST /mai/run)
		response: 	nil
		variables: 	an OrderedCollection('mai' 'run')
		delegate: 	a ZnJSONRestServerDelegate
		principal: 	nil
		credentials: 	nil
		dicto: 	a DIDicto


[ call execute ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


BlockClosure>>on:do:
	Receiver: [ call execute ]
	Arguments and temporary variables: 
		exception: 	ZnRestCallUnauthorized
		handlerAction: 	[ :exception | self unauthorized: exception request ]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
		startpc: 	38
		numArgs: 	0


ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


[ self execute: call ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /mai/run)
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


BlockClosure>>on:do:
	Receiver: [ self execute: call ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :exception | 
request server debugMode
	ifTrue: [ exception pa...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
		startpc: 	99
		numArgs: 	0


ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /mai/run)
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ :delegate | delegate handleRequest: request ] ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /mai/run)
		delegate: 	a ZnJSONRestServerDelegate
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateRequest:do:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /mai/run)
		block: 	[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ ...etc...
		authenticator: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /mai/run)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


[ self authenticateAndDelegateRequest: request ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /mai/run)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


BlockClosure>>on:do:
	Receiver: [ self authenticateAndDelegateRequest: request ]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :exception | 
self debugMode
	ifTrue: [ exception pass ]
	ifFa...etc...
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequ...etc...
		startpc: 	58
		numArgs: 	0


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /mai/run)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /mai/run)
		response: 	nil
		initialMilliseconds: 	278301
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeOneRequestResponseOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		stream: 	a ZdcSocketStream
		request: 	a ZnRequest(POST /mai/run)
		response: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


[ self executeOneRequestResponseOn: stream ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		stream: 	a ZdcSocketStream
		request: 	nil
		response: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)



--- The full stack ---
DIUtil class>>saveString:ToFile:
DIPhpModel>>_createModelScript
DIPhpModel>>_createModelFile
DIPhpModel>>_loadPhpModel
DIPhpModel>>model
DIVarPhpClass>>allElements
DIVarPhpClass(DIVar)>>elements
DISimpleRule>>subjectElements
printRulesEntityRelationship: someRules
	| res processedPredicates |
	res := ''.
	processedPredicates := Set new.
	someRules
		do: [ :rule | 
			| predicateSelector subjectElements argumentElements data isPredicateInv isSubjectInv |
			predicateSelector := (rule predicate nameNormalized , ':') asSymbol.
			isPredicateInv := rule hasPredicateInverted.
			isSubjectInv := rule hasSubjectInverted.
			subjectElements := rule subjectElements.
			argumentElements := rule argumentElements.
			subjectElements
				do: [ :subject | 
					argumentElements
						do: [ :argument | 
							| relId spec msgPass msgFail |
							relId := subject id , '-' , argument id.
							msgPass := subject id , '.' , rule predicate name , '(' , argument id , ')=True'.
							msgFail := subject id , '.' , rule predicate name , '(' , argument id , ')=False'.
							(processedPredicates includes: relId)
								ifFalse: [ 
									data := {(#subject -> subject value).
									(#argument -> argument value).
									(#ruleId -> rule id).
									(#propertyId -> relId).
									(#msgPass -> msgPass).
									(#msgFail -> msgFail)} asDictionary.
									spec := self perform: predicateSelector withArguments: {data}.
									spec := spec
										dictoReplace:
											{('$subject' -> subject value).
											('$argument' -> argument value).
											('$ruleId' -> rule id).
											('$propertyId' -> relId).
											('$msgPass' -> msgPass).
											('$msgFail' -> msgFail)}.
									res := res , spec ].	"avoid duplicate predicate evaluations"
							processedPredicates add: relId ] ] ].
	^ res in DIPhpDependencies(DIAdapter)>>printRulesEntityRelationship:
DICollectionRule(OrderedCollection)>>do:
DIPhpDependencies(DIAdapter)>>printRulesEntityRelationship:
DIPhpDependencies(DIAdapter)>>printRules
DIPhpDependencies>>testInput
DITestGroup>>build
[ :testGroup | testGroup build ] in DIDicto>>dictoBuild:
Array(SequenceableCollection)>>do:
DIDicto>>dictoBuild:
DIDicto>>dictoRun:
DIDicto>>dictoAll:
[ DIDicto new dictoAll: input ] in DIWebServiceAPI>>getRun
BlockClosure>>on:do:
DIWebServiceAPI>>getRun
DIWebServiceHandler>>post
DIWebServiceHandler(ZnRestCall)>>execute
[ call execute ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
BlockClosure>>on:do:
ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
[ self execute: call ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
BlockClosure>>on:do:
ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ :delegate | delegate handleRequest: request ] ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateRequest:do:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
[ self authenticateAndDelegateRequest: request ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
BlockClosure>>on:do:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequest:
ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeOneRequestResponseOn:
[ self executeOneRequestResponseOn: stream ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ 
p psValueAt: index put: anObject.
aBlock value ] in ZnCurrentServer(DynamicVariable)>>value:during:
BlockClosure>>ensure:
ZnCurrentServer(DynamicVariable)>>value:during:
ZnCurrentServer class(DynamicVariable class)>>value:during:
ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
[ self executeRequestResponseLoopOn: stream ] in [ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ] in [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
BlockClosure>>ensure:
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ] in [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
BlockClosure>>ifCurtailed:
[ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Halt
24 February 2015 11:59:09.349246 am

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
NBCogit NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
https://github.com/pharo-project/pharo-vm.git Commit: 4a0d556150d478ff2de3c9624d2f18e6eaa3fa5c Date: 2014-12-18 18:42:53 +0100 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14893

Image: Pharo3.0 [Latest update: #30863]

DIUtil class>>saveString:ToFile:
	Receiver: DIUtil
	Arguments and temporary variables: 
		aString: 	'[{ "subject" : "Dicto\\RuleResult",
	   "argument": "Dicto\\DictoTalk...etc...
		aFileName: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/mai/1424775497/DI...etc...
		stream: 	MultiByteFileStream: '/home/otruffer/dicto/bin/analysis/mai/1424775497/...etc...
		newFileName: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/mai/1424775497/...etc...
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary()
		format: 	2
		layout: 	a FixedLayout
		instanceVariables: 	#()
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#DIUtil
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Dicto-var-util'
		traitComposition: 	{}
		localSelectors: 	nil


DITestGroup>>build
	Receiver: a DITestGroup
	Arguments and temporary variables: 

	Receiver's instance variables: 
		rules: 	an OrderedCollection(RuleResult cannot depend on DictoTalker DictoTalker...etc...
		adapter: 	a DIPhpDependencies
		runCommandText: 	'#!/bin/bash
type -P hhvm &>/dev/null && hhvm /home/otruffer/di...etc...
		testSpecification: 	'[{ "subject" : "Dicto\\RuleResult",
	   "argument": "Dicto\...etc...
		adapterID: 	'DIPhpDependencies'
		resultFile: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/mai/1424775497/D...etc...
		specificationFile: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/mai/14247...etc...
		commandFile: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/mai/1424775497/...etc...


[ :testGroup | testGroup build ] in DIDicto>>dictoBuild:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = ...etc...
		adapterTestGroups: 	a Dictionary(DIGrepFileContent->a DITestGroup DIJMeterLoadTe...etc...
		testGroup: 	a DITestGroup
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424775478'
		singleShotTask: 	false


Array(SequenceableCollection)>>do:
	Receiver: an Array(a DITestGroup a DITestGroup a DITestGroup a DITestGroup a DITestGroup)
	Arguments and temporary variables: 
		aBlock: 	[ :testGroup | testGroup build ]
		index: 	4
	Receiver's instance variables: 
an Array(a DITestGroup a DITestGroup a DITestGroup a DITestGroup a DITestGroup)

DIDicto>>dictoBuild:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = ...etc...
		adapterTestGroups: 	a Dictionary(DIGrepFileContent->a DITestGroup DIJMeterLoadTe...etc...
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424775478'
		singleShotTask: 	false


DIDicto>>dictoRun:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = ...etc...
		adapterTestGroups: 	nil
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424775478'
		singleShotTask: 	false


DIDicto>>dictoAll:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = ...etc...
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424775478'
		singleShotTask: 	false


[ DIDicto new dictoAll: input ] in DIWebServiceAPI>>getRun
	Receiver: a DIWebServiceAPI
	Arguments and temporary variables: 
		in: 	'/home/otruffer/dicto/bin/analysis/mai/dicto.rules'
		input: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = PhpCl...etc...
		rulesFailed: 	nil
		rulesTotal: 	nil
	Receiver's instance variables: 
		request: 	nil
		response: 	nil
		variables: 	nil
		delegate: 	nil
		principal: 	nil
		credentials: 	nil


BlockClosure>>on:do:
	Receiver: [ DIDicto new dictoAll: input ]
	Arguments and temporary variables: 
		exception: 	DIException
		handlerAction: 	[ :ex | ^ self error: ex description ]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	DIWebServiceAPI>>getRun
		startpc: 	138
		numArgs: 	0


DIWebServiceAPI>>getRun
	Receiver: a DIWebServiceAPI
	Arguments and temporary variables: 
		in: 	'/home/otruffer/dicto/bin/analysis/mai/dicto.rules'
		input: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = PhpCl...etc...
		rulesFailed: 	nil
		rulesTotal: 	nil
	Receiver's instance variables: 
		request: 	nil
		response: 	nil
		variables: 	nil
		delegate: 	nil
		principal: 	nil
		credentials: 	nil


DIWebServiceHandler>>post
	Receiver: a DIWebServiceHandler
	Arguments and temporary variables: 
		api: 	a DIWebServiceAPI
	Receiver's instance variables: 
		request: 	a ZnRequest(POST /mai/run)
		response: 	nil
		variables: 	an OrderedCollection('mai' 'run')
		delegate: 	a ZnJSONRestServerDelegate
		principal: 	nil
		credentials: 	nil
		dicto: 	a DIDicto


DIWebServiceHandler(ZnRestCall)>>execute
	Receiver: a DIWebServiceHandler
	Arguments and temporary variables: 

	Receiver's instance variables: 
		request: 	a ZnRequest(POST /mai/run)
		response: 	nil
		variables: 	an OrderedCollection('mai' 'run')
		delegate: 	a ZnJSONRestServerDelegate
		principal: 	nil
		credentials: 	nil
		dicto: 	a DIDicto


[ call execute ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


BlockClosure>>on:do:
	Receiver: [ call execute ]
	Arguments and temporary variables: 
		exception: 	ZnRestCallUnauthorized
		handlerAction: 	[ :exception | self unauthorized: exception request ]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
		startpc: 	38
		numArgs: 	0


ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


[ self execute: call ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /mai/run)
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


BlockClosure>>on:do:
	Receiver: [ self execute: call ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :exception | 
request server debugMode
	ifTrue: [ exception pa...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
		startpc: 	99
		numArgs: 	0


ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /mai/run)
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ :delegate | delegate handleRequest: request ] ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /mai/run)
		delegate: 	a ZnJSONRestServerDelegate
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateRequest:do:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /mai/run)
		block: 	[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ ...etc...
		authenticator: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /mai/run)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


[ self authenticateAndDelegateRequest: request ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /mai/run)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


BlockClosure>>on:do:
	Receiver: [ self authenticateAndDelegateRequest: request ]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :exception | 
self debugMode
	ifTrue: [ exception pass ]
	ifFa...etc...
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequ...etc...
		startpc: 	58
		numArgs: 	0


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /mai/run)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /mai/run)
		response: 	nil
		initialMilliseconds: 	278301
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeOneRequestResponseOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		stream: 	a ZdcSocketStream
		request: 	a ZnRequest(POST /mai/run)
		response: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


[ self executeOneRequestResponseOn: stream ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		stream: 	a ZdcSocketStream
		request: 	nil
		response: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


[ 
p psValueAt: index put: anObject.
aBlock value ] in ZnCurrentServer(DynamicVariable)>>value:during:
	Receiver: a ZnCurrentServer
	Arguments and temporary variables: 
		anObject: 	a ZnManagingMultiThreadedServer(running 8010)
		aBlock: 	[ self executeOneRequestResponseOn: stream ]
		p: 	a Process in nil
		oldValue: 	nil
	Receiver's instance variables: 
		index: 	5


BlockClosure>>ensure:
	Receiver: [ 
p psValueAt: index put: anObject.
aBlock value ]
	Arguments and temporary variables: 
		aBlock: 	[ p psValueAt: index put: oldValue ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ZnCurrentServer(DynamicVariable)>>value:during:
		startpc: 	62
		numArgs: 	0


ZnCurrentServer(DynamicVariable)>>value:during:
	Receiver: a ZnCurrentServer
	Arguments and temporary variables: 
		anObject: 	a ZnManagingMultiThreadedServer(running 8010)
		aBlock: 	[ self executeOneRequestResponseOn: stream ]
		p: 	a Process in nil
		oldValue: 	nil
	Receiver's instance variables: 
		index: 	5


ZnCurrentServer class(DynamicVariable class)>>value:during:
	Receiver: ZnCurrentServer
	Arguments and temporary variables: 
		anObject: 	a ZnManagingMultiThreadedServer(running 8010)
		aBlock: 	[ self executeOneRequestResponseOn: stream ]
	Receiver's instance variables: 
		superclass: 	DynamicVariable
		methodDict: 	a MethodDictionary()
		format: 	132
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#ZnCurrentServer
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Zinc-HTTP-Variables'
		traitComposition: 	{}
		localSelectors: 	nil
		hash: 	nil
		soleInstance: 	a ZnCurrentServer


ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		stream: 	a ZdcSocketStream
		request: 	nil
		response: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


[ self executeRequestResponseLoopOn: stream ] in [ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ] in [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		listeningSocket: 	a Socket[waitingForConnection]
		stream: 	a ZdcSocketStream
		socket: 	a Socket[connected]
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


BlockClosure>>ensure:
	Receiver: [ self executeRequestResponseLoopOn: stream ]
	Arguments and temporary variables: 
		aBlock: 	[ 
self log debug: 'Closing stream'.
self closeSocketStream: stream ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		se...etc...
		startpc: 	118
		numArgs: 	0


[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ] in [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		listeningSocket: 	a Socket[waitingForConnection]
		stream: 	a ZdcSocketStream
		socket: 	a Socket[connected]
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


BlockClosure>>ifCurtailed:
	Receiver: [ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing st...etc...
	Arguments and temporary variables: 
		aBlock: 	[ 
self log debug: 'Destroying socket'.
socket destroy ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	[ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
	...etc...
		startpc: 	113
		numArgs: 	0


[ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		listeningSocket: 	a Socket[waitingForConnection]
		stream: 	a ZdcSocketStream
		socket: 	a Socket[connected]
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnec...etc...
		startpc: 	108
		numArgs: 	0



--- The full stack ---
DIUtil class>>saveString:ToFile:
DITestGroup>>build
[ :testGroup | testGroup build ] in DIDicto>>dictoBuild:
Array(SequenceableCollection)>>do:
DIDicto>>dictoBuild:
DIDicto>>dictoRun:
DIDicto>>dictoAll:
[ DIDicto new dictoAll: input ] in DIWebServiceAPI>>getRun
BlockClosure>>on:do:
DIWebServiceAPI>>getRun
DIWebServiceHandler>>post
DIWebServiceHandler(ZnRestCall)>>execute
[ call execute ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
BlockClosure>>on:do:
ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
[ self execute: call ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
BlockClosure>>on:do:
ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ :delegate | delegate handleRequest: request ] ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateRequest:do:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
[ self authenticateAndDelegateRequest: request ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
BlockClosure>>on:do:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequest:
ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeOneRequestResponseOn:
[ self executeOneRequestResponseOn: stream ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
[ 
p psValueAt: index put: anObject.
aBlock value ] in ZnCurrentServer(DynamicVariable)>>value:during:
BlockClosure>>ensure:
ZnCurrentServer(DynamicVariable)>>value:during:
ZnCurrentServer class(DynamicVariable class)>>value:during:
ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
[ self executeRequestResponseLoopOn: stream ] in [ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ] in [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
BlockClosure>>ensure:
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ] in [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
BlockClosure>>ifCurtailed:
[ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Halt
24 February 2015 11:59:17.962406 am

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
NBCogit NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
https://github.com/pharo-project/pharo-vm.git Commit: 4a0d556150d478ff2de3c9624d2f18e6eaa3fa5c Date: 2014-12-18 18:42:53 +0100 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14893

Image: Pharo3.0 [Latest update: #30863]

DIUtil class>>saveString:ToFile:
	Receiver: DIUtil
	Arguments and temporary variables: 
		aString: 	'#!/bin/bash
type -P hhvm &>/dev/null && hhvm /home/otruffer/dicto/bin...etc...
		aFileName: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/mai/1424775497/DI...etc...
		stream: 	MultiByteFileStream: '/home/otruffer/dicto/bin/analysis/mai/1424775497/...etc...
		newFileName: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/mai/1424775497/...etc...
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary()
		format: 	2
		layout: 	a FixedLayout
		instanceVariables: 	#()
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#DIUtil
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Dicto-var-util'
		traitComposition: 	{}
		localSelectors: 	nil


DITestGroup>>build
	Receiver: a DITestGroup
	Arguments and temporary variables: 

	Receiver's instance variables: 
		rules: 	an OrderedCollection(RuleResult cannot depend on DictoTalker DictoTalker...etc...
		adapter: 	a DIPhpDependencies
		runCommandText: 	'#!/bin/bash
type -P hhvm &>/dev/null && hhvm /home/otruffer/di...etc...
		testSpecification: 	'[{ "subject" : "Dicto\\RuleResult",
	   "argument": "Dicto\...etc...
		adapterID: 	'DIPhpDependencies'
		resultFile: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/mai/1424775497/D...etc...
		specificationFile: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/mai/14247...etc...
		commandFile: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/mai/1424775497/...etc...


[ :testGroup | testGroup build ] in DIDicto>>dictoBuild:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = ...etc...
		adapterTestGroups: 	a Dictionary(DIGrepFileContent->a DITestGroup DIJMeterLoadTe...etc...
		testGroup: 	a DITestGroup
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424775478'
		singleShotTask: 	false


Array(SequenceableCollection)>>do:
	Receiver: an Array(a DITestGroup a DITestGroup a DITestGroup a DITestGroup a DITestGroup)
	Arguments and temporary variables: 
		aBlock: 	[ :testGroup | testGroup build ]
		index: 	4
	Receiver's instance variables: 
an Array(a DITestGroup a DITestGroup a DITestGroup a DITestGroup a DITestGroup)

DIDicto>>dictoBuild:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = ...etc...
		adapterTestGroups: 	a Dictionary(DIGrepFileContent->a DITestGroup DIJMeterLoadTe...etc...
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424775478'
		singleShotTask: 	false


DIDicto>>dictoRun:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = ...etc...
		adapterTestGroups: 	nil
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424775478'
		singleShotTask: 	false


DIDicto>>dictoAll:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = ...etc...
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424775478'
		singleShotTask: 	false


[ DIDicto new dictoAll: input ] in DIWebServiceAPI>>getRun
	Receiver: a DIWebServiceAPI
	Arguments and temporary variables: 
		in: 	'/home/otruffer/dicto/bin/analysis/mai/dicto.rules'
		input: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = PhpCl...etc...
		rulesFailed: 	nil
		rulesTotal: 	nil
	Receiver's instance variables: 
		request: 	nil
		response: 	nil
		variables: 	nil
		delegate: 	nil
		principal: 	nil
		credentials: 	nil


BlockClosure>>on:do:
	Receiver: [ DIDicto new dictoAll: input ]
	Arguments and temporary variables: 
		exception: 	DIException
		handlerAction: 	[ :ex | ^ self error: ex description ]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	DIWebServiceAPI>>getRun
		startpc: 	138
		numArgs: 	0


DIWebServiceAPI>>getRun
	Receiver: a DIWebServiceAPI
	Arguments and temporary variables: 
		in: 	'/home/otruffer/dicto/bin/analysis/mai/dicto.rules'
		input: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = PhpCl...etc...
		rulesFailed: 	nil
		rulesTotal: 	nil
	Receiver's instance variables: 
		request: 	nil
		response: 	nil
		variables: 	nil
		delegate: 	nil
		principal: 	nil
		credentials: 	nil


DIWebServiceHandler>>post
	Receiver: a DIWebServiceHandler
	Arguments and temporary variables: 
		api: 	a DIWebServiceAPI
	Receiver's instance variables: 
		request: 	a ZnRequest(POST /mai/run)
		response: 	nil
		variables: 	an OrderedCollection('mai' 'run')
		delegate: 	a ZnJSONRestServerDelegate
		principal: 	nil
		credentials: 	nil
		dicto: 	a DIDicto


DIWebServiceHandler(ZnRestCall)>>execute
	Receiver: a DIWebServiceHandler
	Arguments and temporary variables: 

	Receiver's instance variables: 
		request: 	a ZnRequest(POST /mai/run)
		response: 	nil
		variables: 	an OrderedCollection('mai' 'run')
		delegate: 	a ZnJSONRestServerDelegate
		principal: 	nil
		credentials: 	nil
		dicto: 	a DIDicto


[ call execute ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


BlockClosure>>on:do:
	Receiver: [ call execute ]
	Arguments and temporary variables: 
		exception: 	ZnRestCallUnauthorized
		handlerAction: 	[ :exception | self unauthorized: exception request ]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
		startpc: 	38
		numArgs: 	0


ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


[ self execute: call ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /mai/run)
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


BlockClosure>>on:do:
	Receiver: [ self execute: call ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :exception | 
request server debugMode
	ifTrue: [ exception pa...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
		startpc: 	99
		numArgs: 	0


ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /mai/run)
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ :delegate | delegate handleRequest: request ] ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /mai/run)
		delegate: 	a ZnJSONRestServerDelegate
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateRequest:do:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /mai/run)
		block: 	[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ ...etc...
		authenticator: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /mai/run)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


[ self authenticateAndDelegateRequest: request ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /mai/run)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


BlockClosure>>on:do:
	Receiver: [ self authenticateAndDelegateRequest: request ]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :exception | 
self debugMode
	ifTrue: [ exception pass ]
	ifFa...etc...
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequ...etc...
		startpc: 	58
		numArgs: 	0


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /mai/run)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /mai/run)
		response: 	nil
		initialMilliseconds: 	278301
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeOneRequestResponseOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		stream: 	a ZdcSocketStream
		request: 	a ZnRequest(POST /mai/run)
		response: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


[ self executeOneRequestResponseOn: stream ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		stream: 	a ZdcSocketStream
		request: 	nil
		response: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


[ 
p psValueAt: index put: anObject.
aBlock value ] in ZnCurrentServer(DynamicVariable)>>value:during:
	Receiver: a ZnCurrentServer
	Arguments and temporary variables: 
		anObject: 	a ZnManagingMultiThreadedServer(running 8010)
		aBlock: 	[ self executeOneRequestResponseOn: stream ]
		p: 	a Process in nil
		oldValue: 	nil
	Receiver's instance variables: 
		index: 	5


BlockClosure>>ensure:
	Receiver: [ 
p psValueAt: index put: anObject.
aBlock value ]
	Arguments and temporary variables: 
		aBlock: 	[ p psValueAt: index put: oldValue ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ZnCurrentServer(DynamicVariable)>>value:during:
		startpc: 	62
		numArgs: 	0


ZnCurrentServer(DynamicVariable)>>value:during:
	Receiver: a ZnCurrentServer
	Arguments and temporary variables: 
		anObject: 	a ZnManagingMultiThreadedServer(running 8010)
		aBlock: 	[ self executeOneRequestResponseOn: stream ]
		p: 	a Process in nil
		oldValue: 	nil
	Receiver's instance variables: 
		index: 	5


ZnCurrentServer class(DynamicVariable class)>>value:during:
	Receiver: ZnCurrentServer
	Arguments and temporary variables: 
		anObject: 	a ZnManagingMultiThreadedServer(running 8010)
		aBlock: 	[ self executeOneRequestResponseOn: stream ]
	Receiver's instance variables: 
		superclass: 	DynamicVariable
		methodDict: 	a MethodDictionary()
		format: 	132
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#ZnCurrentServer
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Zinc-HTTP-Variables'
		traitComposition: 	{}
		localSelectors: 	nil
		hash: 	nil
		soleInstance: 	a ZnCurrentServer


ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		stream: 	a ZdcSocketStream
		request: 	nil
		response: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


[ self executeRequestResponseLoopOn: stream ] in [ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ] in [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		listeningSocket: 	a Socket[waitingForConnection]
		stream: 	a ZdcSocketStream
		socket: 	a Socket[connected]
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


BlockClosure>>ensure:
	Receiver: [ self executeRequestResponseLoopOn: stream ]
	Arguments and temporary variables: 
		aBlock: 	[ 
self log debug: 'Closing stream'.
self closeSocketStream: stream ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		se...etc...
		startpc: 	118
		numArgs: 	0


[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ] in [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		listeningSocket: 	a Socket[waitingForConnection]
		stream: 	a ZdcSocketStream
		socket: 	a Socket[connected]
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


BlockClosure>>ifCurtailed:
	Receiver: [ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing st...etc...
	Arguments and temporary variables: 
		aBlock: 	[ 
self log debug: 'Destroying socket'.
socket destroy ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	[ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
	...etc...
		startpc: 	113
		numArgs: 	0


[ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		listeningSocket: 	a Socket[waitingForConnection]
		stream: 	a ZdcSocketStream
		socket: 	a Socket[connected]
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnec...etc...
		startpc: 	108
		numArgs: 	0



--- The full stack ---
DIUtil class>>saveString:ToFile:
DITestGroup>>build
[ :testGroup | testGroup build ] in DIDicto>>dictoBuild:
Array(SequenceableCollection)>>do:
DIDicto>>dictoBuild:
DIDicto>>dictoRun:
DIDicto>>dictoAll:
[ DIDicto new dictoAll: input ] in DIWebServiceAPI>>getRun
BlockClosure>>on:do:
DIWebServiceAPI>>getRun
DIWebServiceHandler>>post
DIWebServiceHandler(ZnRestCall)>>execute
[ call execute ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
BlockClosure>>on:do:
ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
[ self execute: call ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
BlockClosure>>on:do:
ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ :delegate | delegate handleRequest: request ] ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateRequest:do:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
[ self authenticateAndDelegateRequest: request ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
BlockClosure>>on:do:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequest:
ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeOneRequestResponseOn:
[ self executeOneRequestResponseOn: stream ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
[ 
p psValueAt: index put: anObject.
aBlock value ] in ZnCurrentServer(DynamicVariable)>>value:during:
BlockClosure>>ensure:
ZnCurrentServer(DynamicVariable)>>value:during:
ZnCurrentServer class(DynamicVariable class)>>value:during:
ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
[ self executeRequestResponseLoopOn: stream ] in [ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ] in [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
BlockClosure>>ensure:
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ] in [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
BlockClosure>>ifCurtailed:
[ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Halt
24 February 2015 12:00:47.894144 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
NBCogit NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
https://github.com/pharo-project/pharo-vm.git Commit: 4a0d556150d478ff2de3c9624d2f18e6eaa3fa5c Date: 2014-12-18 18:42:53 +0100 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14893

Image: Pharo3.0 [Latest update: #30863]

DIUtil class>>saveString:ToFile:
	Receiver: DIUtil
	Arguments and temporary variables: 
		aString: 	'<results id="1424775497"><rules><rule id="1" failed="true" value="Rul...etc...
		aFileName: 	'/home/otruffer/dicto/bin/analysis/mai/results.xml'
		stream: 	MultiByteFileStream: '/home/otruffer/dicto/bin/analysis/mai/results.xml...etc...
		newFileName: 	'/home/otruffer/dicto/bin/analysis/mai/results.xml'
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary()
		format: 	2
		layout: 	a FixedLayout
		instanceVariables: 	#()
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#DIUtil
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Dicto-var-util'
		traitComposition: 	{}
		localSelectors: 	nil


DIXMLExporter>>export:to:
	Receiver: a DIXMLExporter
	Arguments and temporary variables: 
		testSuites: 	a Dictionary(DIGrepFileContent->a DITestGroup DIJMeterLoadTest->a D...etc...
		anXMLFile: 	'/home/otruffer/dicto/bin/analysis/mai/results.xml'
		out: 	'<results id="1424775497"><rules><rule id="1" failed="true" value="RuleRes...etc...
	Receiver's instance variables: 
a DIXMLExporter

DIDicto>>_exportTests:to:withExporter:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		testSuites: 	a Dictionary(DIGrepFileContent->a DITestGroup DIJMeterLoadTest->a D...etc...
		aFile: 	nil
		anExporterClass: 	DIXMLExporter
		ex: 	a DIXMLExporter
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424775478'
		singleShotTask: 	false


DIDicto>>dictoCheck:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = ...etc...
		adapterTestGroups: 	a Dictionary(DIGrepFileContent->a DITestGroup DIJMeterLoadTe...etc...
		exportFormat: 	nil
		xml: 	nil
		json: 	nil
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424775478'
		singleShotTask: 	false


DIDicto>>dictoAll:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = ...etc...
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424775478'
		singleShotTask: 	false


[ DIDicto new dictoAll: input ] in DIWebServiceAPI>>getRun
	Receiver: a DIWebServiceAPI
	Arguments and temporary variables: 
		in: 	'/home/otruffer/dicto/bin/analysis/mai/dicto.rules'
		input: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = PhpCl...etc...
		rulesFailed: 	nil
		rulesTotal: 	nil
	Receiver's instance variables: 
		request: 	nil
		response: 	nil
		variables: 	nil
		delegate: 	nil
		principal: 	nil
		credentials: 	nil


BlockClosure>>on:do:
	Receiver: [ DIDicto new dictoAll: input ]
	Arguments and temporary variables: 
		exception: 	DIException
		handlerAction: 	[ :ex | ^ self error: ex description ]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	DIWebServiceAPI>>getRun
		startpc: 	138
		numArgs: 	0


DIWebServiceAPI>>getRun
	Receiver: a DIWebServiceAPI
	Arguments and temporary variables: 
		in: 	'/home/otruffer/dicto/bin/analysis/mai/dicto.rules'
		input: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = PhpCl...etc...
		rulesFailed: 	nil
		rulesTotal: 	nil
	Receiver's instance variables: 
		request: 	nil
		response: 	nil
		variables: 	nil
		delegate: 	nil
		principal: 	nil
		credentials: 	nil


DIWebServiceHandler>>post
	Receiver: a DIWebServiceHandler
	Arguments and temporary variables: 
		api: 	a DIWebServiceAPI
	Receiver's instance variables: 
		request: 	a ZnRequest(POST /mai/run)
		response: 	nil
		variables: 	an OrderedCollection('mai' 'run')
		delegate: 	a ZnJSONRestServerDelegate
		principal: 	nil
		credentials: 	nil
		dicto: 	a DIDicto


DIWebServiceHandler(ZnRestCall)>>execute
	Receiver: a DIWebServiceHandler
	Arguments and temporary variables: 

	Receiver's instance variables: 
		request: 	a ZnRequest(POST /mai/run)
		response: 	nil
		variables: 	an OrderedCollection('mai' 'run')
		delegate: 	a ZnJSONRestServerDelegate
		principal: 	nil
		credentials: 	nil
		dicto: 	a DIDicto


[ call execute ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


BlockClosure>>on:do:
	Receiver: [ call execute ]
	Arguments and temporary variables: 
		exception: 	ZnRestCallUnauthorized
		handlerAction: 	[ :exception | self unauthorized: exception request ]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
		startpc: 	38
		numArgs: 	0


ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


[ self execute: call ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /mai/run)
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


BlockClosure>>on:do:
	Receiver: [ self execute: call ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :exception | 
request server debugMode
	ifTrue: [ exception pa...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
		startpc: 	99
		numArgs: 	0


ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /mai/run)
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ :delegate | delegate handleRequest: request ] ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /mai/run)
		delegate: 	a ZnJSONRestServerDelegate
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateRequest:do:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /mai/run)
		block: 	[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ ...etc...
		authenticator: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /mai/run)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


[ self authenticateAndDelegateRequest: request ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /mai/run)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


BlockClosure>>on:do:
	Receiver: [ self authenticateAndDelegateRequest: request ]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :exception | 
self debugMode
	ifTrue: [ exception pass ]
	ifFa...etc...
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequ...etc...
		startpc: 	58
		numArgs: 	0


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /mai/run)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /mai/run)
		response: 	nil
		initialMilliseconds: 	278301
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeOneRequestResponseOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		stream: 	a ZdcSocketStream
		request: 	a ZnRequest(POST /mai/run)
		response: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


[ self executeOneRequestResponseOn: stream ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		stream: 	a ZdcSocketStream
		request: 	nil
		response: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


[ 
p psValueAt: index put: anObject.
aBlock value ] in ZnCurrentServer(DynamicVariable)>>value:during:
	Receiver: a ZnCurrentServer
	Arguments and temporary variables: 
		anObject: 	a ZnManagingMultiThreadedServer(running 8010)
		aBlock: 	[ self executeOneRequestResponseOn: stream ]
		p: 	a Process in nil
		oldValue: 	nil
	Receiver's instance variables: 
		index: 	5


BlockClosure>>ensure:
	Receiver: [ 
p psValueAt: index put: anObject.
aBlock value ]
	Arguments and temporary variables: 
		aBlock: 	[ p psValueAt: index put: oldValue ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ZnCurrentServer(DynamicVariable)>>value:during:
		startpc: 	62
		numArgs: 	0


ZnCurrentServer(DynamicVariable)>>value:during:
	Receiver: a ZnCurrentServer
	Arguments and temporary variables: 
		anObject: 	a ZnManagingMultiThreadedServer(running 8010)
		aBlock: 	[ self executeOneRequestResponseOn: stream ]
		p: 	a Process in nil
		oldValue: 	nil
	Receiver's instance variables: 
		index: 	5


ZnCurrentServer class(DynamicVariable class)>>value:during:
	Receiver: ZnCurrentServer
	Arguments and temporary variables: 
		anObject: 	a ZnManagingMultiThreadedServer(running 8010)
		aBlock: 	[ self executeOneRequestResponseOn: stream ]
	Receiver's instance variables: 
		superclass: 	DynamicVariable
		methodDict: 	a MethodDictionary()
		format: 	132
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#ZnCurrentServer
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Zinc-HTTP-Variables'
		traitComposition: 	{}
		localSelectors: 	nil
		hash: 	nil
		soleInstance: 	a ZnCurrentServer


ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		stream: 	a ZdcSocketStream
		request: 	nil
		response: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


[ self executeRequestResponseLoopOn: stream ] in [ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ] in [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		listeningSocket: 	a Socket[waitingForConnection]
		stream: 	a ZdcSocketStream
		socket: 	a Socket[connected]
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


BlockClosure>>ensure:
	Receiver: [ self executeRequestResponseLoopOn: stream ]
	Arguments and temporary variables: 
		aBlock: 	[ 
self log debug: 'Closing stream'.
self closeSocketStream: stream ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		se...etc...
		startpc: 	118
		numArgs: 	0


[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ] in [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		listeningSocket: 	a Socket[waitingForConnection]
		stream: 	a ZdcSocketStream
		socket: 	a Socket[connected]
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


BlockClosure>>ifCurtailed:
	Receiver: [ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing st...etc...
	Arguments and temporary variables: 
		aBlock: 	[ 
self log debug: 'Destroying socket'.
socket destroy ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	[ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
	...etc...
		startpc: 	113
		numArgs: 	0


[ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		listeningSocket: 	a Socket[waitingForConnection]
		stream: 	a ZdcSocketStream
		socket: 	a Socket[connected]
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnec...etc...
		startpc: 	108
		numArgs: 	0



--- The full stack ---
DIUtil class>>saveString:ToFile:
DIXMLExporter>>export:to:
DIDicto>>_exportTests:to:withExporter:
DIDicto>>dictoCheck:
DIDicto>>dictoAll:
[ DIDicto new dictoAll: input ] in DIWebServiceAPI>>getRun
BlockClosure>>on:do:
DIWebServiceAPI>>getRun
DIWebServiceHandler>>post
DIWebServiceHandler(ZnRestCall)>>execute
[ call execute ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
BlockClosure>>on:do:
ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
[ self execute: call ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
BlockClosure>>on:do:
ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ :delegate | delegate handleRequest: request ] ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateRequest:do:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
[ self authenticateAndDelegateRequest: request ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
BlockClosure>>on:do:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequest:
ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeOneRequestResponseOn:
[ self executeOneRequestResponseOn: stream ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
[ 
p psValueAt: index put: anObject.
aBlock value ] in ZnCurrentServer(DynamicVariable)>>value:during:
BlockClosure>>ensure:
ZnCurrentServer(DynamicVariable)>>value:during:
ZnCurrentServer class(DynamicVariable class)>>value:during:
ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
[ self executeRequestResponseLoopOn: stream ] in [ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ] in [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
BlockClosure>>ensure:
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ] in [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
BlockClosure>>ifCurtailed:
[ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Halt
24 February 2015 12:00:52.652564 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
NBCogit NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
https://github.com/pharo-project/pharo-vm.git Commit: 4a0d556150d478ff2de3c9624d2f18e6eaa3fa5c Date: 2014-12-18 18:42:53 +0100 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14893

Image: Pharo3.0 [Latest update: #30863]

DIUtil class>>saveString:ToFile:
	Receiver: DIUtil
	Arguments and temporary variables: 
		aString: 	'{

	"results" : {

		"id" : "1424775497",

		"rules" : {

			"1" : {
...etc...
		aFileName: 	'/home/otruffer/dicto/bin/analysis/mai/results.json'
		stream: 	MultiByteFileStream: '/home/otruffer/dicto/bin/analysis/mai/results.jso...etc...
		newFileName: 	'/home/otruffer/dicto/bin/analysis/mai/results.json'
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary()
		format: 	2
		layout: 	a FixedLayout
		instanceVariables: 	#()
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#DIUtil
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Dicto-var-util'
		traitComposition: 	{}
		localSelectors: 	nil


DIJSONExporter>>export:to:
	Receiver: a DIJSONExporter
	Arguments and temporary variables: 
		jsonSubRules: 	a Dictionary('3001'->a Dictionary('errors'->an OrderedCollection(...etc...
		testSuites: 	a Dictionary(DIGrepFileContent->a DITestGroup DIJMeterLoadTest->a D...etc...
		aFile: 	'/home/otruffer/dicto/bin/analysis/mai/results.json'
		jsonRules: 	a Dictionary('1'->a Dictionary('failed'->'true' 'subrules'->a Dictio...etc...
		outDictionary: 	a Dictionary('results'->a Dictionary('id'->'1424775497' 'rules'-...etc...
		outString: 	'{

	"results" : {

		"id" : "1424775497",

		"rules" : {

			"1" : ...etc...
		analysisID: 	'1424775497'
	Receiver's instance variables: 
a DIJSONExporter

DIDicto>>_exportTests:to:withExporter:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		testSuites: 	a Dictionary(DIGrepFileContent->a DITestGroup DIJMeterLoadTest->a D...etc...
		aFile: 	nil
		anExporterClass: 	DIJSONExporter
		ex: 	a DIJSONExporter
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424775478'
		singleShotTask: 	false


DIDicto>>dictoCheck:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = ...etc...
		adapterTestGroups: 	a Dictionary(DIGrepFileContent->a DITestGroup DIJMeterLoadTe...etc...
		exportFormat: 	nil
		xml: 	'<results id="1424775497"><rules><rule id="1" failed="true" value="RuleRes...etc...
		json: 	nil
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424775478'
		singleShotTask: 	false


DIDicto>>dictoAll:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = ...etc...
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424775478'
		singleShotTask: 	false


[ DIDicto new dictoAll: input ] in DIWebServiceAPI>>getRun
	Receiver: a DIWebServiceAPI
	Arguments and temporary variables: 
		in: 	'/home/otruffer/dicto/bin/analysis/mai/dicto.rules'
		input: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = PhpCl...etc...
		rulesFailed: 	nil
		rulesTotal: 	nil
	Receiver's instance variables: 
		request: 	nil
		response: 	nil
		variables: 	nil
		delegate: 	nil
		principal: 	nil
		credentials: 	nil


BlockClosure>>on:do:
	Receiver: [ DIDicto new dictoAll: input ]
	Arguments and temporary variables: 
		exception: 	DIException
		handlerAction: 	[ :ex | ^ self error: ex description ]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	DIWebServiceAPI>>getRun
		startpc: 	138
		numArgs: 	0


DIWebServiceAPI>>getRun
	Receiver: a DIWebServiceAPI
	Arguments and temporary variables: 
		in: 	'/home/otruffer/dicto/bin/analysis/mai/dicto.rules'
		input: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = PhpCl...etc...
		rulesFailed: 	nil
		rulesTotal: 	nil
	Receiver's instance variables: 
		request: 	nil
		response: 	nil
		variables: 	nil
		delegate: 	nil
		principal: 	nil
		credentials: 	nil


DIWebServiceHandler>>post
	Receiver: a DIWebServiceHandler
	Arguments and temporary variables: 
		api: 	a DIWebServiceAPI
	Receiver's instance variables: 
		request: 	a ZnRequest(POST /mai/run)
		response: 	nil
		variables: 	an OrderedCollection('mai' 'run')
		delegate: 	a ZnJSONRestServerDelegate
		principal: 	nil
		credentials: 	nil
		dicto: 	a DIDicto


DIWebServiceHandler(ZnRestCall)>>execute
	Receiver: a DIWebServiceHandler
	Arguments and temporary variables: 

	Receiver's instance variables: 
		request: 	a ZnRequest(POST /mai/run)
		response: 	nil
		variables: 	an OrderedCollection('mai' 'run')
		delegate: 	a ZnJSONRestServerDelegate
		principal: 	nil
		credentials: 	nil
		dicto: 	a DIDicto


[ call execute ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


BlockClosure>>on:do:
	Receiver: [ call execute ]
	Arguments and temporary variables: 
		exception: 	ZnRestCallUnauthorized
		handlerAction: 	[ :exception | self unauthorized: exception request ]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
		startpc: 	38
		numArgs: 	0


ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


[ self execute: call ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /mai/run)
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


BlockClosure>>on:do:
	Receiver: [ self execute: call ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :exception | 
request server debugMode
	ifTrue: [ exception pa...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
		startpc: 	99
		numArgs: 	0


ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /mai/run)
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ :delegate | delegate handleRequest: request ] ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /mai/run)
		delegate: 	a ZnJSONRestServerDelegate
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateRequest:do:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /mai/run)
		block: 	[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ ...etc...
		authenticator: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /mai/run)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


[ self authenticateAndDelegateRequest: request ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /mai/run)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


BlockClosure>>on:do:
	Receiver: [ self authenticateAndDelegateRequest: request ]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :exception | 
self debugMode
	ifTrue: [ exception pass ]
	ifFa...etc...
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequ...etc...
		startpc: 	58
		numArgs: 	0


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /mai/run)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /mai/run)
		response: 	nil
		initialMilliseconds: 	278301
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeOneRequestResponseOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		stream: 	a ZdcSocketStream
		request: 	a ZnRequest(POST /mai/run)
		response: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


[ self executeOneRequestResponseOn: stream ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		stream: 	a ZdcSocketStream
		request: 	nil
		response: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


[ 
p psValueAt: index put: anObject.
aBlock value ] in ZnCurrentServer(DynamicVariable)>>value:during:
	Receiver: a ZnCurrentServer
	Arguments and temporary variables: 
		anObject: 	a ZnManagingMultiThreadedServer(running 8010)
		aBlock: 	[ self executeOneRequestResponseOn: stream ]
		p: 	a Process in nil
		oldValue: 	nil
	Receiver's instance variables: 
		index: 	5


BlockClosure>>ensure:
	Receiver: [ 
p psValueAt: index put: anObject.
aBlock value ]
	Arguments and temporary variables: 
		aBlock: 	[ p psValueAt: index put: oldValue ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ZnCurrentServer(DynamicVariable)>>value:during:
		startpc: 	62
		numArgs: 	0


ZnCurrentServer(DynamicVariable)>>value:during:
	Receiver: a ZnCurrentServer
	Arguments and temporary variables: 
		anObject: 	a ZnManagingMultiThreadedServer(running 8010)
		aBlock: 	[ self executeOneRequestResponseOn: stream ]
		p: 	a Process in nil
		oldValue: 	nil
	Receiver's instance variables: 
		index: 	5


ZnCurrentServer class(DynamicVariable class)>>value:during:
	Receiver: ZnCurrentServer
	Arguments and temporary variables: 
		anObject: 	a ZnManagingMultiThreadedServer(running 8010)
		aBlock: 	[ self executeOneRequestResponseOn: stream ]
	Receiver's instance variables: 
		superclass: 	DynamicVariable
		methodDict: 	a MethodDictionary()
		format: 	132
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#ZnCurrentServer
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Zinc-HTTP-Variables'
		traitComposition: 	{}
		localSelectors: 	nil
		hash: 	nil
		soleInstance: 	a ZnCurrentServer


ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		stream: 	a ZdcSocketStream
		request: 	nil
		response: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


[ self executeRequestResponseLoopOn: stream ] in [ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ] in [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		listeningSocket: 	a Socket[waitingForConnection]
		stream: 	a ZdcSocketStream
		socket: 	a Socket[connected]
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


BlockClosure>>ensure:
	Receiver: [ self executeRequestResponseLoopOn: stream ]
	Arguments and temporary variables: 
		aBlock: 	[ 
self log debug: 'Closing stream'.
self closeSocketStream: stream ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		se...etc...
		startpc: 	118
		numArgs: 	0


[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ] in [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		listeningSocket: 	a Socket[waitingForConnection]
		stream: 	a ZdcSocketStream
		socket: 	a Socket[connected]
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


BlockClosure>>ifCurtailed:
	Receiver: [ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing st...etc...
	Arguments and temporary variables: 
		aBlock: 	[ 
self log debug: 'Destroying socket'.
socket destroy ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	[ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
	...etc...
		startpc: 	113
		numArgs: 	0


[ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		listeningSocket: 	a Socket[waitingForConnection]
		stream: 	a ZdcSocketStream
		socket: 	a Socket[connected]
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnec...etc...
		startpc: 	108
		numArgs: 	0



--- The full stack ---
DIUtil class>>saveString:ToFile:
DIJSONExporter>>export:to:
DIDicto>>_exportTests:to:withExporter:
DIDicto>>dictoCheck:
DIDicto>>dictoAll:
[ DIDicto new dictoAll: input ] in DIWebServiceAPI>>getRun
BlockClosure>>on:do:
DIWebServiceAPI>>getRun
DIWebServiceHandler>>post
DIWebServiceHandler(ZnRestCall)>>execute
[ call execute ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
BlockClosure>>on:do:
ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
[ self execute: call ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
BlockClosure>>on:do:
ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ :delegate | delegate handleRequest: request ] ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateRequest:do:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
[ self authenticateAndDelegateRequest: request ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
BlockClosure>>on:do:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequest:
ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeOneRequestResponseOn:
[ self executeOneRequestResponseOn: stream ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
[ 
p psValueAt: index put: anObject.
aBlock value ] in ZnCurrentServer(DynamicVariable)>>value:during:
BlockClosure>>ensure:
ZnCurrentServer(DynamicVariable)>>value:during:
ZnCurrentServer class(DynamicVariable class)>>value:during:
ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
[ self executeRequestResponseLoopOn: stream ] in [ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ] in [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
BlockClosure>>ensure:
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ] in [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
BlockClosure>>ifCurtailed:
[ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Halt
24 February 2015 12:01:15.163359 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
NBCogit NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
https://github.com/pharo-project/pharo-vm.git Commit: 4a0d556150d478ff2de3c9624d2f18e6eaa3fa5c Date: 2014-12-18 18:42:53 +0100 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14893

Image: Pharo3.0 [Latest update: #30863]

DIUtil class>>saveString:ToFile:
	Receiver: DIUtil
	Arguments and temporary variables: 
		aString: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = Php...etc...
		aFileName: 	'/home/otruffer/dicto/bin/analysis/mai/dicto.rules'
		stream: 	MultiByteFileStream: '/home/otruffer/dicto/bin/analysis/mai/dicto.rules...etc...
		newFileName: 	'/home/otruffer/dicto/bin/analysis/mai/dicto.rules'
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary()
		format: 	2
		layout: 	a FixedLayout
		instanceVariables: 	#()
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#DIUtil
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Dicto-var-util'
		traitComposition: 	{}
		localSelectors: 	nil


DIDicto>>dictoParse:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = ...etc...
		adapterTestGroups: 	nil
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424775675'
		singleShotTask: 	true


[ dicto dictoParse: text ] in DIWebServiceAPI>>postRules:
	Receiver: a DIWebServiceAPI
	Arguments and temporary variables: 
		dict: 	a Dictionary('rules'->'RuleResult = PhpClass with name:"Dicto\\RuleResult...etc...
		dicto: 	a DIDicto
		text: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = PhpCla...etc...
	Receiver's instance variables: 
		request: 	nil
		response: 	nil
		variables: 	nil
		delegate: 	nil
		principal: 	nil
		credentials: 	nil


BlockClosure>>on:do:
	Receiver: [ dicto dictoParse: text ]
	Arguments and temporary variables: 
		exception: 	DISyntaxErrorException
		handlerAction: 	[ :ex | ^ self error: 'syntax error' ]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	DIWebServiceAPI>>postRules:
		startpc: 	58
		numArgs: 	0


DIWebServiceAPI>>postRules:
	Receiver: a DIWebServiceAPI
	Arguments and temporary variables: 
		dict: 	a Dictionary('rules'->'RuleResult = PhpClass with name:"Dicto\\RuleResult...etc...
		dicto: 	a DIDicto
		text: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = PhpCla...etc...
	Receiver's instance variables: 
		request: 	nil
		response: 	nil
		variables: 	nil
		delegate: 	nil
		principal: 	nil
		credentials: 	nil


DIWebServiceHandler>>post
	Receiver: a DIWebServiceHandler
	Arguments and temporary variables: 
		api: 	a DIWebServiceAPI
	Receiver's instance variables: 
		request: 	a ZnRequest(POST /mai/rules)
		response: 	nil
		variables: 	an OrderedCollection('mai' 'rules')
		delegate: 	a ZnJSONRestServerDelegate
		principal: 	nil
		credentials: 	nil
		dicto: 	a DIDicto


DIWebServiceHandler(ZnRestCall)>>execute
	Receiver: a DIWebServiceHandler
	Arguments and temporary variables: 

	Receiver's instance variables: 
		request: 	a ZnRequest(POST /mai/rules)
		response: 	nil
		variables: 	an OrderedCollection('mai' 'rules')
		delegate: 	a ZnJSONRestServerDelegate
		principal: 	nil
		credentials: 	nil
		dicto: 	a DIDicto


[ call execute ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


BlockClosure>>on:do:
	Receiver: [ call execute ]
	Arguments and temporary variables: 
		exception: 	ZnRestCallUnauthorized
		handlerAction: 	[ :exception | self unauthorized: exception request ]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
		startpc: 	38
		numArgs: 	0


ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


[ self execute: call ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /mai/rules)
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


BlockClosure>>on:do:
	Receiver: [ self execute: call ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :exception | 
request server debugMode
	ifTrue: [ exception pa...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
		startpc: 	99
		numArgs: 	0


ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /mai/rules)
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ :delegate | delegate handleRequest: request ] ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /mai/rules)
		delegate: 	a ZnJSONRestServerDelegate
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateRequest:do:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /mai/rules)
		block: 	[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ ...etc...
		authenticator: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /mai/rules)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


[ self authenticateAndDelegateRequest: request ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /mai/rules)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


BlockClosure>>on:do:
	Receiver: [ self authenticateAndDelegateRequest: request ]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :exception | 
self debugMode
	ifTrue: [ exception pass ]
	ifFa...etc...
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequ...etc...
		startpc: 	58
		numArgs: 	0


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /mai/rules)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /mai/rules)
		response: 	nil
		initialMilliseconds: 	475455
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeOneRequestResponseOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		stream: 	a ZdcSocketStream
		request: 	a ZnRequest(POST /mai/rules)
		response: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


[ self executeOneRequestResponseOn: stream ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		stream: 	a ZdcSocketStream
		request: 	nil
		response: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


[ 
p psValueAt: index put: anObject.
aBlock value ] in ZnCurrentServer(DynamicVariable)>>value:during:
	Receiver: a ZnCurrentServer
	Arguments and temporary variables: 
		anObject: 	a ZnManagingMultiThreadedServer(running 8010)
		aBlock: 	[ self executeOneRequestResponseOn: stream ]
		p: 	a Process in nil
		oldValue: 	nil
	Receiver's instance variables: 
		index: 	5


BlockClosure>>ensure:
	Receiver: [ 
p psValueAt: index put: anObject.
aBlock value ]
	Arguments and temporary variables: 
		aBlock: 	[ p psValueAt: index put: oldValue ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ZnCurrentServer(DynamicVariable)>>value:during:
		startpc: 	62
		numArgs: 	0


ZnCurrentServer(DynamicVariable)>>value:during:
	Receiver: a ZnCurrentServer
	Arguments and temporary variables: 
		anObject: 	a ZnManagingMultiThreadedServer(running 8010)
		aBlock: 	[ self executeOneRequestResponseOn: stream ]
		p: 	a Process in nil
		oldValue: 	nil
	Receiver's instance variables: 
		index: 	5


ZnCurrentServer class(DynamicVariable class)>>value:during:
	Receiver: ZnCurrentServer
	Arguments and temporary variables: 
		anObject: 	a ZnManagingMultiThreadedServer(running 8010)
		aBlock: 	[ self executeOneRequestResponseOn: stream ]
	Receiver's instance variables: 
		superclass: 	DynamicVariable
		methodDict: 	a MethodDictionary()
		format: 	132
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#ZnCurrentServer
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Zinc-HTTP-Variables'
		traitComposition: 	{}
		localSelectors: 	nil
		hash: 	nil
		soleInstance: 	a ZnCurrentServer


ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		stream: 	a ZdcSocketStream
		request: 	nil
		response: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


[ self executeRequestResponseLoopOn: stream ] in [ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ] in [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		listeningSocket: 	a Socket[waitingForConnection]
		stream: 	a ZdcSocketStream
		socket: 	a Socket[connected]
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


BlockClosure>>ensure:
	Receiver: [ self executeRequestResponseLoopOn: stream ]
	Arguments and temporary variables: 
		aBlock: 	[ 
self log debug: 'Closing stream'.
self closeSocketStream: stream ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		se...etc...
		startpc: 	118
		numArgs: 	0


[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ] in [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		listeningSocket: 	a Socket[waitingForConnection]
		stream: 	a ZdcSocketStream
		socket: 	a Socket[connected]
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


BlockClosure>>ifCurtailed:
	Receiver: [ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing st...etc...
	Arguments and temporary variables: 
		aBlock: 	[ 
self log debug: 'Destroying socket'.
socket destroy ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	[ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
	...etc...
		startpc: 	113
		numArgs: 	0


[ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		listeningSocket: 	a Socket[waitingForConnection]
		stream: 	a ZdcSocketStream
		socket: 	a Socket[connected]
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnec...etc...
		startpc: 	108
		numArgs: 	0



--- The full stack ---
DIUtil class>>saveString:ToFile:
DIDicto>>dictoParse:
[ dicto dictoParse: text ] in DIWebServiceAPI>>postRules:
BlockClosure>>on:do:
DIWebServiceAPI>>postRules:
DIWebServiceHandler>>post
DIWebServiceHandler(ZnRestCall)>>execute
[ call execute ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
BlockClosure>>on:do:
ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
[ self execute: call ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
BlockClosure>>on:do:
ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ :delegate | delegate handleRequest: request ] ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateRequest:do:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
[ self authenticateAndDelegateRequest: request ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
BlockClosure>>on:do:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequest:
ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeOneRequestResponseOn:
[ self executeOneRequestResponseOn: stream ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
[ 
p psValueAt: index put: anObject.
aBlock value ] in ZnCurrentServer(DynamicVariable)>>value:during:
BlockClosure>>ensure:
ZnCurrentServer(DynamicVariable)>>value:during:
ZnCurrentServer class(DynamicVariable class)>>value:during:
ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
[ self executeRequestResponseLoopOn: stream ] in [ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ] in [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
BlockClosure>>ensure:
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ] in [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
BlockClosure>>ifCurtailed:
[ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Halt
24 February 2015 12:01:19.158698 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
NBCogit NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
https://github.com/pharo-project/pharo-vm.git Commit: 4a0d556150d478ff2de3c9624d2f18e6eaa3fa5c Date: 2014-12-18 18:42:53 +0100 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14893

Image: Pharo3.0 [Latest update: #30863]

DIUtil class>>saveString:ToFile:
	Receiver: DIUtil
	Arguments and temporary variables: 
		aString: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = Php...etc...
		aFileName: 	'/home/otruffer/dicto/bin/analysis/mai/dicto.rules'
		stream: 	MultiByteFileStream: '/home/otruffer/dicto/bin/analysis/mai/dicto.rules...etc...
		newFileName: 	'/home/otruffer/dicto/bin/analysis/mai/dicto.rules'
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary()
		format: 	2
		layout: 	a FixedLayout
		instanceVariables: 	#()
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#DIUtil
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Dicto-var-util'
		traitComposition: 	{}
		localSelectors: 	nil


DIDicto>>dictoParse:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = ...etc...
		adapterTestGroups: 	nil
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424775679'
		singleShotTask: 	false


DIDicto>>dictoBuild:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = ...etc...
		adapterTestGroups: 	nil
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424775679'
		singleShotTask: 	false


DIDicto>>dictoRun:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = ...etc...
		adapterTestGroups: 	nil
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424775679'
		singleShotTask: 	false


DIDicto>>dictoAll:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = ...etc...
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424775679'
		singleShotTask: 	false


[ DIDicto new dictoAll: input ] in DIWebServiceAPI>>getRun
	Receiver: a DIWebServiceAPI
	Arguments and temporary variables: 
		in: 	'/home/otruffer/dicto/bin/analysis/mai/dicto.rules'
		input: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = PhpCl...etc...
		rulesFailed: 	nil
		rulesTotal: 	nil
	Receiver's instance variables: 
		request: 	nil
		response: 	nil
		variables: 	nil
		delegate: 	nil
		principal: 	nil
		credentials: 	nil


BlockClosure>>on:do:
	Receiver: [ DIDicto new dictoAll: input ]
	Arguments and temporary variables: 
		exception: 	DIException
		handlerAction: 	[ :ex | ^ self error: ex description ]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	DIWebServiceAPI>>getRun
		startpc: 	138
		numArgs: 	0


DIWebServiceAPI>>getRun
	Receiver: a DIWebServiceAPI
	Arguments and temporary variables: 
		in: 	'/home/otruffer/dicto/bin/analysis/mai/dicto.rules'
		input: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = PhpCl...etc...
		rulesFailed: 	nil
		rulesTotal: 	nil
	Receiver's instance variables: 
		request: 	nil
		response: 	nil
		variables: 	nil
		delegate: 	nil
		principal: 	nil
		credentials: 	nil


DIWebServiceHandler>>post
	Receiver: a DIWebServiceHandler
	Arguments and temporary variables: 
		api: 	a DIWebServiceAPI
	Receiver's instance variables: 
		request: 	a ZnRequest(POST /mai/run)
		response: 	nil
		variables: 	an OrderedCollection('mai' 'run')
		delegate: 	a ZnJSONRestServerDelegate
		principal: 	nil
		credentials: 	nil
		dicto: 	a DIDicto


DIWebServiceHandler(ZnRestCall)>>execute
	Receiver: a DIWebServiceHandler
	Arguments and temporary variables: 

	Receiver's instance variables: 
		request: 	a ZnRequest(POST /mai/run)
		response: 	nil
		variables: 	an OrderedCollection('mai' 'run')
		delegate: 	a ZnJSONRestServerDelegate
		principal: 	nil
		credentials: 	nil
		dicto: 	a DIDicto


[ call execute ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


BlockClosure>>on:do:
	Receiver: [ call execute ]
	Arguments and temporary variables: 
		exception: 	ZnRestCallUnauthorized
		handlerAction: 	[ :exception | self unauthorized: exception request ]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
		startpc: 	38
		numArgs: 	0


ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


[ self execute: call ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /mai/run)
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


BlockClosure>>on:do:
	Receiver: [ self execute: call ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :exception | 
request server debugMode
	ifTrue: [ exception pa...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
		startpc: 	99
		numArgs: 	0


ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /mai/run)
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ :delegate | delegate handleRequest: request ] ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /mai/run)
		delegate: 	a ZnJSONRestServerDelegate
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateRequest:do:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /mai/run)
		block: 	[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ ...etc...
		authenticator: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /mai/run)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


[ self authenticateAndDelegateRequest: request ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /mai/run)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


BlockClosure>>on:do:
	Receiver: [ self authenticateAndDelegateRequest: request ]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :exception | 
self debugMode
	ifTrue: [ exception pass ]
	ifFa...etc...
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequ...etc...
		startpc: 	58
		numArgs: 	0


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /mai/run)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /mai/run)
		response: 	nil
		initialMilliseconds: 	479455
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeOneRequestResponseOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		stream: 	a ZdcSocketStream
		request: 	a ZnRequest(POST /mai/run)
		response: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


[ self executeOneRequestResponseOn: stream ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		stream: 	a ZdcSocketStream
		request: 	nil
		response: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


[ 
p psValueAt: index put: anObject.
aBlock value ] in ZnCurrentServer(DynamicVariable)>>value:during:
	Receiver: a ZnCurrentServer
	Arguments and temporary variables: 
		anObject: 	a ZnManagingMultiThreadedServer(running 8010)
		aBlock: 	[ self executeOneRequestResponseOn: stream ]
		p: 	a Process in nil
		oldValue: 	nil
	Receiver's instance variables: 
		index: 	5


BlockClosure>>ensure:
	Receiver: [ 
p psValueAt: index put: anObject.
aBlock value ]
	Arguments and temporary variables: 
		aBlock: 	[ p psValueAt: index put: oldValue ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ZnCurrentServer(DynamicVariable)>>value:during:
		startpc: 	62
		numArgs: 	0


ZnCurrentServer(DynamicVariable)>>value:during:
	Receiver: a ZnCurrentServer
	Arguments and temporary variables: 
		anObject: 	a ZnManagingMultiThreadedServer(running 8010)
		aBlock: 	[ self executeOneRequestResponseOn: stream ]
		p: 	a Process in nil
		oldValue: 	nil
	Receiver's instance variables: 
		index: 	5


ZnCurrentServer class(DynamicVariable class)>>value:during:
	Receiver: ZnCurrentServer
	Arguments and temporary variables: 
		anObject: 	a ZnManagingMultiThreadedServer(running 8010)
		aBlock: 	[ self executeOneRequestResponseOn: stream ]
	Receiver's instance variables: 
		superclass: 	DynamicVariable
		methodDict: 	a MethodDictionary()
		format: 	132
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#ZnCurrentServer
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Zinc-HTTP-Variables'
		traitComposition: 	{}
		localSelectors: 	nil
		hash: 	nil
		soleInstance: 	a ZnCurrentServer


ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		stream: 	a ZdcSocketStream
		request: 	nil
		response: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


[ self executeRequestResponseLoopOn: stream ] in [ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ] in [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		listeningSocket: 	a Socket[waitingForConnection]
		stream: 	a ZdcSocketStream
		socket: 	a Socket[connected]
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


BlockClosure>>ensure:
	Receiver: [ self executeRequestResponseLoopOn: stream ]
	Arguments and temporary variables: 
		aBlock: 	[ 
self log debug: 'Closing stream'.
self closeSocketStream: stream ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		se...etc...
		startpc: 	118
		numArgs: 	0


[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ] in [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		listeningSocket: 	a Socket[waitingForConnection]
		stream: 	a ZdcSocketStream
		socket: 	a Socket[connected]
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


BlockClosure>>ifCurtailed:
	Receiver: [ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing st...etc...
	Arguments and temporary variables: 
		aBlock: 	[ 
self log debug: 'Destroying socket'.
socket destroy ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	[ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
	...etc...
		startpc: 	113
		numArgs: 	0


[ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		listeningSocket: 	a Socket[waitingForConnection]
		stream: 	a ZdcSocketStream
		socket: 	a Socket[connected]
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnec...etc...
		startpc: 	108
		numArgs: 	0



--- The full stack ---
DIUtil class>>saveString:ToFile:
DIDicto>>dictoParse:
DIDicto>>dictoBuild:
DIDicto>>dictoRun:
DIDicto>>dictoAll:
[ DIDicto new dictoAll: input ] in DIWebServiceAPI>>getRun
BlockClosure>>on:do:
DIWebServiceAPI>>getRun
DIWebServiceHandler>>post
DIWebServiceHandler(ZnRestCall)>>execute
[ call execute ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
BlockClosure>>on:do:
ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
[ self execute: call ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
BlockClosure>>on:do:
ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ :delegate | delegate handleRequest: request ] ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateRequest:do:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
[ self authenticateAndDelegateRequest: request ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
BlockClosure>>on:do:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequest:
ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeOneRequestResponseOn:
[ self executeOneRequestResponseOn: stream ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
[ 
p psValueAt: index put: anObject.
aBlock value ] in ZnCurrentServer(DynamicVariable)>>value:during:
BlockClosure>>ensure:
ZnCurrentServer(DynamicVariable)>>value:during:
ZnCurrentServer class(DynamicVariable class)>>value:during:
ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
[ self executeRequestResponseLoopOn: stream ] in [ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ] in [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
BlockClosure>>ensure:
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ] in [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
BlockClosure>>ifCurtailed:
[ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Halt
24 February 2015 12:01:21.106497 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
NBCogit NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
https://github.com/pharo-project/pharo-vm.git Commit: 4a0d556150d478ff2de3c9624d2f18e6eaa3fa5c Date: 2014-12-18 18:42:53 +0100 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14893

Image: Pharo3.0 [Latest update: #30863]

DIUtil class>>saveString:ToFile:
	Receiver: DIUtil
	Arguments and temporary variables: 
		aString: 	'source: ''/home/otruffer/DictoCLI''
filePattern: ''*.php''
ignore: ''...etc...
		aFileName: 	'/home/otruffer/dicto/bin/tools/phpda/configs/config-1424775681.yaml...etc...
		stream: 	MultiByteFileStream: '/home/otruffer/dicto/bin/tools/phpda/configs/conf...etc...
		newFileName: 	'/home/otruffer/dicto/bin/tools/phpda/configs/config-1424775681.ya...etc...
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary()
		format: 	2
		layout: 	a FixedLayout
		instanceVariables: 	#()
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#DIUtil
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Dicto-var-util'
		traitComposition: 	{}
		localSelectors: 	nil


DIPhpModel>>_createConfigFile
	Receiver: a DIPhpModel
	Arguments and temporary variables: 
		configFile: 	'source: ''/home/otruffer/DictoCLI''
filePattern: ''*.php''
ignore:...etc...
	Receiver's instance variables: 
		defRules: 	a DICollectionRule()
		defVars: 	a DICollectionVar(SYSTEM)
		analysisID: 	'1424775681'
		additionalProperties: 	a Dictionary()
		ruleCounter: 	0
		varCounter: 	0
		defVarElements: 	a DICollectionVarElements()
		defVarInvertedElements: 	a DICollectionVarElements()
		model: 	nil


DIPhpModel>>_loadPhpModel
	Receiver: a DIPhpModel
	Arguments and temporary variables: 

	Receiver's instance variables: 
		defRules: 	a DICollectionRule()
		defVars: 	a DICollectionVar(SYSTEM)
		analysisID: 	'1424775681'
		additionalProperties: 	a Dictionary()
		ruleCounter: 	0
		varCounter: 	0
		defVarElements: 	a DICollectionVarElements()
		defVarInvertedElements: 	a DICollectionVarElements()
		model: 	nil


DIPhpModel>>model
	Receiver: a DIPhpModel
	Arguments and temporary variables: 

	Receiver's instance variables: 
		defRules: 	a DICollectionRule()
		defVars: 	a DICollectionVar(SYSTEM)
		analysisID: 	'1424775681'
		additionalProperties: 	a Dictionary()
		ruleCounter: 	0
		varCounter: 	0
		defVarElements: 	a DICollectionVarElements()
		defVarInvertedElements: 	a DICollectionVarElements()
		model: 	nil


DIVarPhpClass>>allElements
	Receiver: RuleResult
	Arguments and temporary variables: 

	Receiver's instance variables: 
		isFirst: 	false
		dslText: 	'RuleResult=PhpClass with name:"Dicto\\RuleResult"'
		type: 	'PhpClass'
		id: 	1
		entity: 	nil
		name: 	'RuleResult'
		specifiers: 	an OrderedCollection(name=Dicto\\RuleResult)
		isInverted: 	false
		elements: 	a DICollectionVarElements()
		invertedElements: 	a DICollectionVarElements()


DIVarPhpClass(DIVar)>>elements
	Receiver: RuleResult
	Arguments and temporary variables: 
		valid: 	nil
	Receiver's instance variables: 
		isFirst: 	false
		dslText: 	'RuleResult=PhpClass with name:"Dicto\\RuleResult"'
		type: 	'PhpClass'
		id: 	1
		entity: 	nil
		name: 	'RuleResult'
		specifiers: 	an OrderedCollection(name=Dicto\\RuleResult)
		isInverted: 	false
		elements: 	a DICollectionVarElements()
		invertedElements: 	a DICollectionVarElements()


DISimpleRule>>subjectElements
	Receiver: RuleResult cannot depend on DictoTalker
	Arguments and temporary variables: 
		subjectElements: 	nil
	Receiver's instance variables: 
		isFirst: 	nil
		dslText: 	'RuleResult cannot depend on DictoTalker'
		type: 	#cannot
		id: 	1001
		entity: 	nil
		subjects: 	an Array(RuleResult)
		predicates: 	an Array(depend on DictoTalker)
		subRules: 	nil
		candidateAdapters: 	a SortedCollection(DIPhpDependencies)
		chosenAdapter: 	DIPhpDependencies
		hasFailed: 	false
		failureMessage: 	''
		failingPredicates: 	a Set()
		hasSubjectInverted: 	false
		hasPredicateInverted: 	false


printRulesEntityRelationship: someRules
	| res processedPredicates |
	res := ''.
	processedPredicates := Set new.
	someRules
		do: [ :rule | 
			| predicateSelector subjectElements argumentElements data isPredicateInv isSubjectInv |
			predicateSelector := (rule predicate nameNormalized , ':') asSymbol.
			isPredicateInv := rule hasPredicateInverted.
			isSubjectInv := rule hasSubjectInverted.
			subjectElements := rule subjectElements.
			argumentElements := rule argumentElements.
			subjectElements
				do: [ :subject | 
					argumentElements
						do: [ :argument | 
							| relId spec msgPass msgFail |
							relId := subject id , '-' , argument id.
							msgPass := subject id , '.' , rule predicate name , '(' , argument id , ')=True'.
							msgFail := subject id , '.' , rule predicate name , '(' , argument id , ')=False'.
							(processedPredicates includes: relId)
								ifFalse: [ 
									data := {(#subject -> subject value).
									(#argument -> argument value).
									(#ruleId -> rule id).
									(#propertyId -> relId).
									(#msgPass -> msgPass).
									(#msgFail -> msgFail)} asDictionary.
									spec := self perform: predicateSelector withArguments: {data}.
									spec := spec
										dictoReplace:
											{('$subject' -> subject value).
											('$argument' -> argument value).
											('$ruleId' -> rule id).
											('$propertyId' -> relId).
											('$msgPass' -> msgPass).
											('$msgFail' -> msgFail)}.
									res := res , spec ].	"avoid duplicate predicate evaluations"
							processedPredicates add: relId ] ] ].
	^ res in DIPhpDependencies(DIAdapter)>>printRulesEntityRelationship:
	Receiver: a DIPhpDependencies
	Arguments and temporary variables: 
		someRules: 	a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalk...etc...
		processedPredicates: 	a Set()
		data: 	nil
		res: 	''
		rule: 	RuleResult cannot depend on DictoTalker
		predicateSelector: 	#dependOn:
		subjectElements: 	nil
		argumentElements: 	nil
		isPredicateInv: 	false
		isSubjectInv: 	false
	Receiver's instance variables: 
		output: 	''
		commandOutput: 	''
		NEWLINE: 	'
'
		rules: 	a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalker m...etc...
		varSynonyms: 	nil
		sessionId: 	'1424775679'
		TIMESTAMP: 	'1424775681'
		TOOLNAME: 	'DIPhpDependencies'
		PROJECTROOT: 	'/home/otruffer/DictoCLI'
		PROJECTSRC: 	'./'
		PROJECTBIN: 	'./'
		RESULTFILE: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/mai/1424775681/D...etc...
		TESTFILE: 	nil
		testInputFileExt: 	'.st'
		SYSTEM: 	SYSTEM


DICollectionRule(OrderedCollection)>>do:
	Receiver: a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalker must depend on Rule...etc...
	Arguments and temporary variables: 
		aBlock: 	printRulesEntityRelationship: someRules
	| res processedPredicates |
	r...etc...
		index: 	1
	Receiver's instance variables: 
		array: 	an Array(RuleResult cannot depend on DictoTalker DictoTalker must depend...etc...
		firstIndex: 	1
		lastIndex: 	3
		elements: 	nil
		elements: 	nil


DIPhpDependencies(DIAdapter)>>printRulesEntityRelationship:
	Receiver: a DIPhpDependencies
	Arguments and temporary variables: 
		res: 	''
		someRules: 	a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalk...etc...
		processedPredicates: 	a Set()
	Receiver's instance variables: 
		output: 	''
		commandOutput: 	''
		NEWLINE: 	'
'
		rules: 	a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalker m...etc...
		varSynonyms: 	nil
		sessionId: 	'1424775679'
		TIMESTAMP: 	'1424775681'
		TOOLNAME: 	'DIPhpDependencies'
		PROJECTROOT: 	'/home/otruffer/DictoCLI'
		PROJECTSRC: 	'./'
		PROJECTBIN: 	'./'
		RESULTFILE: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/mai/1424775681/D...etc...
		TESTFILE: 	nil
		testInputFileExt: 	'.st'
		SYSTEM: 	SYSTEM


DIPhpDependencies(DIAdapter)>>printRules
	Receiver: a DIPhpDependencies
	Arguments and temporary variables: 
		res: 	nil
		allRules: 	a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalke...etc...
	Receiver's instance variables: 
		output: 	''
		commandOutput: 	''
		NEWLINE: 	'
'
		rules: 	a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalker m...etc...
		varSynonyms: 	nil
		sessionId: 	'1424775679'
		TIMESTAMP: 	'1424775681'
		TOOLNAME: 	'DIPhpDependencies'
		PROJECTROOT: 	'/home/otruffer/DictoCLI'
		PROJECTSRC: 	'./'
		PROJECTBIN: 	'./'
		RESULTFILE: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/mai/1424775681/D...etc...
		TESTFILE: 	nil
		testInputFileExt: 	'.st'
		SYSTEM: 	SYSTEM


DIPhpDependencies>>testInput
	Receiver: a DIPhpDependencies
	Arguments and temporary variables: 
		strRules: 	nil
	Receiver's instance variables: 
		output: 	''
		commandOutput: 	''
		NEWLINE: 	'
'
		rules: 	a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalker m...etc...
		varSynonyms: 	nil
		sessionId: 	'1424775679'
		TIMESTAMP: 	'1424775681'
		TOOLNAME: 	'DIPhpDependencies'
		PROJECTROOT: 	'/home/otruffer/DictoCLI'
		PROJECTSRC: 	'./'
		PROJECTBIN: 	'./'
		RESULTFILE: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/mai/1424775681/D...etc...
		TESTFILE: 	nil
		testInputFileExt: 	'.st'
		SYSTEM: 	SYSTEM


DITestGroup>>build
	Receiver: a DITestGroup
	Arguments and temporary variables: 

	Receiver's instance variables: 
		rules: 	an OrderedCollection(RuleResult cannot depend on DictoTalker DictoTalker...etc...
		adapter: 	a DIPhpDependencies
		runCommandText: 	nil
		testSpecification: 	nil
		adapterID: 	'DIPhpDependencies'
		resultFile: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/mai/1424775681/D...etc...
		specificationFile: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/mai/14247...etc...
		commandFile: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/mai/1424775681/...etc...


[ :testGroup | testGroup build ] in DIDicto>>dictoBuild:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = ...etc...
		adapterTestGroups: 	a Dictionary(DIGrepFileContent->a DITestGroup DIJMeterLoadTe...etc...
		testGroup: 	a DITestGroup
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424775679'
		singleShotTask: 	false


Array(SequenceableCollection)>>do:
	Receiver: an Array(a DITestGroup a DITestGroup a DITestGroup a DITestGroup a DITestGroup)
	Arguments and temporary variables: 
		aBlock: 	[ :testGroup | testGroup build ]
		index: 	4
	Receiver's instance variables: 
an Array(a DITestGroup a DITestGroup a DITestGroup a DITestGroup a DITestGroup)

DIDicto>>dictoBuild:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = ...etc...
		adapterTestGroups: 	a Dictionary(DIGrepFileContent->a DITestGroup DIJMeterLoadTe...etc...
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424775679'
		singleShotTask: 	false


DIDicto>>dictoRun:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = ...etc...
		adapterTestGroups: 	nil
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424775679'
		singleShotTask: 	false


DIDicto>>dictoAll:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = ...etc...
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424775679'
		singleShotTask: 	false


[ DIDicto new dictoAll: input ] in DIWebServiceAPI>>getRun
	Receiver: a DIWebServiceAPI
	Arguments and temporary variables: 
		in: 	'/home/otruffer/dicto/bin/analysis/mai/dicto.rules'
		input: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = PhpCl...etc...
		rulesFailed: 	nil
		rulesTotal: 	nil
	Receiver's instance variables: 
		request: 	nil
		response: 	nil
		variables: 	nil
		delegate: 	nil
		principal: 	nil
		credentials: 	nil


BlockClosure>>on:do:
	Receiver: [ DIDicto new dictoAll: input ]
	Arguments and temporary variables: 
		exception: 	DIException
		handlerAction: 	[ :ex | ^ self error: ex description ]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	DIWebServiceAPI>>getRun
		startpc: 	138
		numArgs: 	0


DIWebServiceAPI>>getRun
	Receiver: a DIWebServiceAPI
	Arguments and temporary variables: 
		in: 	'/home/otruffer/dicto/bin/analysis/mai/dicto.rules'
		input: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = PhpCl...etc...
		rulesFailed: 	nil
		rulesTotal: 	nil
	Receiver's instance variables: 
		request: 	nil
		response: 	nil
		variables: 	nil
		delegate: 	nil
		principal: 	nil
		credentials: 	nil


DIWebServiceHandler>>post
	Receiver: a DIWebServiceHandler
	Arguments and temporary variables: 
		api: 	a DIWebServiceAPI
	Receiver's instance variables: 
		request: 	a ZnRequest(POST /mai/run)
		response: 	nil
		variables: 	an OrderedCollection('mai' 'run')
		delegate: 	a ZnJSONRestServerDelegate
		principal: 	nil
		credentials: 	nil
		dicto: 	a DIDicto


DIWebServiceHandler(ZnRestCall)>>execute
	Receiver: a DIWebServiceHandler
	Arguments and temporary variables: 

	Receiver's instance variables: 
		request: 	a ZnRequest(POST /mai/run)
		response: 	nil
		variables: 	an OrderedCollection('mai' 'run')
		delegate: 	a ZnJSONRestServerDelegate
		principal: 	nil
		credentials: 	nil
		dicto: 	a DIDicto


[ call execute ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


BlockClosure>>on:do:
	Receiver: [ call execute ]
	Arguments and temporary variables: 
		exception: 	ZnRestCallUnauthorized
		handlerAction: 	[ :exception | self unauthorized: exception request ]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
		startpc: 	38
		numArgs: 	0


ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


[ self execute: call ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /mai/run)
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


BlockClosure>>on:do:
	Receiver: [ self execute: call ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :exception | 
request server debugMode
	ifTrue: [ exception pa...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
		startpc: 	99
		numArgs: 	0


ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /mai/run)
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ :delegate | delegate handleRequest: request ] ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /mai/run)
		delegate: 	a ZnJSONRestServerDelegate
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateRequest:do:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /mai/run)
		block: 	[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ ...etc...
		authenticator: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /mai/run)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


[ self authenticateAndDelegateRequest: request ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /mai/run)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


BlockClosure>>on:do:
	Receiver: [ self authenticateAndDelegateRequest: request ]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :exception | 
self debugMode
	ifTrue: [ exception pass ]
	ifFa...etc...
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequ...etc...
		startpc: 	58
		numArgs: 	0


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /mai/run)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /mai/run)
		response: 	nil
		initialMilliseconds: 	479455
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeOneRequestResponseOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		stream: 	a ZdcSocketStream
		request: 	a ZnRequest(POST /mai/run)
		response: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


[ self executeOneRequestResponseOn: stream ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		stream: 	a ZdcSocketStream
		request: 	nil
		response: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


[ 
p psValueAt: index put: anObject.
aBlock value ] in ZnCurrentServer(DynamicVariable)>>value:during:
	Receiver: a ZnCurrentServer
	Arguments and temporary variables: 
		anObject: 	a ZnManagingMultiThreadedServer(running 8010)
		aBlock: 	[ self executeOneRequestResponseOn: stream ]
		p: 	a Process in nil
		oldValue: 	nil
	Receiver's instance variables: 
		index: 	5



--- The full stack ---
DIUtil class>>saveString:ToFile:
DIPhpModel>>_createConfigFile
DIPhpModel>>_loadPhpModel
DIPhpModel>>model
DIVarPhpClass>>allElements
DIVarPhpClass(DIVar)>>elements
DISimpleRule>>subjectElements
printRulesEntityRelationship: someRules
	| res processedPredicates |
	res := ''.
	processedPredicates := Set new.
	someRules
		do: [ :rule | 
			| predicateSelector subjectElements argumentElements data isPredicateInv isSubjectInv |
			predicateSelector := (rule predicate nameNormalized , ':') asSymbol.
			isPredicateInv := rule hasPredicateInverted.
			isSubjectInv := rule hasSubjectInverted.
			subjectElements := rule subjectElements.
			argumentElements := rule argumentElements.
			subjectElements
				do: [ :subject | 
					argumentElements
						do: [ :argument | 
							| relId spec msgPass msgFail |
							relId := subject id , '-' , argument id.
							msgPass := subject id , '.' , rule predicate name , '(' , argument id , ')=True'.
							msgFail := subject id , '.' , rule predicate name , '(' , argument id , ')=False'.
							(processedPredicates includes: relId)
								ifFalse: [ 
									data := {(#subject -> subject value).
									(#argument -> argument value).
									(#ruleId -> rule id).
									(#propertyId -> relId).
									(#msgPass -> msgPass).
									(#msgFail -> msgFail)} asDictionary.
									spec := self perform: predicateSelector withArguments: {data}.
									spec := spec
										dictoReplace:
											{('$subject' -> subject value).
											('$argument' -> argument value).
											('$ruleId' -> rule id).
											('$propertyId' -> relId).
											('$msgPass' -> msgPass).
											('$msgFail' -> msgFail)}.
									res := res , spec ].	"avoid duplicate predicate evaluations"
							processedPredicates add: relId ] ] ].
	^ res in DIPhpDependencies(DIAdapter)>>printRulesEntityRelationship:
DICollectionRule(OrderedCollection)>>do:
DIPhpDependencies(DIAdapter)>>printRulesEntityRelationship:
DIPhpDependencies(DIAdapter)>>printRules
DIPhpDependencies>>testInput
DITestGroup>>build
[ :testGroup | testGroup build ] in DIDicto>>dictoBuild:
Array(SequenceableCollection)>>do:
DIDicto>>dictoBuild:
DIDicto>>dictoRun:
DIDicto>>dictoAll:
[ DIDicto new dictoAll: input ] in DIWebServiceAPI>>getRun
BlockClosure>>on:do:
DIWebServiceAPI>>getRun
DIWebServiceHandler>>post
DIWebServiceHandler(ZnRestCall)>>execute
[ call execute ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
BlockClosure>>on:do:
ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
[ self execute: call ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
BlockClosure>>on:do:
ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ :delegate | delegate handleRequest: request ] ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateRequest:do:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
[ self authenticateAndDelegateRequest: request ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
BlockClosure>>on:do:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequest:
ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeOneRequestResponseOn:
[ self executeOneRequestResponseOn: stream ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
[ 
p psValueAt: index put: anObject.
aBlock value ] in ZnCurrentServer(DynamicVariable)>>value:during:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
BlockClosure>>ensure:
ZnCurrentServer(DynamicVariable)>>value:during:
ZnCurrentServer class(DynamicVariable class)>>value:during:
ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
[ self executeRequestResponseLoopOn: stream ] in [ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ] in [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
BlockClosure>>ensure:
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ] in [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
BlockClosure>>ifCurtailed:
[ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Halt
24 February 2015 12:01:22.427256 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
NBCogit NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
https://github.com/pharo-project/pharo-vm.git Commit: 4a0d556150d478ff2de3c9624d2f18e6eaa3fa5c Date: 2014-12-18 18:42:53 +0100 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14893

Image: Pharo3.0 [Latest update: #30863]

DIUtil class>>saveString:ToFile:
	Receiver: DIUtil
	Arguments and temporary variables: 
		aString: 	'#!/bin/bash
type -P hhvm &>/dev/null && hhvm /home/otruffer/dicto/bin...etc...
		aFileName: 	'/home/otruffer/dicto/bin/tools/phpda/configs/modelScript-1424775681...etc...
		stream: 	MultiByteFileStream: '/home/otruffer/dicto/bin/tools/phpda/configs/mode...etc...
		newFileName: 	'/home/otruffer/dicto/bin/tools/phpda/configs/modelScript-14247756...etc...
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary()
		format: 	2
		layout: 	a FixedLayout
		instanceVariables: 	#()
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#DIUtil
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Dicto-var-util'
		traitComposition: 	{}
		localSelectors: 	nil


DIPhpModel>>_createModelScript
	Receiver: a DIPhpModel
	Arguments and temporary variables: 
		modelScriptFile: 	'#!/bin/bash
type -P hhvm &>/dev/null && hhvm /home/otruffer/d...etc...
	Receiver's instance variables: 
		defRules: 	a DICollectionRule()
		defVars: 	a DICollectionVar(SYSTEM)
		analysisID: 	'1424775681'
		additionalProperties: 	a Dictionary()
		ruleCounter: 	0
		varCounter: 	0
		defVarElements: 	a DICollectionVarElements()
		defVarInvertedElements: 	a DICollectionVarElements()
		model: 	nil


DIPhpModel>>_createModelFile
	Receiver: a DIPhpModel
	Arguments and temporary variables: 

	Receiver's instance variables: 
		defRules: 	a DICollectionRule()
		defVars: 	a DICollectionVar(SYSTEM)
		analysisID: 	'1424775681'
		additionalProperties: 	a Dictionary()
		ruleCounter: 	0
		varCounter: 	0
		defVarElements: 	a DICollectionVarElements()
		defVarInvertedElements: 	a DICollectionVarElements()
		model: 	nil


DIPhpModel>>_loadPhpModel
	Receiver: a DIPhpModel
	Arguments and temporary variables: 

	Receiver's instance variables: 
		defRules: 	a DICollectionRule()
		defVars: 	a DICollectionVar(SYSTEM)
		analysisID: 	'1424775681'
		additionalProperties: 	a Dictionary()
		ruleCounter: 	0
		varCounter: 	0
		defVarElements: 	a DICollectionVarElements()
		defVarInvertedElements: 	a DICollectionVarElements()
		model: 	nil


DIPhpModel>>model
	Receiver: a DIPhpModel
	Arguments and temporary variables: 

	Receiver's instance variables: 
		defRules: 	a DICollectionRule()
		defVars: 	a DICollectionVar(SYSTEM)
		analysisID: 	'1424775681'
		additionalProperties: 	a Dictionary()
		ruleCounter: 	0
		varCounter: 	0
		defVarElements: 	a DICollectionVarElements()
		defVarInvertedElements: 	a DICollectionVarElements()
		model: 	nil


DIVarPhpClass>>allElements
	Receiver: RuleResult
	Arguments and temporary variables: 

	Receiver's instance variables: 
		isFirst: 	false
		dslText: 	'RuleResult=PhpClass with name:"Dicto\\RuleResult"'
		type: 	'PhpClass'
		id: 	1
		entity: 	nil
		name: 	'RuleResult'
		specifiers: 	an OrderedCollection(name=Dicto\\RuleResult)
		isInverted: 	false
		elements: 	a DICollectionVarElements()
		invertedElements: 	a DICollectionVarElements()


DIVarPhpClass(DIVar)>>elements
	Receiver: RuleResult
	Arguments and temporary variables: 
		valid: 	nil
	Receiver's instance variables: 
		isFirst: 	false
		dslText: 	'RuleResult=PhpClass with name:"Dicto\\RuleResult"'
		type: 	'PhpClass'
		id: 	1
		entity: 	nil
		name: 	'RuleResult'
		specifiers: 	an OrderedCollection(name=Dicto\\RuleResult)
		isInverted: 	false
		elements: 	a DICollectionVarElements()
		invertedElements: 	a DICollectionVarElements()


DISimpleRule>>subjectElements
	Receiver: RuleResult cannot depend on DictoTalker
	Arguments and temporary variables: 
		subjectElements: 	nil
	Receiver's instance variables: 
		isFirst: 	nil
		dslText: 	'RuleResult cannot depend on DictoTalker'
		type: 	#cannot
		id: 	1001
		entity: 	nil
		subjects: 	an Array(RuleResult)
		predicates: 	an Array(depend on DictoTalker)
		subRules: 	nil
		candidateAdapters: 	a SortedCollection(DIPhpDependencies)
		chosenAdapter: 	DIPhpDependencies
		hasFailed: 	false
		failureMessage: 	''
		failingPredicates: 	a Set()
		hasSubjectInverted: 	false
		hasPredicateInverted: 	false


printRulesEntityRelationship: someRules
	| res processedPredicates |
	res := ''.
	processedPredicates := Set new.
	someRules
		do: [ :rule | 
			| predicateSelector subjectElements argumentElements data isPredicateInv isSubjectInv |
			predicateSelector := (rule predicate nameNormalized , ':') asSymbol.
			isPredicateInv := rule hasPredicateInverted.
			isSubjectInv := rule hasSubjectInverted.
			subjectElements := rule subjectElements.
			argumentElements := rule argumentElements.
			subjectElements
				do: [ :subject | 
					argumentElements
						do: [ :argument | 
							| relId spec msgPass msgFail |
							relId := subject id , '-' , argument id.
							msgPass := subject id , '.' , rule predicate name , '(' , argument id , ')=True'.
							msgFail := subject id , '.' , rule predicate name , '(' , argument id , ')=False'.
							(processedPredicates includes: relId)
								ifFalse: [ 
									data := {(#subject -> subject value).
									(#argument -> argument value).
									(#ruleId -> rule id).
									(#propertyId -> relId).
									(#msgPass -> msgPass).
									(#msgFail -> msgFail)} asDictionary.
									spec := self perform: predicateSelector withArguments: {data}.
									spec := spec
										dictoReplace:
											{('$subject' -> subject value).
											('$argument' -> argument value).
											('$ruleId' -> rule id).
											('$propertyId' -> relId).
											('$msgPass' -> msgPass).
											('$msgFail' -> msgFail)}.
									res := res , spec ].	"avoid duplicate predicate evaluations"
							processedPredicates add: relId ] ] ].
	^ res in DIPhpDependencies(DIAdapter)>>printRulesEntityRelationship:
	Receiver: a DIPhpDependencies
	Arguments and temporary variables: 
		someRules: 	a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalk...etc...
		processedPredicates: 	a Set()
		data: 	nil
		res: 	''
		rule: 	RuleResult cannot depend on DictoTalker
		predicateSelector: 	#dependOn:
		subjectElements: 	nil
		argumentElements: 	nil
		isPredicateInv: 	false
		isSubjectInv: 	false
	Receiver's instance variables: 
		output: 	''
		commandOutput: 	''
		NEWLINE: 	'
'
		rules: 	a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalker m...etc...
		varSynonyms: 	nil
		sessionId: 	'1424775679'
		TIMESTAMP: 	'1424775681'
		TOOLNAME: 	'DIPhpDependencies'
		PROJECTROOT: 	'/home/otruffer/DictoCLI'
		PROJECTSRC: 	'./'
		PROJECTBIN: 	'./'
		RESULTFILE: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/mai/1424775681/D...etc...
		TESTFILE: 	nil
		testInputFileExt: 	'.st'
		SYSTEM: 	SYSTEM


DICollectionRule(OrderedCollection)>>do:
	Receiver: a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalker must depend on Rule...etc...
	Arguments and temporary variables: 
		aBlock: 	printRulesEntityRelationship: someRules
	| res processedPredicates |
	r...etc...
		index: 	1
	Receiver's instance variables: 
		array: 	an Array(RuleResult cannot depend on DictoTalker DictoTalker must depend...etc...
		firstIndex: 	1
		lastIndex: 	3
		elements: 	nil
		elements: 	nil


DIPhpDependencies(DIAdapter)>>printRulesEntityRelationship:
	Receiver: a DIPhpDependencies
	Arguments and temporary variables: 
		res: 	''
		someRules: 	a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalk...etc...
		processedPredicates: 	a Set()
	Receiver's instance variables: 
		output: 	''
		commandOutput: 	''
		NEWLINE: 	'
'
		rules: 	a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalker m...etc...
		varSynonyms: 	nil
		sessionId: 	'1424775679'
		TIMESTAMP: 	'1424775681'
		TOOLNAME: 	'DIPhpDependencies'
		PROJECTROOT: 	'/home/otruffer/DictoCLI'
		PROJECTSRC: 	'./'
		PROJECTBIN: 	'./'
		RESULTFILE: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/mai/1424775681/D...etc...
		TESTFILE: 	nil
		testInputFileExt: 	'.st'
		SYSTEM: 	SYSTEM


DIPhpDependencies(DIAdapter)>>printRules
	Receiver: a DIPhpDependencies
	Arguments and temporary variables: 
		res: 	nil
		allRules: 	a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalke...etc...
	Receiver's instance variables: 
		output: 	''
		commandOutput: 	''
		NEWLINE: 	'
'
		rules: 	a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalker m...etc...
		varSynonyms: 	nil
		sessionId: 	'1424775679'
		TIMESTAMP: 	'1424775681'
		TOOLNAME: 	'DIPhpDependencies'
		PROJECTROOT: 	'/home/otruffer/DictoCLI'
		PROJECTSRC: 	'./'
		PROJECTBIN: 	'./'
		RESULTFILE: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/mai/1424775681/D...etc...
		TESTFILE: 	nil
		testInputFileExt: 	'.st'
		SYSTEM: 	SYSTEM


DIPhpDependencies>>testInput
	Receiver: a DIPhpDependencies
	Arguments and temporary variables: 
		strRules: 	nil
	Receiver's instance variables: 
		output: 	''
		commandOutput: 	''
		NEWLINE: 	'
'
		rules: 	a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalker m...etc...
		varSynonyms: 	nil
		sessionId: 	'1424775679'
		TIMESTAMP: 	'1424775681'
		TOOLNAME: 	'DIPhpDependencies'
		PROJECTROOT: 	'/home/otruffer/DictoCLI'
		PROJECTSRC: 	'./'
		PROJECTBIN: 	'./'
		RESULTFILE: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/mai/1424775681/D...etc...
		TESTFILE: 	nil
		testInputFileExt: 	'.st'
		SYSTEM: 	SYSTEM


DITestGroup>>build
	Receiver: a DITestGroup
	Arguments and temporary variables: 

	Receiver's instance variables: 
		rules: 	an OrderedCollection(RuleResult cannot depend on DictoTalker DictoTalker...etc...
		adapter: 	a DIPhpDependencies
		runCommandText: 	nil
		testSpecification: 	nil
		adapterID: 	'DIPhpDependencies'
		resultFile: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/mai/1424775681/D...etc...
		specificationFile: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/mai/14247...etc...
		commandFile: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/mai/1424775681/...etc...


[ :testGroup | testGroup build ] in DIDicto>>dictoBuild:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = ...etc...
		adapterTestGroups: 	a Dictionary(DIGrepFileContent->a DITestGroup DIJMeterLoadTe...etc...
		testGroup: 	a DITestGroup
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424775679'
		singleShotTask: 	false


Array(SequenceableCollection)>>do:
	Receiver: an Array(a DITestGroup a DITestGroup a DITestGroup a DITestGroup a DITestGroup)
	Arguments and temporary variables: 
		aBlock: 	[ :testGroup | testGroup build ]
		index: 	4
	Receiver's instance variables: 
an Array(a DITestGroup a DITestGroup a DITestGroup a DITestGroup a DITestGroup)

DIDicto>>dictoBuild:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = ...etc...
		adapterTestGroups: 	a Dictionary(DIGrepFileContent->a DITestGroup DIJMeterLoadTe...etc...
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424775679'
		singleShotTask: 	false


DIDicto>>dictoRun:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = ...etc...
		adapterTestGroups: 	nil
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424775679'
		singleShotTask: 	false


DIDicto>>dictoAll:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = ...etc...
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424775679'
		singleShotTask: 	false


[ DIDicto new dictoAll: input ] in DIWebServiceAPI>>getRun
	Receiver: a DIWebServiceAPI
	Arguments and temporary variables: 
		in: 	'/home/otruffer/dicto/bin/analysis/mai/dicto.rules'
		input: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = PhpCl...etc...
		rulesFailed: 	nil
		rulesTotal: 	nil
	Receiver's instance variables: 
		request: 	nil
		response: 	nil
		variables: 	nil
		delegate: 	nil
		principal: 	nil
		credentials: 	nil


BlockClosure>>on:do:
	Receiver: [ DIDicto new dictoAll: input ]
	Arguments and temporary variables: 
		exception: 	DIException
		handlerAction: 	[ :ex | ^ self error: ex description ]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	DIWebServiceAPI>>getRun
		startpc: 	138
		numArgs: 	0


DIWebServiceAPI>>getRun
	Receiver: a DIWebServiceAPI
	Arguments and temporary variables: 
		in: 	'/home/otruffer/dicto/bin/analysis/mai/dicto.rules'
		input: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = PhpCl...etc...
		rulesFailed: 	nil
		rulesTotal: 	nil
	Receiver's instance variables: 
		request: 	nil
		response: 	nil
		variables: 	nil
		delegate: 	nil
		principal: 	nil
		credentials: 	nil


DIWebServiceHandler>>post
	Receiver: a DIWebServiceHandler
	Arguments and temporary variables: 
		api: 	a DIWebServiceAPI
	Receiver's instance variables: 
		request: 	a ZnRequest(POST /mai/run)
		response: 	nil
		variables: 	an OrderedCollection('mai' 'run')
		delegate: 	a ZnJSONRestServerDelegate
		principal: 	nil
		credentials: 	nil
		dicto: 	a DIDicto


DIWebServiceHandler(ZnRestCall)>>execute
	Receiver: a DIWebServiceHandler
	Arguments and temporary variables: 

	Receiver's instance variables: 
		request: 	a ZnRequest(POST /mai/run)
		response: 	nil
		variables: 	an OrderedCollection('mai' 'run')
		delegate: 	a ZnJSONRestServerDelegate
		principal: 	nil
		credentials: 	nil
		dicto: 	a DIDicto


[ call execute ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


BlockClosure>>on:do:
	Receiver: [ call execute ]
	Arguments and temporary variables: 
		exception: 	ZnRestCallUnauthorized
		handlerAction: 	[ :exception | self unauthorized: exception request ]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
		startpc: 	38
		numArgs: 	0


ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


[ self execute: call ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /mai/run)
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


BlockClosure>>on:do:
	Receiver: [ self execute: call ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :exception | 
request server debugMode
	ifTrue: [ exception pa...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
		startpc: 	99
		numArgs: 	0


ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /mai/run)
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ :delegate | delegate handleRequest: request ] ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /mai/run)
		delegate: 	a ZnJSONRestServerDelegate
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateRequest:do:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /mai/run)
		block: 	[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ ...etc...
		authenticator: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /mai/run)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


[ self authenticateAndDelegateRequest: request ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /mai/run)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


BlockClosure>>on:do:
	Receiver: [ self authenticateAndDelegateRequest: request ]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :exception | 
self debugMode
	ifTrue: [ exception pass ]
	ifFa...etc...
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequ...etc...
		startpc: 	58
		numArgs: 	0


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /mai/run)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /mai/run)
		response: 	nil
		initialMilliseconds: 	479455
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeOneRequestResponseOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		stream: 	a ZdcSocketStream
		request: 	a ZnRequest(POST /mai/run)
		response: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


[ self executeOneRequestResponseOn: stream ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		stream: 	a ZdcSocketStream
		request: 	nil
		response: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)



--- The full stack ---
DIUtil class>>saveString:ToFile:
DIPhpModel>>_createModelScript
DIPhpModel>>_createModelFile
DIPhpModel>>_loadPhpModel
DIPhpModel>>model
DIVarPhpClass>>allElements
DIVarPhpClass(DIVar)>>elements
DISimpleRule>>subjectElements
printRulesEntityRelationship: someRules
	| res processedPredicates |
	res := ''.
	processedPredicates := Set new.
	someRules
		do: [ :rule | 
			| predicateSelector subjectElements argumentElements data isPredicateInv isSubjectInv |
			predicateSelector := (rule predicate nameNormalized , ':') asSymbol.
			isPredicateInv := rule hasPredicateInverted.
			isSubjectInv := rule hasSubjectInverted.
			subjectElements := rule subjectElements.
			argumentElements := rule argumentElements.
			subjectElements
				do: [ :subject | 
					argumentElements
						do: [ :argument | 
							| relId spec msgPass msgFail |
							relId := subject id , '-' , argument id.
							msgPass := subject id , '.' , rule predicate name , '(' , argument id , ')=True'.
							msgFail := subject id , '.' , rule predicate name , '(' , argument id , ')=False'.
							(processedPredicates includes: relId)
								ifFalse: [ 
									data := {(#subject -> subject value).
									(#argument -> argument value).
									(#ruleId -> rule id).
									(#propertyId -> relId).
									(#msgPass -> msgPass).
									(#msgFail -> msgFail)} asDictionary.
									spec := self perform: predicateSelector withArguments: {data}.
									spec := spec
										dictoReplace:
											{('$subject' -> subject value).
											('$argument' -> argument value).
											('$ruleId' -> rule id).
											('$propertyId' -> relId).
											('$msgPass' -> msgPass).
											('$msgFail' -> msgFail)}.
									res := res , spec ].	"avoid duplicate predicate evaluations"
							processedPredicates add: relId ] ] ].
	^ res in DIPhpDependencies(DIAdapter)>>printRulesEntityRelationship:
DICollectionRule(OrderedCollection)>>do:
DIPhpDependencies(DIAdapter)>>printRulesEntityRelationship:
DIPhpDependencies(DIAdapter)>>printRules
DIPhpDependencies>>testInput
DITestGroup>>build
[ :testGroup | testGroup build ] in DIDicto>>dictoBuild:
Array(SequenceableCollection)>>do:
DIDicto>>dictoBuild:
DIDicto>>dictoRun:
DIDicto>>dictoAll:
[ DIDicto new dictoAll: input ] in DIWebServiceAPI>>getRun
BlockClosure>>on:do:
DIWebServiceAPI>>getRun
DIWebServiceHandler>>post
DIWebServiceHandler(ZnRestCall)>>execute
[ call execute ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
BlockClosure>>on:do:
ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
[ self execute: call ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
BlockClosure>>on:do:
ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ :delegate | delegate handleRequest: request ] ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateRequest:do:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
[ self authenticateAndDelegateRequest: request ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
BlockClosure>>on:do:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequest:
ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeOneRequestResponseOn:
[ self executeOneRequestResponseOn: stream ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ 
p psValueAt: index put: anObject.
aBlock value ] in ZnCurrentServer(DynamicVariable)>>value:during:
BlockClosure>>ensure:
ZnCurrentServer(DynamicVariable)>>value:during:
ZnCurrentServer class(DynamicVariable class)>>value:during:
ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
[ self executeRequestResponseLoopOn: stream ] in [ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ] in [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
BlockClosure>>ensure:
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ] in [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
BlockClosure>>ifCurtailed:
[ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Halt
24 February 2015 12:01:35.793033 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
NBCogit NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
https://github.com/pharo-project/pharo-vm.git Commit: 4a0d556150d478ff2de3c9624d2f18e6eaa3fa5c Date: 2014-12-18 18:42:53 +0100 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14893

Image: Pharo3.0 [Latest update: #30863]

DIUtil class>>saveString:ToFile:
	Receiver: DIUtil
	Arguments and temporary variables: 
		aString: 	'[{ "subject" : "Dicto\\RuleResult",
	   "argument": "Dicto\\DictoTalk...etc...
		aFileName: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/mai/1424775681/DI...etc...
		stream: 	MultiByteFileStream: '/home/otruffer/dicto/bin/analysis/mai/1424775681/...etc...
		newFileName: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/mai/1424775681/...etc...
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary()
		format: 	2
		layout: 	a FixedLayout
		instanceVariables: 	#()
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#DIUtil
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Dicto-var-util'
		traitComposition: 	{}
		localSelectors: 	nil


DITestGroup>>build
	Receiver: a DITestGroup
	Arguments and temporary variables: 

	Receiver's instance variables: 
		rules: 	an OrderedCollection(RuleResult cannot depend on DictoTalker DictoTalker...etc...
		adapter: 	a DIPhpDependencies
		runCommandText: 	'#!/bin/bash
type -P hhvm &>/dev/null && hhvm /home/otruffer/di...etc...
		testSpecification: 	'[{ "subject" : "Dicto\\RuleResult",
	   "argument": "Dicto\...etc...
		adapterID: 	'DIPhpDependencies'
		resultFile: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/mai/1424775681/D...etc...
		specificationFile: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/mai/14247...etc...
		commandFile: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/mai/1424775681/...etc...


[ :testGroup | testGroup build ] in DIDicto>>dictoBuild:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = ...etc...
		adapterTestGroups: 	a Dictionary(DIGrepFileContent->a DITestGroup DIJMeterLoadTe...etc...
		testGroup: 	a DITestGroup
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424775679'
		singleShotTask: 	false


Array(SequenceableCollection)>>do:
	Receiver: an Array(a DITestGroup a DITestGroup a DITestGroup a DITestGroup a DITestGroup)
	Arguments and temporary variables: 
		aBlock: 	[ :testGroup | testGroup build ]
		index: 	4
	Receiver's instance variables: 
an Array(a DITestGroup a DITestGroup a DITestGroup a DITestGroup a DITestGroup)

DIDicto>>dictoBuild:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = ...etc...
		adapterTestGroups: 	a Dictionary(DIGrepFileContent->a DITestGroup DIJMeterLoadTe...etc...
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424775679'
		singleShotTask: 	false


DIDicto>>dictoRun:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = ...etc...
		adapterTestGroups: 	nil
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424775679'
		singleShotTask: 	false


DIDicto>>dictoAll:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = ...etc...
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424775679'
		singleShotTask: 	false


[ DIDicto new dictoAll: input ] in DIWebServiceAPI>>getRun
	Receiver: a DIWebServiceAPI
	Arguments and temporary variables: 
		in: 	'/home/otruffer/dicto/bin/analysis/mai/dicto.rules'
		input: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = PhpCl...etc...
		rulesFailed: 	nil
		rulesTotal: 	nil
	Receiver's instance variables: 
		request: 	nil
		response: 	nil
		variables: 	nil
		delegate: 	nil
		principal: 	nil
		credentials: 	nil


BlockClosure>>on:do:
	Receiver: [ DIDicto new dictoAll: input ]
	Arguments and temporary variables: 
		exception: 	DIException
		handlerAction: 	[ :ex | ^ self error: ex description ]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	DIWebServiceAPI>>getRun
		startpc: 	138
		numArgs: 	0


DIWebServiceAPI>>getRun
	Receiver: a DIWebServiceAPI
	Arguments and temporary variables: 
		in: 	'/home/otruffer/dicto/bin/analysis/mai/dicto.rules'
		input: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = PhpCl...etc...
		rulesFailed: 	nil
		rulesTotal: 	nil
	Receiver's instance variables: 
		request: 	nil
		response: 	nil
		variables: 	nil
		delegate: 	nil
		principal: 	nil
		credentials: 	nil


DIWebServiceHandler>>post
	Receiver: a DIWebServiceHandler
	Arguments and temporary variables: 
		api: 	a DIWebServiceAPI
	Receiver's instance variables: 
		request: 	a ZnRequest(POST /mai/run)
		response: 	nil
		variables: 	an OrderedCollection('mai' 'run')
		delegate: 	a ZnJSONRestServerDelegate
		principal: 	nil
		credentials: 	nil
		dicto: 	a DIDicto


DIWebServiceHandler(ZnRestCall)>>execute
	Receiver: a DIWebServiceHandler
	Arguments and temporary variables: 

	Receiver's instance variables: 
		request: 	a ZnRequest(POST /mai/run)
		response: 	nil
		variables: 	an OrderedCollection('mai' 'run')
		delegate: 	a ZnJSONRestServerDelegate
		principal: 	nil
		credentials: 	nil
		dicto: 	a DIDicto


[ call execute ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


BlockClosure>>on:do:
	Receiver: [ call execute ]
	Arguments and temporary variables: 
		exception: 	ZnRestCallUnauthorized
		handlerAction: 	[ :exception | self unauthorized: exception request ]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
		startpc: 	38
		numArgs: 	0


ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


[ self execute: call ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /mai/run)
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


BlockClosure>>on:do:
	Receiver: [ self execute: call ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :exception | 
request server debugMode
	ifTrue: [ exception pa...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
		startpc: 	99
		numArgs: 	0


ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /mai/run)
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ :delegate | delegate handleRequest: request ] ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /mai/run)
		delegate: 	a ZnJSONRestServerDelegate
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateRequest:do:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /mai/run)
		block: 	[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ ...etc...
		authenticator: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /mai/run)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


[ self authenticateAndDelegateRequest: request ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /mai/run)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


BlockClosure>>on:do:
	Receiver: [ self authenticateAndDelegateRequest: request ]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :exception | 
self debugMode
	ifTrue: [ exception pass ]
	ifFa...etc...
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequ...etc...
		startpc: 	58
		numArgs: 	0


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /mai/run)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /mai/run)
		response: 	nil
		initialMilliseconds: 	479455
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeOneRequestResponseOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		stream: 	a ZdcSocketStream
		request: 	a ZnRequest(POST /mai/run)
		response: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


[ self executeOneRequestResponseOn: stream ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		stream: 	a ZdcSocketStream
		request: 	nil
		response: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


[ 
p psValueAt: index put: anObject.
aBlock value ] in ZnCurrentServer(DynamicVariable)>>value:during:
	Receiver: a ZnCurrentServer
	Arguments and temporary variables: 
		anObject: 	a ZnManagingMultiThreadedServer(running 8010)
		aBlock: 	[ self executeOneRequestResponseOn: stream ]
		p: 	a Process in nil
		oldValue: 	nil
	Receiver's instance variables: 
		index: 	5


BlockClosure>>ensure:
	Receiver: [ 
p psValueAt: index put: anObject.
aBlock value ]
	Arguments and temporary variables: 
		aBlock: 	[ p psValueAt: index put: oldValue ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ZnCurrentServer(DynamicVariable)>>value:during:
		startpc: 	62
		numArgs: 	0


ZnCurrentServer(DynamicVariable)>>value:during:
	Receiver: a ZnCurrentServer
	Arguments and temporary variables: 
		anObject: 	a ZnManagingMultiThreadedServer(running 8010)
		aBlock: 	[ self executeOneRequestResponseOn: stream ]
		p: 	a Process in nil
		oldValue: 	nil
	Receiver's instance variables: 
		index: 	5


ZnCurrentServer class(DynamicVariable class)>>value:during:
	Receiver: ZnCurrentServer
	Arguments and temporary variables: 
		anObject: 	a ZnManagingMultiThreadedServer(running 8010)
		aBlock: 	[ self executeOneRequestResponseOn: stream ]
	Receiver's instance variables: 
		superclass: 	DynamicVariable
		methodDict: 	a MethodDictionary()
		format: 	132
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#ZnCurrentServer
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Zinc-HTTP-Variables'
		traitComposition: 	{}
		localSelectors: 	nil
		hash: 	nil
		soleInstance: 	a ZnCurrentServer


ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		stream: 	a ZdcSocketStream
		request: 	nil
		response: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


[ self executeRequestResponseLoopOn: stream ] in [ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ] in [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		listeningSocket: 	a Socket[waitingForConnection]
		stream: 	a ZdcSocketStream
		socket: 	a Socket[connected]
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


BlockClosure>>ensure:
	Receiver: [ self executeRequestResponseLoopOn: stream ]
	Arguments and temporary variables: 
		aBlock: 	[ 
self log debug: 'Closing stream'.
self closeSocketStream: stream ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		se...etc...
		startpc: 	118
		numArgs: 	0


[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ] in [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		listeningSocket: 	a Socket[waitingForConnection]
		stream: 	a ZdcSocketStream
		socket: 	a Socket[connected]
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


BlockClosure>>ifCurtailed:
	Receiver: [ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing st...etc...
	Arguments and temporary variables: 
		aBlock: 	[ 
self log debug: 'Destroying socket'.
socket destroy ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	[ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
	...etc...
		startpc: 	113
		numArgs: 	0


[ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		listeningSocket: 	a Socket[waitingForConnection]
		stream: 	a ZdcSocketStream
		socket: 	a Socket[connected]
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnec...etc...
		startpc: 	108
		numArgs: 	0



--- The full stack ---
DIUtil class>>saveString:ToFile:
DITestGroup>>build
[ :testGroup | testGroup build ] in DIDicto>>dictoBuild:
Array(SequenceableCollection)>>do:
DIDicto>>dictoBuild:
DIDicto>>dictoRun:
DIDicto>>dictoAll:
[ DIDicto new dictoAll: input ] in DIWebServiceAPI>>getRun
BlockClosure>>on:do:
DIWebServiceAPI>>getRun
DIWebServiceHandler>>post
DIWebServiceHandler(ZnRestCall)>>execute
[ call execute ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
BlockClosure>>on:do:
ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
[ self execute: call ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
BlockClosure>>on:do:
ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ :delegate | delegate handleRequest: request ] ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateRequest:do:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
[ self authenticateAndDelegateRequest: request ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
BlockClosure>>on:do:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequest:
ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeOneRequestResponseOn:
[ self executeOneRequestResponseOn: stream ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
[ 
p psValueAt: index put: anObject.
aBlock value ] in ZnCurrentServer(DynamicVariable)>>value:during:
BlockClosure>>ensure:
ZnCurrentServer(DynamicVariable)>>value:during:
ZnCurrentServer class(DynamicVariable class)>>value:during:
ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
[ self executeRequestResponseLoopOn: stream ] in [ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ] in [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
BlockClosure>>ensure:
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ] in [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
BlockClosure>>ifCurtailed:
[ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Halt
24 February 2015 12:01:58.322419 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
NBCogit NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
https://github.com/pharo-project/pharo-vm.git Commit: 4a0d556150d478ff2de3c9624d2f18e6eaa3fa5c Date: 2014-12-18 18:42:53 +0100 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14893

Image: Pharo3.0 [Latest update: #30863]

DIUtil class>>saveString:ToFile:
	Receiver: DIUtil
	Arguments and temporary variables: 
		aString: 	'#!/bin/bash
type -P hhvm &>/dev/null && hhvm /home/otruffer/dicto/bin...etc...
		aFileName: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/mai/1424775681/DI...etc...
		stream: 	MultiByteFileStream: '/home/otruffer/dicto/bin/analysis/mai/1424775681/...etc...
		newFileName: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/mai/1424775681/...etc...
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary()
		format: 	2
		layout: 	a FixedLayout
		instanceVariables: 	#()
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#DIUtil
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Dicto-var-util'
		traitComposition: 	{}
		localSelectors: 	nil


DITestGroup>>build
	Receiver: a DITestGroup
	Arguments and temporary variables: 

	Receiver's instance variables: 
		rules: 	an OrderedCollection(RuleResult cannot depend on DictoTalker DictoTalker...etc...
		adapter: 	a DIPhpDependencies
		runCommandText: 	'#!/bin/bash
type -P hhvm &>/dev/null && hhvm /home/otruffer/di...etc...
		testSpecification: 	'[{ "subject" : "Dicto\\RuleResult",
	   "argument": "Dicto\...etc...
		adapterID: 	'DIPhpDependencies'
		resultFile: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/mai/1424775681/D...etc...
		specificationFile: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/mai/14247...etc...
		commandFile: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/mai/1424775681/...etc...


[ :testGroup | testGroup build ] in DIDicto>>dictoBuild:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = ...etc...
		adapterTestGroups: 	a Dictionary(DIGrepFileContent->a DITestGroup DIJMeterLoadTe...etc...
		testGroup: 	a DITestGroup
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424775679'
		singleShotTask: 	false


Array(SequenceableCollection)>>do:
	Receiver: an Array(a DITestGroup a DITestGroup a DITestGroup a DITestGroup a DITestGroup)
	Arguments and temporary variables: 
		aBlock: 	[ :testGroup | testGroup build ]
		index: 	4
	Receiver's instance variables: 
an Array(a DITestGroup a DITestGroup a DITestGroup a DITestGroup a DITestGroup)

DIDicto>>dictoBuild:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = ...etc...
		adapterTestGroups: 	a Dictionary(DIGrepFileContent->a DITestGroup DIJMeterLoadTe...etc...
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424775679'
		singleShotTask: 	false


DIDicto>>dictoRun:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = ...etc...
		adapterTestGroups: 	nil
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424775679'
		singleShotTask: 	false


DIDicto>>dictoAll:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = ...etc...
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424775679'
		singleShotTask: 	false


[ DIDicto new dictoAll: input ] in DIWebServiceAPI>>getRun
	Receiver: a DIWebServiceAPI
	Arguments and temporary variables: 
		in: 	'/home/otruffer/dicto/bin/analysis/mai/dicto.rules'
		input: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = PhpCl...etc...
		rulesFailed: 	nil
		rulesTotal: 	nil
	Receiver's instance variables: 
		request: 	nil
		response: 	nil
		variables: 	nil
		delegate: 	nil
		principal: 	nil
		credentials: 	nil


BlockClosure>>on:do:
	Receiver: [ DIDicto new dictoAll: input ]
	Arguments and temporary variables: 
		exception: 	DIException
		handlerAction: 	[ :ex | ^ self error: ex description ]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	DIWebServiceAPI>>getRun
		startpc: 	138
		numArgs: 	0


DIWebServiceAPI>>getRun
	Receiver: a DIWebServiceAPI
	Arguments and temporary variables: 
		in: 	'/home/otruffer/dicto/bin/analysis/mai/dicto.rules'
		input: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = PhpCl...etc...
		rulesFailed: 	nil
		rulesTotal: 	nil
	Receiver's instance variables: 
		request: 	nil
		response: 	nil
		variables: 	nil
		delegate: 	nil
		principal: 	nil
		credentials: 	nil


DIWebServiceHandler>>post
	Receiver: a DIWebServiceHandler
	Arguments and temporary variables: 
		api: 	a DIWebServiceAPI
	Receiver's instance variables: 
		request: 	a ZnRequest(POST /mai/run)
		response: 	nil
		variables: 	an OrderedCollection('mai' 'run')
		delegate: 	a ZnJSONRestServerDelegate
		principal: 	nil
		credentials: 	nil
		dicto: 	a DIDicto


DIWebServiceHandler(ZnRestCall)>>execute
	Receiver: a DIWebServiceHandler
	Arguments and temporary variables: 

	Receiver's instance variables: 
		request: 	a ZnRequest(POST /mai/run)
		response: 	nil
		variables: 	an OrderedCollection('mai' 'run')
		delegate: 	a ZnJSONRestServerDelegate
		principal: 	nil
		credentials: 	nil
		dicto: 	a DIDicto


[ call execute ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


BlockClosure>>on:do:
	Receiver: [ call execute ]
	Arguments and temporary variables: 
		exception: 	ZnRestCallUnauthorized
		handlerAction: 	[ :exception | self unauthorized: exception request ]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
		startpc: 	38
		numArgs: 	0


ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


[ self execute: call ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /mai/run)
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


BlockClosure>>on:do:
	Receiver: [ self execute: call ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :exception | 
request server debugMode
	ifTrue: [ exception pa...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
		startpc: 	99
		numArgs: 	0


ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /mai/run)
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ :delegate | delegate handleRequest: request ] ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /mai/run)
		delegate: 	a ZnJSONRestServerDelegate
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateRequest:do:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /mai/run)
		block: 	[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ ...etc...
		authenticator: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /mai/run)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


[ self authenticateAndDelegateRequest: request ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /mai/run)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


BlockClosure>>on:do:
	Receiver: [ self authenticateAndDelegateRequest: request ]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :exception | 
self debugMode
	ifTrue: [ exception pass ]
	ifFa...etc...
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequ...etc...
		startpc: 	58
		numArgs: 	0


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /mai/run)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /mai/run)
		response: 	nil
		initialMilliseconds: 	479455
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeOneRequestResponseOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		stream: 	a ZdcSocketStream
		request: 	a ZnRequest(POST /mai/run)
		response: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


[ self executeOneRequestResponseOn: stream ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		stream: 	a ZdcSocketStream
		request: 	nil
		response: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


[ 
p psValueAt: index put: anObject.
aBlock value ] in ZnCurrentServer(DynamicVariable)>>value:during:
	Receiver: a ZnCurrentServer
	Arguments and temporary variables: 
		anObject: 	a ZnManagingMultiThreadedServer(running 8010)
		aBlock: 	[ self executeOneRequestResponseOn: stream ]
		p: 	a Process in nil
		oldValue: 	nil
	Receiver's instance variables: 
		index: 	5


BlockClosure>>ensure:
	Receiver: [ 
p psValueAt: index put: anObject.
aBlock value ]
	Arguments and temporary variables: 
		aBlock: 	[ p psValueAt: index put: oldValue ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ZnCurrentServer(DynamicVariable)>>value:during:
		startpc: 	62
		numArgs: 	0


ZnCurrentServer(DynamicVariable)>>value:during:
	Receiver: a ZnCurrentServer
	Arguments and temporary variables: 
		anObject: 	a ZnManagingMultiThreadedServer(running 8010)
		aBlock: 	[ self executeOneRequestResponseOn: stream ]
		p: 	a Process in nil
		oldValue: 	nil
	Receiver's instance variables: 
		index: 	5


ZnCurrentServer class(DynamicVariable class)>>value:during:
	Receiver: ZnCurrentServer
	Arguments and temporary variables: 
		anObject: 	a ZnManagingMultiThreadedServer(running 8010)
		aBlock: 	[ self executeOneRequestResponseOn: stream ]
	Receiver's instance variables: 
		superclass: 	DynamicVariable
		methodDict: 	a MethodDictionary()
		format: 	132
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#ZnCurrentServer
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Zinc-HTTP-Variables'
		traitComposition: 	{}
		localSelectors: 	nil
		hash: 	nil
		soleInstance: 	a ZnCurrentServer


ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		stream: 	a ZdcSocketStream
		request: 	nil
		response: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


[ self executeRequestResponseLoopOn: stream ] in [ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ] in [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		listeningSocket: 	a Socket[waitingForConnection]
		stream: 	a ZdcSocketStream
		socket: 	a Socket[connected]
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


BlockClosure>>ensure:
	Receiver: [ self executeRequestResponseLoopOn: stream ]
	Arguments and temporary variables: 
		aBlock: 	[ 
self log debug: 'Closing stream'.
self closeSocketStream: stream ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		se...etc...
		startpc: 	118
		numArgs: 	0


[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ] in [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		listeningSocket: 	a Socket[waitingForConnection]
		stream: 	a ZdcSocketStream
		socket: 	a Socket[connected]
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


BlockClosure>>ifCurtailed:
	Receiver: [ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing st...etc...
	Arguments and temporary variables: 
		aBlock: 	[ 
self log debug: 'Destroying socket'.
socket destroy ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	[ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
	...etc...
		startpc: 	113
		numArgs: 	0


[ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		listeningSocket: 	a Socket[waitingForConnection]
		stream: 	a ZdcSocketStream
		socket: 	a Socket[connected]
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnec...etc...
		startpc: 	108
		numArgs: 	0



--- The full stack ---
DIUtil class>>saveString:ToFile:
DITestGroup>>build
[ :testGroup | testGroup build ] in DIDicto>>dictoBuild:
Array(SequenceableCollection)>>do:
DIDicto>>dictoBuild:
DIDicto>>dictoRun:
DIDicto>>dictoAll:
[ DIDicto new dictoAll: input ] in DIWebServiceAPI>>getRun
BlockClosure>>on:do:
DIWebServiceAPI>>getRun
DIWebServiceHandler>>post
DIWebServiceHandler(ZnRestCall)>>execute
[ call execute ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
BlockClosure>>on:do:
ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
[ self execute: call ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
BlockClosure>>on:do:
ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ :delegate | delegate handleRequest: request ] ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateRequest:do:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
[ self authenticateAndDelegateRequest: request ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
BlockClosure>>on:do:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequest:
ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeOneRequestResponseOn:
[ self executeOneRequestResponseOn: stream ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
[ 
p psValueAt: index put: anObject.
aBlock value ] in ZnCurrentServer(DynamicVariable)>>value:during:
BlockClosure>>ensure:
ZnCurrentServer(DynamicVariable)>>value:during:
ZnCurrentServer class(DynamicVariable class)>>value:during:
ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
[ self executeRequestResponseLoopOn: stream ] in [ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ] in [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
BlockClosure>>ensure:
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ] in [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
BlockClosure>>ifCurtailed:
[ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Halt
24 February 2015 12:02:21.927336 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
NBCogit NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
https://github.com/pharo-project/pharo-vm.git Commit: 4a0d556150d478ff2de3c9624d2f18e6eaa3fa5c Date: 2014-12-18 18:42:53 +0100 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14893

Image: Pharo3.0 [Latest update: #30863]

DIUtil class>>saveString:ToFile:
	Receiver: DIUtil
	Arguments and temporary variables: 
		aString: 	'#!/bin/bash
type -P hhvm &>/dev/null && hhvm /home/otruffer/dicto/bin...etc...
		aFileName: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/mai/1424775681/DI...etc...
		stream: 	MultiByteFileStream: '/home/otruffer/dicto/bin/analysis/mai/1424775681/...etc...
		newFileName: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/mai/1424775681/...etc...
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary()
		format: 	2
		layout: 	a FixedLayout
		instanceVariables: 	#()
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#DIUtil
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Dicto-var-util'
		traitComposition: 	{}
		localSelectors: 	nil


DITestGroup>>build
	Receiver: a DITestGroup
	Arguments and temporary variables: 

	Receiver's instance variables: 
		rules: 	an OrderedCollection(RuleResult cannot depend on DictoTalker DictoTalker...etc...
		adapter: 	a DIPhpDependencies
		runCommandText: 	'#!/bin/bash
type -P hhvm &>/dev/null && hhvm /home/otruffer/di...etc...
		testSpecification: 	'[{ "subject" : "Dicto\\RuleResult",
	   "argument": "Dicto\...etc...
		adapterID: 	'DIPhpDependencies'
		resultFile: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/mai/1424775681/D...etc...
		specificationFile: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/mai/14247...etc...
		commandFile: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/mai/1424775681/...etc...


[ :testGroup | testGroup build ] in DIDicto>>dictoBuild:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = ...etc...
		adapterTestGroups: 	a Dictionary(DIGrepFileContent->a DITestGroup DIJMeterLoadTe...etc...
		testGroup: 	a DITestGroup
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424775679'
		singleShotTask: 	false


Array(SequenceableCollection)>>do:
	Receiver: an Array(a DITestGroup a DITestGroup a DITestGroup a DITestGroup a DITestGroup)
	Arguments and temporary variables: 
		aBlock: 	[ :testGroup | testGroup build ]
		index: 	4
	Receiver's instance variables: 
an Array(a DITestGroup a DITestGroup a DITestGroup a DITestGroup a DITestGroup)

DIDicto>>dictoBuild:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = ...etc...
		adapterTestGroups: 	a Dictionary(DIGrepFileContent->a DITestGroup DIJMeterLoadTe...etc...
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424775679'
		singleShotTask: 	false


DIDicto>>dictoRun:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = ...etc...
		adapterTestGroups: 	nil
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424775679'
		singleShotTask: 	false


DIDicto>>dictoAll:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = ...etc...
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424775679'
		singleShotTask: 	false


[ DIDicto new dictoAll: input ] in DIWebServiceAPI>>getRun
	Receiver: a DIWebServiceAPI
	Arguments and temporary variables: 
		in: 	'/home/otruffer/dicto/bin/analysis/mai/dicto.rules'
		input: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = PhpCl...etc...
		rulesFailed: 	nil
		rulesTotal: 	nil
	Receiver's instance variables: 
		request: 	nil
		response: 	nil
		variables: 	nil
		delegate: 	nil
		principal: 	nil
		credentials: 	nil


BlockClosure>>on:do:
	Receiver: [ DIDicto new dictoAll: input ]
	Arguments and temporary variables: 
		exception: 	DIException
		handlerAction: 	[ :ex | ^ self error: ex description ]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	DIWebServiceAPI>>getRun
		startpc: 	138
		numArgs: 	0


DIWebServiceAPI>>getRun
	Receiver: a DIWebServiceAPI
	Arguments and temporary variables: 
		in: 	'/home/otruffer/dicto/bin/analysis/mai/dicto.rules'
		input: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = PhpCl...etc...
		rulesFailed: 	nil
		rulesTotal: 	nil
	Receiver's instance variables: 
		request: 	nil
		response: 	nil
		variables: 	nil
		delegate: 	nil
		principal: 	nil
		credentials: 	nil


DIWebServiceHandler>>post
	Receiver: a DIWebServiceHandler
	Arguments and temporary variables: 
		api: 	a DIWebServiceAPI
	Receiver's instance variables: 
		request: 	a ZnRequest(POST /mai/run)
		response: 	nil
		variables: 	an OrderedCollection('mai' 'run')
		delegate: 	a ZnJSONRestServerDelegate
		principal: 	nil
		credentials: 	nil
		dicto: 	a DIDicto


DIWebServiceHandler(ZnRestCall)>>execute
	Receiver: a DIWebServiceHandler
	Arguments and temporary variables: 

	Receiver's instance variables: 
		request: 	a ZnRequest(POST /mai/run)
		response: 	nil
		variables: 	an OrderedCollection('mai' 'run')
		delegate: 	a ZnJSONRestServerDelegate
		principal: 	nil
		credentials: 	nil
		dicto: 	a DIDicto


[ call execute ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


BlockClosure>>on:do:
	Receiver: [ call execute ]
	Arguments and temporary variables: 
		exception: 	ZnRestCallUnauthorized
		handlerAction: 	[ :exception | self unauthorized: exception request ]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
		startpc: 	38
		numArgs: 	0


ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


[ self execute: call ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /mai/run)
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


BlockClosure>>on:do:
	Receiver: [ self execute: call ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :exception | 
request server debugMode
	ifTrue: [ exception pa...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
		startpc: 	99
		numArgs: 	0


ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /mai/run)
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ :delegate | delegate handleRequest: request ] ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /mai/run)
		delegate: 	a ZnJSONRestServerDelegate
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateRequest:do:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /mai/run)
		block: 	[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ ...etc...
		authenticator: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /mai/run)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


[ self authenticateAndDelegateRequest: request ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /mai/run)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


BlockClosure>>on:do:
	Receiver: [ self authenticateAndDelegateRequest: request ]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :exception | 
self debugMode
	ifTrue: [ exception pass ]
	ifFa...etc...
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequ...etc...
		startpc: 	58
		numArgs: 	0


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /mai/run)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /mai/run)
		response: 	nil
		initialMilliseconds: 	479455
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeOneRequestResponseOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		stream: 	a ZdcSocketStream
		request: 	a ZnRequest(POST /mai/run)
		response: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


[ self executeOneRequestResponseOn: stream ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		stream: 	a ZdcSocketStream
		request: 	nil
		response: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


[ 
p psValueAt: index put: anObject.
aBlock value ] in ZnCurrentServer(DynamicVariable)>>value:during:
	Receiver: a ZnCurrentServer
	Arguments and temporary variables: 
		anObject: 	a ZnManagingMultiThreadedServer(running 8010)
		aBlock: 	[ self executeOneRequestResponseOn: stream ]
		p: 	a Process in nil
		oldValue: 	nil
	Receiver's instance variables: 
		index: 	5


BlockClosure>>ensure:
	Receiver: [ 
p psValueAt: index put: anObject.
aBlock value ]
	Arguments and temporary variables: 
		aBlock: 	[ p psValueAt: index put: oldValue ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ZnCurrentServer(DynamicVariable)>>value:during:
		startpc: 	62
		numArgs: 	0


ZnCurrentServer(DynamicVariable)>>value:during:
	Receiver: a ZnCurrentServer
	Arguments and temporary variables: 
		anObject: 	a ZnManagingMultiThreadedServer(running 8010)
		aBlock: 	[ self executeOneRequestResponseOn: stream ]
		p: 	a Process in nil
		oldValue: 	nil
	Receiver's instance variables: 
		index: 	5


ZnCurrentServer class(DynamicVariable class)>>value:during:
	Receiver: ZnCurrentServer
	Arguments and temporary variables: 
		anObject: 	a ZnManagingMultiThreadedServer(running 8010)
		aBlock: 	[ self executeOneRequestResponseOn: stream ]
	Receiver's instance variables: 
		superclass: 	DynamicVariable
		methodDict: 	a MethodDictionary()
		format: 	132
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#ZnCurrentServer
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Zinc-HTTP-Variables'
		traitComposition: 	{}
		localSelectors: 	nil
		hash: 	nil
		soleInstance: 	a ZnCurrentServer


ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		stream: 	a ZdcSocketStream
		request: 	nil
		response: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


[ self executeRequestResponseLoopOn: stream ] in [ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ] in [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		listeningSocket: 	a Socket[waitingForConnection]
		stream: 	a ZdcSocketStream
		socket: 	a Socket[connected]
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


BlockClosure>>ensure:
	Receiver: [ self executeRequestResponseLoopOn: stream ]
	Arguments and temporary variables: 
		aBlock: 	[ 
self log debug: 'Closing stream'.
self closeSocketStream: stream ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		se...etc...
		startpc: 	118
		numArgs: 	0


[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ] in [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		listeningSocket: 	a Socket[waitingForConnection]
		stream: 	a ZdcSocketStream
		socket: 	a Socket[connected]
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


BlockClosure>>ifCurtailed:
	Receiver: [ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing st...etc...
	Arguments and temporary variables: 
		aBlock: 	[ 
self log debug: 'Destroying socket'.
socket destroy ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	[ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
	...etc...
		startpc: 	113
		numArgs: 	0


[ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		listeningSocket: 	a Socket[waitingForConnection]
		stream: 	a ZdcSocketStream
		socket: 	a Socket[connected]
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnec...etc...
		startpc: 	108
		numArgs: 	0



--- The full stack ---
DIUtil class>>saveString:ToFile:
DITestGroup>>build
[ :testGroup | testGroup build ] in DIDicto>>dictoBuild:
Array(SequenceableCollection)>>do:
DIDicto>>dictoBuild:
DIDicto>>dictoRun:
DIDicto>>dictoAll:
[ DIDicto new dictoAll: input ] in DIWebServiceAPI>>getRun
BlockClosure>>on:do:
DIWebServiceAPI>>getRun
DIWebServiceHandler>>post
DIWebServiceHandler(ZnRestCall)>>execute
[ call execute ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
BlockClosure>>on:do:
ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
[ self execute: call ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
BlockClosure>>on:do:
ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ :delegate | delegate handleRequest: request ] ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateRequest:do:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
[ self authenticateAndDelegateRequest: request ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
BlockClosure>>on:do:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequest:
ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeOneRequestResponseOn:
[ self executeOneRequestResponseOn: stream ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
[ 
p psValueAt: index put: anObject.
aBlock value ] in ZnCurrentServer(DynamicVariable)>>value:during:
BlockClosure>>ensure:
ZnCurrentServer(DynamicVariable)>>value:during:
ZnCurrentServer class(DynamicVariable class)>>value:during:
ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
[ self executeRequestResponseLoopOn: stream ] in [ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ] in [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
BlockClosure>>ensure:
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ] in [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
BlockClosure>>ifCurtailed:
[ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Halt
24 February 2015 12:02:24.164454 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
NBCogit NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
https://github.com/pharo-project/pharo-vm.git Commit: 4a0d556150d478ff2de3c9624d2f18e6eaa3fa5c Date: 2014-12-18 18:42:53 +0100 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14893

Image: Pharo3.0 [Latest update: #30863]

DIUtil class>>saveString:ToFile:
	Receiver: DIUtil
	Arguments and temporary variables: 
		aString: 	'<results id="1424775681"><rules><rule id="1" failed="true" value="Rul...etc...
		aFileName: 	'/home/otruffer/dicto/bin/analysis/mai/results.xml'
		stream: 	MultiByteFileStream: '/home/otruffer/dicto/bin/analysis/mai/results.xml...etc...
		newFileName: 	'/home/otruffer/dicto/bin/analysis/mai/results.xml'
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary()
		format: 	2
		layout: 	a FixedLayout
		instanceVariables: 	#()
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#DIUtil
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Dicto-var-util'
		traitComposition: 	{}
		localSelectors: 	nil


DIXMLExporter>>export:to:
	Receiver: a DIXMLExporter
	Arguments and temporary variables: 
		testSuites: 	a Dictionary(DIGrepFileContent->a DITestGroup DIJMeterLoadTest->a D...etc...
		anXMLFile: 	'/home/otruffer/dicto/bin/analysis/mai/results.xml'
		out: 	'<results id="1424775681"><rules><rule id="1" failed="true" value="RuleRes...etc...
	Receiver's instance variables: 
a DIXMLExporter

DIDicto>>_exportTests:to:withExporter:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		testSuites: 	a Dictionary(DIGrepFileContent->a DITestGroup DIJMeterLoadTest->a D...etc...
		aFile: 	nil
		anExporterClass: 	DIXMLExporter
		ex: 	a DIXMLExporter
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424775679'
		singleShotTask: 	false


DIDicto>>dictoCheck:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = ...etc...
		adapterTestGroups: 	a Dictionary(DIGrepFileContent->a DITestGroup DIJMeterLoadTe...etc...
		exportFormat: 	nil
		xml: 	nil
		json: 	nil
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424775679'
		singleShotTask: 	false


DIDicto>>dictoAll:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = ...etc...
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424775679'
		singleShotTask: 	false


[ DIDicto new dictoAll: input ] in DIWebServiceAPI>>getRun
	Receiver: a DIWebServiceAPI
	Arguments and temporary variables: 
		in: 	'/home/otruffer/dicto/bin/analysis/mai/dicto.rules'
		input: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = PhpCl...etc...
		rulesFailed: 	nil
		rulesTotal: 	nil
	Receiver's instance variables: 
		request: 	nil
		response: 	nil
		variables: 	nil
		delegate: 	nil
		principal: 	nil
		credentials: 	nil


BlockClosure>>on:do:
	Receiver: [ DIDicto new dictoAll: input ]
	Arguments and temporary variables: 
		exception: 	DIException
		handlerAction: 	[ :ex | ^ self error: ex description ]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	DIWebServiceAPI>>getRun
		startpc: 	138
		numArgs: 	0


DIWebServiceAPI>>getRun
	Receiver: a DIWebServiceAPI
	Arguments and temporary variables: 
		in: 	'/home/otruffer/dicto/bin/analysis/mai/dicto.rules'
		input: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = PhpCl...etc...
		rulesFailed: 	nil
		rulesTotal: 	nil
	Receiver's instance variables: 
		request: 	nil
		response: 	nil
		variables: 	nil
		delegate: 	nil
		principal: 	nil
		credentials: 	nil


DIWebServiceHandler>>post
	Receiver: a DIWebServiceHandler
	Arguments and temporary variables: 
		api: 	a DIWebServiceAPI
	Receiver's instance variables: 
		request: 	a ZnRequest(POST /mai/run)
		response: 	nil
		variables: 	an OrderedCollection('mai' 'run')
		delegate: 	a ZnJSONRestServerDelegate
		principal: 	nil
		credentials: 	nil
		dicto: 	a DIDicto


DIWebServiceHandler(ZnRestCall)>>execute
	Receiver: a DIWebServiceHandler
	Arguments and temporary variables: 

	Receiver's instance variables: 
		request: 	a ZnRequest(POST /mai/run)
		response: 	nil
		variables: 	an OrderedCollection('mai' 'run')
		delegate: 	a ZnJSONRestServerDelegate
		principal: 	nil
		credentials: 	nil
		dicto: 	a DIDicto


[ call execute ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


BlockClosure>>on:do:
	Receiver: [ call execute ]
	Arguments and temporary variables: 
		exception: 	ZnRestCallUnauthorized
		handlerAction: 	[ :exception | self unauthorized: exception request ]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
		startpc: 	38
		numArgs: 	0


ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


[ self execute: call ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /mai/run)
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


BlockClosure>>on:do:
	Receiver: [ self execute: call ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :exception | 
request server debugMode
	ifTrue: [ exception pa...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
		startpc: 	99
		numArgs: 	0


ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /mai/run)
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ :delegate | delegate handleRequest: request ] ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /mai/run)
		delegate: 	a ZnJSONRestServerDelegate
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateRequest:do:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /mai/run)
		block: 	[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ ...etc...
		authenticator: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /mai/run)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


[ self authenticateAndDelegateRequest: request ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /mai/run)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


BlockClosure>>on:do:
	Receiver: [ self authenticateAndDelegateRequest: request ]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :exception | 
self debugMode
	ifTrue: [ exception pass ]
	ifFa...etc...
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequ...etc...
		startpc: 	58
		numArgs: 	0


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /mai/run)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /mai/run)
		response: 	nil
		initialMilliseconds: 	479455
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeOneRequestResponseOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		stream: 	a ZdcSocketStream
		request: 	a ZnRequest(POST /mai/run)
		response: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


[ self executeOneRequestResponseOn: stream ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		stream: 	a ZdcSocketStream
		request: 	nil
		response: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


[ 
p psValueAt: index put: anObject.
aBlock value ] in ZnCurrentServer(DynamicVariable)>>value:during:
	Receiver: a ZnCurrentServer
	Arguments and temporary variables: 
		anObject: 	a ZnManagingMultiThreadedServer(running 8010)
		aBlock: 	[ self executeOneRequestResponseOn: stream ]
		p: 	a Process in nil
		oldValue: 	nil
	Receiver's instance variables: 
		index: 	5


BlockClosure>>ensure:
	Receiver: [ 
p psValueAt: index put: anObject.
aBlock value ]
	Arguments and temporary variables: 
		aBlock: 	[ p psValueAt: index put: oldValue ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ZnCurrentServer(DynamicVariable)>>value:during:
		startpc: 	62
		numArgs: 	0


ZnCurrentServer(DynamicVariable)>>value:during:
	Receiver: a ZnCurrentServer
	Arguments and temporary variables: 
		anObject: 	a ZnManagingMultiThreadedServer(running 8010)
		aBlock: 	[ self executeOneRequestResponseOn: stream ]
		p: 	a Process in nil
		oldValue: 	nil
	Receiver's instance variables: 
		index: 	5


ZnCurrentServer class(DynamicVariable class)>>value:during:
	Receiver: ZnCurrentServer
	Arguments and temporary variables: 
		anObject: 	a ZnManagingMultiThreadedServer(running 8010)
		aBlock: 	[ self executeOneRequestResponseOn: stream ]
	Receiver's instance variables: 
		superclass: 	DynamicVariable
		methodDict: 	a MethodDictionary()
		format: 	132
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#ZnCurrentServer
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Zinc-HTTP-Variables'
		traitComposition: 	{}
		localSelectors: 	nil
		hash: 	nil
		soleInstance: 	a ZnCurrentServer


ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		stream: 	a ZdcSocketStream
		request: 	nil
		response: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


[ self executeRequestResponseLoopOn: stream ] in [ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ] in [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		listeningSocket: 	a Socket[waitingForConnection]
		stream: 	a ZdcSocketStream
		socket: 	a Socket[connected]
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


BlockClosure>>ensure:
	Receiver: [ self executeRequestResponseLoopOn: stream ]
	Arguments and temporary variables: 
		aBlock: 	[ 
self log debug: 'Closing stream'.
self closeSocketStream: stream ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		se...etc...
		startpc: 	118
		numArgs: 	0


[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ] in [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		listeningSocket: 	a Socket[waitingForConnection]
		stream: 	a ZdcSocketStream
		socket: 	a Socket[connected]
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


BlockClosure>>ifCurtailed:
	Receiver: [ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing st...etc...
	Arguments and temporary variables: 
		aBlock: 	[ 
self log debug: 'Destroying socket'.
socket destroy ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	[ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
	...etc...
		startpc: 	113
		numArgs: 	0


[ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		listeningSocket: 	a Socket[waitingForConnection]
		stream: 	a ZdcSocketStream
		socket: 	a Socket[connected]
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnec...etc...
		startpc: 	108
		numArgs: 	0



--- The full stack ---
DIUtil class>>saveString:ToFile:
DIXMLExporter>>export:to:
DIDicto>>_exportTests:to:withExporter:
DIDicto>>dictoCheck:
DIDicto>>dictoAll:
[ DIDicto new dictoAll: input ] in DIWebServiceAPI>>getRun
BlockClosure>>on:do:
DIWebServiceAPI>>getRun
DIWebServiceHandler>>post
DIWebServiceHandler(ZnRestCall)>>execute
[ call execute ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
BlockClosure>>on:do:
ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
[ self execute: call ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
BlockClosure>>on:do:
ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ :delegate | delegate handleRequest: request ] ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateRequest:do:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
[ self authenticateAndDelegateRequest: request ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
BlockClosure>>on:do:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequest:
ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeOneRequestResponseOn:
[ self executeOneRequestResponseOn: stream ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
[ 
p psValueAt: index put: anObject.
aBlock value ] in ZnCurrentServer(DynamicVariable)>>value:during:
BlockClosure>>ensure:
ZnCurrentServer(DynamicVariable)>>value:during:
ZnCurrentServer class(DynamicVariable class)>>value:during:
ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
[ self executeRequestResponseLoopOn: stream ] in [ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ] in [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
BlockClosure>>ensure:
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ] in [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
BlockClosure>>ifCurtailed:
[ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Halt
24 February 2015 12:02:31.696766 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
NBCogit NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
https://github.com/pharo-project/pharo-vm.git Commit: 4a0d556150d478ff2de3c9624d2f18e6eaa3fa5c Date: 2014-12-18 18:42:53 +0100 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14893

Image: Pharo3.0 [Latest update: #30863]

DIUtil class>>saveString:ToFile:
	Receiver: DIUtil
	Arguments and temporary variables: 
		aString: 	'{

	"results" : {

		"id" : "1424775681",

		"rules" : {

			"1" : {
...etc...
		aFileName: 	'/home/otruffer/dicto/bin/analysis/mai/results.json'
		stream: 	MultiByteFileStream: '/home/otruffer/dicto/bin/analysis/mai/results.jso...etc...
		newFileName: 	'/home/otruffer/dicto/bin/analysis/mai/results.json'
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary()
		format: 	2
		layout: 	a FixedLayout
		instanceVariables: 	#()
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#DIUtil
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Dicto-var-util'
		traitComposition: 	{}
		localSelectors: 	nil


DIJSONExporter>>export:to:
	Receiver: a DIJSONExporter
	Arguments and temporary variables: 
		jsonSubRules: 	a Dictionary('3001'->a Dictionary('errors'->an OrderedCollection(...etc...
		testSuites: 	a Dictionary(DIGrepFileContent->a DITestGroup DIJMeterLoadTest->a D...etc...
		aFile: 	'/home/otruffer/dicto/bin/analysis/mai/results.json'
		jsonRules: 	a Dictionary('1'->a Dictionary('failed'->'true' 'subrules'->a Dictio...etc...
		outDictionary: 	a Dictionary('results'->a Dictionary('id'->'1424775681' 'rules'-...etc...
		outString: 	'{

	"results" : {

		"id" : "1424775681",

		"rules" : {

			"1" : ...etc...
		analysisID: 	'1424775681'
	Receiver's instance variables: 
a DIJSONExporter

DIDicto>>_exportTests:to:withExporter:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		testSuites: 	a Dictionary(DIGrepFileContent->a DITestGroup DIJMeterLoadTest->a D...etc...
		aFile: 	nil
		anExporterClass: 	DIJSONExporter
		ex: 	a DIJSONExporter
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424775679'
		singleShotTask: 	false


DIDicto>>dictoCheck:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = ...etc...
		adapterTestGroups: 	a Dictionary(DIGrepFileContent->a DITestGroup DIJMeterLoadTe...etc...
		exportFormat: 	nil
		xml: 	'<results id="1424775681"><rules><rule id="1" failed="true" value="RuleRes...etc...
		json: 	nil
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424775679'
		singleShotTask: 	false


DIDicto>>dictoAll:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = ...etc...
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424775679'
		singleShotTask: 	false


[ DIDicto new dictoAll: input ] in DIWebServiceAPI>>getRun
	Receiver: a DIWebServiceAPI
	Arguments and temporary variables: 
		in: 	'/home/otruffer/dicto/bin/analysis/mai/dicto.rules'
		input: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = PhpCl...etc...
		rulesFailed: 	nil
		rulesTotal: 	nil
	Receiver's instance variables: 
		request: 	nil
		response: 	nil
		variables: 	nil
		delegate: 	nil
		principal: 	nil
		credentials: 	nil


BlockClosure>>on:do:
	Receiver: [ DIDicto new dictoAll: input ]
	Arguments and temporary variables: 
		exception: 	DIException
		handlerAction: 	[ :ex | ^ self error: ex description ]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	DIWebServiceAPI>>getRun
		startpc: 	138
		numArgs: 	0


DIWebServiceAPI>>getRun
	Receiver: a DIWebServiceAPI
	Arguments and temporary variables: 
		in: 	'/home/otruffer/dicto/bin/analysis/mai/dicto.rules'
		input: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = PhpCl...etc...
		rulesFailed: 	nil
		rulesTotal: 	nil
	Receiver's instance variables: 
		request: 	nil
		response: 	nil
		variables: 	nil
		delegate: 	nil
		principal: 	nil
		credentials: 	nil


DIWebServiceHandler>>post
	Receiver: a DIWebServiceHandler
	Arguments and temporary variables: 
		api: 	a DIWebServiceAPI
	Receiver's instance variables: 
		request: 	a ZnRequest(POST /mai/run)
		response: 	nil
		variables: 	an OrderedCollection('mai' 'run')
		delegate: 	a ZnJSONRestServerDelegate
		principal: 	nil
		credentials: 	nil
		dicto: 	a DIDicto


DIWebServiceHandler(ZnRestCall)>>execute
	Receiver: a DIWebServiceHandler
	Arguments and temporary variables: 

	Receiver's instance variables: 
		request: 	a ZnRequest(POST /mai/run)
		response: 	nil
		variables: 	an OrderedCollection('mai' 'run')
		delegate: 	a ZnJSONRestServerDelegate
		principal: 	nil
		credentials: 	nil
		dicto: 	a DIDicto


[ call execute ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


BlockClosure>>on:do:
	Receiver: [ call execute ]
	Arguments and temporary variables: 
		exception: 	ZnRestCallUnauthorized
		handlerAction: 	[ :exception | self unauthorized: exception request ]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
		startpc: 	38
		numArgs: 	0


ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


[ self execute: call ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /mai/run)
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


BlockClosure>>on:do:
	Receiver: [ self execute: call ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :exception | 
request server debugMode
	ifTrue: [ exception pa...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
		startpc: 	99
		numArgs: 	0


ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /mai/run)
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ :delegate | delegate handleRequest: request ] ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /mai/run)
		delegate: 	a ZnJSONRestServerDelegate
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateRequest:do:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /mai/run)
		block: 	[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ ...etc...
		authenticator: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /mai/run)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


[ self authenticateAndDelegateRequest: request ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /mai/run)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


BlockClosure>>on:do:
	Receiver: [ self authenticateAndDelegateRequest: request ]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :exception | 
self debugMode
	ifTrue: [ exception pass ]
	ifFa...etc...
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequ...etc...
		startpc: 	58
		numArgs: 	0


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /mai/run)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /mai/run)
		response: 	nil
		initialMilliseconds: 	479455
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeOneRequestResponseOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		stream: 	a ZdcSocketStream
		request: 	a ZnRequest(POST /mai/run)
		response: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


[ self executeOneRequestResponseOn: stream ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		stream: 	a ZdcSocketStream
		request: 	nil
		response: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


[ 
p psValueAt: index put: anObject.
aBlock value ] in ZnCurrentServer(DynamicVariable)>>value:during:
	Receiver: a ZnCurrentServer
	Arguments and temporary variables: 
		anObject: 	a ZnManagingMultiThreadedServer(running 8010)
		aBlock: 	[ self executeOneRequestResponseOn: stream ]
		p: 	a Process in nil
		oldValue: 	nil
	Receiver's instance variables: 
		index: 	5


BlockClosure>>ensure:
	Receiver: [ 
p psValueAt: index put: anObject.
aBlock value ]
	Arguments and temporary variables: 
		aBlock: 	[ p psValueAt: index put: oldValue ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ZnCurrentServer(DynamicVariable)>>value:during:
		startpc: 	62
		numArgs: 	0


ZnCurrentServer(DynamicVariable)>>value:during:
	Receiver: a ZnCurrentServer
	Arguments and temporary variables: 
		anObject: 	a ZnManagingMultiThreadedServer(running 8010)
		aBlock: 	[ self executeOneRequestResponseOn: stream ]
		p: 	a Process in nil
		oldValue: 	nil
	Receiver's instance variables: 
		index: 	5


ZnCurrentServer class(DynamicVariable class)>>value:during:
	Receiver: ZnCurrentServer
	Arguments and temporary variables: 
		anObject: 	a ZnManagingMultiThreadedServer(running 8010)
		aBlock: 	[ self executeOneRequestResponseOn: stream ]
	Receiver's instance variables: 
		superclass: 	DynamicVariable
		methodDict: 	a MethodDictionary()
		format: 	132
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#ZnCurrentServer
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Zinc-HTTP-Variables'
		traitComposition: 	{}
		localSelectors: 	nil
		hash: 	nil
		soleInstance: 	a ZnCurrentServer


ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		stream: 	a ZdcSocketStream
		request: 	nil
		response: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


[ self executeRequestResponseLoopOn: stream ] in [ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ] in [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		listeningSocket: 	a Socket[waitingForConnection]
		stream: 	a ZdcSocketStream
		socket: 	a Socket[connected]
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


BlockClosure>>ensure:
	Receiver: [ self executeRequestResponseLoopOn: stream ]
	Arguments and temporary variables: 
		aBlock: 	[ 
self log debug: 'Closing stream'.
self closeSocketStream: stream ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		se...etc...
		startpc: 	118
		numArgs: 	0


[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ] in [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		listeningSocket: 	a Socket[waitingForConnection]
		stream: 	a ZdcSocketStream
		socket: 	a Socket[connected]
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


BlockClosure>>ifCurtailed:
	Receiver: [ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing st...etc...
	Arguments and temporary variables: 
		aBlock: 	[ 
self log debug: 'Destroying socket'.
socket destroy ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	[ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
	...etc...
		startpc: 	113
		numArgs: 	0


[ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		listeningSocket: 	a Socket[waitingForConnection]
		stream: 	a ZdcSocketStream
		socket: 	a Socket[connected]
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnec...etc...
		startpc: 	108
		numArgs: 	0



--- The full stack ---
DIUtil class>>saveString:ToFile:
DIJSONExporter>>export:to:
DIDicto>>_exportTests:to:withExporter:
DIDicto>>dictoCheck:
DIDicto>>dictoAll:
[ DIDicto new dictoAll: input ] in DIWebServiceAPI>>getRun
BlockClosure>>on:do:
DIWebServiceAPI>>getRun
DIWebServiceHandler>>post
DIWebServiceHandler(ZnRestCall)>>execute
[ call execute ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
BlockClosure>>on:do:
ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
[ self execute: call ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
BlockClosure>>on:do:
ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ :delegate | delegate handleRequest: request ] ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateRequest:do:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
[ self authenticateAndDelegateRequest: request ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
BlockClosure>>on:do:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequest:
ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeOneRequestResponseOn:
[ self executeOneRequestResponseOn: stream ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
[ 
p psValueAt: index put: anObject.
aBlock value ] in ZnCurrentServer(DynamicVariable)>>value:during:
BlockClosure>>ensure:
ZnCurrentServer(DynamicVariable)>>value:during:
ZnCurrentServer class(DynamicVariable class)>>value:during:
ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
[ self executeRequestResponseLoopOn: stream ] in [ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ] in [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
BlockClosure>>ensure:
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ] in [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
BlockClosure>>ifCurtailed:
[ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Halt
24 February 2015 12:02:41.197348 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
NBCogit NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
https://github.com/pharo-project/pharo-vm.git Commit: 4a0d556150d478ff2de3c9624d2f18e6eaa3fa5c Date: 2014-12-18 18:42:53 +0100 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14893

Image: Pharo3.0 [Latest update: #30863]

DIUtil class>>saveString:ToFile:
	Receiver: DIUtil
	Arguments and temporary variables: 
		aString: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = Php...etc...
		aFileName: 	'/home/otruffer/dicto/bin/analysis/mai/dicto.rules'
		stream: 	MultiByteFileStream: '/home/otruffer/dicto/bin/analysis/mai/dicto.rules...etc...
		newFileName: 	'/home/otruffer/dicto/bin/analysis/mai/dicto.rules'
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary()
		format: 	2
		layout: 	a FixedLayout
		instanceVariables: 	#()
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#DIUtil
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Dicto-var-util'
		traitComposition: 	{}
		localSelectors: 	nil


DIDicto>>dictoParse:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = ...etc...
		adapterTestGroups: 	nil
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424775761'
		singleShotTask: 	true


[ dicto dictoParse: text ] in DIWebServiceAPI>>postRules:
	Receiver: a DIWebServiceAPI
	Arguments and temporary variables: 
		dict: 	a Dictionary('rules'->'RuleResult = PhpClass with name:"Dicto\\RuleResult...etc...
		dicto: 	a DIDicto
		text: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = PhpCla...etc...
	Receiver's instance variables: 
		request: 	nil
		response: 	nil
		variables: 	nil
		delegate: 	nil
		principal: 	nil
		credentials: 	nil


BlockClosure>>on:do:
	Receiver: [ dicto dictoParse: text ]
	Arguments and temporary variables: 
		exception: 	DISyntaxErrorException
		handlerAction: 	[ :ex | ^ self error: 'syntax error' ]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	DIWebServiceAPI>>postRules:
		startpc: 	58
		numArgs: 	0


DIWebServiceAPI>>postRules:
	Receiver: a DIWebServiceAPI
	Arguments and temporary variables: 
		dict: 	a Dictionary('rules'->'RuleResult = PhpClass with name:"Dicto\\RuleResult...etc...
		dicto: 	a DIDicto
		text: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = PhpCla...etc...
	Receiver's instance variables: 
		request: 	nil
		response: 	nil
		variables: 	nil
		delegate: 	nil
		principal: 	nil
		credentials: 	nil


DIWebServiceHandler>>post
	Receiver: a DIWebServiceHandler
	Arguments and temporary variables: 
		api: 	a DIWebServiceAPI
	Receiver's instance variables: 
		request: 	a ZnRequest(POST /mai/rules)
		response: 	nil
		variables: 	an OrderedCollection('mai' 'rules')
		delegate: 	a ZnJSONRestServerDelegate
		principal: 	nil
		credentials: 	nil
		dicto: 	a DIDicto


DIWebServiceHandler(ZnRestCall)>>execute
	Receiver: a DIWebServiceHandler
	Arguments and temporary variables: 

	Receiver's instance variables: 
		request: 	a ZnRequest(POST /mai/rules)
		response: 	nil
		variables: 	an OrderedCollection('mai' 'rules')
		delegate: 	a ZnJSONRestServerDelegate
		principal: 	nil
		credentials: 	nil
		dicto: 	a DIDicto


[ call execute ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


BlockClosure>>on:do:
	Receiver: [ call execute ]
	Arguments and temporary variables: 
		exception: 	ZnRestCallUnauthorized
		handlerAction: 	[ :exception | self unauthorized: exception request ]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
		startpc: 	38
		numArgs: 	0


ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


[ self execute: call ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /mai/rules)
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


BlockClosure>>on:do:
	Receiver: [ self execute: call ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :exception | 
request server debugMode
	ifTrue: [ exception pa...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
		startpc: 	99
		numArgs: 	0


ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /mai/rules)
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ :delegate | delegate handleRequest: request ] ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /mai/rules)
		delegate: 	a ZnJSONRestServerDelegate
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateRequest:do:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /mai/rules)
		block: 	[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ ...etc...
		authenticator: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /mai/rules)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


[ self authenticateAndDelegateRequest: request ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /mai/rules)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


BlockClosure>>on:do:
	Receiver: [ self authenticateAndDelegateRequest: request ]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :exception | 
self debugMode
	ifTrue: [ exception pass ]
	ifFa...etc...
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequ...etc...
		startpc: 	58
		numArgs: 	0


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /mai/rules)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /mai/rules)
		response: 	nil
		initialMilliseconds: 	561489
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeOneRequestResponseOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		stream: 	a ZdcSocketStream
		request: 	a ZnRequest(POST /mai/rules)
		response: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


[ self executeOneRequestResponseOn: stream ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		stream: 	a ZdcSocketStream
		request: 	nil
		response: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


[ 
p psValueAt: index put: anObject.
aBlock value ] in ZnCurrentServer(DynamicVariable)>>value:during:
	Receiver: a ZnCurrentServer
	Arguments and temporary variables: 
		anObject: 	a ZnManagingMultiThreadedServer(running 8010)
		aBlock: 	[ self executeOneRequestResponseOn: stream ]
		p: 	a Process in nil
		oldValue: 	nil
	Receiver's instance variables: 
		index: 	5


BlockClosure>>ensure:
	Receiver: [ 
p psValueAt: index put: anObject.
aBlock value ]
	Arguments and temporary variables: 
		aBlock: 	[ p psValueAt: index put: oldValue ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ZnCurrentServer(DynamicVariable)>>value:during:
		startpc: 	62
		numArgs: 	0


ZnCurrentServer(DynamicVariable)>>value:during:
	Receiver: a ZnCurrentServer
	Arguments and temporary variables: 
		anObject: 	a ZnManagingMultiThreadedServer(running 8010)
		aBlock: 	[ self executeOneRequestResponseOn: stream ]
		p: 	a Process in nil
		oldValue: 	nil
	Receiver's instance variables: 
		index: 	5


ZnCurrentServer class(DynamicVariable class)>>value:during:
	Receiver: ZnCurrentServer
	Arguments and temporary variables: 
		anObject: 	a ZnManagingMultiThreadedServer(running 8010)
		aBlock: 	[ self executeOneRequestResponseOn: stream ]
	Receiver's instance variables: 
		superclass: 	DynamicVariable
		methodDict: 	a MethodDictionary()
		format: 	132
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#ZnCurrentServer
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Zinc-HTTP-Variables'
		traitComposition: 	{}
		localSelectors: 	nil
		hash: 	nil
		soleInstance: 	a ZnCurrentServer


ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		stream: 	a ZdcSocketStream
		request: 	nil
		response: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


[ self executeRequestResponseLoopOn: stream ] in [ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ] in [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		listeningSocket: 	a Socket[waitingForConnection]
		stream: 	a ZdcSocketStream
		socket: 	a Socket[connected]
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


BlockClosure>>ensure:
	Receiver: [ self executeRequestResponseLoopOn: stream ]
	Arguments and temporary variables: 
		aBlock: 	[ 
self log debug: 'Closing stream'.
self closeSocketStream: stream ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		se...etc...
		startpc: 	118
		numArgs: 	0


[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ] in [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		listeningSocket: 	a Socket[waitingForConnection]
		stream: 	a ZdcSocketStream
		socket: 	a Socket[connected]
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


BlockClosure>>ifCurtailed:
	Receiver: [ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing st...etc...
	Arguments and temporary variables: 
		aBlock: 	[ 
self log debug: 'Destroying socket'.
socket destroy ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	[ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
	...etc...
		startpc: 	113
		numArgs: 	0


[ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		listeningSocket: 	a Socket[waitingForConnection]
		stream: 	a ZdcSocketStream
		socket: 	a Socket[connected]
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnec...etc...
		startpc: 	108
		numArgs: 	0



--- The full stack ---
DIUtil class>>saveString:ToFile:
DIDicto>>dictoParse:
[ dicto dictoParse: text ] in DIWebServiceAPI>>postRules:
BlockClosure>>on:do:
DIWebServiceAPI>>postRules:
DIWebServiceHandler>>post
DIWebServiceHandler(ZnRestCall)>>execute
[ call execute ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
BlockClosure>>on:do:
ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
[ self execute: call ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
BlockClosure>>on:do:
ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ :delegate | delegate handleRequest: request ] ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateRequest:do:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
[ self authenticateAndDelegateRequest: request ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
BlockClosure>>on:do:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequest:
ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeOneRequestResponseOn:
[ self executeOneRequestResponseOn: stream ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
[ 
p psValueAt: index put: anObject.
aBlock value ] in ZnCurrentServer(DynamicVariable)>>value:during:
BlockClosure>>ensure:
ZnCurrentServer(DynamicVariable)>>value:during:
ZnCurrentServer class(DynamicVariable class)>>value:during:
ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
[ self executeRequestResponseLoopOn: stream ] in [ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ] in [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
BlockClosure>>ensure:
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ] in [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
BlockClosure>>ifCurtailed:
[ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Halt
24 February 2015 12:02:43.173895 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
NBCogit NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
https://github.com/pharo-project/pharo-vm.git Commit: 4a0d556150d478ff2de3c9624d2f18e6eaa3fa5c Date: 2014-12-18 18:42:53 +0100 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14893

Image: Pharo3.0 [Latest update: #30863]

DIUtil class>>saveString:ToFile:
	Receiver: DIUtil
	Arguments and temporary variables: 
		aString: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = Php...etc...
		aFileName: 	'/home/otruffer/dicto/bin/analysis/mai/dicto.rules'
		stream: 	MultiByteFileStream: '/home/otruffer/dicto/bin/analysis/mai/dicto.rules...etc...
		newFileName: 	'/home/otruffer/dicto/bin/analysis/mai/dicto.rules'
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary()
		format: 	2
		layout: 	a FixedLayout
		instanceVariables: 	#()
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#DIUtil
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Dicto-var-util'
		traitComposition: 	{}
		localSelectors: 	nil


DIDicto>>dictoParse:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = ...etc...
		adapterTestGroups: 	nil
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424775763'
		singleShotTask: 	false


DIDicto>>dictoBuild:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = ...etc...
		adapterTestGroups: 	nil
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424775763'
		singleShotTask: 	false


DIDicto>>dictoRun:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = ...etc...
		adapterTestGroups: 	nil
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424775763'
		singleShotTask: 	false


DIDicto>>dictoAll:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = ...etc...
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424775763'
		singleShotTask: 	false


[ DIDicto new dictoAll: input ] in DIWebServiceAPI>>getRun
	Receiver: a DIWebServiceAPI
	Arguments and temporary variables: 
		in: 	'/home/otruffer/dicto/bin/analysis/mai/dicto.rules'
		input: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = PhpCl...etc...
		rulesFailed: 	nil
		rulesTotal: 	nil
	Receiver's instance variables: 
		request: 	nil
		response: 	nil
		variables: 	nil
		delegate: 	nil
		principal: 	nil
		credentials: 	nil


BlockClosure>>on:do:
	Receiver: [ DIDicto new dictoAll: input ]
	Arguments and temporary variables: 
		exception: 	DIException
		handlerAction: 	[ :ex | ^ self error: ex description ]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	DIWebServiceAPI>>getRun
		startpc: 	138
		numArgs: 	0


DIWebServiceAPI>>getRun
	Receiver: a DIWebServiceAPI
	Arguments and temporary variables: 
		in: 	'/home/otruffer/dicto/bin/analysis/mai/dicto.rules'
		input: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = PhpCl...etc...
		rulesFailed: 	nil
		rulesTotal: 	nil
	Receiver's instance variables: 
		request: 	nil
		response: 	nil
		variables: 	nil
		delegate: 	nil
		principal: 	nil
		credentials: 	nil


DIWebServiceHandler>>post
	Receiver: a DIWebServiceHandler
	Arguments and temporary variables: 
		api: 	a DIWebServiceAPI
	Receiver's instance variables: 
		request: 	a ZnRequest(POST /mai/run)
		response: 	nil
		variables: 	an OrderedCollection('mai' 'run')
		delegate: 	a ZnJSONRestServerDelegate
		principal: 	nil
		credentials: 	nil
		dicto: 	a DIDicto


DIWebServiceHandler(ZnRestCall)>>execute
	Receiver: a DIWebServiceHandler
	Arguments and temporary variables: 

	Receiver's instance variables: 
		request: 	a ZnRequest(POST /mai/run)
		response: 	nil
		variables: 	an OrderedCollection('mai' 'run')
		delegate: 	a ZnJSONRestServerDelegate
		principal: 	nil
		credentials: 	nil
		dicto: 	a DIDicto


[ call execute ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


BlockClosure>>on:do:
	Receiver: [ call execute ]
	Arguments and temporary variables: 
		exception: 	ZnRestCallUnauthorized
		handlerAction: 	[ :exception | self unauthorized: exception request ]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
		startpc: 	38
		numArgs: 	0


ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


[ self execute: call ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /mai/run)
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


BlockClosure>>on:do:
	Receiver: [ self execute: call ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :exception | 
request server debugMode
	ifTrue: [ exception pa...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
		startpc: 	99
		numArgs: 	0


ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /mai/run)
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ :delegate | delegate handleRequest: request ] ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /mai/run)
		delegate: 	a ZnJSONRestServerDelegate
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateRequest:do:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /mai/run)
		block: 	[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ ...etc...
		authenticator: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /mai/run)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


[ self authenticateAndDelegateRequest: request ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /mai/run)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


BlockClosure>>on:do:
	Receiver: [ self authenticateAndDelegateRequest: request ]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :exception | 
self debugMode
	ifTrue: [ exception pass ]
	ifFa...etc...
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequ...etc...
		startpc: 	58
		numArgs: 	0


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /mai/run)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /mai/run)
		response: 	nil
		initialMilliseconds: 	563467
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeOneRequestResponseOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		stream: 	a ZdcSocketStream
		request: 	a ZnRequest(POST /mai/run)
		response: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


[ self executeOneRequestResponseOn: stream ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		stream: 	a ZdcSocketStream
		request: 	nil
		response: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


[ 
p psValueAt: index put: anObject.
aBlock value ] in ZnCurrentServer(DynamicVariable)>>value:during:
	Receiver: a ZnCurrentServer
	Arguments and temporary variables: 
		anObject: 	a ZnManagingMultiThreadedServer(running 8010)
		aBlock: 	[ self executeOneRequestResponseOn: stream ]
		p: 	a Process in nil
		oldValue: 	nil
	Receiver's instance variables: 
		index: 	5


BlockClosure>>ensure:
	Receiver: [ 
p psValueAt: index put: anObject.
aBlock value ]
	Arguments and temporary variables: 
		aBlock: 	[ p psValueAt: index put: oldValue ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ZnCurrentServer(DynamicVariable)>>value:during:
		startpc: 	62
		numArgs: 	0


ZnCurrentServer(DynamicVariable)>>value:during:
	Receiver: a ZnCurrentServer
	Arguments and temporary variables: 
		anObject: 	a ZnManagingMultiThreadedServer(running 8010)
		aBlock: 	[ self executeOneRequestResponseOn: stream ]
		p: 	a Process in nil
		oldValue: 	nil
	Receiver's instance variables: 
		index: 	5


ZnCurrentServer class(DynamicVariable class)>>value:during:
	Receiver: ZnCurrentServer
	Arguments and temporary variables: 
		anObject: 	a ZnManagingMultiThreadedServer(running 8010)
		aBlock: 	[ self executeOneRequestResponseOn: stream ]
	Receiver's instance variables: 
		superclass: 	DynamicVariable
		methodDict: 	a MethodDictionary()
		format: 	132
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#ZnCurrentServer
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Zinc-HTTP-Variables'
		traitComposition: 	{}
		localSelectors: 	nil
		hash: 	nil
		soleInstance: 	a ZnCurrentServer


ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		stream: 	a ZdcSocketStream
		request: 	nil
		response: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


[ self executeRequestResponseLoopOn: stream ] in [ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ] in [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		listeningSocket: 	a Socket[waitingForConnection]
		stream: 	a ZdcSocketStream
		socket: 	a Socket[connected]
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


BlockClosure>>ensure:
	Receiver: [ self executeRequestResponseLoopOn: stream ]
	Arguments and temporary variables: 
		aBlock: 	[ 
self log debug: 'Closing stream'.
self closeSocketStream: stream ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		se...etc...
		startpc: 	118
		numArgs: 	0


[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ] in [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		listeningSocket: 	a Socket[waitingForConnection]
		stream: 	a ZdcSocketStream
		socket: 	a Socket[connected]
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


BlockClosure>>ifCurtailed:
	Receiver: [ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing st...etc...
	Arguments and temporary variables: 
		aBlock: 	[ 
self log debug: 'Destroying socket'.
socket destroy ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	[ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
	...etc...
		startpc: 	113
		numArgs: 	0


[ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		listeningSocket: 	a Socket[waitingForConnection]
		stream: 	a ZdcSocketStream
		socket: 	a Socket[connected]
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnec...etc...
		startpc: 	108
		numArgs: 	0



--- The full stack ---
DIUtil class>>saveString:ToFile:
DIDicto>>dictoParse:
DIDicto>>dictoBuild:
DIDicto>>dictoRun:
DIDicto>>dictoAll:
[ DIDicto new dictoAll: input ] in DIWebServiceAPI>>getRun
BlockClosure>>on:do:
DIWebServiceAPI>>getRun
DIWebServiceHandler>>post
DIWebServiceHandler(ZnRestCall)>>execute
[ call execute ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
BlockClosure>>on:do:
ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
[ self execute: call ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
BlockClosure>>on:do:
ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ :delegate | delegate handleRequest: request ] ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateRequest:do:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
[ self authenticateAndDelegateRequest: request ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
BlockClosure>>on:do:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequest:
ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeOneRequestResponseOn:
[ self executeOneRequestResponseOn: stream ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
[ 
p psValueAt: index put: anObject.
aBlock value ] in ZnCurrentServer(DynamicVariable)>>value:during:
BlockClosure>>ensure:
ZnCurrentServer(DynamicVariable)>>value:during:
ZnCurrentServer class(DynamicVariable class)>>value:during:
ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
[ self executeRequestResponseLoopOn: stream ] in [ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ] in [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
BlockClosure>>ensure:
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ] in [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
BlockClosure>>ifCurtailed:
[ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Halt
24 February 2015 12:02:45.058592 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
NBCogit NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
https://github.com/pharo-project/pharo-vm.git Commit: 4a0d556150d478ff2de3c9624d2f18e6eaa3fa5c Date: 2014-12-18 18:42:53 +0100 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14893

Image: Pharo3.0 [Latest update: #30863]

DIUtil class>>saveString:ToFile:
	Receiver: DIUtil
	Arguments and temporary variables: 
		aString: 	'source: ''/home/otruffer/DictoCLI''
filePattern: ''*.php''
ignore: ''...etc...
		aFileName: 	'/home/otruffer/dicto/bin/tools/phpda/configs/config-1424775765.yaml...etc...
		stream: 	MultiByteFileStream: '/home/otruffer/dicto/bin/tools/phpda/configs/conf...etc...
		newFileName: 	'/home/otruffer/dicto/bin/tools/phpda/configs/config-1424775765.ya...etc...
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary()
		format: 	2
		layout: 	a FixedLayout
		instanceVariables: 	#()
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#DIUtil
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Dicto-var-util'
		traitComposition: 	{}
		localSelectors: 	nil


DIPhpModel>>_createConfigFile
	Receiver: a DIPhpModel
	Arguments and temporary variables: 
		configFile: 	'source: ''/home/otruffer/DictoCLI''
filePattern: ''*.php''
ignore:...etc...
	Receiver's instance variables: 
		defRules: 	a DICollectionRule()
		defVars: 	a DICollectionVar(SYSTEM)
		analysisID: 	'1424775765'
		additionalProperties: 	a Dictionary()
		ruleCounter: 	0
		varCounter: 	0
		defVarElements: 	a DICollectionVarElements()
		defVarInvertedElements: 	a DICollectionVarElements()
		model: 	nil


DIPhpModel>>_loadPhpModel
	Receiver: a DIPhpModel
	Arguments and temporary variables: 

	Receiver's instance variables: 
		defRules: 	a DICollectionRule()
		defVars: 	a DICollectionVar(SYSTEM)
		analysisID: 	'1424775765'
		additionalProperties: 	a Dictionary()
		ruleCounter: 	0
		varCounter: 	0
		defVarElements: 	a DICollectionVarElements()
		defVarInvertedElements: 	a DICollectionVarElements()
		model: 	nil


DIPhpModel>>model
	Receiver: a DIPhpModel
	Arguments and temporary variables: 

	Receiver's instance variables: 
		defRules: 	a DICollectionRule()
		defVars: 	a DICollectionVar(SYSTEM)
		analysisID: 	'1424775765'
		additionalProperties: 	a Dictionary()
		ruleCounter: 	0
		varCounter: 	0
		defVarElements: 	a DICollectionVarElements()
		defVarInvertedElements: 	a DICollectionVarElements()
		model: 	nil


DIVarPhpClass>>allElements
	Receiver: RuleResult
	Arguments and temporary variables: 

	Receiver's instance variables: 
		isFirst: 	false
		dslText: 	'RuleResult=PhpClass with name:"Dicto\\RuleResult"'
		type: 	'PhpClass'
		id: 	1
		entity: 	nil
		name: 	'RuleResult'
		specifiers: 	an OrderedCollection(name=Dicto\\RuleResult)
		isInverted: 	false
		elements: 	a DICollectionVarElements()
		invertedElements: 	a DICollectionVarElements()


DIVarPhpClass(DIVar)>>elements
	Receiver: RuleResult
	Arguments and temporary variables: 
		valid: 	nil
	Receiver's instance variables: 
		isFirst: 	false
		dslText: 	'RuleResult=PhpClass with name:"Dicto\\RuleResult"'
		type: 	'PhpClass'
		id: 	1
		entity: 	nil
		name: 	'RuleResult'
		specifiers: 	an OrderedCollection(name=Dicto\\RuleResult)
		isInverted: 	false
		elements: 	a DICollectionVarElements()
		invertedElements: 	a DICollectionVarElements()


DISimpleRule>>subjectElements
	Receiver: RuleResult cannot depend on DictoTalker
	Arguments and temporary variables: 
		subjectElements: 	nil
	Receiver's instance variables: 
		isFirst: 	nil
		dslText: 	'RuleResult cannot depend on DictoTalker'
		type: 	#cannot
		id: 	1001
		entity: 	nil
		subjects: 	an Array(RuleResult)
		predicates: 	an Array(depend on DictoTalker)
		subRules: 	nil
		candidateAdapters: 	a SortedCollection(DIPhpDependencies)
		chosenAdapter: 	DIPhpDependencies
		hasFailed: 	false
		failureMessage: 	''
		failingPredicates: 	a Set()
		hasSubjectInverted: 	false
		hasPredicateInverted: 	false


printRulesEntityRelationship: someRules
	| res processedPredicates |
	res := ''.
	processedPredicates := Set new.
	someRules
		do: [ :rule | 
			| predicateSelector subjectElements argumentElements data isPredicateInv isSubjectInv |
			predicateSelector := (rule predicate nameNormalized , ':') asSymbol.
			isPredicateInv := rule hasPredicateInverted.
			isSubjectInv := rule hasSubjectInverted.
			subjectElements := rule subjectElements.
			argumentElements := rule argumentElements.
			subjectElements
				do: [ :subject | 
					argumentElements
						do: [ :argument | 
							| relId spec msgPass msgFail |
							relId := subject id , '-' , argument id.
							msgPass := subject id , '.' , rule predicate name , '(' , argument id , ')=True'.
							msgFail := subject id , '.' , rule predicate name , '(' , argument id , ')=False'.
							(processedPredicates includes: relId)
								ifFalse: [ 
									data := {(#subject -> subject value).
									(#argument -> argument value).
									(#ruleId -> rule id).
									(#propertyId -> relId).
									(#msgPass -> msgPass).
									(#msgFail -> msgFail)} asDictionary.
									spec := self perform: predicateSelector withArguments: {data}.
									spec := spec
										dictoReplace:
											{('$subject' -> subject value).
											('$argument' -> argument value).
											('$ruleId' -> rule id).
											('$propertyId' -> relId).
											('$msgPass' -> msgPass).
											('$msgFail' -> msgFail)}.
									res := res , spec ].	"avoid duplicate predicate evaluations"
							processedPredicates add: relId ] ] ].
	^ res in DIPhpDependencies(DIAdapter)>>printRulesEntityRelationship:
	Receiver: a DIPhpDependencies
	Arguments and temporary variables: 
		someRules: 	a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalk...etc...
		processedPredicates: 	a Set()
		data: 	nil
		res: 	''
		rule: 	RuleResult cannot depend on DictoTalker
		predicateSelector: 	#dependOn:
		subjectElements: 	nil
		argumentElements: 	nil
		isPredicateInv: 	false
		isSubjectInv: 	false
	Receiver's instance variables: 
		output: 	''
		commandOutput: 	''
		NEWLINE: 	'
'
		rules: 	a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalker m...etc...
		varSynonyms: 	nil
		sessionId: 	'1424775763'
		TIMESTAMP: 	'1424775765'
		TOOLNAME: 	'DIPhpDependencies'
		PROJECTROOT: 	'/home/otruffer/DictoCLI'
		PROJECTSRC: 	'./'
		PROJECTBIN: 	'./'
		RESULTFILE: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/mai/1424775765/D...etc...
		TESTFILE: 	nil
		testInputFileExt: 	'.st'
		SYSTEM: 	SYSTEM


DICollectionRule(OrderedCollection)>>do:
	Receiver: a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalker must depend on Rule...etc...
	Arguments and temporary variables: 
		aBlock: 	printRulesEntityRelationship: someRules
	| res processedPredicates |
	r...etc...
		index: 	1
	Receiver's instance variables: 
		array: 	an Array(RuleResult cannot depend on DictoTalker DictoTalker must depend...etc...
		firstIndex: 	1
		lastIndex: 	3
		elements: 	nil
		elements: 	nil


DIPhpDependencies(DIAdapter)>>printRulesEntityRelationship:
	Receiver: a DIPhpDependencies
	Arguments and temporary variables: 
		res: 	''
		someRules: 	a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalk...etc...
		processedPredicates: 	a Set()
	Receiver's instance variables: 
		output: 	''
		commandOutput: 	''
		NEWLINE: 	'
'
		rules: 	a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalker m...etc...
		varSynonyms: 	nil
		sessionId: 	'1424775763'
		TIMESTAMP: 	'1424775765'
		TOOLNAME: 	'DIPhpDependencies'
		PROJECTROOT: 	'/home/otruffer/DictoCLI'
		PROJECTSRC: 	'./'
		PROJECTBIN: 	'./'
		RESULTFILE: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/mai/1424775765/D...etc...
		TESTFILE: 	nil
		testInputFileExt: 	'.st'
		SYSTEM: 	SYSTEM


DIPhpDependencies(DIAdapter)>>printRules
	Receiver: a DIPhpDependencies
	Arguments and temporary variables: 
		res: 	nil
		allRules: 	a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalke...etc...
	Receiver's instance variables: 
		output: 	''
		commandOutput: 	''
		NEWLINE: 	'
'
		rules: 	a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalker m...etc...
		varSynonyms: 	nil
		sessionId: 	'1424775763'
		TIMESTAMP: 	'1424775765'
		TOOLNAME: 	'DIPhpDependencies'
		PROJECTROOT: 	'/home/otruffer/DictoCLI'
		PROJECTSRC: 	'./'
		PROJECTBIN: 	'./'
		RESULTFILE: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/mai/1424775765/D...etc...
		TESTFILE: 	nil
		testInputFileExt: 	'.st'
		SYSTEM: 	SYSTEM


DIPhpDependencies>>testInput
	Receiver: a DIPhpDependencies
	Arguments and temporary variables: 
		strRules: 	nil
	Receiver's instance variables: 
		output: 	''
		commandOutput: 	''
		NEWLINE: 	'
'
		rules: 	a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalker m...etc...
		varSynonyms: 	nil
		sessionId: 	'1424775763'
		TIMESTAMP: 	'1424775765'
		TOOLNAME: 	'DIPhpDependencies'
		PROJECTROOT: 	'/home/otruffer/DictoCLI'
		PROJECTSRC: 	'./'
		PROJECTBIN: 	'./'
		RESULTFILE: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/mai/1424775765/D...etc...
		TESTFILE: 	nil
		testInputFileExt: 	'.st'
		SYSTEM: 	SYSTEM


DITestGroup>>build
	Receiver: a DITestGroup
	Arguments and temporary variables: 

	Receiver's instance variables: 
		rules: 	an OrderedCollection(RuleResult cannot depend on DictoTalker DictoTalker...etc...
		adapter: 	a DIPhpDependencies
		runCommandText: 	nil
		testSpecification: 	nil
		adapterID: 	'DIPhpDependencies'
		resultFile: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/mai/1424775765/D...etc...
		specificationFile: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/mai/14247...etc...
		commandFile: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/mai/1424775765/...etc...


[ :testGroup | testGroup build ] in DIDicto>>dictoBuild:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = ...etc...
		adapterTestGroups: 	a Dictionary(DIGrepFileContent->a DITestGroup DIJMeterLoadTe...etc...
		testGroup: 	a DITestGroup
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424775763'
		singleShotTask: 	false


Array(SequenceableCollection)>>do:
	Receiver: an Array(a DITestGroup a DITestGroup a DITestGroup a DITestGroup a DITestGroup)
	Arguments and temporary variables: 
		aBlock: 	[ :testGroup | testGroup build ]
		index: 	4
	Receiver's instance variables: 
an Array(a DITestGroup a DITestGroup a DITestGroup a DITestGroup a DITestGroup)

DIDicto>>dictoBuild:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = ...etc...
		adapterTestGroups: 	a Dictionary(DIGrepFileContent->a DITestGroup DIJMeterLoadTe...etc...
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424775763'
		singleShotTask: 	false


DIDicto>>dictoRun:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = ...etc...
		adapterTestGroups: 	nil
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424775763'
		singleShotTask: 	false


DIDicto>>dictoAll:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = ...etc...
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424775763'
		singleShotTask: 	false


[ DIDicto new dictoAll: input ] in DIWebServiceAPI>>getRun
	Receiver: a DIWebServiceAPI
	Arguments and temporary variables: 
		in: 	'/home/otruffer/dicto/bin/analysis/mai/dicto.rules'
		input: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = PhpCl...etc...
		rulesFailed: 	nil
		rulesTotal: 	nil
	Receiver's instance variables: 
		request: 	nil
		response: 	nil
		variables: 	nil
		delegate: 	nil
		principal: 	nil
		credentials: 	nil


BlockClosure>>on:do:
	Receiver: [ DIDicto new dictoAll: input ]
	Arguments and temporary variables: 
		exception: 	DIException
		handlerAction: 	[ :ex | ^ self error: ex description ]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	DIWebServiceAPI>>getRun
		startpc: 	138
		numArgs: 	0


DIWebServiceAPI>>getRun
	Receiver: a DIWebServiceAPI
	Arguments and temporary variables: 
		in: 	'/home/otruffer/dicto/bin/analysis/mai/dicto.rules'
		input: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = PhpCl...etc...
		rulesFailed: 	nil
		rulesTotal: 	nil
	Receiver's instance variables: 
		request: 	nil
		response: 	nil
		variables: 	nil
		delegate: 	nil
		principal: 	nil
		credentials: 	nil


DIWebServiceHandler>>post
	Receiver: a DIWebServiceHandler
	Arguments and temporary variables: 
		api: 	a DIWebServiceAPI
	Receiver's instance variables: 
		request: 	a ZnRequest(POST /mai/run)
		response: 	nil
		variables: 	an OrderedCollection('mai' 'run')
		delegate: 	a ZnJSONRestServerDelegate
		principal: 	nil
		credentials: 	nil
		dicto: 	a DIDicto


DIWebServiceHandler(ZnRestCall)>>execute
	Receiver: a DIWebServiceHandler
	Arguments and temporary variables: 

	Receiver's instance variables: 
		request: 	a ZnRequest(POST /mai/run)
		response: 	nil
		variables: 	an OrderedCollection('mai' 'run')
		delegate: 	a ZnJSONRestServerDelegate
		principal: 	nil
		credentials: 	nil
		dicto: 	a DIDicto


[ call execute ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


BlockClosure>>on:do:
	Receiver: [ call execute ]
	Arguments and temporary variables: 
		exception: 	ZnRestCallUnauthorized
		handlerAction: 	[ :exception | self unauthorized: exception request ]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
		startpc: 	38
		numArgs: 	0


ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


[ self execute: call ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /mai/run)
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


BlockClosure>>on:do:
	Receiver: [ self execute: call ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :exception | 
request server debugMode
	ifTrue: [ exception pa...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
		startpc: 	99
		numArgs: 	0


ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /mai/run)
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ :delegate | delegate handleRequest: request ] ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /mai/run)
		delegate: 	a ZnJSONRestServerDelegate
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateRequest:do:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /mai/run)
		block: 	[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ ...etc...
		authenticator: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /mai/run)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


[ self authenticateAndDelegateRequest: request ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /mai/run)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


BlockClosure>>on:do:
	Receiver: [ self authenticateAndDelegateRequest: request ]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :exception | 
self debugMode
	ifTrue: [ exception pass ]
	ifFa...etc...
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequ...etc...
		startpc: 	58
		numArgs: 	0


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /mai/run)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /mai/run)
		response: 	nil
		initialMilliseconds: 	563467
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeOneRequestResponseOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		stream: 	a ZdcSocketStream
		request: 	a ZnRequest(POST /mai/run)
		response: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


[ self executeOneRequestResponseOn: stream ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		stream: 	a ZdcSocketStream
		request: 	nil
		response: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


[ 
p psValueAt: index put: anObject.
aBlock value ] in ZnCurrentServer(DynamicVariable)>>value:during:
	Receiver: a ZnCurrentServer
	Arguments and temporary variables: 
		anObject: 	a ZnManagingMultiThreadedServer(running 8010)
		aBlock: 	[ self executeOneRequestResponseOn: stream ]
		p: 	a Process in nil
		oldValue: 	nil
	Receiver's instance variables: 
		index: 	5



--- The full stack ---
DIUtil class>>saveString:ToFile:
DIPhpModel>>_createConfigFile
DIPhpModel>>_loadPhpModel
DIPhpModel>>model
DIVarPhpClass>>allElements
DIVarPhpClass(DIVar)>>elements
DISimpleRule>>subjectElements
printRulesEntityRelationship: someRules
	| res processedPredicates |
	res := ''.
	processedPredicates := Set new.
	someRules
		do: [ :rule | 
			| predicateSelector subjectElements argumentElements data isPredicateInv isSubjectInv |
			predicateSelector := (rule predicate nameNormalized , ':') asSymbol.
			isPredicateInv := rule hasPredicateInverted.
			isSubjectInv := rule hasSubjectInverted.
			subjectElements := rule subjectElements.
			argumentElements := rule argumentElements.
			subjectElements
				do: [ :subject | 
					argumentElements
						do: [ :argument | 
							| relId spec msgPass msgFail |
							relId := subject id , '-' , argument id.
							msgPass := subject id , '.' , rule predicate name , '(' , argument id , ')=True'.
							msgFail := subject id , '.' , rule predicate name , '(' , argument id , ')=False'.
							(processedPredicates includes: relId)
								ifFalse: [ 
									data := {(#subject -> subject value).
									(#argument -> argument value).
									(#ruleId -> rule id).
									(#propertyId -> relId).
									(#msgPass -> msgPass).
									(#msgFail -> msgFail)} asDictionary.
									spec := self perform: predicateSelector withArguments: {data}.
									spec := spec
										dictoReplace:
											{('$subject' -> subject value).
											('$argument' -> argument value).
											('$ruleId' -> rule id).
											('$propertyId' -> relId).
											('$msgPass' -> msgPass).
											('$msgFail' -> msgFail)}.
									res := res , spec ].	"avoid duplicate predicate evaluations"
							processedPredicates add: relId ] ] ].
	^ res in DIPhpDependencies(DIAdapter)>>printRulesEntityRelationship:
DICollectionRule(OrderedCollection)>>do:
DIPhpDependencies(DIAdapter)>>printRulesEntityRelationship:
DIPhpDependencies(DIAdapter)>>printRules
DIPhpDependencies>>testInput
DITestGroup>>build
[ :testGroup | testGroup build ] in DIDicto>>dictoBuild:
Array(SequenceableCollection)>>do:
DIDicto>>dictoBuild:
DIDicto>>dictoRun:
DIDicto>>dictoAll:
[ DIDicto new dictoAll: input ] in DIWebServiceAPI>>getRun
BlockClosure>>on:do:
DIWebServiceAPI>>getRun
DIWebServiceHandler>>post
DIWebServiceHandler(ZnRestCall)>>execute
[ call execute ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
BlockClosure>>on:do:
ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
[ self execute: call ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
BlockClosure>>on:do:
ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ :delegate | delegate handleRequest: request ] ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateRequest:do:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
[ self authenticateAndDelegateRequest: request ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
BlockClosure>>on:do:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequest:
ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeOneRequestResponseOn:
[ self executeOneRequestResponseOn: stream ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
[ 
p psValueAt: index put: anObject.
aBlock value ] in ZnCurrentServer(DynamicVariable)>>value:during:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
BlockClosure>>ensure:
ZnCurrentServer(DynamicVariable)>>value:during:
ZnCurrentServer class(DynamicVariable class)>>value:during:
ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
[ self executeRequestResponseLoopOn: stream ] in [ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ] in [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
BlockClosure>>ensure:
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ] in [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
BlockClosure>>ifCurtailed:
[ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Halt
24 February 2015 12:02:46.227667 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
NBCogit NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
https://github.com/pharo-project/pharo-vm.git Commit: 4a0d556150d478ff2de3c9624d2f18e6eaa3fa5c Date: 2014-12-18 18:42:53 +0100 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14893

Image: Pharo3.0 [Latest update: #30863]

DIUtil class>>saveString:ToFile:
	Receiver: DIUtil
	Arguments and temporary variables: 
		aString: 	'#!/bin/bash
type -P hhvm &>/dev/null && hhvm /home/otruffer/dicto/bin...etc...
		aFileName: 	'/home/otruffer/dicto/bin/tools/phpda/configs/modelScript-1424775765...etc...
		stream: 	MultiByteFileStream: '/home/otruffer/dicto/bin/tools/phpda/configs/mode...etc...
		newFileName: 	'/home/otruffer/dicto/bin/tools/phpda/configs/modelScript-14247757...etc...
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary()
		format: 	2
		layout: 	a FixedLayout
		instanceVariables: 	#()
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#DIUtil
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Dicto-var-util'
		traitComposition: 	{}
		localSelectors: 	nil


DIPhpModel>>_createModelScript
	Receiver: a DIPhpModel
	Arguments and temporary variables: 
		modelScriptFile: 	'#!/bin/bash
type -P hhvm &>/dev/null && hhvm /home/otruffer/d...etc...
	Receiver's instance variables: 
		defRules: 	a DICollectionRule()
		defVars: 	a DICollectionVar(SYSTEM)
		analysisID: 	'1424775765'
		additionalProperties: 	a Dictionary()
		ruleCounter: 	0
		varCounter: 	0
		defVarElements: 	a DICollectionVarElements()
		defVarInvertedElements: 	a DICollectionVarElements()
		model: 	nil


DIPhpModel>>_createModelFile
	Receiver: a DIPhpModel
	Arguments and temporary variables: 

	Receiver's instance variables: 
		defRules: 	a DICollectionRule()
		defVars: 	a DICollectionVar(SYSTEM)
		analysisID: 	'1424775765'
		additionalProperties: 	a Dictionary()
		ruleCounter: 	0
		varCounter: 	0
		defVarElements: 	a DICollectionVarElements()
		defVarInvertedElements: 	a DICollectionVarElements()
		model: 	nil


DIPhpModel>>_loadPhpModel
	Receiver: a DIPhpModel
	Arguments and temporary variables: 

	Receiver's instance variables: 
		defRules: 	a DICollectionRule()
		defVars: 	a DICollectionVar(SYSTEM)
		analysisID: 	'1424775765'
		additionalProperties: 	a Dictionary()
		ruleCounter: 	0
		varCounter: 	0
		defVarElements: 	a DICollectionVarElements()
		defVarInvertedElements: 	a DICollectionVarElements()
		model: 	nil


DIPhpModel>>model
	Receiver: a DIPhpModel
	Arguments and temporary variables: 

	Receiver's instance variables: 
		defRules: 	a DICollectionRule()
		defVars: 	a DICollectionVar(SYSTEM)
		analysisID: 	'1424775765'
		additionalProperties: 	a Dictionary()
		ruleCounter: 	0
		varCounter: 	0
		defVarElements: 	a DICollectionVarElements()
		defVarInvertedElements: 	a DICollectionVarElements()
		model: 	nil


DIVarPhpClass>>allElements
	Receiver: RuleResult
	Arguments and temporary variables: 

	Receiver's instance variables: 
		isFirst: 	false
		dslText: 	'RuleResult=PhpClass with name:"Dicto\\RuleResult"'
		type: 	'PhpClass'
		id: 	1
		entity: 	nil
		name: 	'RuleResult'
		specifiers: 	an OrderedCollection(name=Dicto\\RuleResult)
		isInverted: 	false
		elements: 	a DICollectionVarElements()
		invertedElements: 	a DICollectionVarElements()


DIVarPhpClass(DIVar)>>elements
	Receiver: RuleResult
	Arguments and temporary variables: 
		valid: 	nil
	Receiver's instance variables: 
		isFirst: 	false
		dslText: 	'RuleResult=PhpClass with name:"Dicto\\RuleResult"'
		type: 	'PhpClass'
		id: 	1
		entity: 	nil
		name: 	'RuleResult'
		specifiers: 	an OrderedCollection(name=Dicto\\RuleResult)
		isInverted: 	false
		elements: 	a DICollectionVarElements()
		invertedElements: 	a DICollectionVarElements()


DISimpleRule>>subjectElements
	Receiver: RuleResult cannot depend on DictoTalker
	Arguments and temporary variables: 
		subjectElements: 	nil
	Receiver's instance variables: 
		isFirst: 	nil
		dslText: 	'RuleResult cannot depend on DictoTalker'
		type: 	#cannot
		id: 	1001
		entity: 	nil
		subjects: 	an Array(RuleResult)
		predicates: 	an Array(depend on DictoTalker)
		subRules: 	nil
		candidateAdapters: 	a SortedCollection(DIPhpDependencies)
		chosenAdapter: 	DIPhpDependencies
		hasFailed: 	false
		failureMessage: 	''
		failingPredicates: 	a Set()
		hasSubjectInverted: 	false
		hasPredicateInverted: 	false


printRulesEntityRelationship: someRules
	| res processedPredicates |
	res := ''.
	processedPredicates := Set new.
	someRules
		do: [ :rule | 
			| predicateSelector subjectElements argumentElements data isPredicateInv isSubjectInv |
			predicateSelector := (rule predicate nameNormalized , ':') asSymbol.
			isPredicateInv := rule hasPredicateInverted.
			isSubjectInv := rule hasSubjectInverted.
			subjectElements := rule subjectElements.
			argumentElements := rule argumentElements.
			subjectElements
				do: [ :subject | 
					argumentElements
						do: [ :argument | 
							| relId spec msgPass msgFail |
							relId := subject id , '-' , argument id.
							msgPass := subject id , '.' , rule predicate name , '(' , argument id , ')=True'.
							msgFail := subject id , '.' , rule predicate name , '(' , argument id , ')=False'.
							(processedPredicates includes: relId)
								ifFalse: [ 
									data := {(#subject -> subject value).
									(#argument -> argument value).
									(#ruleId -> rule id).
									(#propertyId -> relId).
									(#msgPass -> msgPass).
									(#msgFail -> msgFail)} asDictionary.
									spec := self perform: predicateSelector withArguments: {data}.
									spec := spec
										dictoReplace:
											{('$subject' -> subject value).
											('$argument' -> argument value).
											('$ruleId' -> rule id).
											('$propertyId' -> relId).
											('$msgPass' -> msgPass).
											('$msgFail' -> msgFail)}.
									res := res , spec ].	"avoid duplicate predicate evaluations"
							processedPredicates add: relId ] ] ].
	^ res in DIPhpDependencies(DIAdapter)>>printRulesEntityRelationship:
	Receiver: a DIPhpDependencies
	Arguments and temporary variables: 
		someRules: 	a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalk...etc...
		processedPredicates: 	a Set()
		data: 	nil
		res: 	''
		rule: 	RuleResult cannot depend on DictoTalker
		predicateSelector: 	#dependOn:
		subjectElements: 	nil
		argumentElements: 	nil
		isPredicateInv: 	false
		isSubjectInv: 	false
	Receiver's instance variables: 
		output: 	''
		commandOutput: 	''
		NEWLINE: 	'
'
		rules: 	a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalker m...etc...
		varSynonyms: 	nil
		sessionId: 	'1424775763'
		TIMESTAMP: 	'1424775765'
		TOOLNAME: 	'DIPhpDependencies'
		PROJECTROOT: 	'/home/otruffer/DictoCLI'
		PROJECTSRC: 	'./'
		PROJECTBIN: 	'./'
		RESULTFILE: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/mai/1424775765/D...etc...
		TESTFILE: 	nil
		testInputFileExt: 	'.st'
		SYSTEM: 	SYSTEM


DICollectionRule(OrderedCollection)>>do:
	Receiver: a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalker must depend on Rule...etc...
	Arguments and temporary variables: 
		aBlock: 	printRulesEntityRelationship: someRules
	| res processedPredicates |
	r...etc...
		index: 	1
	Receiver's instance variables: 
		array: 	an Array(RuleResult cannot depend on DictoTalker DictoTalker must depend...etc...
		firstIndex: 	1
		lastIndex: 	3
		elements: 	nil
		elements: 	nil


DIPhpDependencies(DIAdapter)>>printRulesEntityRelationship:
	Receiver: a DIPhpDependencies
	Arguments and temporary variables: 
		res: 	''
		someRules: 	a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalk...etc...
		processedPredicates: 	a Set()
	Receiver's instance variables: 
		output: 	''
		commandOutput: 	''
		NEWLINE: 	'
'
		rules: 	a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalker m...etc...
		varSynonyms: 	nil
		sessionId: 	'1424775763'
		TIMESTAMP: 	'1424775765'
		TOOLNAME: 	'DIPhpDependencies'
		PROJECTROOT: 	'/home/otruffer/DictoCLI'
		PROJECTSRC: 	'./'
		PROJECTBIN: 	'./'
		RESULTFILE: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/mai/1424775765/D...etc...
		TESTFILE: 	nil
		testInputFileExt: 	'.st'
		SYSTEM: 	SYSTEM


DIPhpDependencies(DIAdapter)>>printRules
	Receiver: a DIPhpDependencies
	Arguments and temporary variables: 
		res: 	nil
		allRules: 	a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalke...etc...
	Receiver's instance variables: 
		output: 	''
		commandOutput: 	''
		NEWLINE: 	'
'
		rules: 	a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalker m...etc...
		varSynonyms: 	nil
		sessionId: 	'1424775763'
		TIMESTAMP: 	'1424775765'
		TOOLNAME: 	'DIPhpDependencies'
		PROJECTROOT: 	'/home/otruffer/DictoCLI'
		PROJECTSRC: 	'./'
		PROJECTBIN: 	'./'
		RESULTFILE: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/mai/1424775765/D...etc...
		TESTFILE: 	nil
		testInputFileExt: 	'.st'
		SYSTEM: 	SYSTEM


DIPhpDependencies>>testInput
	Receiver: a DIPhpDependencies
	Arguments and temporary variables: 
		strRules: 	nil
	Receiver's instance variables: 
		output: 	''
		commandOutput: 	''
		NEWLINE: 	'
'
		rules: 	a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalker m...etc...
		varSynonyms: 	nil
		sessionId: 	'1424775763'
		TIMESTAMP: 	'1424775765'
		TOOLNAME: 	'DIPhpDependencies'
		PROJECTROOT: 	'/home/otruffer/DictoCLI'
		PROJECTSRC: 	'./'
		PROJECTBIN: 	'./'
		RESULTFILE: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/mai/1424775765/D...etc...
		TESTFILE: 	nil
		testInputFileExt: 	'.st'
		SYSTEM: 	SYSTEM


DITestGroup>>build
	Receiver: a DITestGroup
	Arguments and temporary variables: 

	Receiver's instance variables: 
		rules: 	an OrderedCollection(RuleResult cannot depend on DictoTalker DictoTalker...etc...
		adapter: 	a DIPhpDependencies
		runCommandText: 	nil
		testSpecification: 	nil
		adapterID: 	'DIPhpDependencies'
		resultFile: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/mai/1424775765/D...etc...
		specificationFile: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/mai/14247...etc...
		commandFile: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/mai/1424775765/...etc...


[ :testGroup | testGroup build ] in DIDicto>>dictoBuild:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = ...etc...
		adapterTestGroups: 	a Dictionary(DIGrepFileContent->a DITestGroup DIJMeterLoadTe...etc...
		testGroup: 	a DITestGroup
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424775763'
		singleShotTask: 	false


Array(SequenceableCollection)>>do:
	Receiver: an Array(a DITestGroup a DITestGroup a DITestGroup a DITestGroup a DITestGroup)
	Arguments and temporary variables: 
		aBlock: 	[ :testGroup | testGroup build ]
		index: 	4
	Receiver's instance variables: 
an Array(a DITestGroup a DITestGroup a DITestGroup a DITestGroup a DITestGroup)

DIDicto>>dictoBuild:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = ...etc...
		adapterTestGroups: 	a Dictionary(DIGrepFileContent->a DITestGroup DIJMeterLoadTe...etc...
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424775763'
		singleShotTask: 	false


DIDicto>>dictoRun:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = ...etc...
		adapterTestGroups: 	nil
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424775763'
		singleShotTask: 	false


DIDicto>>dictoAll:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = ...etc...
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424775763'
		singleShotTask: 	false


[ DIDicto new dictoAll: input ] in DIWebServiceAPI>>getRun
	Receiver: a DIWebServiceAPI
	Arguments and temporary variables: 
		in: 	'/home/otruffer/dicto/bin/analysis/mai/dicto.rules'
		input: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = PhpCl...etc...
		rulesFailed: 	nil
		rulesTotal: 	nil
	Receiver's instance variables: 
		request: 	nil
		response: 	nil
		variables: 	nil
		delegate: 	nil
		principal: 	nil
		credentials: 	nil


BlockClosure>>on:do:
	Receiver: [ DIDicto new dictoAll: input ]
	Arguments and temporary variables: 
		exception: 	DIException
		handlerAction: 	[ :ex | ^ self error: ex description ]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	DIWebServiceAPI>>getRun
		startpc: 	138
		numArgs: 	0


DIWebServiceAPI>>getRun
	Receiver: a DIWebServiceAPI
	Arguments and temporary variables: 
		in: 	'/home/otruffer/dicto/bin/analysis/mai/dicto.rules'
		input: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = PhpCl...etc...
		rulesFailed: 	nil
		rulesTotal: 	nil
	Receiver's instance variables: 
		request: 	nil
		response: 	nil
		variables: 	nil
		delegate: 	nil
		principal: 	nil
		credentials: 	nil


DIWebServiceHandler>>post
	Receiver: a DIWebServiceHandler
	Arguments and temporary variables: 
		api: 	a DIWebServiceAPI
	Receiver's instance variables: 
		request: 	a ZnRequest(POST /mai/run)
		response: 	nil
		variables: 	an OrderedCollection('mai' 'run')
		delegate: 	a ZnJSONRestServerDelegate
		principal: 	nil
		credentials: 	nil
		dicto: 	a DIDicto


DIWebServiceHandler(ZnRestCall)>>execute
	Receiver: a DIWebServiceHandler
	Arguments and temporary variables: 

	Receiver's instance variables: 
		request: 	a ZnRequest(POST /mai/run)
		response: 	nil
		variables: 	an OrderedCollection('mai' 'run')
		delegate: 	a ZnJSONRestServerDelegate
		principal: 	nil
		credentials: 	nil
		dicto: 	a DIDicto


[ call execute ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


BlockClosure>>on:do:
	Receiver: [ call execute ]
	Arguments and temporary variables: 
		exception: 	ZnRestCallUnauthorized
		handlerAction: 	[ :exception | self unauthorized: exception request ]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
		startpc: 	38
		numArgs: 	0


ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


[ self execute: call ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /mai/run)
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


BlockClosure>>on:do:
	Receiver: [ self execute: call ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :exception | 
request server debugMode
	ifTrue: [ exception pa...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
		startpc: 	99
		numArgs: 	0


ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /mai/run)
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ :delegate | delegate handleRequest: request ] ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /mai/run)
		delegate: 	a ZnJSONRestServerDelegate
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateRequest:do:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /mai/run)
		block: 	[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ ...etc...
		authenticator: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /mai/run)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


[ self authenticateAndDelegateRequest: request ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /mai/run)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


BlockClosure>>on:do:
	Receiver: [ self authenticateAndDelegateRequest: request ]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :exception | 
self debugMode
	ifTrue: [ exception pass ]
	ifFa...etc...
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequ...etc...
		startpc: 	58
		numArgs: 	0


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /mai/run)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /mai/run)
		response: 	nil
		initialMilliseconds: 	563467
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeOneRequestResponseOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		stream: 	a ZdcSocketStream
		request: 	a ZnRequest(POST /mai/run)
		response: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


[ self executeOneRequestResponseOn: stream ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		stream: 	a ZdcSocketStream
		request: 	nil
		response: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)



--- The full stack ---
DIUtil class>>saveString:ToFile:
DIPhpModel>>_createModelScript
DIPhpModel>>_createModelFile
DIPhpModel>>_loadPhpModel
DIPhpModel>>model
DIVarPhpClass>>allElements
DIVarPhpClass(DIVar)>>elements
DISimpleRule>>subjectElements
printRulesEntityRelationship: someRules
	| res processedPredicates |
	res := ''.
	processedPredicates := Set new.
	someRules
		do: [ :rule | 
			| predicateSelector subjectElements argumentElements data isPredicateInv isSubjectInv |
			predicateSelector := (rule predicate nameNormalized , ':') asSymbol.
			isPredicateInv := rule hasPredicateInverted.
			isSubjectInv := rule hasSubjectInverted.
			subjectElements := rule subjectElements.
			argumentElements := rule argumentElements.
			subjectElements
				do: [ :subject | 
					argumentElements
						do: [ :argument | 
							| relId spec msgPass msgFail |
							relId := subject id , '-' , argument id.
							msgPass := subject id , '.' , rule predicate name , '(' , argument id , ')=True'.
							msgFail := subject id , '.' , rule predicate name , '(' , argument id , ')=False'.
							(processedPredicates includes: relId)
								ifFalse: [ 
									data := {(#subject -> subject value).
									(#argument -> argument value).
									(#ruleId -> rule id).
									(#propertyId -> relId).
									(#msgPass -> msgPass).
									(#msgFail -> msgFail)} asDictionary.
									spec := self perform: predicateSelector withArguments: {data}.
									spec := spec
										dictoReplace:
											{('$subject' -> subject value).
											('$argument' -> argument value).
											('$ruleId' -> rule id).
											('$propertyId' -> relId).
											('$msgPass' -> msgPass).
											('$msgFail' -> msgFail)}.
									res := res , spec ].	"avoid duplicate predicate evaluations"
							processedPredicates add: relId ] ] ].
	^ res in DIPhpDependencies(DIAdapter)>>printRulesEntityRelationship:
DICollectionRule(OrderedCollection)>>do:
DIPhpDependencies(DIAdapter)>>printRulesEntityRelationship:
DIPhpDependencies(DIAdapter)>>printRules
DIPhpDependencies>>testInput
DITestGroup>>build
[ :testGroup | testGroup build ] in DIDicto>>dictoBuild:
Array(SequenceableCollection)>>do:
DIDicto>>dictoBuild:
DIDicto>>dictoRun:
DIDicto>>dictoAll:
[ DIDicto new dictoAll: input ] in DIWebServiceAPI>>getRun
BlockClosure>>on:do:
DIWebServiceAPI>>getRun
DIWebServiceHandler>>post
DIWebServiceHandler(ZnRestCall)>>execute
[ call execute ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
BlockClosure>>on:do:
ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
[ self execute: call ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
BlockClosure>>on:do:
ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ :delegate | delegate handleRequest: request ] ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateRequest:do:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
[ self authenticateAndDelegateRequest: request ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
BlockClosure>>on:do:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequest:
ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeOneRequestResponseOn:
[ self executeOneRequestResponseOn: stream ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ 
p psValueAt: index put: anObject.
aBlock value ] in ZnCurrentServer(DynamicVariable)>>value:during:
BlockClosure>>ensure:
ZnCurrentServer(DynamicVariable)>>value:during:
ZnCurrentServer class(DynamicVariable class)>>value:during:
ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
[ self executeRequestResponseLoopOn: stream ] in [ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ] in [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
BlockClosure>>ensure:
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ] in [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
BlockClosure>>ifCurtailed:
[ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
NeoJSONParseError: invalid input: nil
24 February 2015 12:02:47.329203 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
NBCogit NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
https://github.com/pharo-project/pharo-vm.git Commit: 4a0d556150d478ff2de3c9624d2f18e6eaa3fa5c Date: 2014-12-18 18:42:53 +0100 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14893

Image: Pharo3.0 [Latest update: #30863]

NeoJSONReader>>error:
	Receiver: a NeoJSONReader
	Arguments and temporary variables: 
		text: 	'invalid input: nil'
	Receiver's instance variables: 
		mappings: 	nil
		readStream: 	a ReadStream
		stringStream: 	nil
		listClass: 	nil
		mapClass: 	nil
		propertyNamesAsSymbols: 	false


NeoJSONReader>>parseValue
	Receiver: a NeoJSONReader
	Arguments and temporary variables: 
		char: 	nil
	Receiver's instance variables: 
		mappings: 	nil
		readStream: 	a ReadStream
		stringStream: 	nil
		listClass: 	nil
		mapClass: 	nil
		propertyNamesAsSymbols: 	false


NeoJSONReader>>next
	Receiver: a NeoJSONReader
	Arguments and temporary variables: 

	Receiver's instance variables: 
		mappings: 	nil
		readStream: 	a ReadStream
		stringStream: 	nil
		listClass: 	nil
		mapClass: 	nil
		propertyNamesAsSymbols: 	false


NeoJSONReader class>>fromString:
	Receiver: NeoJSONReader
	Arguments and temporary variables: 
		string: 	''
	Receiver's instance variables: 
		superclass: 	NeoJSONMapper
		methodDict: 	a MethodDictionary(#atEnd->NeoJSONReader>>#atEnd #close->NeoJSONRea...etc...
		format: 	142
		layout: 	a FixedLayout
		instanceVariables: 	#(#readStream #stringStream #listClass #mapClass #propertyNa...etc...
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#NeoJSONReader
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Neo-JSON-Core'
		traitComposition: 	{}
		localSelectors: 	nil


DIPhpModel>>_loadPhpModel
	Receiver: a DIPhpModel
	Arguments and temporary variables: 

	Receiver's instance variables: 
		defRules: 	a DICollectionRule()
		defVars: 	a DICollectionVar(SYSTEM)
		analysisID: 	'1424775765'
		additionalProperties: 	a Dictionary()
		ruleCounter: 	0
		varCounter: 	0
		defVarElements: 	a DICollectionVarElements()
		defVarInvertedElements: 	a DICollectionVarElements()
		model: 	nil


DIPhpModel>>model
	Receiver: a DIPhpModel
	Arguments and temporary variables: 

	Receiver's instance variables: 
		defRules: 	a DICollectionRule()
		defVars: 	a DICollectionVar(SYSTEM)
		analysisID: 	'1424775765'
		additionalProperties: 	a Dictionary()
		ruleCounter: 	0
		varCounter: 	0
		defVarElements: 	a DICollectionVarElements()
		defVarInvertedElements: 	a DICollectionVarElements()
		model: 	nil


DIVarPhpClass>>allElements
	Receiver: RuleResult
	Arguments and temporary variables: 

	Receiver's instance variables: 
		isFirst: 	false
		dslText: 	'RuleResult=PhpClass with name:"Dicto\\RuleResult"'
		type: 	'PhpClass'
		id: 	1
		entity: 	nil
		name: 	'RuleResult'
		specifiers: 	an OrderedCollection(name=Dicto\\RuleResult)
		isInverted: 	false
		elements: 	a DICollectionVarElements()
		invertedElements: 	a DICollectionVarElements()


DIVarPhpClass(DIVar)>>elements
	Receiver: RuleResult
	Arguments and temporary variables: 
		valid: 	nil
	Receiver's instance variables: 
		isFirst: 	false
		dslText: 	'RuleResult=PhpClass with name:"Dicto\\RuleResult"'
		type: 	'PhpClass'
		id: 	1
		entity: 	nil
		name: 	'RuleResult'
		specifiers: 	an OrderedCollection(name=Dicto\\RuleResult)
		isInverted: 	false
		elements: 	a DICollectionVarElements()
		invertedElements: 	a DICollectionVarElements()


DISimpleRule>>subjectElements
	Receiver: RuleResult cannot depend on DictoTalker
	Arguments and temporary variables: 
		subjectElements: 	nil
	Receiver's instance variables: 
		isFirst: 	nil
		dslText: 	'RuleResult cannot depend on DictoTalker'
		type: 	#cannot
		id: 	1001
		entity: 	nil
		subjects: 	an Array(RuleResult)
		predicates: 	an Array(depend on DictoTalker)
		subRules: 	nil
		candidateAdapters: 	a SortedCollection(DIPhpDependencies)
		chosenAdapter: 	DIPhpDependencies
		hasFailed: 	false
		failureMessage: 	''
		failingPredicates: 	a Set()
		hasSubjectInverted: 	false
		hasPredicateInverted: 	false


printRulesEntityRelationship: someRules
	| res processedPredicates |
	res := ''.
	processedPredicates := Set new.
	someRules
		do: [ :rule | 
			| predicateSelector subjectElements argumentElements data isPredicateInv isSubjectInv |
			predicateSelector := (rule predicate nameNormalized , ':') asSymbol.
			isPredicateInv := rule hasPredicateInverted.
			isSubjectInv := rule hasSubjectInverted.
			subjectElements := rule subjectElements.
			argumentElements := rule argumentElements.
			subjectElements
				do: [ :subject | 
					argumentElements
						do: [ :argument | 
							| relId spec msgPass msgFail |
							relId := subject id , '-' , argument id.
							msgPass := subject id , '.' , rule predicate name , '(' , argument id , ')=True'.
							msgFail := subject id , '.' , rule predicate name , '(' , argument id , ')=False'.
							(processedPredicates includes: relId)
								ifFalse: [ 
									data := {(#subject -> subject value).
									(#argument -> argument value).
									(#ruleId -> rule id).
									(#propertyId -> relId).
									(#msgPass -> msgPass).
									(#msgFail -> msgFail)} asDictionary.
									spec := self perform: predicateSelector withArguments: {data}.
									spec := spec
										dictoReplace:
											{('$subject' -> subject value).
											('$argument' -> argument value).
											('$ruleId' -> rule id).
											('$propertyId' -> relId).
											('$msgPass' -> msgPass).
											('$msgFail' -> msgFail)}.
									res := res , spec ].	"avoid duplicate predicate evaluations"
							processedPredicates add: relId ] ] ].
	^ res in DIPhpDependencies(DIAdapter)>>printRulesEntityRelationship:
	Receiver: a DIPhpDependencies
	Arguments and temporary variables: 
		someRules: 	a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalk...etc...
		processedPredicates: 	a Set()
		data: 	nil
		res: 	''
		rule: 	RuleResult cannot depend on DictoTalker
		predicateSelector: 	#dependOn:
		subjectElements: 	nil
		argumentElements: 	nil
		isPredicateInv: 	false
		isSubjectInv: 	false
	Receiver's instance variables: 
		output: 	''
		commandOutput: 	''
		NEWLINE: 	'
'
		rules: 	a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalker m...etc...
		varSynonyms: 	nil
		sessionId: 	'1424775763'
		TIMESTAMP: 	'1424775765'
		TOOLNAME: 	'DIPhpDependencies'
		PROJECTROOT: 	'/home/otruffer/DictoCLI'
		PROJECTSRC: 	'./'
		PROJECTBIN: 	'./'
		RESULTFILE: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/mai/1424775765/D...etc...
		TESTFILE: 	nil
		testInputFileExt: 	'.st'
		SYSTEM: 	SYSTEM


DICollectionRule(OrderedCollection)>>do:
	Receiver: a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalker must depend on Rule...etc...
	Arguments and temporary variables: 
		aBlock: 	printRulesEntityRelationship: someRules
	| res processedPredicates |
	r...etc...
		index: 	1
	Receiver's instance variables: 
		array: 	an Array(RuleResult cannot depend on DictoTalker DictoTalker must depend...etc...
		firstIndex: 	1
		lastIndex: 	3
		elements: 	nil
		elements: 	nil


DIPhpDependencies(DIAdapter)>>printRulesEntityRelationship:
	Receiver: a DIPhpDependencies
	Arguments and temporary variables: 
		res: 	''
		someRules: 	a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalk...etc...
		processedPredicates: 	a Set()
	Receiver's instance variables: 
		output: 	''
		commandOutput: 	''
		NEWLINE: 	'
'
		rules: 	a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalker m...etc...
		varSynonyms: 	nil
		sessionId: 	'1424775763'
		TIMESTAMP: 	'1424775765'
		TOOLNAME: 	'DIPhpDependencies'
		PROJECTROOT: 	'/home/otruffer/DictoCLI'
		PROJECTSRC: 	'./'
		PROJECTBIN: 	'./'
		RESULTFILE: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/mai/1424775765/D...etc...
		TESTFILE: 	nil
		testInputFileExt: 	'.st'
		SYSTEM: 	SYSTEM


DIPhpDependencies(DIAdapter)>>printRules
	Receiver: a DIPhpDependencies
	Arguments and temporary variables: 
		res: 	nil
		allRules: 	a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalke...etc...
	Receiver's instance variables: 
		output: 	''
		commandOutput: 	''
		NEWLINE: 	'
'
		rules: 	a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalker m...etc...
		varSynonyms: 	nil
		sessionId: 	'1424775763'
		TIMESTAMP: 	'1424775765'
		TOOLNAME: 	'DIPhpDependencies'
		PROJECTROOT: 	'/home/otruffer/DictoCLI'
		PROJECTSRC: 	'./'
		PROJECTBIN: 	'./'
		RESULTFILE: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/mai/1424775765/D...etc...
		TESTFILE: 	nil
		testInputFileExt: 	'.st'
		SYSTEM: 	SYSTEM


DIPhpDependencies>>testInput
	Receiver: a DIPhpDependencies
	Arguments and temporary variables: 
		strRules: 	nil
	Receiver's instance variables: 
		output: 	''
		commandOutput: 	''
		NEWLINE: 	'
'
		rules: 	a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalker m...etc...
		varSynonyms: 	nil
		sessionId: 	'1424775763'
		TIMESTAMP: 	'1424775765'
		TOOLNAME: 	'DIPhpDependencies'
		PROJECTROOT: 	'/home/otruffer/DictoCLI'
		PROJECTSRC: 	'./'
		PROJECTBIN: 	'./'
		RESULTFILE: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/mai/1424775765/D...etc...
		TESTFILE: 	nil
		testInputFileExt: 	'.st'
		SYSTEM: 	SYSTEM


DITestGroup>>build
	Receiver: a DITestGroup
	Arguments and temporary variables: 

	Receiver's instance variables: 
		rules: 	an OrderedCollection(RuleResult cannot depend on DictoTalker DictoTalker...etc...
		adapter: 	a DIPhpDependencies
		runCommandText: 	nil
		testSpecification: 	nil
		adapterID: 	'DIPhpDependencies'
		resultFile: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/mai/1424775765/D...etc...
		specificationFile: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/mai/14247...etc...
		commandFile: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/mai/1424775765/...etc...


[ :testGroup | testGroup build ] in DIDicto>>dictoBuild:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = ...etc...
		adapterTestGroups: 	a Dictionary(DIGrepFileContent->a DITestGroup DIJMeterLoadTe...etc...
		testGroup: 	a DITestGroup
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424775763'
		singleShotTask: 	false


Array(SequenceableCollection)>>do:
	Receiver: an Array(a DITestGroup a DITestGroup a DITestGroup a DITestGroup a DITestGroup)
	Arguments and temporary variables: 
		aBlock: 	[ :testGroup | testGroup build ]
		index: 	4
	Receiver's instance variables: 
an Array(a DITestGroup a DITestGroup a DITestGroup a DITestGroup a DITestGroup)

DIDicto>>dictoBuild:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = ...etc...
		adapterTestGroups: 	a Dictionary(DIGrepFileContent->a DITestGroup DIJMeterLoadTe...etc...
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424775763'
		singleShotTask: 	false


DIDicto>>dictoRun:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = ...etc...
		adapterTestGroups: 	nil
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424775763'
		singleShotTask: 	false


DIDicto>>dictoAll:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = ...etc...
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424775763'
		singleShotTask: 	false


[ DIDicto new dictoAll: input ] in DIWebServiceAPI>>getRun
	Receiver: a DIWebServiceAPI
	Arguments and temporary variables: 
		in: 	'/home/otruffer/dicto/bin/analysis/mai/dicto.rules'
		input: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = PhpCl...etc...
		rulesFailed: 	nil
		rulesTotal: 	nil
	Receiver's instance variables: 
		request: 	nil
		response: 	nil
		variables: 	nil
		delegate: 	nil
		principal: 	nil
		credentials: 	nil


BlockClosure>>on:do:
	Receiver: [ DIDicto new dictoAll: input ]
	Arguments and temporary variables: 
		exception: 	DIException
		handlerAction: 	[ :ex | ^ self error: ex description ]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	DIWebServiceAPI>>getRun
		startpc: 	138
		numArgs: 	0


DIWebServiceAPI>>getRun
	Receiver: a DIWebServiceAPI
	Arguments and temporary variables: 
		in: 	'/home/otruffer/dicto/bin/analysis/mai/dicto.rules'
		input: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = PhpCl...etc...
		rulesFailed: 	nil
		rulesTotal: 	nil
	Receiver's instance variables: 
		request: 	nil
		response: 	nil
		variables: 	nil
		delegate: 	nil
		principal: 	nil
		credentials: 	nil


DIWebServiceHandler>>post
	Receiver: a DIWebServiceHandler
	Arguments and temporary variables: 
		api: 	a DIWebServiceAPI
	Receiver's instance variables: 
		request: 	a ZnRequest(POST /mai/run)
		response: 	nil
		variables: 	an OrderedCollection('mai' 'run')
		delegate: 	a ZnJSONRestServerDelegate
		principal: 	nil
		credentials: 	nil
		dicto: 	a DIDicto


DIWebServiceHandler(ZnRestCall)>>execute
	Receiver: a DIWebServiceHandler
	Arguments and temporary variables: 

	Receiver's instance variables: 
		request: 	a ZnRequest(POST /mai/run)
		response: 	nil
		variables: 	an OrderedCollection('mai' 'run')
		delegate: 	a ZnJSONRestServerDelegate
		principal: 	nil
		credentials: 	nil
		dicto: 	a DIDicto


[ call execute ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


BlockClosure>>on:do:
	Receiver: [ call execute ]
	Arguments and temporary variables: 
		exception: 	ZnRestCallUnauthorized
		handlerAction: 	[ :exception | self unauthorized: exception request ]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
		startpc: 	38
		numArgs: 	0


ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


[ self execute: call ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /mai/run)
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


BlockClosure>>on:do:
	Receiver: [ self execute: call ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :exception | 
request server debugMode
	ifTrue: [ exception pa...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
		startpc: 	99
		numArgs: 	0


ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /mai/run)
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ :delegate | delegate handleRequest: request ] ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /mai/run)
		delegate: 	a ZnJSONRestServerDelegate
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateRequest:do:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /mai/run)
		block: 	[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ ...etc...
		authenticator: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /mai/run)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


[ self authenticateAndDelegateRequest: request ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /mai/run)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


BlockClosure>>on:do:
	Receiver: [ self authenticateAndDelegateRequest: request ]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :exception | 
self debugMode
	ifTrue: [ exception pass ]
	ifFa...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequ...etc...
		startpc: 	58
		numArgs: 	0


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /mai/run)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /mai/run)
		response: 	nil
		initialMilliseconds: 	563467
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeOneRequestResponseOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		stream: 	a ZdcSocketStream
		request: 	a ZnRequest(POST /mai/run)
		response: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)



--- The full stack ---
NeoJSONReader>>error:
NeoJSONReader>>parseValue
NeoJSONReader>>next
NeoJSONReader class>>fromString:
DIPhpModel>>_loadPhpModel
DIPhpModel>>model
DIVarPhpClass>>allElements
DIVarPhpClass(DIVar)>>elements
DISimpleRule>>subjectElements
printRulesEntityRelationship: someRules
	| res processedPredicates |
	res := ''.
	processedPredicates := Set new.
	someRules
		do: [ :rule | 
			| predicateSelector subjectElements argumentElements data isPredicateInv isSubjectInv |
			predicateSelector := (rule predicate nameNormalized , ':') asSymbol.
			isPredicateInv := rule hasPredicateInverted.
			isSubjectInv := rule hasSubjectInverted.
			subjectElements := rule subjectElements.
			argumentElements := rule argumentElements.
			subjectElements
				do: [ :subject | 
					argumentElements
						do: [ :argument | 
							| relId spec msgPass msgFail |
							relId := subject id , '-' , argument id.
							msgPass := subject id , '.' , rule predicate name , '(' , argument id , ')=True'.
							msgFail := subject id , '.' , rule predicate name , '(' , argument id , ')=False'.
							(processedPredicates includes: relId)
								ifFalse: [ 
									data := {(#subject -> subject value).
									(#argument -> argument value).
									(#ruleId -> rule id).
									(#propertyId -> relId).
									(#msgPass -> msgPass).
									(#msgFail -> msgFail)} asDictionary.
									spec := self perform: predicateSelector withArguments: {data}.
									spec := spec
										dictoReplace:
											{('$subject' -> subject value).
											('$argument' -> argument value).
											('$ruleId' -> rule id).
											('$propertyId' -> relId).
											('$msgPass' -> msgPass).
											('$msgFail' -> msgFail)}.
									res := res , spec ].	"avoid duplicate predicate evaluations"
							processedPredicates add: relId ] ] ].
	^ res in DIPhpDependencies(DIAdapter)>>printRulesEntityRelationship:
DICollectionRule(OrderedCollection)>>do:
DIPhpDependencies(DIAdapter)>>printRulesEntityRelationship:
DIPhpDependencies(DIAdapter)>>printRules
DIPhpDependencies>>testInput
DITestGroup>>build
[ :testGroup | testGroup build ] in DIDicto>>dictoBuild:
Array(SequenceableCollection)>>do:
DIDicto>>dictoBuild:
DIDicto>>dictoRun:
DIDicto>>dictoAll:
[ DIDicto new dictoAll: input ] in DIWebServiceAPI>>getRun
BlockClosure>>on:do:
DIWebServiceAPI>>getRun
DIWebServiceHandler>>post
DIWebServiceHandler(ZnRestCall)>>execute
[ call execute ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
BlockClosure>>on:do:
ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
[ self execute: call ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
BlockClosure>>on:do:
ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ :delegate | delegate handleRequest: request ] ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateRequest:do:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
[ self authenticateAndDelegateRequest: request ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
BlockClosure>>on:do:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequest:
ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeOneRequestResponseOn:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ self executeOneRequestResponseOn: stream ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
[ 
p psValueAt: index put: anObject.
aBlock value ] in ZnCurrentServer(DynamicVariable)>>value:during:
BlockClosure>>ensure:
ZnCurrentServer(DynamicVariable)>>value:during:
ZnCurrentServer class(DynamicVariable class)>>value:during:
ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
[ self executeRequestResponseLoopOn: stream ] in [ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ] in [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
BlockClosure>>ensure:
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ] in [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
BlockClosure>>ifCurtailed:
[ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
NeoJSONParseError: invalid input: nil
24 February 2015 12:09:10.287499 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
NBCogit NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
https://github.com/pharo-project/pharo-vm.git Commit: 4a0d556150d478ff2de3c9624d2f18e6eaa3fa5c Date: 2014-12-18 18:42:53 +0100 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14893

Image: Pharo3.0 [Latest update: #30863]

NeoJSONReader>>error:
	Receiver: a NeoJSONReader
	Arguments and temporary variables: 
		text: 	'invalid input: nil'
	Receiver's instance variables: 
		mappings: 	nil
		readStream: 	a ReadStream
		stringStream: 	nil
		listClass: 	nil
		mapClass: 	nil
		propertyNamesAsSymbols: 	false


NeoJSONReader>>parseValue
	Receiver: a NeoJSONReader
	Arguments and temporary variables: 
		char: 	nil
	Receiver's instance variables: 
		mappings: 	nil
		readStream: 	a ReadStream
		stringStream: 	nil
		listClass: 	nil
		mapClass: 	nil
		propertyNamesAsSymbols: 	false


NeoJSONReader>>next
	Receiver: a NeoJSONReader
	Arguments and temporary variables: 

	Receiver's instance variables: 
		mappings: 	nil
		readStream: 	a ReadStream
		stringStream: 	nil
		listClass: 	nil
		mapClass: 	nil
		propertyNamesAsSymbols: 	false


NeoJSONReader class>>fromString:
	Receiver: NeoJSONReader
	Arguments and temporary variables: 
		string: 	''
	Receiver's instance variables: 
		superclass: 	NeoJSONMapper
		methodDict: 	a MethodDictionary(#atEnd->NeoJSONReader>>#atEnd #close->NeoJSONRea...etc...
		format: 	142
		layout: 	a FixedLayout
		instanceVariables: 	#(#readStream #stringStream #listClass #mapClass #propertyNa...etc...
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#NeoJSONReader
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Neo-JSON-Core'
		traitComposition: 	{}
		localSelectors: 	nil


DIPhpModel>>_loadPhpModel
	Receiver: a DIPhpModel
	Arguments and temporary variables: 

	Receiver's instance variables: 
		defRules: 	a DICollectionRule()
		defVars: 	a DICollectionVar(SYSTEM)
		analysisID: 	'1424776150'
		additionalProperties: 	a Dictionary()
		ruleCounter: 	0
		varCounter: 	0
		defVarElements: 	a DICollectionVarElements()
		defVarInvertedElements: 	a DICollectionVarElements()
		model: 	nil


DIPhpModel>>model
	Receiver: a DIPhpModel
	Arguments and temporary variables: 

	Receiver's instance variables: 
		defRules: 	a DICollectionRule()
		defVars: 	a DICollectionVar(SYSTEM)
		analysisID: 	'1424776150'
		additionalProperties: 	a Dictionary()
		ruleCounter: 	0
		varCounter: 	0
		defVarElements: 	a DICollectionVarElements()
		defVarInvertedElements: 	a DICollectionVarElements()
		model: 	nil


DIVarPhpClass>>allElements
	Receiver: RuleResult
	Arguments and temporary variables: 

	Receiver's instance variables: 
		isFirst: 	false
		dslText: 	'RuleResult=PhpClass with name:"Dicto\\RuleResult"'
		type: 	'PhpClass'
		id: 	1
		entity: 	nil
		name: 	'RuleResult'
		specifiers: 	an OrderedCollection(name=Dicto\\RuleResult)
		isInverted: 	false
		elements: 	a DICollectionVarElements()
		invertedElements: 	a DICollectionVarElements()


DIVarPhpClass(DIVar)>>elements
	Receiver: RuleResult
	Arguments and temporary variables: 
		valid: 	nil
	Receiver's instance variables: 
		isFirst: 	false
		dslText: 	'RuleResult=PhpClass with name:"Dicto\\RuleResult"'
		type: 	'PhpClass'
		id: 	1
		entity: 	nil
		name: 	'RuleResult'
		specifiers: 	an OrderedCollection(name=Dicto\\RuleResult)
		isInverted: 	false
		elements: 	a DICollectionVarElements()
		invertedElements: 	a DICollectionVarElements()


DISimpleRule>>subjectElements
	Receiver: RuleResult cannot depend on DictoTalker
	Arguments and temporary variables: 
		subjectElements: 	nil
	Receiver's instance variables: 
		isFirst: 	nil
		dslText: 	'RuleResult cannot depend on DictoTalker'
		type: 	#cannot
		id: 	1001
		entity: 	nil
		subjects: 	an Array(RuleResult)
		predicates: 	an Array(depend on DictoTalker)
		subRules: 	nil
		candidateAdapters: 	a SortedCollection(DIPhpDependencies)
		chosenAdapter: 	DIPhpDependencies
		hasFailed: 	false
		failureMessage: 	''
		failingPredicates: 	a Set()
		hasSubjectInverted: 	false
		hasPredicateInverted: 	false


printRulesEntityRelationship: someRules
	| res processedPredicates |
	res := ''.
	processedPredicates := Set new.
	someRules
		do: [ :rule | 
			| predicateSelector subjectElements argumentElements data isPredicateInv isSubjectInv |
			predicateSelector := (rule predicate nameNormalized , ':') asSymbol.
			isPredicateInv := rule hasPredicateInverted.
			isSubjectInv := rule hasSubjectInverted.
			subjectElements := rule subjectElements.
			argumentElements := rule argumentElements.
			subjectElements
				do: [ :subject | 
					argumentElements
						do: [ :argument | 
							| relId spec msgPass msgFail |
							relId := subject id , '-' , argument id.
							msgPass := subject id , '.' , rule predicate name , '(' , argument id , ')=True'.
							msgFail := subject id , '.' , rule predicate name , '(' , argument id , ')=False'.
							(processedPredicates includes: relId)
								ifFalse: [ 
									data := {(#subject -> subject value).
									(#argument -> argument value).
									(#ruleId -> rule id).
									(#propertyId -> relId).
									(#msgPass -> msgPass).
									(#msgFail -> msgFail)} asDictionary.
									spec := self perform: predicateSelector withArguments: {data}.
									spec := spec
										dictoReplace:
											{('$subject' -> subject value).
											('$argument' -> argument value).
											('$ruleId' -> rule id).
											('$propertyId' -> relId).
											('$msgPass' -> msgPass).
											('$msgFail' -> msgFail)}.
									res := res , spec ].	"avoid duplicate predicate evaluations"
							processedPredicates add: relId ] ] ].
	^ res in DIPhpDependencies(DIAdapter)>>printRulesEntityRelationship:
	Receiver: a DIPhpDependencies
	Arguments and temporary variables: 
		someRules: 	a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalk...etc...
		processedPredicates: 	a Set()
		data: 	nil
		res: 	''
		rule: 	RuleResult cannot depend on DictoTalker
		predicateSelector: 	#dependOn:
		subjectElements: 	nil
		argumentElements: 	nil
		isPredicateInv: 	false
		isSubjectInv: 	false
	Receiver's instance variables: 
		output: 	''
		commandOutput: 	''
		NEWLINE: 	'
'
		rules: 	a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalker m...etc...
		varSynonyms: 	nil
		sessionId: 	'1424776150'
		TIMESTAMP: 	'1424776150'
		TOOLNAME: 	'DIPhpDependencies'
		PROJECTROOT: 	'/home/otruffer/DictoCLI'
		PROJECTSRC: 	'./'
		PROJECTBIN: 	'./'
		RESULTFILE: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/mai/1424776150/D...etc...
		TESTFILE: 	nil
		testInputFileExt: 	'.st'
		SYSTEM: 	SYSTEM


DICollectionRule(OrderedCollection)>>do:
	Receiver: a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalker must depend on Rule...etc...
	Arguments and temporary variables: 
		aBlock: 	printRulesEntityRelationship: someRules
	| res processedPredicates |
	r...etc...
		index: 	1
	Receiver's instance variables: 
		array: 	an Array(RuleResult cannot depend on DictoTalker DictoTalker must depend...etc...
		firstIndex: 	1
		lastIndex: 	3
		elements: 	nil
		elements: 	nil


DIPhpDependencies(DIAdapter)>>printRulesEntityRelationship:
	Receiver: a DIPhpDependencies
	Arguments and temporary variables: 
		res: 	''
		someRules: 	a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalk...etc...
		processedPredicates: 	a Set()
	Receiver's instance variables: 
		output: 	''
		commandOutput: 	''
		NEWLINE: 	'
'
		rules: 	a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalker m...etc...
		varSynonyms: 	nil
		sessionId: 	'1424776150'
		TIMESTAMP: 	'1424776150'
		TOOLNAME: 	'DIPhpDependencies'
		PROJECTROOT: 	'/home/otruffer/DictoCLI'
		PROJECTSRC: 	'./'
		PROJECTBIN: 	'./'
		RESULTFILE: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/mai/1424776150/D...etc...
		TESTFILE: 	nil
		testInputFileExt: 	'.st'
		SYSTEM: 	SYSTEM


DIPhpDependencies(DIAdapter)>>printRules
	Receiver: a DIPhpDependencies
	Arguments and temporary variables: 
		res: 	nil
		allRules: 	a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalke...etc...
	Receiver's instance variables: 
		output: 	''
		commandOutput: 	''
		NEWLINE: 	'
'
		rules: 	a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalker m...etc...
		varSynonyms: 	nil
		sessionId: 	'1424776150'
		TIMESTAMP: 	'1424776150'
		TOOLNAME: 	'DIPhpDependencies'
		PROJECTROOT: 	'/home/otruffer/DictoCLI'
		PROJECTSRC: 	'./'
		PROJECTBIN: 	'./'
		RESULTFILE: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/mai/1424776150/D...etc...
		TESTFILE: 	nil
		testInputFileExt: 	'.st'
		SYSTEM: 	SYSTEM


DIPhpDependencies>>testInput
	Receiver: a DIPhpDependencies
	Arguments and temporary variables: 
		strRules: 	nil
	Receiver's instance variables: 
		output: 	''
		commandOutput: 	''
		NEWLINE: 	'
'
		rules: 	a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalker m...etc...
		varSynonyms: 	nil
		sessionId: 	'1424776150'
		TIMESTAMP: 	'1424776150'
		TOOLNAME: 	'DIPhpDependencies'
		PROJECTROOT: 	'/home/otruffer/DictoCLI'
		PROJECTSRC: 	'./'
		PROJECTBIN: 	'./'
		RESULTFILE: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/mai/1424776150/D...etc...
		TESTFILE: 	nil
		testInputFileExt: 	'.st'
		SYSTEM: 	SYSTEM


DITestGroup>>build
	Receiver: a DITestGroup
	Arguments and temporary variables: 

	Receiver's instance variables: 
		rules: 	an OrderedCollection(RuleResult cannot depend on DictoTalker DictoTalker...etc...
		adapter: 	a DIPhpDependencies
		runCommandText: 	nil
		testSpecification: 	nil
		adapterID: 	'DIPhpDependencies'
		resultFile: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/mai/1424776150/D...etc...
		specificationFile: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/mai/14247...etc...
		commandFile: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/mai/1424776150/...etc...


[ :testGroup | testGroup build ] in DIDicto>>dictoBuild:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = ...etc...
		adapterTestGroups: 	a Dictionary(DIGrepFileContent->a DITestGroup DIJMeterLoadTe...etc...
		testGroup: 	a DITestGroup
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424776150'
		singleShotTask: 	false


Array(SequenceableCollection)>>do:
	Receiver: an Array(a DITestGroup a DITestGroup a DITestGroup a DITestGroup a DITestGroup)
	Arguments and temporary variables: 
		aBlock: 	[ :testGroup | testGroup build ]
		index: 	4
	Receiver's instance variables: 
an Array(a DITestGroup a DITestGroup a DITestGroup a DITestGroup a DITestGroup)

DIDicto>>dictoBuild:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = ...etc...
		adapterTestGroups: 	a Dictionary(DIGrepFileContent->a DITestGroup DIJMeterLoadTe...etc...
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424776150'
		singleShotTask: 	false


DIDicto>>dictoRun:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = ...etc...
		adapterTestGroups: 	nil
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424776150'
		singleShotTask: 	false


DIDicto>>dictoAll:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = ...etc...
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424776150'
		singleShotTask: 	false


[ DIDicto new dictoAll: input ] in DIWebServiceAPI>>getRun
	Receiver: a DIWebServiceAPI
	Arguments and temporary variables: 
		in: 	'/home/otruffer/dicto/bin/analysis/mai/dicto.rules'
		input: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = PhpCl...etc...
		rulesFailed: 	nil
		rulesTotal: 	nil
	Receiver's instance variables: 
		request: 	nil
		response: 	nil
		variables: 	nil
		delegate: 	nil
		principal: 	nil
		credentials: 	nil


BlockClosure>>on:do:
	Receiver: [ DIDicto new dictoAll: input ]
	Arguments and temporary variables: 
		exception: 	DIException
		handlerAction: 	[ :ex | ^ self error: ex description ]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	DIWebServiceAPI>>getRun
		startpc: 	138
		numArgs: 	0


DIWebServiceAPI>>getRun
	Receiver: a DIWebServiceAPI
	Arguments and temporary variables: 
		in: 	'/home/otruffer/dicto/bin/analysis/mai/dicto.rules'
		input: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = PhpCl...etc...
		rulesFailed: 	nil
		rulesTotal: 	nil
	Receiver's instance variables: 
		request: 	nil
		response: 	nil
		variables: 	nil
		delegate: 	nil
		principal: 	nil
		credentials: 	nil


DIWebServiceHandler>>post
	Receiver: a DIWebServiceHandler
	Arguments and temporary variables: 
		api: 	a DIWebServiceAPI
	Receiver's instance variables: 
		request: 	a ZnRequest(POST /mai/run)
		response: 	nil
		variables: 	an OrderedCollection('mai' 'run')
		delegate: 	a ZnJSONRestServerDelegate
		principal: 	nil
		credentials: 	nil
		dicto: 	a DIDicto


DIWebServiceHandler(ZnRestCall)>>execute
	Receiver: a DIWebServiceHandler
	Arguments and temporary variables: 

	Receiver's instance variables: 
		request: 	a ZnRequest(POST /mai/run)
		response: 	nil
		variables: 	an OrderedCollection('mai' 'run')
		delegate: 	a ZnJSONRestServerDelegate
		principal: 	nil
		credentials: 	nil
		dicto: 	a DIDicto


[ call execute ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


BlockClosure>>on:do:
	Receiver: [ call execute ]
	Arguments and temporary variables: 
		exception: 	ZnRestCallUnauthorized
		handlerAction: 	[ :exception | self unauthorized: exception request ]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
		startpc: 	38
		numArgs: 	0


ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


[ self execute: call ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /mai/run)
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


BlockClosure>>on:do:
	Receiver: [ self execute: call ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :exception | 
request server debugMode
	ifTrue: [ exception pa...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
		startpc: 	99
		numArgs: 	0


ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /mai/run)
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ :delegate | delegate handleRequest: request ] ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /mai/run)
		delegate: 	a ZnJSONRestServerDelegate
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateRequest:do:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /mai/run)
		block: 	[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ ...etc...
		authenticator: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /mai/run)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


[ self authenticateAndDelegateRequest: request ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /mai/run)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


BlockClosure>>on:do:
	Receiver: [ self authenticateAndDelegateRequest: request ]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :exception | 
self debugMode
	ifTrue: [ exception pass ]
	ifFa...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequ...etc...
		startpc: 	58
		numArgs: 	0


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /mai/run)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /mai/run)
		response: 	nil
		initialMilliseconds: 	950463
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeOneRequestResponseOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		stream: 	a ZdcSocketStream
		request: 	a ZnRequest(POST /mai/run)
		response: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)



--- The full stack ---
NeoJSONReader>>error:
NeoJSONReader>>parseValue
NeoJSONReader>>next
NeoJSONReader class>>fromString:
DIPhpModel>>_loadPhpModel
DIPhpModel>>model
DIVarPhpClass>>allElements
DIVarPhpClass(DIVar)>>elements
DISimpleRule>>subjectElements
printRulesEntityRelationship: someRules
	| res processedPredicates |
	res := ''.
	processedPredicates := Set new.
	someRules
		do: [ :rule | 
			| predicateSelector subjectElements argumentElements data isPredicateInv isSubjectInv |
			predicateSelector := (rule predicate nameNormalized , ':') asSymbol.
			isPredicateInv := rule hasPredicateInverted.
			isSubjectInv := rule hasSubjectInverted.
			subjectElements := rule subjectElements.
			argumentElements := rule argumentElements.
			subjectElements
				do: [ :subject | 
					argumentElements
						do: [ :argument | 
							| relId spec msgPass msgFail |
							relId := subject id , '-' , argument id.
							msgPass := subject id , '.' , rule predicate name , '(' , argument id , ')=True'.
							msgFail := subject id , '.' , rule predicate name , '(' , argument id , ')=False'.
							(processedPredicates includes: relId)
								ifFalse: [ 
									data := {(#subject -> subject value).
									(#argument -> argument value).
									(#ruleId -> rule id).
									(#propertyId -> relId).
									(#msgPass -> msgPass).
									(#msgFail -> msgFail)} asDictionary.
									spec := self perform: predicateSelector withArguments: {data}.
									spec := spec
										dictoReplace:
											{('$subject' -> subject value).
											('$argument' -> argument value).
											('$ruleId' -> rule id).
											('$propertyId' -> relId).
											('$msgPass' -> msgPass).
											('$msgFail' -> msgFail)}.
									res := res , spec ].	"avoid duplicate predicate evaluations"
							processedPredicates add: relId ] ] ].
	^ res in DIPhpDependencies(DIAdapter)>>printRulesEntityRelationship:
DICollectionRule(OrderedCollection)>>do:
DIPhpDependencies(DIAdapter)>>printRulesEntityRelationship:
DIPhpDependencies(DIAdapter)>>printRules
DIPhpDependencies>>testInput
DITestGroup>>build
[ :testGroup | testGroup build ] in DIDicto>>dictoBuild:
Array(SequenceableCollection)>>do:
DIDicto>>dictoBuild:
DIDicto>>dictoRun:
DIDicto>>dictoAll:
[ DIDicto new dictoAll: input ] in DIWebServiceAPI>>getRun
BlockClosure>>on:do:
DIWebServiceAPI>>getRun
DIWebServiceHandler>>post
DIWebServiceHandler(ZnRestCall)>>execute
[ call execute ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
BlockClosure>>on:do:
ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
[ self execute: call ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
BlockClosure>>on:do:
ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ :delegate | delegate handleRequest: request ] ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateRequest:do:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
[ self authenticateAndDelegateRequest: request ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
BlockClosure>>on:do:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequest:
ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeOneRequestResponseOn:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ self executeOneRequestResponseOn: stream ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
[ 
p psValueAt: index put: anObject.
aBlock value ] in ZnCurrentServer(DynamicVariable)>>value:during:
BlockClosure>>ensure:
ZnCurrentServer(DynamicVariable)>>value:during:
ZnCurrentServer class(DynamicVariable class)>>value:during:
ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
[ self executeRequestResponseLoopOn: stream ] in [ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ] in [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
BlockClosure>>ensure:
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ] in [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
BlockClosure>>ifCurtailed:
[ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
NeoJSONParseError: invalid input: nil
24 February 2015 12:14:53.956562 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
NBCogit NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
https://github.com/pharo-project/pharo-vm.git Commit: 4a0d556150d478ff2de3c9624d2f18e6eaa3fa5c Date: 2014-12-18 18:42:53 +0100 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14893

Image: Pharo3.0 [Latest update: #30863]

NeoJSONReader>>error:
	Receiver: a NeoJSONReader
	Arguments and temporary variables: 
		text: 	'invalid input: nil'
	Receiver's instance variables: 
		mappings: 	nil
		readStream: 	a ReadStream
		stringStream: 	nil
		listClass: 	nil
		mapClass: 	nil
		propertyNamesAsSymbols: 	false


NeoJSONReader>>parseValue
	Receiver: a NeoJSONReader
	Arguments and temporary variables: 
		char: 	nil
	Receiver's instance variables: 
		mappings: 	nil
		readStream: 	a ReadStream
		stringStream: 	nil
		listClass: 	nil
		mapClass: 	nil
		propertyNamesAsSymbols: 	false


NeoJSONReader>>next
	Receiver: a NeoJSONReader
	Arguments and temporary variables: 

	Receiver's instance variables: 
		mappings: 	nil
		readStream: 	a ReadStream
		stringStream: 	nil
		listClass: 	nil
		mapClass: 	nil
		propertyNamesAsSymbols: 	false


NeoJSONReader class>>fromString:
	Receiver: NeoJSONReader
	Arguments and temporary variables: 
		string: 	''
	Receiver's instance variables: 
		superclass: 	NeoJSONMapper
		methodDict: 	a MethodDictionary(#atEnd->NeoJSONReader>>#atEnd #close->NeoJSONRea...etc...
		format: 	142
		layout: 	a FixedLayout
		instanceVariables: 	#(#readStream #stringStream #listClass #mapClass #propertyNa...etc...
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#NeoJSONReader
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Neo-JSON-Core'
		traitComposition: 	{}
		localSelectors: 	nil


DIPhpModel>>_loadPhpModel
	Receiver: a DIPhpModel
	Arguments and temporary variables: 

	Receiver's instance variables: 
		defRules: 	a DICollectionRule()
		defVars: 	a DICollectionVar(SYSTEM)
		analysisID: 	'1424776494'
		additionalProperties: 	a Dictionary()
		ruleCounter: 	0
		varCounter: 	0
		defVarElements: 	a DICollectionVarElements()
		defVarInvertedElements: 	a DICollectionVarElements()
		model: 	nil


DIPhpModel>>model
	Receiver: a DIPhpModel
	Arguments and temporary variables: 

	Receiver's instance variables: 
		defRules: 	a DICollectionRule()
		defVars: 	a DICollectionVar(SYSTEM)
		analysisID: 	'1424776494'
		additionalProperties: 	a Dictionary()
		ruleCounter: 	0
		varCounter: 	0
		defVarElements: 	a DICollectionVarElements()
		defVarInvertedElements: 	a DICollectionVarElements()
		model: 	nil


DIVarPhpClass>>allElements
	Receiver: RuleResult
	Arguments and temporary variables: 

	Receiver's instance variables: 
		isFirst: 	false
		dslText: 	'RuleResult=PhpClass with name:"Dicto\\RuleResult"'
		type: 	'PhpClass'
		id: 	1
		entity: 	nil
		name: 	'RuleResult'
		specifiers: 	an OrderedCollection(name=Dicto\\RuleResult)
		isInverted: 	false
		elements: 	a DICollectionVarElements()
		invertedElements: 	a DICollectionVarElements()


DIVarPhpClass(DIVar)>>elements
	Receiver: RuleResult
	Arguments and temporary variables: 
		valid: 	nil
	Receiver's instance variables: 
		isFirst: 	false
		dslText: 	'RuleResult=PhpClass with name:"Dicto\\RuleResult"'
		type: 	'PhpClass'
		id: 	1
		entity: 	nil
		name: 	'RuleResult'
		specifiers: 	an OrderedCollection(name=Dicto\\RuleResult)
		isInverted: 	false
		elements: 	a DICollectionVarElements()
		invertedElements: 	a DICollectionVarElements()


DISimpleRule>>subjectElements
	Receiver: RuleResult cannot depend on DictoTalker
	Arguments and temporary variables: 
		subjectElements: 	nil
	Receiver's instance variables: 
		isFirst: 	nil
		dslText: 	'RuleResult cannot depend on DictoTalker'
		type: 	#cannot
		id: 	1001
		entity: 	nil
		subjects: 	an Array(RuleResult)
		predicates: 	an Array(depend on DictoTalker)
		subRules: 	nil
		candidateAdapters: 	a SortedCollection(DIPhpDependencies)
		chosenAdapter: 	DIPhpDependencies
		hasFailed: 	false
		failureMessage: 	''
		failingPredicates: 	a Set()
		hasSubjectInverted: 	false
		hasPredicateInverted: 	false


printRulesEntityRelationship: someRules
	| res processedPredicates |
	res := ''.
	processedPredicates := Set new.
	someRules
		do: [ :rule | 
			| predicateSelector subjectElements argumentElements data isPredicateInv isSubjectInv |
			predicateSelector := (rule predicate nameNormalized , ':') asSymbol.
			isPredicateInv := rule hasPredicateInverted.
			isSubjectInv := rule hasSubjectInverted.
			subjectElements := rule subjectElements.
			argumentElements := rule argumentElements.
			subjectElements
				do: [ :subject | 
					argumentElements
						do: [ :argument | 
							| relId spec msgPass msgFail |
							relId := subject id , '-' , argument id.
							msgPass := subject id , '.' , rule predicate name , '(' , argument id , ')=True'.
							msgFail := subject id , '.' , rule predicate name , '(' , argument id , ')=False'.
							(processedPredicates includes: relId)
								ifFalse: [ 
									data := {(#subject -> subject value).
									(#argument -> argument value).
									(#ruleId -> rule id).
									(#propertyId -> relId).
									(#msgPass -> msgPass).
									(#msgFail -> msgFail)} asDictionary.
									spec := self perform: predicateSelector withArguments: {data}.
									spec := spec
										dictoReplace:
											{('$subject' -> subject value).
											('$argument' -> argument value).
											('$ruleId' -> rule id).
											('$propertyId' -> relId).
											('$msgPass' -> msgPass).
											('$msgFail' -> msgFail)}.
									res := res , spec ].	"avoid duplicate predicate evaluations"
							processedPredicates add: relId ] ] ].
	^ res in DIPhpDependencies(DIAdapter)>>printRulesEntityRelationship:
	Receiver: a DIPhpDependencies
	Arguments and temporary variables: 
		someRules: 	a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalk...etc...
		processedPredicates: 	a Set()
		data: 	nil
		res: 	''
		rule: 	RuleResult cannot depend on DictoTalker
		predicateSelector: 	#dependOn:
		subjectElements: 	nil
		argumentElements: 	nil
		isPredicateInv: 	false
		isSubjectInv: 	false
	Receiver's instance variables: 
		output: 	''
		commandOutput: 	''
		NEWLINE: 	'
'
		rules: 	a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalker m...etc...
		varSynonyms: 	nil
		sessionId: 	'1424776494'
		TIMESTAMP: 	'1424776494'
		TOOLNAME: 	'DIPhpDependencies'
		PROJECTROOT: 	'/home/otruffer/DictoCLI'
		PROJECTSRC: 	'./'
		PROJECTBIN: 	'./'
		RESULTFILE: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/mai/1424776494/D...etc...
		TESTFILE: 	nil
		testInputFileExt: 	'.st'
		SYSTEM: 	SYSTEM


DICollectionRule(OrderedCollection)>>do:
	Receiver: a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalker must depend on Rule...etc...
	Arguments and temporary variables: 
		aBlock: 	printRulesEntityRelationship: someRules
	| res processedPredicates |
	r...etc...
		index: 	1
	Receiver's instance variables: 
		array: 	an Array(RuleResult cannot depend on DictoTalker DictoTalker must depend...etc...
		firstIndex: 	1
		lastIndex: 	3
		elements: 	nil
		elements: 	nil


DIPhpDependencies(DIAdapter)>>printRulesEntityRelationship:
	Receiver: a DIPhpDependencies
	Arguments and temporary variables: 
		res: 	''
		someRules: 	a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalk...etc...
		processedPredicates: 	a Set()
	Receiver's instance variables: 
		output: 	''
		commandOutput: 	''
		NEWLINE: 	'
'
		rules: 	a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalker m...etc...
		varSynonyms: 	nil
		sessionId: 	'1424776494'
		TIMESTAMP: 	'1424776494'
		TOOLNAME: 	'DIPhpDependencies'
		PROJECTROOT: 	'/home/otruffer/DictoCLI'
		PROJECTSRC: 	'./'
		PROJECTBIN: 	'./'
		RESULTFILE: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/mai/1424776494/D...etc...
		TESTFILE: 	nil
		testInputFileExt: 	'.st'
		SYSTEM: 	SYSTEM


DIPhpDependencies(DIAdapter)>>printRules
	Receiver: a DIPhpDependencies
	Arguments and temporary variables: 
		res: 	nil
		allRules: 	a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalke...etc...
	Receiver's instance variables: 
		output: 	''
		commandOutput: 	''
		NEWLINE: 	'
'
		rules: 	a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalker m...etc...
		varSynonyms: 	nil
		sessionId: 	'1424776494'
		TIMESTAMP: 	'1424776494'
		TOOLNAME: 	'DIPhpDependencies'
		PROJECTROOT: 	'/home/otruffer/DictoCLI'
		PROJECTSRC: 	'./'
		PROJECTBIN: 	'./'
		RESULTFILE: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/mai/1424776494/D...etc...
		TESTFILE: 	nil
		testInputFileExt: 	'.st'
		SYSTEM: 	SYSTEM


DIPhpDependencies>>testInput
	Receiver: a DIPhpDependencies
	Arguments and temporary variables: 
		strRules: 	nil
	Receiver's instance variables: 
		output: 	''
		commandOutput: 	''
		NEWLINE: 	'
'
		rules: 	a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalker m...etc...
		varSynonyms: 	nil
		sessionId: 	'1424776494'
		TIMESTAMP: 	'1424776494'
		TOOLNAME: 	'DIPhpDependencies'
		PROJECTROOT: 	'/home/otruffer/DictoCLI'
		PROJECTSRC: 	'./'
		PROJECTBIN: 	'./'
		RESULTFILE: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/mai/1424776494/D...etc...
		TESTFILE: 	nil
		testInputFileExt: 	'.st'
		SYSTEM: 	SYSTEM


DITestGroup>>build
	Receiver: a DITestGroup
	Arguments and temporary variables: 

	Receiver's instance variables: 
		rules: 	an OrderedCollection(RuleResult cannot depend on DictoTalker DictoTalker...etc...
		adapter: 	a DIPhpDependencies
		runCommandText: 	nil
		testSpecification: 	nil
		adapterID: 	'DIPhpDependencies'
		resultFile: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/mai/1424776494/D...etc...
		specificationFile: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/mai/14247...etc...
		commandFile: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/mai/1424776494/...etc...


[ :testGroup | testGroup build ] in DIDicto>>dictoBuild:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = ...etc...
		adapterTestGroups: 	a Dictionary(DIGrepFileContent->a DITestGroup DIJMeterLoadTe...etc...
		testGroup: 	a DITestGroup
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424776494'
		singleShotTask: 	false


Array(SequenceableCollection)>>do:
	Receiver: an Array(a DITestGroup a DITestGroup a DITestGroup a DITestGroup a DITestGroup)
	Arguments and temporary variables: 
		aBlock: 	[ :testGroup | testGroup build ]
		index: 	4
	Receiver's instance variables: 
an Array(a DITestGroup a DITestGroup a DITestGroup a DITestGroup a DITestGroup)

DIDicto>>dictoBuild:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = ...etc...
		adapterTestGroups: 	a Dictionary(DIGrepFileContent->a DITestGroup DIJMeterLoadTe...etc...
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424776494'
		singleShotTask: 	false


DIDicto>>dictoRun:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = ...etc...
		adapterTestGroups: 	nil
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424776494'
		singleShotTask: 	false


DIDicto>>dictoAll:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = ...etc...
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424776494'
		singleShotTask: 	false


[ DIDicto new dictoAll: input ] in DIWebServiceAPI>>getRun
	Receiver: a DIWebServiceAPI
	Arguments and temporary variables: 
		in: 	'/home/otruffer/dicto/bin/analysis/mai/dicto.rules'
		input: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = PhpCl...etc...
		rulesFailed: 	nil
		rulesTotal: 	nil
	Receiver's instance variables: 
		request: 	nil
		response: 	nil
		variables: 	nil
		delegate: 	nil
		principal: 	nil
		credentials: 	nil


BlockClosure>>on:do:
	Receiver: [ DIDicto new dictoAll: input ]
	Arguments and temporary variables: 
		exception: 	DIException
		handlerAction: 	[ :ex | ^ self error: ex description ]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	DIWebServiceAPI>>getRun
		startpc: 	138
		numArgs: 	0


DIWebServiceAPI>>getRun
	Receiver: a DIWebServiceAPI
	Arguments and temporary variables: 
		in: 	'/home/otruffer/dicto/bin/analysis/mai/dicto.rules'
		input: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = PhpCl...etc...
		rulesFailed: 	nil
		rulesTotal: 	nil
	Receiver's instance variables: 
		request: 	nil
		response: 	nil
		variables: 	nil
		delegate: 	nil
		principal: 	nil
		credentials: 	nil


DIWebServiceHandler>>post
	Receiver: a DIWebServiceHandler
	Arguments and temporary variables: 
		api: 	a DIWebServiceAPI
	Receiver's instance variables: 
		request: 	a ZnRequest(POST /mai/run)
		response: 	nil
		variables: 	an OrderedCollection('mai' 'run')
		delegate: 	a ZnJSONRestServerDelegate
		principal: 	nil
		credentials: 	nil
		dicto: 	a DIDicto


DIWebServiceHandler(ZnRestCall)>>execute
	Receiver: a DIWebServiceHandler
	Arguments and temporary variables: 

	Receiver's instance variables: 
		request: 	a ZnRequest(POST /mai/run)
		response: 	nil
		variables: 	an OrderedCollection('mai' 'run')
		delegate: 	a ZnJSONRestServerDelegate
		principal: 	nil
		credentials: 	nil
		dicto: 	a DIDicto


[ call execute ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


BlockClosure>>on:do:
	Receiver: [ call execute ]
	Arguments and temporary variables: 
		exception: 	ZnRestCallUnauthorized
		handlerAction: 	[ :exception | self unauthorized: exception request ]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
		startpc: 	38
		numArgs: 	0


ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


[ self execute: call ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /mai/run)
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


BlockClosure>>on:do:
	Receiver: [ self execute: call ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :exception | 
request server debugMode
	ifTrue: [ exception pa...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
		startpc: 	99
		numArgs: 	0


ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /mai/run)
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ :delegate | delegate handleRequest: request ] ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /mai/run)
		delegate: 	a ZnJSONRestServerDelegate
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateRequest:do:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /mai/run)
		block: 	[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ ...etc...
		authenticator: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /mai/run)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


[ self authenticateAndDelegateRequest: request ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /mai/run)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


BlockClosure>>on:do:
	Receiver: [ self authenticateAndDelegateRequest: request ]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :exception | 
self debugMode
	ifTrue: [ exception pass ]
	ifFa...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequ...etc...
		startpc: 	58
		numArgs: 	0


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /mai/run)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /mai/run)
		response: 	nil
		initialMilliseconds: 	1294128
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeOneRequestResponseOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		stream: 	a ZdcSocketStream
		request: 	a ZnRequest(POST /mai/run)
		response: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)



--- The full stack ---
NeoJSONReader>>error:
NeoJSONReader>>parseValue
NeoJSONReader>>next
NeoJSONReader class>>fromString:
DIPhpModel>>_loadPhpModel
DIPhpModel>>model
DIVarPhpClass>>allElements
DIVarPhpClass(DIVar)>>elements
DISimpleRule>>subjectElements
printRulesEntityRelationship: someRules
	| res processedPredicates |
	res := ''.
	processedPredicates := Set new.
	someRules
		do: [ :rule | 
			| predicateSelector subjectElements argumentElements data isPredicateInv isSubjectInv |
			predicateSelector := (rule predicate nameNormalized , ':') asSymbol.
			isPredicateInv := rule hasPredicateInverted.
			isSubjectInv := rule hasSubjectInverted.
			subjectElements := rule subjectElements.
			argumentElements := rule argumentElements.
			subjectElements
				do: [ :subject | 
					argumentElements
						do: [ :argument | 
							| relId spec msgPass msgFail |
							relId := subject id , '-' , argument id.
							msgPass := subject id , '.' , rule predicate name , '(' , argument id , ')=True'.
							msgFail := subject id , '.' , rule predicate name , '(' , argument id , ')=False'.
							(processedPredicates includes: relId)
								ifFalse: [ 
									data := {(#subject -> subject value).
									(#argument -> argument value).
									(#ruleId -> rule id).
									(#propertyId -> relId).
									(#msgPass -> msgPass).
									(#msgFail -> msgFail)} asDictionary.
									spec := self perform: predicateSelector withArguments: {data}.
									spec := spec
										dictoReplace:
											{('$subject' -> subject value).
											('$argument' -> argument value).
											('$ruleId' -> rule id).
											('$propertyId' -> relId).
											('$msgPass' -> msgPass).
											('$msgFail' -> msgFail)}.
									res := res , spec ].	"avoid duplicate predicate evaluations"
							processedPredicates add: relId ] ] ].
	^ res in DIPhpDependencies(DIAdapter)>>printRulesEntityRelationship:
DICollectionRule(OrderedCollection)>>do:
DIPhpDependencies(DIAdapter)>>printRulesEntityRelationship:
DIPhpDependencies(DIAdapter)>>printRules
DIPhpDependencies>>testInput
DITestGroup>>build
[ :testGroup | testGroup build ] in DIDicto>>dictoBuild:
Array(SequenceableCollection)>>do:
DIDicto>>dictoBuild:
DIDicto>>dictoRun:
DIDicto>>dictoAll:
[ DIDicto new dictoAll: input ] in DIWebServiceAPI>>getRun
BlockClosure>>on:do:
DIWebServiceAPI>>getRun
DIWebServiceHandler>>post
DIWebServiceHandler(ZnRestCall)>>execute
[ call execute ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
BlockClosure>>on:do:
ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
[ self execute: call ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
BlockClosure>>on:do:
ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ :delegate | delegate handleRequest: request ] ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateRequest:do:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
[ self authenticateAndDelegateRequest: request ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
BlockClosure>>on:do:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequest:
ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeOneRequestResponseOn:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ self executeOneRequestResponseOn: stream ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
[ 
p psValueAt: index put: anObject.
aBlock value ] in ZnCurrentServer(DynamicVariable)>>value:during:
BlockClosure>>ensure:
ZnCurrentServer(DynamicVariable)>>value:during:
ZnCurrentServer class(DynamicVariable class)>>value:during:
ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
[ self executeRequestResponseLoopOn: stream ] in [ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ] in [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
BlockClosure>>ensure:
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ] in [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
BlockClosure>>ifCurtailed:
[ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Halt
24 February 2015 12:15:29.350419 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
NBCogit NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
https://github.com/pharo-project/pharo-vm.git Commit: 4a0d556150d478ff2de3c9624d2f18e6eaa3fa5c Date: 2014-12-18 18:42:53 +0100 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14893

Image: Pharo3.0 [Latest update: #30863]

DIUtil class>>saveString:ToFile:
	Receiver: DIUtil
	Arguments and temporary variables: 
		aString: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = Php...etc...
		aFileName: 	'/home/otruffer/dicto/bin/analysis/mai/dicto.rules'
		stream: 	MultiByteFileStream: '/home/otruffer/dicto/bin/analysis/mai/dicto.rules...etc...
		newFileName: 	'/home/otruffer/dicto/bin/analysis/mai/dicto.rules'
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary()
		format: 	2
		layout: 	a FixedLayout
		instanceVariables: 	#()
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#DIUtil
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Dicto-var-util'
		traitComposition: 	{}
		localSelectors: 	nil


DIDicto>>dictoParse:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = ...etc...
		adapterTestGroups: 	nil
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424776529'
		singleShotTask: 	true


[ dicto dictoParse: text ] in DIWebServiceAPI>>postRules:
	Receiver: a DIWebServiceAPI
	Arguments and temporary variables: 
		dict: 	a Dictionary('rules'->'RuleResult = PhpClass with name:"Dicto\\RuleResult...etc...
		dicto: 	a DIDicto
		text: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = PhpCla...etc...
	Receiver's instance variables: 
		request: 	nil
		response: 	nil
		variables: 	nil
		delegate: 	nil
		principal: 	nil
		credentials: 	nil


BlockClosure>>on:do:
	Receiver: [ dicto dictoParse: text ]
	Arguments and temporary variables: 
		exception: 	DISyntaxErrorException
		handlerAction: 	[ :ex | ^ self error: 'syntax error' ]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	DIWebServiceAPI>>postRules:
		startpc: 	58
		numArgs: 	0


DIWebServiceAPI>>postRules:
	Receiver: a DIWebServiceAPI
	Arguments and temporary variables: 
		dict: 	a Dictionary('rules'->'RuleResult = PhpClass with name:"Dicto\\RuleResult...etc...
		dicto: 	a DIDicto
		text: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = PhpCla...etc...
	Receiver's instance variables: 
		request: 	nil
		response: 	nil
		variables: 	nil
		delegate: 	nil
		principal: 	nil
		credentials: 	nil


DIWebServiceHandler>>post
	Receiver: a DIWebServiceHandler
	Arguments and temporary variables: 
		api: 	a DIWebServiceAPI
	Receiver's instance variables: 
		request: 	a ZnRequest(POST /mai/rules)
		response: 	nil
		variables: 	an OrderedCollection('mai' 'rules')
		delegate: 	a ZnJSONRestServerDelegate
		principal: 	nil
		credentials: 	nil
		dicto: 	a DIDicto


DIWebServiceHandler(ZnRestCall)>>execute
	Receiver: a DIWebServiceHandler
	Arguments and temporary variables: 

	Receiver's instance variables: 
		request: 	a ZnRequest(POST /mai/rules)
		response: 	nil
		variables: 	an OrderedCollection('mai' 'rules')
		delegate: 	a ZnJSONRestServerDelegate
		principal: 	nil
		credentials: 	nil
		dicto: 	a DIDicto


[ call execute ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


BlockClosure>>on:do:
	Receiver: [ call execute ]
	Arguments and temporary variables: 
		exception: 	ZnRestCallUnauthorized
		handlerAction: 	[ :exception | self unauthorized: exception request ]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
		startpc: 	38
		numArgs: 	0


ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


[ self execute: call ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /mai/rules)
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


BlockClosure>>on:do:
	Receiver: [ self execute: call ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :exception | 
request server debugMode
	ifTrue: [ exception pa...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
		startpc: 	99
		numArgs: 	0


ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /mai/rules)
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ :delegate | delegate handleRequest: request ] ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /mai/rules)
		delegate: 	a ZnJSONRestServerDelegate
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateRequest:do:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /mai/rules)
		block: 	[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ ...etc...
		authenticator: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /mai/rules)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


[ self authenticateAndDelegateRequest: request ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /mai/rules)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


BlockClosure>>on:do:
	Receiver: [ self authenticateAndDelegateRequest: request ]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :exception | 
self debugMode
	ifTrue: [ exception pass ]
	ifFa...etc...
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequ...etc...
		startpc: 	58
		numArgs: 	0


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /mai/rules)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /mai/rules)
		response: 	nil
		initialMilliseconds: 	1329641
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeOneRequestResponseOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		stream: 	a ZdcSocketStream
		request: 	a ZnRequest(POST /mai/rules)
		response: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


[ self executeOneRequestResponseOn: stream ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		stream: 	a ZdcSocketStream
		request: 	nil
		response: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


[ 
p psValueAt: index put: anObject.
aBlock value ] in ZnCurrentServer(DynamicVariable)>>value:during:
	Receiver: a ZnCurrentServer
	Arguments and temporary variables: 
		anObject: 	a ZnManagingMultiThreadedServer(running 8010)
		aBlock: 	[ self executeOneRequestResponseOn: stream ]
		p: 	a Process in nil
		oldValue: 	nil
	Receiver's instance variables: 
		index: 	5


BlockClosure>>ensure:
	Receiver: [ 
p psValueAt: index put: anObject.
aBlock value ]
	Arguments and temporary variables: 
		aBlock: 	[ p psValueAt: index put: oldValue ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ZnCurrentServer(DynamicVariable)>>value:during:
		startpc: 	62
		numArgs: 	0


ZnCurrentServer(DynamicVariable)>>value:during:
	Receiver: a ZnCurrentServer
	Arguments and temporary variables: 
		anObject: 	a ZnManagingMultiThreadedServer(running 8010)
		aBlock: 	[ self executeOneRequestResponseOn: stream ]
		p: 	a Process in nil
		oldValue: 	nil
	Receiver's instance variables: 
		index: 	5


ZnCurrentServer class(DynamicVariable class)>>value:during:
	Receiver: ZnCurrentServer
	Arguments and temporary variables: 
		anObject: 	a ZnManagingMultiThreadedServer(running 8010)
		aBlock: 	[ self executeOneRequestResponseOn: stream ]
	Receiver's instance variables: 
		superclass: 	DynamicVariable
		methodDict: 	a MethodDictionary()
		format: 	132
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#ZnCurrentServer
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Zinc-HTTP-Variables'
		traitComposition: 	{}
		localSelectors: 	nil
		hash: 	nil
		soleInstance: 	a ZnCurrentServer


ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		stream: 	a ZdcSocketStream
		request: 	nil
		response: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


[ self executeRequestResponseLoopOn: stream ] in [ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ] in [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		listeningSocket: 	a Socket[waitingForConnection]
		stream: 	a ZdcSocketStream
		socket: 	a Socket[connected]
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


BlockClosure>>ensure:
	Receiver: [ self executeRequestResponseLoopOn: stream ]
	Arguments and temporary variables: 
		aBlock: 	[ 
self log debug: 'Closing stream'.
self closeSocketStream: stream ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		se...etc...
		startpc: 	118
		numArgs: 	0


[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ] in [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		listeningSocket: 	a Socket[waitingForConnection]
		stream: 	a ZdcSocketStream
		socket: 	a Socket[connected]
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


BlockClosure>>ifCurtailed:
	Receiver: [ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing st...etc...
	Arguments and temporary variables: 
		aBlock: 	[ 
self log debug: 'Destroying socket'.
socket destroy ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	[ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
	...etc...
		startpc: 	113
		numArgs: 	0


[ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		listeningSocket: 	a Socket[waitingForConnection]
		stream: 	a ZdcSocketStream
		socket: 	a Socket[connected]
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnec...etc...
		startpc: 	108
		numArgs: 	0



--- The full stack ---
DIUtil class>>saveString:ToFile:
DIDicto>>dictoParse:
[ dicto dictoParse: text ] in DIWebServiceAPI>>postRules:
BlockClosure>>on:do:
DIWebServiceAPI>>postRules:
DIWebServiceHandler>>post
DIWebServiceHandler(ZnRestCall)>>execute
[ call execute ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
BlockClosure>>on:do:
ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
[ self execute: call ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
BlockClosure>>on:do:
ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ :delegate | delegate handleRequest: request ] ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateRequest:do:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
[ self authenticateAndDelegateRequest: request ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
BlockClosure>>on:do:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequest:
ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeOneRequestResponseOn:
[ self executeOneRequestResponseOn: stream ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
[ 
p psValueAt: index put: anObject.
aBlock value ] in ZnCurrentServer(DynamicVariable)>>value:during:
BlockClosure>>ensure:
ZnCurrentServer(DynamicVariable)>>value:during:
ZnCurrentServer class(DynamicVariable class)>>value:during:
ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
[ self executeRequestResponseLoopOn: stream ] in [ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ] in [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
BlockClosure>>ensure:
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ] in [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
BlockClosure>>ifCurtailed:
[ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Halt
24 February 2015 12:15:33.50501 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
NBCogit NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
https://github.com/pharo-project/pharo-vm.git Commit: 4a0d556150d478ff2de3c9624d2f18e6eaa3fa5c Date: 2014-12-18 18:42:53 +0100 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14893

Image: Pharo3.0 [Latest update: #30863]

DIUtil class>>saveString:ToFile:
	Receiver: DIUtil
	Arguments and temporary variables: 
		aString: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = Php...etc...
		aFileName: 	'/home/otruffer/dicto/bin/analysis/mai/dicto.rules'
		stream: 	MultiByteFileStream: '/home/otruffer/dicto/bin/analysis/mai/dicto.rules...etc...
		newFileName: 	'/home/otruffer/dicto/bin/analysis/mai/dicto.rules'
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary()
		format: 	2
		layout: 	a FixedLayout
		instanceVariables: 	#()
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#DIUtil
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Dicto-var-util'
		traitComposition: 	{}
		localSelectors: 	nil


DIDicto>>dictoParse:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = ...etc...
		adapterTestGroups: 	nil
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424776533'
		singleShotTask: 	false


DIDicto>>dictoBuild:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = ...etc...
		adapterTestGroups: 	nil
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424776533'
		singleShotTask: 	false


DIDicto>>dictoRun:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = ...etc...
		adapterTestGroups: 	nil
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424776533'
		singleShotTask: 	false


DIDicto>>dictoAll:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = ...etc...
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424776533'
		singleShotTask: 	false


[ DIDicto new dictoAll: input ] in DIWebServiceAPI>>getRun
	Receiver: a DIWebServiceAPI
	Arguments and temporary variables: 
		in: 	'/home/otruffer/dicto/bin/analysis/mai/dicto.rules'
		input: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = PhpCl...etc...
		rulesFailed: 	nil
		rulesTotal: 	nil
	Receiver's instance variables: 
		request: 	nil
		response: 	nil
		variables: 	nil
		delegate: 	nil
		principal: 	nil
		credentials: 	nil


BlockClosure>>on:do:
	Receiver: [ DIDicto new dictoAll: input ]
	Arguments and temporary variables: 
		exception: 	DIException
		handlerAction: 	[ :ex | ^ self error: ex description ]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	DIWebServiceAPI>>getRun
		startpc: 	138
		numArgs: 	0


DIWebServiceAPI>>getRun
	Receiver: a DIWebServiceAPI
	Arguments and temporary variables: 
		in: 	'/home/otruffer/dicto/bin/analysis/mai/dicto.rules'
		input: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = PhpCl...etc...
		rulesFailed: 	nil
		rulesTotal: 	nil
	Receiver's instance variables: 
		request: 	nil
		response: 	nil
		variables: 	nil
		delegate: 	nil
		principal: 	nil
		credentials: 	nil


DIWebServiceHandler>>post
	Receiver: a DIWebServiceHandler
	Arguments and temporary variables: 
		api: 	a DIWebServiceAPI
	Receiver's instance variables: 
		request: 	a ZnRequest(POST /mai/run)
		response: 	nil
		variables: 	an OrderedCollection('mai' 'run')
		delegate: 	a ZnJSONRestServerDelegate
		principal: 	nil
		credentials: 	nil
		dicto: 	a DIDicto


DIWebServiceHandler(ZnRestCall)>>execute
	Receiver: a DIWebServiceHandler
	Arguments and temporary variables: 

	Receiver's instance variables: 
		request: 	a ZnRequest(POST /mai/run)
		response: 	nil
		variables: 	an OrderedCollection('mai' 'run')
		delegate: 	a ZnJSONRestServerDelegate
		principal: 	nil
		credentials: 	nil
		dicto: 	a DIDicto


[ call execute ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


BlockClosure>>on:do:
	Receiver: [ call execute ]
	Arguments and temporary variables: 
		exception: 	ZnRestCallUnauthorized
		handlerAction: 	[ :exception | self unauthorized: exception request ]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
		startpc: 	38
		numArgs: 	0


ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


[ self execute: call ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /mai/run)
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


BlockClosure>>on:do:
	Receiver: [ self execute: call ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :exception | 
request server debugMode
	ifTrue: [ exception pa...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
		startpc: 	99
		numArgs: 	0


ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /mai/run)
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ :delegate | delegate handleRequest: request ] ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /mai/run)
		delegate: 	a ZnJSONRestServerDelegate
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateRequest:do:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /mai/run)
		block: 	[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ ...etc...
		authenticator: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /mai/run)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


[ self authenticateAndDelegateRequest: request ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /mai/run)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


BlockClosure>>on:do:
	Receiver: [ self authenticateAndDelegateRequest: request ]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :exception | 
self debugMode
	ifTrue: [ exception pass ]
	ifFa...etc...
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequ...etc...
		startpc: 	58
		numArgs: 	0


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /mai/run)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /mai/run)
		response: 	nil
		initialMilliseconds: 	1333799
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeOneRequestResponseOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		stream: 	a ZdcSocketStream
		request: 	a ZnRequest(POST /mai/run)
		response: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


[ self executeOneRequestResponseOn: stream ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		stream: 	a ZdcSocketStream
		request: 	nil
		response: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


[ 
p psValueAt: index put: anObject.
aBlock value ] in ZnCurrentServer(DynamicVariable)>>value:during:
	Receiver: a ZnCurrentServer
	Arguments and temporary variables: 
		anObject: 	a ZnManagingMultiThreadedServer(running 8010)
		aBlock: 	[ self executeOneRequestResponseOn: stream ]
		p: 	a Process in nil
		oldValue: 	nil
	Receiver's instance variables: 
		index: 	5


BlockClosure>>ensure:
	Receiver: [ 
p psValueAt: index put: anObject.
aBlock value ]
	Arguments and temporary variables: 
		aBlock: 	[ p psValueAt: index put: oldValue ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ZnCurrentServer(DynamicVariable)>>value:during:
		startpc: 	62
		numArgs: 	0


ZnCurrentServer(DynamicVariable)>>value:during:
	Receiver: a ZnCurrentServer
	Arguments and temporary variables: 
		anObject: 	a ZnManagingMultiThreadedServer(running 8010)
		aBlock: 	[ self executeOneRequestResponseOn: stream ]
		p: 	a Process in nil
		oldValue: 	nil
	Receiver's instance variables: 
		index: 	5


ZnCurrentServer class(DynamicVariable class)>>value:during:
	Receiver: ZnCurrentServer
	Arguments and temporary variables: 
		anObject: 	a ZnManagingMultiThreadedServer(running 8010)
		aBlock: 	[ self executeOneRequestResponseOn: stream ]
	Receiver's instance variables: 
		superclass: 	DynamicVariable
		methodDict: 	a MethodDictionary()
		format: 	132
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#ZnCurrentServer
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Zinc-HTTP-Variables'
		traitComposition: 	{}
		localSelectors: 	nil
		hash: 	nil
		soleInstance: 	a ZnCurrentServer


ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		stream: 	a ZdcSocketStream
		request: 	nil
		response: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


[ self executeRequestResponseLoopOn: stream ] in [ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ] in [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		listeningSocket: 	a Socket[waitingForConnection]
		stream: 	a ZdcSocketStream
		socket: 	a Socket[connected]
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


BlockClosure>>ensure:
	Receiver: [ self executeRequestResponseLoopOn: stream ]
	Arguments and temporary variables: 
		aBlock: 	[ 
self log debug: 'Closing stream'.
self closeSocketStream: stream ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		se...etc...
		startpc: 	118
		numArgs: 	0


[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ] in [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		listeningSocket: 	a Socket[waitingForConnection]
		stream: 	a ZdcSocketStream
		socket: 	a Socket[connected]
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


BlockClosure>>ifCurtailed:
	Receiver: [ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing st...etc...
	Arguments and temporary variables: 
		aBlock: 	[ 
self log debug: 'Destroying socket'.
socket destroy ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	[ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
	...etc...
		startpc: 	113
		numArgs: 	0


[ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		listeningSocket: 	a Socket[waitingForConnection]
		stream: 	a ZdcSocketStream
		socket: 	a Socket[connected]
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnec...etc...
		startpc: 	108
		numArgs: 	0



--- The full stack ---
DIUtil class>>saveString:ToFile:
DIDicto>>dictoParse:
DIDicto>>dictoBuild:
DIDicto>>dictoRun:
DIDicto>>dictoAll:
[ DIDicto new dictoAll: input ] in DIWebServiceAPI>>getRun
BlockClosure>>on:do:
DIWebServiceAPI>>getRun
DIWebServiceHandler>>post
DIWebServiceHandler(ZnRestCall)>>execute
[ call execute ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
BlockClosure>>on:do:
ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
[ self execute: call ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
BlockClosure>>on:do:
ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ :delegate | delegate handleRequest: request ] ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateRequest:do:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
[ self authenticateAndDelegateRequest: request ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
BlockClosure>>on:do:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequest:
ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeOneRequestResponseOn:
[ self executeOneRequestResponseOn: stream ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
[ 
p psValueAt: index put: anObject.
aBlock value ] in ZnCurrentServer(DynamicVariable)>>value:during:
BlockClosure>>ensure:
ZnCurrentServer(DynamicVariable)>>value:during:
ZnCurrentServer class(DynamicVariable class)>>value:during:
ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
[ self executeRequestResponseLoopOn: stream ] in [ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ] in [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
BlockClosure>>ensure:
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ] in [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
BlockClosure>>ifCurtailed:
[ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Halt
24 February 2015 12:15:35.015102 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
NBCogit NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
https://github.com/pharo-project/pharo-vm.git Commit: 4a0d556150d478ff2de3c9624d2f18e6eaa3fa5c Date: 2014-12-18 18:42:53 +0100 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14893

Image: Pharo3.0 [Latest update: #30863]

DIUtil class>>saveString:ToFile:
	Receiver: DIUtil
	Arguments and temporary variables: 
		aString: 	'source: ''/home/otruffer/DictoCLI''
filePattern: ''*.php''
ignore: ''...etc...
		aFileName: 	'/home/otruffer/dicto/bin/tools/phpda/configs/config-1424776535.yaml...etc...
		stream: 	MultiByteFileStream: '/home/otruffer/dicto/bin/tools/phpda/configs/conf...etc...
		newFileName: 	'/home/otruffer/dicto/bin/tools/phpda/configs/config-1424776535.ya...etc...
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary()
		format: 	2
		layout: 	a FixedLayout
		instanceVariables: 	#()
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#DIUtil
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Dicto-var-util'
		traitComposition: 	{}
		localSelectors: 	nil


DIPhpModel>>_createConfigFile
	Receiver: a DIPhpModel
	Arguments and temporary variables: 
		configFile: 	'source: ''/home/otruffer/DictoCLI''
filePattern: ''*.php''
ignore:...etc...
	Receiver's instance variables: 
		defRules: 	a DICollectionRule()
		defVars: 	a DICollectionVar(SYSTEM)
		analysisID: 	'1424776535'
		additionalProperties: 	a Dictionary()
		ruleCounter: 	0
		varCounter: 	0
		defVarElements: 	a DICollectionVarElements()
		defVarInvertedElements: 	a DICollectionVarElements()
		model: 	nil


DIPhpModel>>_loadPhpModel
	Receiver: a DIPhpModel
	Arguments and temporary variables: 

	Receiver's instance variables: 
		defRules: 	a DICollectionRule()
		defVars: 	a DICollectionVar(SYSTEM)
		analysisID: 	'1424776535'
		additionalProperties: 	a Dictionary()
		ruleCounter: 	0
		varCounter: 	0
		defVarElements: 	a DICollectionVarElements()
		defVarInvertedElements: 	a DICollectionVarElements()
		model: 	nil


DIPhpModel>>model
	Receiver: a DIPhpModel
	Arguments and temporary variables: 

	Receiver's instance variables: 
		defRules: 	a DICollectionRule()
		defVars: 	a DICollectionVar(SYSTEM)
		analysisID: 	'1424776535'
		additionalProperties: 	a Dictionary()
		ruleCounter: 	0
		varCounter: 	0
		defVarElements: 	a DICollectionVarElements()
		defVarInvertedElements: 	a DICollectionVarElements()
		model: 	nil


DIVarPhpClass>>allElements
	Receiver: RuleResult
	Arguments and temporary variables: 

	Receiver's instance variables: 
		isFirst: 	false
		dslText: 	'RuleResult=PhpClass with name:"Dicto\\RuleResult"'
		type: 	'PhpClass'
		id: 	1
		entity: 	nil
		name: 	'RuleResult'
		specifiers: 	an OrderedCollection(name=Dicto\\RuleResult)
		isInverted: 	false
		elements: 	a DICollectionVarElements()
		invertedElements: 	a DICollectionVarElements()


DIVarPhpClass(DIVar)>>elements
	Receiver: RuleResult
	Arguments and temporary variables: 
		valid: 	nil
	Receiver's instance variables: 
		isFirst: 	false
		dslText: 	'RuleResult=PhpClass with name:"Dicto\\RuleResult"'
		type: 	'PhpClass'
		id: 	1
		entity: 	nil
		name: 	'RuleResult'
		specifiers: 	an OrderedCollection(name=Dicto\\RuleResult)
		isInverted: 	false
		elements: 	a DICollectionVarElements()
		invertedElements: 	a DICollectionVarElements()


DISimpleRule>>subjectElements
	Receiver: RuleResult cannot depend on DictoTalker
	Arguments and temporary variables: 
		subjectElements: 	nil
	Receiver's instance variables: 
		isFirst: 	nil
		dslText: 	'RuleResult cannot depend on DictoTalker'
		type: 	#cannot
		id: 	1001
		entity: 	nil
		subjects: 	an Array(RuleResult)
		predicates: 	an Array(depend on DictoTalker)
		subRules: 	nil
		candidateAdapters: 	a SortedCollection(DIPhpDependencies)
		chosenAdapter: 	DIPhpDependencies
		hasFailed: 	false
		failureMessage: 	''
		failingPredicates: 	a Set()
		hasSubjectInverted: 	false
		hasPredicateInverted: 	false


printRulesEntityRelationship: someRules
	| res processedPredicates |
	res := ''.
	processedPredicates := Set new.
	someRules
		do: [ :rule | 
			| predicateSelector subjectElements argumentElements data isPredicateInv isSubjectInv |
			predicateSelector := (rule predicate nameNormalized , ':') asSymbol.
			isPredicateInv := rule hasPredicateInverted.
			isSubjectInv := rule hasSubjectInverted.
			subjectElements := rule subjectElements.
			argumentElements := rule argumentElements.
			subjectElements
				do: [ :subject | 
					argumentElements
						do: [ :argument | 
							| relId spec msgPass msgFail |
							relId := subject id , '-' , argument id.
							msgPass := subject id , '.' , rule predicate name , '(' , argument id , ')=True'.
							msgFail := subject id , '.' , rule predicate name , '(' , argument id , ')=False'.
							(processedPredicates includes: relId)
								ifFalse: [ 
									data := {(#subject -> subject value).
									(#argument -> argument value).
									(#ruleId -> rule id).
									(#propertyId -> relId).
									(#msgPass -> msgPass).
									(#msgFail -> msgFail)} asDictionary.
									spec := self perform: predicateSelector withArguments: {data}.
									spec := spec
										dictoReplace:
											{('$subject' -> subject value).
											('$argument' -> argument value).
											('$ruleId' -> rule id).
											('$propertyId' -> relId).
											('$msgPass' -> msgPass).
											('$msgFail' -> msgFail)}.
									res := res , spec ].	"avoid duplicate predicate evaluations"
							processedPredicates add: relId ] ] ].
	^ res in DIPhpDependencies(DIAdapter)>>printRulesEntityRelationship:
	Receiver: a DIPhpDependencies
	Arguments and temporary variables: 
		someRules: 	a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalk...etc...
		processedPredicates: 	a Set()
		data: 	nil
		res: 	''
		rule: 	RuleResult cannot depend on DictoTalker
		predicateSelector: 	#dependOn:
		subjectElements: 	nil
		argumentElements: 	nil
		isPredicateInv: 	false
		isSubjectInv: 	false
	Receiver's instance variables: 
		output: 	''
		commandOutput: 	''
		NEWLINE: 	'
'
		rules: 	a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalker m...etc...
		varSynonyms: 	nil
		sessionId: 	'1424776533'
		TIMESTAMP: 	'1424776535'
		TOOLNAME: 	'DIPhpDependencies'
		PROJECTROOT: 	'/home/otruffer/DictoCLI'
		PROJECTSRC: 	'./'
		PROJECTBIN: 	'./'
		RESULTFILE: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/mai/1424776535/D...etc...
		TESTFILE: 	nil
		testInputFileExt: 	'.st'
		SYSTEM: 	SYSTEM


DICollectionRule(OrderedCollection)>>do:
	Receiver: a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalker must depend on Rule...etc...
	Arguments and temporary variables: 
		aBlock: 	printRulesEntityRelationship: someRules
	| res processedPredicates |
	r...etc...
		index: 	1
	Receiver's instance variables: 
		array: 	an Array(RuleResult cannot depend on DictoTalker DictoTalker must depend...etc...
		firstIndex: 	1
		lastIndex: 	3
		elements: 	nil
		elements: 	nil


DIPhpDependencies(DIAdapter)>>printRulesEntityRelationship:
	Receiver: a DIPhpDependencies
	Arguments and temporary variables: 
		res: 	''
		someRules: 	a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalk...etc...
		processedPredicates: 	a Set()
	Receiver's instance variables: 
		output: 	''
		commandOutput: 	''
		NEWLINE: 	'
'
		rules: 	a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalker m...etc...
		varSynonyms: 	nil
		sessionId: 	'1424776533'
		TIMESTAMP: 	'1424776535'
		TOOLNAME: 	'DIPhpDependencies'
		PROJECTROOT: 	'/home/otruffer/DictoCLI'
		PROJECTSRC: 	'./'
		PROJECTBIN: 	'./'
		RESULTFILE: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/mai/1424776535/D...etc...
		TESTFILE: 	nil
		testInputFileExt: 	'.st'
		SYSTEM: 	SYSTEM


DIPhpDependencies(DIAdapter)>>printRules
	Receiver: a DIPhpDependencies
	Arguments and temporary variables: 
		res: 	nil
		allRules: 	a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalke...etc...
	Receiver's instance variables: 
		output: 	''
		commandOutput: 	''
		NEWLINE: 	'
'
		rules: 	a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalker m...etc...
		varSynonyms: 	nil
		sessionId: 	'1424776533'
		TIMESTAMP: 	'1424776535'
		TOOLNAME: 	'DIPhpDependencies'
		PROJECTROOT: 	'/home/otruffer/DictoCLI'
		PROJECTSRC: 	'./'
		PROJECTBIN: 	'./'
		RESULTFILE: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/mai/1424776535/D...etc...
		TESTFILE: 	nil
		testInputFileExt: 	'.st'
		SYSTEM: 	SYSTEM


DIPhpDependencies>>testInput
	Receiver: a DIPhpDependencies
	Arguments and temporary variables: 
		strRules: 	nil
	Receiver's instance variables: 
		output: 	''
		commandOutput: 	''
		NEWLINE: 	'
'
		rules: 	a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalker m...etc...
		varSynonyms: 	nil
		sessionId: 	'1424776533'
		TIMESTAMP: 	'1424776535'
		TOOLNAME: 	'DIPhpDependencies'
		PROJECTROOT: 	'/home/otruffer/DictoCLI'
		PROJECTSRC: 	'./'
		PROJECTBIN: 	'./'
		RESULTFILE: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/mai/1424776535/D...etc...
		TESTFILE: 	nil
		testInputFileExt: 	'.st'
		SYSTEM: 	SYSTEM


DITestGroup>>build
	Receiver: a DITestGroup
	Arguments and temporary variables: 

	Receiver's instance variables: 
		rules: 	an OrderedCollection(RuleResult cannot depend on DictoTalker DictoTalker...etc...
		adapter: 	a DIPhpDependencies
		runCommandText: 	nil
		testSpecification: 	nil
		adapterID: 	'DIPhpDependencies'
		resultFile: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/mai/1424776535/D...etc...
		specificationFile: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/mai/14247...etc...
		commandFile: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/mai/1424776535/...etc...


[ :testGroup | testGroup build ] in DIDicto>>dictoBuild:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = ...etc...
		adapterTestGroups: 	a Dictionary(DIGrepFileContent->a DITestGroup DIJMeterLoadTe...etc...
		testGroup: 	a DITestGroup
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424776533'
		singleShotTask: 	false


Array(SequenceableCollection)>>do:
	Receiver: an Array(a DITestGroup a DITestGroup a DITestGroup a DITestGroup a DITestGroup)
	Arguments and temporary variables: 
		aBlock: 	[ :testGroup | testGroup build ]
		index: 	4
	Receiver's instance variables: 
an Array(a DITestGroup a DITestGroup a DITestGroup a DITestGroup a DITestGroup)

DIDicto>>dictoBuild:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = ...etc...
		adapterTestGroups: 	a Dictionary(DIGrepFileContent->a DITestGroup DIJMeterLoadTe...etc...
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424776533'
		singleShotTask: 	false


DIDicto>>dictoRun:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = ...etc...
		adapterTestGroups: 	nil
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424776533'
		singleShotTask: 	false


DIDicto>>dictoAll:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = ...etc...
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424776533'
		singleShotTask: 	false


[ DIDicto new dictoAll: input ] in DIWebServiceAPI>>getRun
	Receiver: a DIWebServiceAPI
	Arguments and temporary variables: 
		in: 	'/home/otruffer/dicto/bin/analysis/mai/dicto.rules'
		input: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = PhpCl...etc...
		rulesFailed: 	nil
		rulesTotal: 	nil
	Receiver's instance variables: 
		request: 	nil
		response: 	nil
		variables: 	nil
		delegate: 	nil
		principal: 	nil
		credentials: 	nil


BlockClosure>>on:do:
	Receiver: [ DIDicto new dictoAll: input ]
	Arguments and temporary variables: 
		exception: 	DIException
		handlerAction: 	[ :ex | ^ self error: ex description ]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	DIWebServiceAPI>>getRun
		startpc: 	138
		numArgs: 	0


DIWebServiceAPI>>getRun
	Receiver: a DIWebServiceAPI
	Arguments and temporary variables: 
		in: 	'/home/otruffer/dicto/bin/analysis/mai/dicto.rules'
		input: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = PhpCl...etc...
		rulesFailed: 	nil
		rulesTotal: 	nil
	Receiver's instance variables: 
		request: 	nil
		response: 	nil
		variables: 	nil
		delegate: 	nil
		principal: 	nil
		credentials: 	nil


DIWebServiceHandler>>post
	Receiver: a DIWebServiceHandler
	Arguments and temporary variables: 
		api: 	a DIWebServiceAPI
	Receiver's instance variables: 
		request: 	a ZnRequest(POST /mai/run)
		response: 	nil
		variables: 	an OrderedCollection('mai' 'run')
		delegate: 	a ZnJSONRestServerDelegate
		principal: 	nil
		credentials: 	nil
		dicto: 	a DIDicto


DIWebServiceHandler(ZnRestCall)>>execute
	Receiver: a DIWebServiceHandler
	Arguments and temporary variables: 

	Receiver's instance variables: 
		request: 	a ZnRequest(POST /mai/run)
		response: 	nil
		variables: 	an OrderedCollection('mai' 'run')
		delegate: 	a ZnJSONRestServerDelegate
		principal: 	nil
		credentials: 	nil
		dicto: 	a DIDicto


[ call execute ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


BlockClosure>>on:do:
	Receiver: [ call execute ]
	Arguments and temporary variables: 
		exception: 	ZnRestCallUnauthorized
		handlerAction: 	[ :exception | self unauthorized: exception request ]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
		startpc: 	38
		numArgs: 	0


ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


[ self execute: call ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /mai/run)
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


BlockClosure>>on:do:
	Receiver: [ self execute: call ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :exception | 
request server debugMode
	ifTrue: [ exception pa...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
		startpc: 	99
		numArgs: 	0


ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /mai/run)
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ :delegate | delegate handleRequest: request ] ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /mai/run)
		delegate: 	a ZnJSONRestServerDelegate
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateRequest:do:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /mai/run)
		block: 	[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ ...etc...
		authenticator: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /mai/run)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


[ self authenticateAndDelegateRequest: request ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /mai/run)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


BlockClosure>>on:do:
	Receiver: [ self authenticateAndDelegateRequest: request ]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :exception | 
self debugMode
	ifTrue: [ exception pass ]
	ifFa...etc...
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequ...etc...
		startpc: 	58
		numArgs: 	0


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /mai/run)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /mai/run)
		response: 	nil
		initialMilliseconds: 	1333799
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeOneRequestResponseOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		stream: 	a ZdcSocketStream
		request: 	a ZnRequest(POST /mai/run)
		response: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


[ self executeOneRequestResponseOn: stream ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		stream: 	a ZdcSocketStream
		request: 	nil
		response: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


[ 
p psValueAt: index put: anObject.
aBlock value ] in ZnCurrentServer(DynamicVariable)>>value:during:
	Receiver: a ZnCurrentServer
	Arguments and temporary variables: 
		anObject: 	a ZnManagingMultiThreadedServer(running 8010)
		aBlock: 	[ self executeOneRequestResponseOn: stream ]
		p: 	a Process in nil
		oldValue: 	nil
	Receiver's instance variables: 
		index: 	5



--- The full stack ---
DIUtil class>>saveString:ToFile:
DIPhpModel>>_createConfigFile
DIPhpModel>>_loadPhpModel
DIPhpModel>>model
DIVarPhpClass>>allElements
DIVarPhpClass(DIVar)>>elements
DISimpleRule>>subjectElements
printRulesEntityRelationship: someRules
	| res processedPredicates |
	res := ''.
	processedPredicates := Set new.
	someRules
		do: [ :rule | 
			| predicateSelector subjectElements argumentElements data isPredicateInv isSubjectInv |
			predicateSelector := (rule predicate nameNormalized , ':') asSymbol.
			isPredicateInv := rule hasPredicateInverted.
			isSubjectInv := rule hasSubjectInverted.
			subjectElements := rule subjectElements.
			argumentElements := rule argumentElements.
			subjectElements
				do: [ :subject | 
					argumentElements
						do: [ :argument | 
							| relId spec msgPass msgFail |
							relId := subject id , '-' , argument id.
							msgPass := subject id , '.' , rule predicate name , '(' , argument id , ')=True'.
							msgFail := subject id , '.' , rule predicate name , '(' , argument id , ')=False'.
							(processedPredicates includes: relId)
								ifFalse: [ 
									data := {(#subject -> subject value).
									(#argument -> argument value).
									(#ruleId -> rule id).
									(#propertyId -> relId).
									(#msgPass -> msgPass).
									(#msgFail -> msgFail)} asDictionary.
									spec := self perform: predicateSelector withArguments: {data}.
									spec := spec
										dictoReplace:
											{('$subject' -> subject value).
											('$argument' -> argument value).
											('$ruleId' -> rule id).
											('$propertyId' -> relId).
											('$msgPass' -> msgPass).
											('$msgFail' -> msgFail)}.
									res := res , spec ].	"avoid duplicate predicate evaluations"
							processedPredicates add: relId ] ] ].
	^ res in DIPhpDependencies(DIAdapter)>>printRulesEntityRelationship:
DICollectionRule(OrderedCollection)>>do:
DIPhpDependencies(DIAdapter)>>printRulesEntityRelationship:
DIPhpDependencies(DIAdapter)>>printRules
DIPhpDependencies>>testInput
DITestGroup>>build
[ :testGroup | testGroup build ] in DIDicto>>dictoBuild:
Array(SequenceableCollection)>>do:
DIDicto>>dictoBuild:
DIDicto>>dictoRun:
DIDicto>>dictoAll:
[ DIDicto new dictoAll: input ] in DIWebServiceAPI>>getRun
BlockClosure>>on:do:
DIWebServiceAPI>>getRun
DIWebServiceHandler>>post
DIWebServiceHandler(ZnRestCall)>>execute
[ call execute ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
BlockClosure>>on:do:
ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
[ self execute: call ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
BlockClosure>>on:do:
ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ :delegate | delegate handleRequest: request ] ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateRequest:do:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
[ self authenticateAndDelegateRequest: request ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
BlockClosure>>on:do:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequest:
ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeOneRequestResponseOn:
[ self executeOneRequestResponseOn: stream ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
[ 
p psValueAt: index put: anObject.
aBlock value ] in ZnCurrentServer(DynamicVariable)>>value:during:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
BlockClosure>>ensure:
ZnCurrentServer(DynamicVariable)>>value:during:
ZnCurrentServer class(DynamicVariable class)>>value:during:
ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
[ self executeRequestResponseLoopOn: stream ] in [ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ] in [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
BlockClosure>>ensure:
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ] in [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
BlockClosure>>ifCurtailed:
[ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Halt
24 February 2015 12:15:36.783578 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
NBCogit NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
https://github.com/pharo-project/pharo-vm.git Commit: 4a0d556150d478ff2de3c9624d2f18e6eaa3fa5c Date: 2014-12-18 18:42:53 +0100 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14893

Image: Pharo3.0 [Latest update: #30863]

DIUtil class>>saveString:ToFile:
	Receiver: DIUtil
	Arguments and temporary variables: 
		aString: 	'#!/bin/bash
type -P hhvm &>/dev/null && hhvm /home/otruffer/dicto/bin...etc...
		aFileName: 	'/home/otruffer/dicto/bin/tools/phpda/configs/modelScript-1424776535...etc...
		stream: 	MultiByteFileStream: '/home/otruffer/dicto/bin/tools/phpda/configs/mode...etc...
		newFileName: 	'/home/otruffer/dicto/bin/tools/phpda/configs/modelScript-14247765...etc...
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary()
		format: 	2
		layout: 	a FixedLayout
		instanceVariables: 	#()
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#DIUtil
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Dicto-var-util'
		traitComposition: 	{}
		localSelectors: 	nil


DIPhpModel>>_createModelScript
	Receiver: a DIPhpModel
	Arguments and temporary variables: 
		modelScriptFile: 	'#!/bin/bash
type -P hhvm &>/dev/null && hhvm /home/otruffer/d...etc...
	Receiver's instance variables: 
		defRules: 	a DICollectionRule()
		defVars: 	a DICollectionVar(SYSTEM)
		analysisID: 	'1424776535'
		additionalProperties: 	a Dictionary()
		ruleCounter: 	0
		varCounter: 	0
		defVarElements: 	a DICollectionVarElements()
		defVarInvertedElements: 	a DICollectionVarElements()
		model: 	nil


DIPhpModel>>_createModelFile
	Receiver: a DIPhpModel
	Arguments and temporary variables: 

	Receiver's instance variables: 
		defRules: 	a DICollectionRule()
		defVars: 	a DICollectionVar(SYSTEM)
		analysisID: 	'1424776535'
		additionalProperties: 	a Dictionary()
		ruleCounter: 	0
		varCounter: 	0
		defVarElements: 	a DICollectionVarElements()
		defVarInvertedElements: 	a DICollectionVarElements()
		model: 	nil


DIPhpModel>>_loadPhpModel
	Receiver: a DIPhpModel
	Arguments and temporary variables: 

	Receiver's instance variables: 
		defRules: 	a DICollectionRule()
		defVars: 	a DICollectionVar(SYSTEM)
		analysisID: 	'1424776535'
		additionalProperties: 	a Dictionary()
		ruleCounter: 	0
		varCounter: 	0
		defVarElements: 	a DICollectionVarElements()
		defVarInvertedElements: 	a DICollectionVarElements()
		model: 	nil


DIPhpModel>>model
	Receiver: a DIPhpModel
	Arguments and temporary variables: 

	Receiver's instance variables: 
		defRules: 	a DICollectionRule()
		defVars: 	a DICollectionVar(SYSTEM)
		analysisID: 	'1424776535'
		additionalProperties: 	a Dictionary()
		ruleCounter: 	0
		varCounter: 	0
		defVarElements: 	a DICollectionVarElements()
		defVarInvertedElements: 	a DICollectionVarElements()
		model: 	nil


DIVarPhpClass>>allElements
	Receiver: RuleResult
	Arguments and temporary variables: 

	Receiver's instance variables: 
		isFirst: 	false
		dslText: 	'RuleResult=PhpClass with name:"Dicto\\RuleResult"'
		type: 	'PhpClass'
		id: 	1
		entity: 	nil
		name: 	'RuleResult'
		specifiers: 	an OrderedCollection(name=Dicto\\RuleResult)
		isInverted: 	false
		elements: 	a DICollectionVarElements()
		invertedElements: 	a DICollectionVarElements()


DIVarPhpClass(DIVar)>>elements
	Receiver: RuleResult
	Arguments and temporary variables: 
		valid: 	nil
	Receiver's instance variables: 
		isFirst: 	false
		dslText: 	'RuleResult=PhpClass with name:"Dicto\\RuleResult"'
		type: 	'PhpClass'
		id: 	1
		entity: 	nil
		name: 	'RuleResult'
		specifiers: 	an OrderedCollection(name=Dicto\\RuleResult)
		isInverted: 	false
		elements: 	a DICollectionVarElements()
		invertedElements: 	a DICollectionVarElements()


DISimpleRule>>subjectElements
	Receiver: RuleResult cannot depend on DictoTalker
	Arguments and temporary variables: 
		subjectElements: 	nil
	Receiver's instance variables: 
		isFirst: 	nil
		dslText: 	'RuleResult cannot depend on DictoTalker'
		type: 	#cannot
		id: 	1001
		entity: 	nil
		subjects: 	an Array(RuleResult)
		predicates: 	an Array(depend on DictoTalker)
		subRules: 	nil
		candidateAdapters: 	a SortedCollection(DIPhpDependencies)
		chosenAdapter: 	DIPhpDependencies
		hasFailed: 	false
		failureMessage: 	''
		failingPredicates: 	a Set()
		hasSubjectInverted: 	false
		hasPredicateInverted: 	false


printRulesEntityRelationship: someRules
	| res processedPredicates |
	res := ''.
	processedPredicates := Set new.
	someRules
		do: [ :rule | 
			| predicateSelector subjectElements argumentElements data isPredicateInv isSubjectInv |
			predicateSelector := (rule predicate nameNormalized , ':') asSymbol.
			isPredicateInv := rule hasPredicateInverted.
			isSubjectInv := rule hasSubjectInverted.
			subjectElements := rule subjectElements.
			argumentElements := rule argumentElements.
			subjectElements
				do: [ :subject | 
					argumentElements
						do: [ :argument | 
							| relId spec msgPass msgFail |
							relId := subject id , '-' , argument id.
							msgPass := subject id , '.' , rule predicate name , '(' , argument id , ')=True'.
							msgFail := subject id , '.' , rule predicate name , '(' , argument id , ')=False'.
							(processedPredicates includes: relId)
								ifFalse: [ 
									data := {(#subject -> subject value).
									(#argument -> argument value).
									(#ruleId -> rule id).
									(#propertyId -> relId).
									(#msgPass -> msgPass).
									(#msgFail -> msgFail)} asDictionary.
									spec := self perform: predicateSelector withArguments: {data}.
									spec := spec
										dictoReplace:
											{('$subject' -> subject value).
											('$argument' -> argument value).
											('$ruleId' -> rule id).
											('$propertyId' -> relId).
											('$msgPass' -> msgPass).
											('$msgFail' -> msgFail)}.
									res := res , spec ].	"avoid duplicate predicate evaluations"
							processedPredicates add: relId ] ] ].
	^ res in DIPhpDependencies(DIAdapter)>>printRulesEntityRelationship:
	Receiver: a DIPhpDependencies
	Arguments and temporary variables: 
		someRules: 	a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalk...etc...
		processedPredicates: 	a Set()
		data: 	nil
		res: 	''
		rule: 	RuleResult cannot depend on DictoTalker
		predicateSelector: 	#dependOn:
		subjectElements: 	nil
		argumentElements: 	nil
		isPredicateInv: 	false
		isSubjectInv: 	false
	Receiver's instance variables: 
		output: 	''
		commandOutput: 	''
		NEWLINE: 	'
'
		rules: 	a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalker m...etc...
		varSynonyms: 	nil
		sessionId: 	'1424776533'
		TIMESTAMP: 	'1424776535'
		TOOLNAME: 	'DIPhpDependencies'
		PROJECTROOT: 	'/home/otruffer/DictoCLI'
		PROJECTSRC: 	'./'
		PROJECTBIN: 	'./'
		RESULTFILE: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/mai/1424776535/D...etc...
		TESTFILE: 	nil
		testInputFileExt: 	'.st'
		SYSTEM: 	SYSTEM


DICollectionRule(OrderedCollection)>>do:
	Receiver: a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalker must depend on Rule...etc...
	Arguments and temporary variables: 
		aBlock: 	printRulesEntityRelationship: someRules
	| res processedPredicates |
	r...etc...
		index: 	1
	Receiver's instance variables: 
		array: 	an Array(RuleResult cannot depend on DictoTalker DictoTalker must depend...etc...
		firstIndex: 	1
		lastIndex: 	3
		elements: 	nil
		elements: 	nil


DIPhpDependencies(DIAdapter)>>printRulesEntityRelationship:
	Receiver: a DIPhpDependencies
	Arguments and temporary variables: 
		res: 	''
		someRules: 	a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalk...etc...
		processedPredicates: 	a Set()
	Receiver's instance variables: 
		output: 	''
		commandOutput: 	''
		NEWLINE: 	'
'
		rules: 	a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalker m...etc...
		varSynonyms: 	nil
		sessionId: 	'1424776533'
		TIMESTAMP: 	'1424776535'
		TOOLNAME: 	'DIPhpDependencies'
		PROJECTROOT: 	'/home/otruffer/DictoCLI'
		PROJECTSRC: 	'./'
		PROJECTBIN: 	'./'
		RESULTFILE: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/mai/1424776535/D...etc...
		TESTFILE: 	nil
		testInputFileExt: 	'.st'
		SYSTEM: 	SYSTEM


DIPhpDependencies(DIAdapter)>>printRules
	Receiver: a DIPhpDependencies
	Arguments and temporary variables: 
		res: 	nil
		allRules: 	a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalke...etc...
	Receiver's instance variables: 
		output: 	''
		commandOutput: 	''
		NEWLINE: 	'
'
		rules: 	a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalker m...etc...
		varSynonyms: 	nil
		sessionId: 	'1424776533'
		TIMESTAMP: 	'1424776535'
		TOOLNAME: 	'DIPhpDependencies'
		PROJECTROOT: 	'/home/otruffer/DictoCLI'
		PROJECTSRC: 	'./'
		PROJECTBIN: 	'./'
		RESULTFILE: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/mai/1424776535/D...etc...
		TESTFILE: 	nil
		testInputFileExt: 	'.st'
		SYSTEM: 	SYSTEM


DIPhpDependencies>>testInput
	Receiver: a DIPhpDependencies
	Arguments and temporary variables: 
		strRules: 	nil
	Receiver's instance variables: 
		output: 	''
		commandOutput: 	''
		NEWLINE: 	'
'
		rules: 	a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalker m...etc...
		varSynonyms: 	nil
		sessionId: 	'1424776533'
		TIMESTAMP: 	'1424776535'
		TOOLNAME: 	'DIPhpDependencies'
		PROJECTROOT: 	'/home/otruffer/DictoCLI'
		PROJECTSRC: 	'./'
		PROJECTBIN: 	'./'
		RESULTFILE: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/mai/1424776535/D...etc...
		TESTFILE: 	nil
		testInputFileExt: 	'.st'
		SYSTEM: 	SYSTEM


DITestGroup>>build
	Receiver: a DITestGroup
	Arguments and temporary variables: 

	Receiver's instance variables: 
		rules: 	an OrderedCollection(RuleResult cannot depend on DictoTalker DictoTalker...etc...
		adapter: 	a DIPhpDependencies
		runCommandText: 	nil
		testSpecification: 	nil
		adapterID: 	'DIPhpDependencies'
		resultFile: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/mai/1424776535/D...etc...
		specificationFile: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/mai/14247...etc...
		commandFile: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/mai/1424776535/...etc...


[ :testGroup | testGroup build ] in DIDicto>>dictoBuild:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = ...etc...
		adapterTestGroups: 	a Dictionary(DIGrepFileContent->a DITestGroup DIJMeterLoadTe...etc...
		testGroup: 	a DITestGroup
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424776533'
		singleShotTask: 	false


Array(SequenceableCollection)>>do:
	Receiver: an Array(a DITestGroup a DITestGroup a DITestGroup a DITestGroup a DITestGroup)
	Arguments and temporary variables: 
		aBlock: 	[ :testGroup | testGroup build ]
		index: 	4
	Receiver's instance variables: 
an Array(a DITestGroup a DITestGroup a DITestGroup a DITestGroup a DITestGroup)

DIDicto>>dictoBuild:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = ...etc...
		adapterTestGroups: 	a Dictionary(DIGrepFileContent->a DITestGroup DIJMeterLoadTe...etc...
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424776533'
		singleShotTask: 	false


DIDicto>>dictoRun:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = ...etc...
		adapterTestGroups: 	nil
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424776533'
		singleShotTask: 	false


DIDicto>>dictoAll:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = ...etc...
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424776533'
		singleShotTask: 	false


[ DIDicto new dictoAll: input ] in DIWebServiceAPI>>getRun
	Receiver: a DIWebServiceAPI
	Arguments and temporary variables: 
		in: 	'/home/otruffer/dicto/bin/analysis/mai/dicto.rules'
		input: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = PhpCl...etc...
		rulesFailed: 	nil
		rulesTotal: 	nil
	Receiver's instance variables: 
		request: 	nil
		response: 	nil
		variables: 	nil
		delegate: 	nil
		principal: 	nil
		credentials: 	nil


BlockClosure>>on:do:
	Receiver: [ DIDicto new dictoAll: input ]
	Arguments and temporary variables: 
		exception: 	DIException
		handlerAction: 	[ :ex | ^ self error: ex description ]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	DIWebServiceAPI>>getRun
		startpc: 	138
		numArgs: 	0


DIWebServiceAPI>>getRun
	Receiver: a DIWebServiceAPI
	Arguments and temporary variables: 
		in: 	'/home/otruffer/dicto/bin/analysis/mai/dicto.rules'
		input: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = PhpCl...etc...
		rulesFailed: 	nil
		rulesTotal: 	nil
	Receiver's instance variables: 
		request: 	nil
		response: 	nil
		variables: 	nil
		delegate: 	nil
		principal: 	nil
		credentials: 	nil


DIWebServiceHandler>>post
	Receiver: a DIWebServiceHandler
	Arguments and temporary variables: 
		api: 	a DIWebServiceAPI
	Receiver's instance variables: 
		request: 	a ZnRequest(POST /mai/run)
		response: 	nil
		variables: 	an OrderedCollection('mai' 'run')
		delegate: 	a ZnJSONRestServerDelegate
		principal: 	nil
		credentials: 	nil
		dicto: 	a DIDicto


DIWebServiceHandler(ZnRestCall)>>execute
	Receiver: a DIWebServiceHandler
	Arguments and temporary variables: 

	Receiver's instance variables: 
		request: 	a ZnRequest(POST /mai/run)
		response: 	nil
		variables: 	an OrderedCollection('mai' 'run')
		delegate: 	a ZnJSONRestServerDelegate
		principal: 	nil
		credentials: 	nil
		dicto: 	a DIDicto


[ call execute ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


BlockClosure>>on:do:
	Receiver: [ call execute ]
	Arguments and temporary variables: 
		exception: 	ZnRestCallUnauthorized
		handlerAction: 	[ :exception | self unauthorized: exception request ]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
		startpc: 	38
		numArgs: 	0


ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


[ self execute: call ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /mai/run)
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


BlockClosure>>on:do:
	Receiver: [ self execute: call ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :exception | 
request server debugMode
	ifTrue: [ exception pa...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
		startpc: 	99
		numArgs: 	0


ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /mai/run)
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ :delegate | delegate handleRequest: request ] ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /mai/run)
		delegate: 	a ZnJSONRestServerDelegate
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateRequest:do:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /mai/run)
		block: 	[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ ...etc...
		authenticator: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /mai/run)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


[ self authenticateAndDelegateRequest: request ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /mai/run)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


BlockClosure>>on:do:
	Receiver: [ self authenticateAndDelegateRequest: request ]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :exception | 
self debugMode
	ifTrue: [ exception pass ]
	ifFa...etc...
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequ...etc...
		startpc: 	58
		numArgs: 	0


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /mai/run)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /mai/run)
		response: 	nil
		initialMilliseconds: 	1333799
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeOneRequestResponseOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		stream: 	a ZdcSocketStream
		request: 	a ZnRequest(POST /mai/run)
		response: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


[ self executeOneRequestResponseOn: stream ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		stream: 	a ZdcSocketStream
		request: 	nil
		response: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)



--- The full stack ---
DIUtil class>>saveString:ToFile:
DIPhpModel>>_createModelScript
DIPhpModel>>_createModelFile
DIPhpModel>>_loadPhpModel
DIPhpModel>>model
DIVarPhpClass>>allElements
DIVarPhpClass(DIVar)>>elements
DISimpleRule>>subjectElements
printRulesEntityRelationship: someRules
	| res processedPredicates |
	res := ''.
	processedPredicates := Set new.
	someRules
		do: [ :rule | 
			| predicateSelector subjectElements argumentElements data isPredicateInv isSubjectInv |
			predicateSelector := (rule predicate nameNormalized , ':') asSymbol.
			isPredicateInv := rule hasPredicateInverted.
			isSubjectInv := rule hasSubjectInverted.
			subjectElements := rule subjectElements.
			argumentElements := rule argumentElements.
			subjectElements
				do: [ :subject | 
					argumentElements
						do: [ :argument | 
							| relId spec msgPass msgFail |
							relId := subject id , '-' , argument id.
							msgPass := subject id , '.' , rule predicate name , '(' , argument id , ')=True'.
							msgFail := subject id , '.' , rule predicate name , '(' , argument id , ')=False'.
							(processedPredicates includes: relId)
								ifFalse: [ 
									data := {(#subject -> subject value).
									(#argument -> argument value).
									(#ruleId -> rule id).
									(#propertyId -> relId).
									(#msgPass -> msgPass).
									(#msgFail -> msgFail)} asDictionary.
									spec := self perform: predicateSelector withArguments: {data}.
									spec := spec
										dictoReplace:
											{('$subject' -> subject value).
											('$argument' -> argument value).
											('$ruleId' -> rule id).
											('$propertyId' -> relId).
											('$msgPass' -> msgPass).
											('$msgFail' -> msgFail)}.
									res := res , spec ].	"avoid duplicate predicate evaluations"
							processedPredicates add: relId ] ] ].
	^ res in DIPhpDependencies(DIAdapter)>>printRulesEntityRelationship:
DICollectionRule(OrderedCollection)>>do:
DIPhpDependencies(DIAdapter)>>printRulesEntityRelationship:
DIPhpDependencies(DIAdapter)>>printRules
DIPhpDependencies>>testInput
DITestGroup>>build
[ :testGroup | testGroup build ] in DIDicto>>dictoBuild:
Array(SequenceableCollection)>>do:
DIDicto>>dictoBuild:
DIDicto>>dictoRun:
DIDicto>>dictoAll:
[ DIDicto new dictoAll: input ] in DIWebServiceAPI>>getRun
BlockClosure>>on:do:
DIWebServiceAPI>>getRun
DIWebServiceHandler>>post
DIWebServiceHandler(ZnRestCall)>>execute
[ call execute ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
BlockClosure>>on:do:
ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
[ self execute: call ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
BlockClosure>>on:do:
ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ :delegate | delegate handleRequest: request ] ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateRequest:do:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
[ self authenticateAndDelegateRequest: request ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
BlockClosure>>on:do:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequest:
ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeOneRequestResponseOn:
[ self executeOneRequestResponseOn: stream ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ 
p psValueAt: index put: anObject.
aBlock value ] in ZnCurrentServer(DynamicVariable)>>value:during:
BlockClosure>>ensure:
ZnCurrentServer(DynamicVariable)>>value:during:
ZnCurrentServer class(DynamicVariable class)>>value:during:
ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
[ self executeRequestResponseLoopOn: stream ] in [ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ] in [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
BlockClosure>>ensure:
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ] in [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
BlockClosure>>ifCurtailed:
[ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Halt
24 February 2015 12:17:45.533432 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
NBCogit NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
https://github.com/pharo-project/pharo-vm.git Commit: 4a0d556150d478ff2de3c9624d2f18e6eaa3fa5c Date: 2014-12-18 18:42:53 +0100 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14893

Image: Pharo3.0 [Latest update: #30863]

DIUtil class>>saveString:ToFile:
	Receiver: DIUtil
	Arguments and temporary variables: 
		aString: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = Php...etc...
		aFileName: 	'/home/otruffer/dicto/bin/analysis/mai/dicto.rules'
		stream: 	MultiByteFileStream: '/home/otruffer/dicto/bin/analysis/mai/dicto.rules...etc...
		newFileName: 	'/home/otruffer/dicto/bin/analysis/mai/dicto.rules'
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary()
		format: 	2
		layout: 	a FixedLayout
		instanceVariables: 	#()
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#DIUtil
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Dicto-var-util'
		traitComposition: 	{}
		localSelectors: 	nil


DIDicto>>dictoParse:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = ...etc...
		adapterTestGroups: 	nil
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424776666'
		singleShotTask: 	true


[ dicto dictoParse: text ] in DIWebServiceAPI>>postRules:
	Receiver: a DIWebServiceAPI
	Arguments and temporary variables: 
		dict: 	a Dictionary('rules'->'RuleResult = PhpClass with name:"Dicto\\RuleResult...etc...
		dicto: 	a DIDicto
		text: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = PhpCla...etc...
	Receiver's instance variables: 
		request: 	nil
		response: 	nil
		variables: 	nil
		delegate: 	nil
		principal: 	nil
		credentials: 	nil


BlockClosure>>on:do:
	Receiver: [ dicto dictoParse: text ]
	Arguments and temporary variables: 
		exception: 	DISyntaxErrorException
		handlerAction: 	[ :ex | ^ self error: 'syntax error' ]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	DIWebServiceAPI>>postRules:
		startpc: 	58
		numArgs: 	0


DIWebServiceAPI>>postRules:
	Receiver: a DIWebServiceAPI
	Arguments and temporary variables: 
		dict: 	a Dictionary('rules'->'RuleResult = PhpClass with name:"Dicto\\RuleResult...etc...
		dicto: 	a DIDicto
		text: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = PhpCla...etc...
	Receiver's instance variables: 
		request: 	nil
		response: 	nil
		variables: 	nil
		delegate: 	nil
		principal: 	nil
		credentials: 	nil


DIWebServiceHandler>>post
	Receiver: a DIWebServiceHandler
	Arguments and temporary variables: 
		api: 	a DIWebServiceAPI
	Receiver's instance variables: 
		request: 	a ZnRequest(POST /mai/rules)
		response: 	nil
		variables: 	an OrderedCollection('mai' 'rules')
		delegate: 	a ZnJSONRestServerDelegate
		principal: 	nil
		credentials: 	nil
		dicto: 	a DIDicto


DIWebServiceHandler(ZnRestCall)>>execute
	Receiver: a DIWebServiceHandler
	Arguments and temporary variables: 

	Receiver's instance variables: 
		request: 	a ZnRequest(POST /mai/rules)
		response: 	nil
		variables: 	an OrderedCollection('mai' 'rules')
		delegate: 	a ZnJSONRestServerDelegate
		principal: 	nil
		credentials: 	nil
		dicto: 	a DIDicto


[ call execute ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


BlockClosure>>on:do:
	Receiver: [ call execute ]
	Arguments and temporary variables: 
		exception: 	ZnRestCallUnauthorized
		handlerAction: 	[ :exception | self unauthorized: exception request ]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
		startpc: 	38
		numArgs: 	0


ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


[ self execute: call ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /mai/rules)
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


BlockClosure>>on:do:
	Receiver: [ self execute: call ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :exception | 
request server debugMode
	ifTrue: [ exception pa...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
		startpc: 	99
		numArgs: 	0


ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /mai/rules)
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ :delegate | delegate handleRequest: request ] ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /mai/rules)
		delegate: 	a ZnJSONRestServerDelegate
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateRequest:do:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /mai/rules)
		block: 	[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ ...etc...
		authenticator: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /mai/rules)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


[ self authenticateAndDelegateRequest: request ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /mai/rules)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


BlockClosure>>on:do:
	Receiver: [ self authenticateAndDelegateRequest: request ]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :exception | 
self debugMode
	ifTrue: [ exception pass ]
	ifFa...etc...
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequ...etc...
		startpc: 	58
		numArgs: 	0


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /mai/rules)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /mai/rules)
		response: 	nil
		initialMilliseconds: 	1465816
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeOneRequestResponseOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		stream: 	a ZdcSocketStream
		request: 	a ZnRequest(POST /mai/rules)
		response: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


[ self executeOneRequestResponseOn: stream ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		stream: 	a ZdcSocketStream
		request: 	nil
		response: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


[ 
p psValueAt: index put: anObject.
aBlock value ] in ZnCurrentServer(DynamicVariable)>>value:during:
	Receiver: a ZnCurrentServer
	Arguments and temporary variables: 
		anObject: 	a ZnManagingMultiThreadedServer(running 8010)
		aBlock: 	[ self executeOneRequestResponseOn: stream ]
		p: 	a Process in nil
		oldValue: 	nil
	Receiver's instance variables: 
		index: 	5


BlockClosure>>ensure:
	Receiver: [ 
p psValueAt: index put: anObject.
aBlock value ]
	Arguments and temporary variables: 
		aBlock: 	[ p psValueAt: index put: oldValue ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ZnCurrentServer(DynamicVariable)>>value:during:
		startpc: 	62
		numArgs: 	0


ZnCurrentServer(DynamicVariable)>>value:during:
	Receiver: a ZnCurrentServer
	Arguments and temporary variables: 
		anObject: 	a ZnManagingMultiThreadedServer(running 8010)
		aBlock: 	[ self executeOneRequestResponseOn: stream ]
		p: 	a Process in nil
		oldValue: 	nil
	Receiver's instance variables: 
		index: 	5


ZnCurrentServer class(DynamicVariable class)>>value:during:
	Receiver: ZnCurrentServer
	Arguments and temporary variables: 
		anObject: 	a ZnManagingMultiThreadedServer(running 8010)
		aBlock: 	[ self executeOneRequestResponseOn: stream ]
	Receiver's instance variables: 
		superclass: 	DynamicVariable
		methodDict: 	a MethodDictionary()
		format: 	132
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#ZnCurrentServer
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Zinc-HTTP-Variables'
		traitComposition: 	{}
		localSelectors: 	nil
		hash: 	nil
		soleInstance: 	a ZnCurrentServer


ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		stream: 	a ZdcSocketStream
		request: 	nil
		response: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


[ self executeRequestResponseLoopOn: stream ] in [ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ] in [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		listeningSocket: 	a Socket[waitingForConnection]
		stream: 	a ZdcSocketStream
		socket: 	a Socket[connected]
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


BlockClosure>>ensure:
	Receiver: [ self executeRequestResponseLoopOn: stream ]
	Arguments and temporary variables: 
		aBlock: 	[ 
self log debug: 'Closing stream'.
self closeSocketStream: stream ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		se...etc...
		startpc: 	118
		numArgs: 	0


[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ] in [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		listeningSocket: 	a Socket[waitingForConnection]
		stream: 	a ZdcSocketStream
		socket: 	a Socket[connected]
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


BlockClosure>>ifCurtailed:
	Receiver: [ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing st...etc...
	Arguments and temporary variables: 
		aBlock: 	[ 
self log debug: 'Destroying socket'.
socket destroy ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	[ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
	...etc...
		startpc: 	113
		numArgs: 	0


[ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		listeningSocket: 	a Socket[waitingForConnection]
		stream: 	a ZdcSocketStream
		socket: 	a Socket[connected]
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnec...etc...
		startpc: 	108
		numArgs: 	0



--- The full stack ---
DIUtil class>>saveString:ToFile:
DIDicto>>dictoParse:
[ dicto dictoParse: text ] in DIWebServiceAPI>>postRules:
BlockClosure>>on:do:
DIWebServiceAPI>>postRules:
DIWebServiceHandler>>post
DIWebServiceHandler(ZnRestCall)>>execute
[ call execute ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
BlockClosure>>on:do:
ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
[ self execute: call ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
BlockClosure>>on:do:
ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ :delegate | delegate handleRequest: request ] ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateRequest:do:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
[ self authenticateAndDelegateRequest: request ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
BlockClosure>>on:do:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequest:
ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeOneRequestResponseOn:
[ self executeOneRequestResponseOn: stream ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
[ 
p psValueAt: index put: anObject.
aBlock value ] in ZnCurrentServer(DynamicVariable)>>value:during:
BlockClosure>>ensure:
ZnCurrentServer(DynamicVariable)>>value:during:
ZnCurrentServer class(DynamicVariable class)>>value:during:
ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
[ self executeRequestResponseLoopOn: stream ] in [ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ] in [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
BlockClosure>>ensure:
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ] in [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
BlockClosure>>ifCurtailed:
[ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Halt
24 February 2015 12:17:49.368768 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
NBCogit NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
https://github.com/pharo-project/pharo-vm.git Commit: 4a0d556150d478ff2de3c9624d2f18e6eaa3fa5c Date: 2014-12-18 18:42:53 +0100 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14893

Image: Pharo3.0 [Latest update: #30863]

DIUtil class>>saveString:ToFile:
	Receiver: DIUtil
	Arguments and temporary variables: 
		aString: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = Php...etc...
		aFileName: 	'/home/otruffer/dicto/bin/analysis/mai/dicto.rules'
		stream: 	MultiByteFileStream: '/home/otruffer/dicto/bin/analysis/mai/dicto.rules...etc...
		newFileName: 	'/home/otruffer/dicto/bin/analysis/mai/dicto.rules'
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary()
		format: 	2
		layout: 	a FixedLayout
		instanceVariables: 	#()
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#DIUtil
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Dicto-var-util'
		traitComposition: 	{}
		localSelectors: 	nil


DIDicto>>dictoParse:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = ...etc...
		adapterTestGroups: 	nil
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424776669'
		singleShotTask: 	false


DIDicto>>dictoBuild:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = ...etc...
		adapterTestGroups: 	nil
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424776669'
		singleShotTask: 	false


DIDicto>>dictoRun:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = ...etc...
		adapterTestGroups: 	nil
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424776669'
		singleShotTask: 	false


DIDicto>>dictoAll:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = ...etc...
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424776669'
		singleShotTask: 	false


[ DIDicto new dictoAll: input ] in DIWebServiceAPI>>getRun
	Receiver: a DIWebServiceAPI
	Arguments and temporary variables: 
		in: 	'/home/otruffer/dicto/bin/analysis/mai/dicto.rules'
		input: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = PhpCl...etc...
		rulesFailed: 	nil
		rulesTotal: 	nil
	Receiver's instance variables: 
		request: 	nil
		response: 	nil
		variables: 	nil
		delegate: 	nil
		principal: 	nil
		credentials: 	nil


BlockClosure>>on:do:
	Receiver: [ DIDicto new dictoAll: input ]
	Arguments and temporary variables: 
		exception: 	DIException
		handlerAction: 	[ :ex | ^ self error: ex description ]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	DIWebServiceAPI>>getRun
		startpc: 	138
		numArgs: 	0


DIWebServiceAPI>>getRun
	Receiver: a DIWebServiceAPI
	Arguments and temporary variables: 
		in: 	'/home/otruffer/dicto/bin/analysis/mai/dicto.rules'
		input: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = PhpCl...etc...
		rulesFailed: 	nil
		rulesTotal: 	nil
	Receiver's instance variables: 
		request: 	nil
		response: 	nil
		variables: 	nil
		delegate: 	nil
		principal: 	nil
		credentials: 	nil


DIWebServiceHandler>>post
	Receiver: a DIWebServiceHandler
	Arguments and temporary variables: 
		api: 	a DIWebServiceAPI
	Receiver's instance variables: 
		request: 	a ZnRequest(POST /mai/run)
		response: 	nil
		variables: 	an OrderedCollection('mai' 'run')
		delegate: 	a ZnJSONRestServerDelegate
		principal: 	nil
		credentials: 	nil
		dicto: 	a DIDicto


DIWebServiceHandler(ZnRestCall)>>execute
	Receiver: a DIWebServiceHandler
	Arguments and temporary variables: 

	Receiver's instance variables: 
		request: 	a ZnRequest(POST /mai/run)
		response: 	nil
		variables: 	an OrderedCollection('mai' 'run')
		delegate: 	a ZnJSONRestServerDelegate
		principal: 	nil
		credentials: 	nil
		dicto: 	a DIDicto


[ call execute ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


BlockClosure>>on:do:
	Receiver: [ call execute ]
	Arguments and temporary variables: 
		exception: 	ZnRestCallUnauthorized
		handlerAction: 	[ :exception | self unauthorized: exception request ]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
		startpc: 	38
		numArgs: 	0


ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


[ self execute: call ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /mai/run)
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


BlockClosure>>on:do:
	Receiver: [ self execute: call ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :exception | 
request server debugMode
	ifTrue: [ exception pa...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
		startpc: 	99
		numArgs: 	0


ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /mai/run)
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ :delegate | delegate handleRequest: request ] ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /mai/run)
		delegate: 	a ZnJSONRestServerDelegate
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateRequest:do:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /mai/run)
		block: 	[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ ...etc...
		authenticator: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /mai/run)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


[ self authenticateAndDelegateRequest: request ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /mai/run)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


BlockClosure>>on:do:
	Receiver: [ self authenticateAndDelegateRequest: request ]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :exception | 
self debugMode
	ifTrue: [ exception pass ]
	ifFa...etc...
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequ...etc...
		startpc: 	58
		numArgs: 	0


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /mai/run)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /mai/run)
		response: 	nil
		initialMilliseconds: 	1469664
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeOneRequestResponseOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		stream: 	a ZdcSocketStream
		request: 	a ZnRequest(POST /mai/run)
		response: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


[ self executeOneRequestResponseOn: stream ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		stream: 	a ZdcSocketStream
		request: 	nil
		response: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


[ 
p psValueAt: index put: anObject.
aBlock value ] in ZnCurrentServer(DynamicVariable)>>value:during:
	Receiver: a ZnCurrentServer
	Arguments and temporary variables: 
		anObject: 	a ZnManagingMultiThreadedServer(running 8010)
		aBlock: 	[ self executeOneRequestResponseOn: stream ]
		p: 	a Process in nil
		oldValue: 	nil
	Receiver's instance variables: 
		index: 	5


BlockClosure>>ensure:
	Receiver: [ 
p psValueAt: index put: anObject.
aBlock value ]
	Arguments and temporary variables: 
		aBlock: 	[ p psValueAt: index put: oldValue ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ZnCurrentServer(DynamicVariable)>>value:during:
		startpc: 	62
		numArgs: 	0


ZnCurrentServer(DynamicVariable)>>value:during:
	Receiver: a ZnCurrentServer
	Arguments and temporary variables: 
		anObject: 	a ZnManagingMultiThreadedServer(running 8010)
		aBlock: 	[ self executeOneRequestResponseOn: stream ]
		p: 	a Process in nil
		oldValue: 	nil
	Receiver's instance variables: 
		index: 	5


ZnCurrentServer class(DynamicVariable class)>>value:during:
	Receiver: ZnCurrentServer
	Arguments and temporary variables: 
		anObject: 	a ZnManagingMultiThreadedServer(running 8010)
		aBlock: 	[ self executeOneRequestResponseOn: stream ]
	Receiver's instance variables: 
		superclass: 	DynamicVariable
		methodDict: 	a MethodDictionary()
		format: 	132
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#ZnCurrentServer
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Zinc-HTTP-Variables'
		traitComposition: 	{}
		localSelectors: 	nil
		hash: 	nil
		soleInstance: 	a ZnCurrentServer


ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		stream: 	a ZdcSocketStream
		request: 	nil
		response: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


[ self executeRequestResponseLoopOn: stream ] in [ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ] in [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		listeningSocket: 	a Socket[waitingForConnection]
		stream: 	a ZdcSocketStream
		socket: 	a Socket[connected]
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


BlockClosure>>ensure:
	Receiver: [ self executeRequestResponseLoopOn: stream ]
	Arguments and temporary variables: 
		aBlock: 	[ 
self log debug: 'Closing stream'.
self closeSocketStream: stream ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		se...etc...
		startpc: 	118
		numArgs: 	0


[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ] in [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		listeningSocket: 	a Socket[waitingForConnection]
		stream: 	a ZdcSocketStream
		socket: 	a Socket[connected]
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


BlockClosure>>ifCurtailed:
	Receiver: [ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing st...etc...
	Arguments and temporary variables: 
		aBlock: 	[ 
self log debug: 'Destroying socket'.
socket destroy ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	[ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
	...etc...
		startpc: 	113
		numArgs: 	0


[ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		listeningSocket: 	a Socket[waitingForConnection]
		stream: 	a ZdcSocketStream
		socket: 	a Socket[connected]
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnec...etc...
		startpc: 	108
		numArgs: 	0



--- The full stack ---
DIUtil class>>saveString:ToFile:
DIDicto>>dictoParse:
DIDicto>>dictoBuild:
DIDicto>>dictoRun:
DIDicto>>dictoAll:
[ DIDicto new dictoAll: input ] in DIWebServiceAPI>>getRun
BlockClosure>>on:do:
DIWebServiceAPI>>getRun
DIWebServiceHandler>>post
DIWebServiceHandler(ZnRestCall)>>execute
[ call execute ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
BlockClosure>>on:do:
ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
[ self execute: call ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
BlockClosure>>on:do:
ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ :delegate | delegate handleRequest: request ] ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateRequest:do:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
[ self authenticateAndDelegateRequest: request ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
BlockClosure>>on:do:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequest:
ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeOneRequestResponseOn:
[ self executeOneRequestResponseOn: stream ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
[ 
p psValueAt: index put: anObject.
aBlock value ] in ZnCurrentServer(DynamicVariable)>>value:during:
BlockClosure>>ensure:
ZnCurrentServer(DynamicVariable)>>value:during:
ZnCurrentServer class(DynamicVariable class)>>value:during:
ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
[ self executeRequestResponseLoopOn: stream ] in [ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ] in [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
BlockClosure>>ensure:
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ] in [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
BlockClosure>>ifCurtailed:
[ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Halt
24 February 2015 12:17:50.384105 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
NBCogit NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
https://github.com/pharo-project/pharo-vm.git Commit: 4a0d556150d478ff2de3c9624d2f18e6eaa3fa5c Date: 2014-12-18 18:42:53 +0100 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14893

Image: Pharo3.0 [Latest update: #30863]

DIUtil class>>saveString:ToFile:
	Receiver: DIUtil
	Arguments and temporary variables: 
		aString: 	'source: ''/home/otruffer/DictoCLI''
filePattern: ''*.php''
ignore: ''...etc...
		aFileName: 	'/home/otruffer/dicto/bin/tools/phpda/configs/config-1424776670.yaml...etc...
		stream: 	MultiByteFileStream: '/home/otruffer/dicto/bin/tools/phpda/configs/conf...etc...
		newFileName: 	'/home/otruffer/dicto/bin/tools/phpda/configs/config-1424776670.ya...etc...
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary()
		format: 	2
		layout: 	a FixedLayout
		instanceVariables: 	#()
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#DIUtil
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Dicto-var-util'
		traitComposition: 	{}
		localSelectors: 	nil


DIPhpModel>>_createConfigFile
	Receiver: a DIPhpModel
	Arguments and temporary variables: 
		configFile: 	'source: ''/home/otruffer/DictoCLI''
filePattern: ''*.php''
ignore:...etc...
	Receiver's instance variables: 
		defRules: 	a DICollectionRule()
		defVars: 	a DICollectionVar(SYSTEM)
		analysisID: 	'1424776670'
		additionalProperties: 	a Dictionary()
		ruleCounter: 	0
		varCounter: 	0
		defVarElements: 	a DICollectionVarElements()
		defVarInvertedElements: 	a DICollectionVarElements()
		model: 	nil


DIPhpModel>>_loadPhpModel
	Receiver: a DIPhpModel
	Arguments and temporary variables: 

	Receiver's instance variables: 
		defRules: 	a DICollectionRule()
		defVars: 	a DICollectionVar(SYSTEM)
		analysisID: 	'1424776670'
		additionalProperties: 	a Dictionary()
		ruleCounter: 	0
		varCounter: 	0
		defVarElements: 	a DICollectionVarElements()
		defVarInvertedElements: 	a DICollectionVarElements()
		model: 	nil


DIPhpModel>>model
	Receiver: a DIPhpModel
	Arguments and temporary variables: 

	Receiver's instance variables: 
		defRules: 	a DICollectionRule()
		defVars: 	a DICollectionVar(SYSTEM)
		analysisID: 	'1424776670'
		additionalProperties: 	a Dictionary()
		ruleCounter: 	0
		varCounter: 	0
		defVarElements: 	a DICollectionVarElements()
		defVarInvertedElements: 	a DICollectionVarElements()
		model: 	nil


DIVarPhpClass>>allElements
	Receiver: RuleResult
	Arguments and temporary variables: 

	Receiver's instance variables: 
		isFirst: 	false
		dslText: 	'RuleResult=PhpClass with name:"Dicto\\RuleResult"'
		type: 	'PhpClass'
		id: 	1
		entity: 	nil
		name: 	'RuleResult'
		specifiers: 	an OrderedCollection(name=Dicto\\RuleResult)
		isInverted: 	false
		elements: 	a DICollectionVarElements()
		invertedElements: 	a DICollectionVarElements()


DIVarPhpClass(DIVar)>>elements
	Receiver: RuleResult
	Arguments and temporary variables: 
		valid: 	nil
	Receiver's instance variables: 
		isFirst: 	false
		dslText: 	'RuleResult=PhpClass with name:"Dicto\\RuleResult"'
		type: 	'PhpClass'
		id: 	1
		entity: 	nil
		name: 	'RuleResult'
		specifiers: 	an OrderedCollection(name=Dicto\\RuleResult)
		isInverted: 	false
		elements: 	a DICollectionVarElements()
		invertedElements: 	a DICollectionVarElements()


DISimpleRule>>subjectElements
	Receiver: RuleResult cannot depend on DictoTalker
	Arguments and temporary variables: 
		subjectElements: 	nil
	Receiver's instance variables: 
		isFirst: 	nil
		dslText: 	'RuleResult cannot depend on DictoTalker'
		type: 	#cannot
		id: 	1001
		entity: 	nil
		subjects: 	an Array(RuleResult)
		predicates: 	an Array(depend on DictoTalker)
		subRules: 	nil
		candidateAdapters: 	a SortedCollection(DIPhpDependencies)
		chosenAdapter: 	DIPhpDependencies
		hasFailed: 	false
		failureMessage: 	''
		failingPredicates: 	a Set()
		hasSubjectInverted: 	false
		hasPredicateInverted: 	false


printRulesEntityRelationship: someRules
	| res processedPredicates |
	res := ''.
	processedPredicates := Set new.
	someRules
		do: [ :rule | 
			| predicateSelector subjectElements argumentElements data isPredicateInv isSubjectInv |
			predicateSelector := (rule predicate nameNormalized , ':') asSymbol.
			isPredicateInv := rule hasPredicateInverted.
			isSubjectInv := rule hasSubjectInverted.
			subjectElements := rule subjectElements.
			argumentElements := rule argumentElements.
			subjectElements
				do: [ :subject | 
					argumentElements
						do: [ :argument | 
							| relId spec msgPass msgFail |
							relId := subject id , '-' , argument id.
							msgPass := subject id , '.' , rule predicate name , '(' , argument id , ')=True'.
							msgFail := subject id , '.' , rule predicate name , '(' , argument id , ')=False'.
							(processedPredicates includes: relId)
								ifFalse: [ 
									data := {(#subject -> subject value).
									(#argument -> argument value).
									(#ruleId -> rule id).
									(#propertyId -> relId).
									(#msgPass -> msgPass).
									(#msgFail -> msgFail)} asDictionary.
									spec := self perform: predicateSelector withArguments: {data}.
									spec := spec
										dictoReplace:
											{('$subject' -> subject value).
											('$argument' -> argument value).
											('$ruleId' -> rule id).
											('$propertyId' -> relId).
											('$msgPass' -> msgPass).
											('$msgFail' -> msgFail)}.
									res := res , spec ].	"avoid duplicate predicate evaluations"
							processedPredicates add: relId ] ] ].
	^ res in DIPhpDependencies(DIAdapter)>>printRulesEntityRelationship:
	Receiver: a DIPhpDependencies
	Arguments and temporary variables: 
		someRules: 	a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalk...etc...
		processedPredicates: 	a Set()
		data: 	nil
		res: 	''
		rule: 	RuleResult cannot depend on DictoTalker
		predicateSelector: 	#dependOn:
		subjectElements: 	nil
		argumentElements: 	nil
		isPredicateInv: 	false
		isSubjectInv: 	false
	Receiver's instance variables: 
		output: 	''
		commandOutput: 	''
		NEWLINE: 	'
'
		rules: 	a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalker m...etc...
		varSynonyms: 	nil
		sessionId: 	'1424776669'
		TIMESTAMP: 	'1424776670'
		TOOLNAME: 	'DIPhpDependencies'
		PROJECTROOT: 	'/home/otruffer/DictoCLI'
		PROJECTSRC: 	'./'
		PROJECTBIN: 	'./'
		RESULTFILE: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/mai/1424776670/D...etc...
		TESTFILE: 	nil
		testInputFileExt: 	'.st'
		SYSTEM: 	SYSTEM


DICollectionRule(OrderedCollection)>>do:
	Receiver: a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalker must depend on Rule...etc...
	Arguments and temporary variables: 
		aBlock: 	printRulesEntityRelationship: someRules
	| res processedPredicates |
	r...etc...
		index: 	1
	Receiver's instance variables: 
		array: 	an Array(RuleResult cannot depend on DictoTalker DictoTalker must depend...etc...
		firstIndex: 	1
		lastIndex: 	3
		elements: 	nil
		elements: 	nil


DIPhpDependencies(DIAdapter)>>printRulesEntityRelationship:
	Receiver: a DIPhpDependencies
	Arguments and temporary variables: 
		res: 	''
		someRules: 	a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalk...etc...
		processedPredicates: 	a Set()
	Receiver's instance variables: 
		output: 	''
		commandOutput: 	''
		NEWLINE: 	'
'
		rules: 	a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalker m...etc...
		varSynonyms: 	nil
		sessionId: 	'1424776669'
		TIMESTAMP: 	'1424776670'
		TOOLNAME: 	'DIPhpDependencies'
		PROJECTROOT: 	'/home/otruffer/DictoCLI'
		PROJECTSRC: 	'./'
		PROJECTBIN: 	'./'
		RESULTFILE: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/mai/1424776670/D...etc...
		TESTFILE: 	nil
		testInputFileExt: 	'.st'
		SYSTEM: 	SYSTEM


DIPhpDependencies(DIAdapter)>>printRules
	Receiver: a DIPhpDependencies
	Arguments and temporary variables: 
		res: 	nil
		allRules: 	a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalke...etc...
	Receiver's instance variables: 
		output: 	''
		commandOutput: 	''
		NEWLINE: 	'
'
		rules: 	a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalker m...etc...
		varSynonyms: 	nil
		sessionId: 	'1424776669'
		TIMESTAMP: 	'1424776670'
		TOOLNAME: 	'DIPhpDependencies'
		PROJECTROOT: 	'/home/otruffer/DictoCLI'
		PROJECTSRC: 	'./'
		PROJECTBIN: 	'./'
		RESULTFILE: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/mai/1424776670/D...etc...
		TESTFILE: 	nil
		testInputFileExt: 	'.st'
		SYSTEM: 	SYSTEM


DIPhpDependencies>>testInput
	Receiver: a DIPhpDependencies
	Arguments and temporary variables: 
		strRules: 	nil
	Receiver's instance variables: 
		output: 	''
		commandOutput: 	''
		NEWLINE: 	'
'
		rules: 	a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalker m...etc...
		varSynonyms: 	nil
		sessionId: 	'1424776669'
		TIMESTAMP: 	'1424776670'
		TOOLNAME: 	'DIPhpDependencies'
		PROJECTROOT: 	'/home/otruffer/DictoCLI'
		PROJECTSRC: 	'./'
		PROJECTBIN: 	'./'
		RESULTFILE: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/mai/1424776670/D...etc...
		TESTFILE: 	nil
		testInputFileExt: 	'.st'
		SYSTEM: 	SYSTEM


DITestGroup>>build
	Receiver: a DITestGroup
	Arguments and temporary variables: 

	Receiver's instance variables: 
		rules: 	an OrderedCollection(RuleResult cannot depend on DictoTalker DictoTalker...etc...
		adapter: 	a DIPhpDependencies
		runCommandText: 	nil
		testSpecification: 	nil
		adapterID: 	'DIPhpDependencies'
		resultFile: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/mai/1424776670/D...etc...
		specificationFile: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/mai/14247...etc...
		commandFile: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/mai/1424776670/...etc...


[ :testGroup | testGroup build ] in DIDicto>>dictoBuild:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = ...etc...
		adapterTestGroups: 	a Dictionary(DIGrepFileContent->a DITestGroup DIJMeterLoadTe...etc...
		testGroup: 	a DITestGroup
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424776669'
		singleShotTask: 	false


Array(SequenceableCollection)>>do:
	Receiver: an Array(a DITestGroup a DITestGroup a DITestGroup a DITestGroup a DITestGroup)
	Arguments and temporary variables: 
		aBlock: 	[ :testGroup | testGroup build ]
		index: 	4
	Receiver's instance variables: 
an Array(a DITestGroup a DITestGroup a DITestGroup a DITestGroup a DITestGroup)

DIDicto>>dictoBuild:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = ...etc...
		adapterTestGroups: 	a Dictionary(DIGrepFileContent->a DITestGroup DIJMeterLoadTe...etc...
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424776669'
		singleShotTask: 	false


DIDicto>>dictoRun:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = ...etc...
		adapterTestGroups: 	nil
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424776669'
		singleShotTask: 	false


DIDicto>>dictoAll:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = ...etc...
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424776669'
		singleShotTask: 	false


[ DIDicto new dictoAll: input ] in DIWebServiceAPI>>getRun
	Receiver: a DIWebServiceAPI
	Arguments and temporary variables: 
		in: 	'/home/otruffer/dicto/bin/analysis/mai/dicto.rules'
		input: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = PhpCl...etc...
		rulesFailed: 	nil
		rulesTotal: 	nil
	Receiver's instance variables: 
		request: 	nil
		response: 	nil
		variables: 	nil
		delegate: 	nil
		principal: 	nil
		credentials: 	nil


BlockClosure>>on:do:
	Receiver: [ DIDicto new dictoAll: input ]
	Arguments and temporary variables: 
		exception: 	DIException
		handlerAction: 	[ :ex | ^ self error: ex description ]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	DIWebServiceAPI>>getRun
		startpc: 	138
		numArgs: 	0


DIWebServiceAPI>>getRun
	Receiver: a DIWebServiceAPI
	Arguments and temporary variables: 
		in: 	'/home/otruffer/dicto/bin/analysis/mai/dicto.rules'
		input: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = PhpCl...etc...
		rulesFailed: 	nil
		rulesTotal: 	nil
	Receiver's instance variables: 
		request: 	nil
		response: 	nil
		variables: 	nil
		delegate: 	nil
		principal: 	nil
		credentials: 	nil


DIWebServiceHandler>>post
	Receiver: a DIWebServiceHandler
	Arguments and temporary variables: 
		api: 	a DIWebServiceAPI
	Receiver's instance variables: 
		request: 	a ZnRequest(POST /mai/run)
		response: 	nil
		variables: 	an OrderedCollection('mai' 'run')
		delegate: 	a ZnJSONRestServerDelegate
		principal: 	nil
		credentials: 	nil
		dicto: 	a DIDicto


DIWebServiceHandler(ZnRestCall)>>execute
	Receiver: a DIWebServiceHandler
	Arguments and temporary variables: 

	Receiver's instance variables: 
		request: 	a ZnRequest(POST /mai/run)
		response: 	nil
		variables: 	an OrderedCollection('mai' 'run')
		delegate: 	a ZnJSONRestServerDelegate
		principal: 	nil
		credentials: 	nil
		dicto: 	a DIDicto


[ call execute ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


BlockClosure>>on:do:
	Receiver: [ call execute ]
	Arguments and temporary variables: 
		exception: 	ZnRestCallUnauthorized
		handlerAction: 	[ :exception | self unauthorized: exception request ]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
		startpc: 	38
		numArgs: 	0


ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


[ self execute: call ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /mai/run)
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


BlockClosure>>on:do:
	Receiver: [ self execute: call ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :exception | 
request server debugMode
	ifTrue: [ exception pa...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
		startpc: 	99
		numArgs: 	0


ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /mai/run)
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ :delegate | delegate handleRequest: request ] ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /mai/run)
		delegate: 	a ZnJSONRestServerDelegate
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateRequest:do:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /mai/run)
		block: 	[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ ...etc...
		authenticator: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /mai/run)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


[ self authenticateAndDelegateRequest: request ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /mai/run)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


BlockClosure>>on:do:
	Receiver: [ self authenticateAndDelegateRequest: request ]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :exception | 
self debugMode
	ifTrue: [ exception pass ]
	ifFa...etc...
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequ...etc...
		startpc: 	58
		numArgs: 	0


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /mai/run)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /mai/run)
		response: 	nil
		initialMilliseconds: 	1469664
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeOneRequestResponseOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		stream: 	a ZdcSocketStream
		request: 	a ZnRequest(POST /mai/run)
		response: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


[ self executeOneRequestResponseOn: stream ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		stream: 	a ZdcSocketStream
		request: 	nil
		response: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


[ 
p psValueAt: index put: anObject.
aBlock value ] in ZnCurrentServer(DynamicVariable)>>value:during:
	Receiver: a ZnCurrentServer
	Arguments and temporary variables: 
		anObject: 	a ZnManagingMultiThreadedServer(running 8010)
		aBlock: 	[ self executeOneRequestResponseOn: stream ]
		p: 	a Process in nil
		oldValue: 	nil
	Receiver's instance variables: 
		index: 	5



--- The full stack ---
DIUtil class>>saveString:ToFile:
DIPhpModel>>_createConfigFile
DIPhpModel>>_loadPhpModel
DIPhpModel>>model
DIVarPhpClass>>allElements
DIVarPhpClass(DIVar)>>elements
DISimpleRule>>subjectElements
printRulesEntityRelationship: someRules
	| res processedPredicates |
	res := ''.
	processedPredicates := Set new.
	someRules
		do: [ :rule | 
			| predicateSelector subjectElements argumentElements data isPredicateInv isSubjectInv |
			predicateSelector := (rule predicate nameNormalized , ':') asSymbol.
			isPredicateInv := rule hasPredicateInverted.
			isSubjectInv := rule hasSubjectInverted.
			subjectElements := rule subjectElements.
			argumentElements := rule argumentElements.
			subjectElements
				do: [ :subject | 
					argumentElements
						do: [ :argument | 
							| relId spec msgPass msgFail |
							relId := subject id , '-' , argument id.
							msgPass := subject id , '.' , rule predicate name , '(' , argument id , ')=True'.
							msgFail := subject id , '.' , rule predicate name , '(' , argument id , ')=False'.
							(processedPredicates includes: relId)
								ifFalse: [ 
									data := {(#subject -> subject value).
									(#argument -> argument value).
									(#ruleId -> rule id).
									(#propertyId -> relId).
									(#msgPass -> msgPass).
									(#msgFail -> msgFail)} asDictionary.
									spec := self perform: predicateSelector withArguments: {data}.
									spec := spec
										dictoReplace:
											{('$subject' -> subject value).
											('$argument' -> argument value).
											('$ruleId' -> rule id).
											('$propertyId' -> relId).
											('$msgPass' -> msgPass).
											('$msgFail' -> msgFail)}.
									res := res , spec ].	"avoid duplicate predicate evaluations"
							processedPredicates add: relId ] ] ].
	^ res in DIPhpDependencies(DIAdapter)>>printRulesEntityRelationship:
DICollectionRule(OrderedCollection)>>do:
DIPhpDependencies(DIAdapter)>>printRulesEntityRelationship:
DIPhpDependencies(DIAdapter)>>printRules
DIPhpDependencies>>testInput
DITestGroup>>build
[ :testGroup | testGroup build ] in DIDicto>>dictoBuild:
Array(SequenceableCollection)>>do:
DIDicto>>dictoBuild:
DIDicto>>dictoRun:
DIDicto>>dictoAll:
[ DIDicto new dictoAll: input ] in DIWebServiceAPI>>getRun
BlockClosure>>on:do:
DIWebServiceAPI>>getRun
DIWebServiceHandler>>post
DIWebServiceHandler(ZnRestCall)>>execute
[ call execute ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
BlockClosure>>on:do:
ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
[ self execute: call ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
BlockClosure>>on:do:
ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ :delegate | delegate handleRequest: request ] ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateRequest:do:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
[ self authenticateAndDelegateRequest: request ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
BlockClosure>>on:do:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequest:
ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeOneRequestResponseOn:
[ self executeOneRequestResponseOn: stream ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
[ 
p psValueAt: index put: anObject.
aBlock value ] in ZnCurrentServer(DynamicVariable)>>value:during:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
BlockClosure>>ensure:
ZnCurrentServer(DynamicVariable)>>value:during:
ZnCurrentServer class(DynamicVariable class)>>value:during:
ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
[ self executeRequestResponseLoopOn: stream ] in [ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ] in [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
BlockClosure>>ensure:
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ] in [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
BlockClosure>>ifCurtailed:
[ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Halt
24 February 2015 12:17:51.641326 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
NBCogit NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
https://github.com/pharo-project/pharo-vm.git Commit: 4a0d556150d478ff2de3c9624d2f18e6eaa3fa5c Date: 2014-12-18 18:42:53 +0100 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14893

Image: Pharo3.0 [Latest update: #30863]

DIUtil class>>saveString:ToFile:
	Receiver: DIUtil
	Arguments and temporary variables: 
		aString: 	'#!/bin/bash
type -P hhvm &>/dev/null && hhvm /home/otruffer/dicto/bin...etc...
		aFileName: 	'/home/otruffer/dicto/bin/tools/phpda/configs/modelScript-1424776670...etc...
		stream: 	MultiByteFileStream: '/home/otruffer/dicto/bin/tools/phpda/configs/mode...etc...
		newFileName: 	'/home/otruffer/dicto/bin/tools/phpda/configs/modelScript-14247766...etc...
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary()
		format: 	2
		layout: 	a FixedLayout
		instanceVariables: 	#()
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#DIUtil
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Dicto-var-util'
		traitComposition: 	{}
		localSelectors: 	nil


DIPhpModel>>_createModelScript
	Receiver: a DIPhpModel
	Arguments and temporary variables: 
		modelScriptFile: 	'#!/bin/bash
type -P hhvm &>/dev/null && hhvm /home/otruffer/d...etc...
	Receiver's instance variables: 
		defRules: 	a DICollectionRule()
		defVars: 	a DICollectionVar(SYSTEM)
		analysisID: 	'1424776670'
		additionalProperties: 	a Dictionary()
		ruleCounter: 	0
		varCounter: 	0
		defVarElements: 	a DICollectionVarElements()
		defVarInvertedElements: 	a DICollectionVarElements()
		model: 	nil


DIPhpModel>>_createModelFile
	Receiver: a DIPhpModel
	Arguments and temporary variables: 

	Receiver's instance variables: 
		defRules: 	a DICollectionRule()
		defVars: 	a DICollectionVar(SYSTEM)
		analysisID: 	'1424776670'
		additionalProperties: 	a Dictionary()
		ruleCounter: 	0
		varCounter: 	0
		defVarElements: 	a DICollectionVarElements()
		defVarInvertedElements: 	a DICollectionVarElements()
		model: 	nil


DIPhpModel>>_loadPhpModel
	Receiver: a DIPhpModel
	Arguments and temporary variables: 

	Receiver's instance variables: 
		defRules: 	a DICollectionRule()
		defVars: 	a DICollectionVar(SYSTEM)
		analysisID: 	'1424776670'
		additionalProperties: 	a Dictionary()
		ruleCounter: 	0
		varCounter: 	0
		defVarElements: 	a DICollectionVarElements()
		defVarInvertedElements: 	a DICollectionVarElements()
		model: 	nil


DIPhpModel>>model
	Receiver: a DIPhpModel
	Arguments and temporary variables: 

	Receiver's instance variables: 
		defRules: 	a DICollectionRule()
		defVars: 	a DICollectionVar(SYSTEM)
		analysisID: 	'1424776670'
		additionalProperties: 	a Dictionary()
		ruleCounter: 	0
		varCounter: 	0
		defVarElements: 	a DICollectionVarElements()
		defVarInvertedElements: 	a DICollectionVarElements()
		model: 	nil


DIVarPhpClass>>allElements
	Receiver: RuleResult
	Arguments and temporary variables: 

	Receiver's instance variables: 
		isFirst: 	false
		dslText: 	'RuleResult=PhpClass with name:"Dicto\\RuleResult"'
		type: 	'PhpClass'
		id: 	1
		entity: 	nil
		name: 	'RuleResult'
		specifiers: 	an OrderedCollection(name=Dicto\\RuleResult)
		isInverted: 	false
		elements: 	a DICollectionVarElements()
		invertedElements: 	a DICollectionVarElements()


DIVarPhpClass(DIVar)>>elements
	Receiver: RuleResult
	Arguments and temporary variables: 
		valid: 	nil
	Receiver's instance variables: 
		isFirst: 	false
		dslText: 	'RuleResult=PhpClass with name:"Dicto\\RuleResult"'
		type: 	'PhpClass'
		id: 	1
		entity: 	nil
		name: 	'RuleResult'
		specifiers: 	an OrderedCollection(name=Dicto\\RuleResult)
		isInverted: 	false
		elements: 	a DICollectionVarElements()
		invertedElements: 	a DICollectionVarElements()


DISimpleRule>>subjectElements
	Receiver: RuleResult cannot depend on DictoTalker
	Arguments and temporary variables: 
		subjectElements: 	nil
	Receiver's instance variables: 
		isFirst: 	nil
		dslText: 	'RuleResult cannot depend on DictoTalker'
		type: 	#cannot
		id: 	1001
		entity: 	nil
		subjects: 	an Array(RuleResult)
		predicates: 	an Array(depend on DictoTalker)
		subRules: 	nil
		candidateAdapters: 	a SortedCollection(DIPhpDependencies)
		chosenAdapter: 	DIPhpDependencies
		hasFailed: 	false
		failureMessage: 	''
		failingPredicates: 	a Set()
		hasSubjectInverted: 	false
		hasPredicateInverted: 	false


printRulesEntityRelationship: someRules
	| res processedPredicates |
	res := ''.
	processedPredicates := Set new.
	someRules
		do: [ :rule | 
			| predicateSelector subjectElements argumentElements data isPredicateInv isSubjectInv |
			predicateSelector := (rule predicate nameNormalized , ':') asSymbol.
			isPredicateInv := rule hasPredicateInverted.
			isSubjectInv := rule hasSubjectInverted.
			subjectElements := rule subjectElements.
			argumentElements := rule argumentElements.
			subjectElements
				do: [ :subject | 
					argumentElements
						do: [ :argument | 
							| relId spec msgPass msgFail |
							relId := subject id , '-' , argument id.
							msgPass := subject id , '.' , rule predicate name , '(' , argument id , ')=True'.
							msgFail := subject id , '.' , rule predicate name , '(' , argument id , ')=False'.
							(processedPredicates includes: relId)
								ifFalse: [ 
									data := {(#subject -> subject value).
									(#argument -> argument value).
									(#ruleId -> rule id).
									(#propertyId -> relId).
									(#msgPass -> msgPass).
									(#msgFail -> msgFail)} asDictionary.
									spec := self perform: predicateSelector withArguments: {data}.
									spec := spec
										dictoReplace:
											{('$subject' -> subject value).
											('$argument' -> argument value).
											('$ruleId' -> rule id).
											('$propertyId' -> relId).
											('$msgPass' -> msgPass).
											('$msgFail' -> msgFail)}.
									res := res , spec ].	"avoid duplicate predicate evaluations"
							processedPredicates add: relId ] ] ].
	^ res in DIPhpDependencies(DIAdapter)>>printRulesEntityRelationship:
	Receiver: a DIPhpDependencies
	Arguments and temporary variables: 
		someRules: 	a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalk...etc...
		processedPredicates: 	a Set()
		data: 	nil
		res: 	''
		rule: 	RuleResult cannot depend on DictoTalker
		predicateSelector: 	#dependOn:
		subjectElements: 	nil
		argumentElements: 	nil
		isPredicateInv: 	false
		isSubjectInv: 	false
	Receiver's instance variables: 
		output: 	''
		commandOutput: 	''
		NEWLINE: 	'
'
		rules: 	a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalker m...etc...
		varSynonyms: 	nil
		sessionId: 	'1424776669'
		TIMESTAMP: 	'1424776670'
		TOOLNAME: 	'DIPhpDependencies'
		PROJECTROOT: 	'/home/otruffer/DictoCLI'
		PROJECTSRC: 	'./'
		PROJECTBIN: 	'./'
		RESULTFILE: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/mai/1424776670/D...etc...
		TESTFILE: 	nil
		testInputFileExt: 	'.st'
		SYSTEM: 	SYSTEM


DICollectionRule(OrderedCollection)>>do:
	Receiver: a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalker must depend on Rule...etc...
	Arguments and temporary variables: 
		aBlock: 	printRulesEntityRelationship: someRules
	| res processedPredicates |
	r...etc...
		index: 	1
	Receiver's instance variables: 
		array: 	an Array(RuleResult cannot depend on DictoTalker DictoTalker must depend...etc...
		firstIndex: 	1
		lastIndex: 	3
		elements: 	nil
		elements: 	nil


DIPhpDependencies(DIAdapter)>>printRulesEntityRelationship:
	Receiver: a DIPhpDependencies
	Arguments and temporary variables: 
		res: 	''
		someRules: 	a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalk...etc...
		processedPredicates: 	a Set()
	Receiver's instance variables: 
		output: 	''
		commandOutput: 	''
		NEWLINE: 	'
'
		rules: 	a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalker m...etc...
		varSynonyms: 	nil
		sessionId: 	'1424776669'
		TIMESTAMP: 	'1424776670'
		TOOLNAME: 	'DIPhpDependencies'
		PROJECTROOT: 	'/home/otruffer/DictoCLI'
		PROJECTSRC: 	'./'
		PROJECTBIN: 	'./'
		RESULTFILE: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/mai/1424776670/D...etc...
		TESTFILE: 	nil
		testInputFileExt: 	'.st'
		SYSTEM: 	SYSTEM


DIPhpDependencies(DIAdapter)>>printRules
	Receiver: a DIPhpDependencies
	Arguments and temporary variables: 
		res: 	nil
		allRules: 	a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalke...etc...
	Receiver's instance variables: 
		output: 	''
		commandOutput: 	''
		NEWLINE: 	'
'
		rules: 	a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalker m...etc...
		varSynonyms: 	nil
		sessionId: 	'1424776669'
		TIMESTAMP: 	'1424776670'
		TOOLNAME: 	'DIPhpDependencies'
		PROJECTROOT: 	'/home/otruffer/DictoCLI'
		PROJECTSRC: 	'./'
		PROJECTBIN: 	'./'
		RESULTFILE: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/mai/1424776670/D...etc...
		TESTFILE: 	nil
		testInputFileExt: 	'.st'
		SYSTEM: 	SYSTEM


DIPhpDependencies>>testInput
	Receiver: a DIPhpDependencies
	Arguments and temporary variables: 
		strRules: 	nil
	Receiver's instance variables: 
		output: 	''
		commandOutput: 	''
		NEWLINE: 	'
'
		rules: 	a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalker m...etc...
		varSynonyms: 	nil
		sessionId: 	'1424776669'
		TIMESTAMP: 	'1424776670'
		TOOLNAME: 	'DIPhpDependencies'
		PROJECTROOT: 	'/home/otruffer/DictoCLI'
		PROJECTSRC: 	'./'
		PROJECTBIN: 	'./'
		RESULTFILE: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/mai/1424776670/D...etc...
		TESTFILE: 	nil
		testInputFileExt: 	'.st'
		SYSTEM: 	SYSTEM


DITestGroup>>build
	Receiver: a DITestGroup
	Arguments and temporary variables: 

	Receiver's instance variables: 
		rules: 	an OrderedCollection(RuleResult cannot depend on DictoTalker DictoTalker...etc...
		adapter: 	a DIPhpDependencies
		runCommandText: 	nil
		testSpecification: 	nil
		adapterID: 	'DIPhpDependencies'
		resultFile: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/mai/1424776670/D...etc...
		specificationFile: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/mai/14247...etc...
		commandFile: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/mai/1424776670/...etc...


[ :testGroup | testGroup build ] in DIDicto>>dictoBuild:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = ...etc...
		adapterTestGroups: 	a Dictionary(DIGrepFileContent->a DITestGroup DIJMeterLoadTe...etc...
		testGroup: 	a DITestGroup
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424776669'
		singleShotTask: 	false


Array(SequenceableCollection)>>do:
	Receiver: an Array(a DITestGroup a DITestGroup a DITestGroup a DITestGroup a DITestGroup)
	Arguments and temporary variables: 
		aBlock: 	[ :testGroup | testGroup build ]
		index: 	4
	Receiver's instance variables: 
an Array(a DITestGroup a DITestGroup a DITestGroup a DITestGroup a DITestGroup)

DIDicto>>dictoBuild:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = ...etc...
		adapterTestGroups: 	a Dictionary(DIGrepFileContent->a DITestGroup DIJMeterLoadTe...etc...
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424776669'
		singleShotTask: 	false


DIDicto>>dictoRun:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = ...etc...
		adapterTestGroups: 	nil
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424776669'
		singleShotTask: 	false


DIDicto>>dictoAll:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = ...etc...
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424776669'
		singleShotTask: 	false


[ DIDicto new dictoAll: input ] in DIWebServiceAPI>>getRun
	Receiver: a DIWebServiceAPI
	Arguments and temporary variables: 
		in: 	'/home/otruffer/dicto/bin/analysis/mai/dicto.rules'
		input: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = PhpCl...etc...
		rulesFailed: 	nil
		rulesTotal: 	nil
	Receiver's instance variables: 
		request: 	nil
		response: 	nil
		variables: 	nil
		delegate: 	nil
		principal: 	nil
		credentials: 	nil


BlockClosure>>on:do:
	Receiver: [ DIDicto new dictoAll: input ]
	Arguments and temporary variables: 
		exception: 	DIException
		handlerAction: 	[ :ex | ^ self error: ex description ]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	DIWebServiceAPI>>getRun
		startpc: 	138
		numArgs: 	0


DIWebServiceAPI>>getRun
	Receiver: a DIWebServiceAPI
	Arguments and temporary variables: 
		in: 	'/home/otruffer/dicto/bin/analysis/mai/dicto.rules'
		input: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = PhpCl...etc...
		rulesFailed: 	nil
		rulesTotal: 	nil
	Receiver's instance variables: 
		request: 	nil
		response: 	nil
		variables: 	nil
		delegate: 	nil
		principal: 	nil
		credentials: 	nil


DIWebServiceHandler>>post
	Receiver: a DIWebServiceHandler
	Arguments and temporary variables: 
		api: 	a DIWebServiceAPI
	Receiver's instance variables: 
		request: 	a ZnRequest(POST /mai/run)
		response: 	nil
		variables: 	an OrderedCollection('mai' 'run')
		delegate: 	a ZnJSONRestServerDelegate
		principal: 	nil
		credentials: 	nil
		dicto: 	a DIDicto


DIWebServiceHandler(ZnRestCall)>>execute
	Receiver: a DIWebServiceHandler
	Arguments and temporary variables: 

	Receiver's instance variables: 
		request: 	a ZnRequest(POST /mai/run)
		response: 	nil
		variables: 	an OrderedCollection('mai' 'run')
		delegate: 	a ZnJSONRestServerDelegate
		principal: 	nil
		credentials: 	nil
		dicto: 	a DIDicto


[ call execute ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


BlockClosure>>on:do:
	Receiver: [ call execute ]
	Arguments and temporary variables: 
		exception: 	ZnRestCallUnauthorized
		handlerAction: 	[ :exception | self unauthorized: exception request ]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
		startpc: 	38
		numArgs: 	0


ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


[ self execute: call ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /mai/run)
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


BlockClosure>>on:do:
	Receiver: [ self execute: call ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :exception | 
request server debugMode
	ifTrue: [ exception pa...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
		startpc: 	99
		numArgs: 	0


ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /mai/run)
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ :delegate | delegate handleRequest: request ] ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /mai/run)
		delegate: 	a ZnJSONRestServerDelegate
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateRequest:do:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /mai/run)
		block: 	[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ ...etc...
		authenticator: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /mai/run)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


[ self authenticateAndDelegateRequest: request ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /mai/run)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


BlockClosure>>on:do:
	Receiver: [ self authenticateAndDelegateRequest: request ]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :exception | 
self debugMode
	ifTrue: [ exception pass ]
	ifFa...etc...
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequ...etc...
		startpc: 	58
		numArgs: 	0


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /mai/run)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /mai/run)
		response: 	nil
		initialMilliseconds: 	1469664
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeOneRequestResponseOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		stream: 	a ZdcSocketStream
		request: 	a ZnRequest(POST /mai/run)
		response: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


[ self executeOneRequestResponseOn: stream ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		stream: 	a ZdcSocketStream
		request: 	nil
		response: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)



--- The full stack ---
DIUtil class>>saveString:ToFile:
DIPhpModel>>_createModelScript
DIPhpModel>>_createModelFile
DIPhpModel>>_loadPhpModel
DIPhpModel>>model
DIVarPhpClass>>allElements
DIVarPhpClass(DIVar)>>elements
DISimpleRule>>subjectElements
printRulesEntityRelationship: someRules
	| res processedPredicates |
	res := ''.
	processedPredicates := Set new.
	someRules
		do: [ :rule | 
			| predicateSelector subjectElements argumentElements data isPredicateInv isSubjectInv |
			predicateSelector := (rule predicate nameNormalized , ':') asSymbol.
			isPredicateInv := rule hasPredicateInverted.
			isSubjectInv := rule hasSubjectInverted.
			subjectElements := rule subjectElements.
			argumentElements := rule argumentElements.
			subjectElements
				do: [ :subject | 
					argumentElements
						do: [ :argument | 
							| relId spec msgPass msgFail |
							relId := subject id , '-' , argument id.
							msgPass := subject id , '.' , rule predicate name , '(' , argument id , ')=True'.
							msgFail := subject id , '.' , rule predicate name , '(' , argument id , ')=False'.
							(processedPredicates includes: relId)
								ifFalse: [ 
									data := {(#subject -> subject value).
									(#argument -> argument value).
									(#ruleId -> rule id).
									(#propertyId -> relId).
									(#msgPass -> msgPass).
									(#msgFail -> msgFail)} asDictionary.
									spec := self perform: predicateSelector withArguments: {data}.
									spec := spec
										dictoReplace:
											{('$subject' -> subject value).
											('$argument' -> argument value).
											('$ruleId' -> rule id).
											('$propertyId' -> relId).
											('$msgPass' -> msgPass).
											('$msgFail' -> msgFail)}.
									res := res , spec ].	"avoid duplicate predicate evaluations"
							processedPredicates add: relId ] ] ].
	^ res in DIPhpDependencies(DIAdapter)>>printRulesEntityRelationship:
DICollectionRule(OrderedCollection)>>do:
DIPhpDependencies(DIAdapter)>>printRulesEntityRelationship:
DIPhpDependencies(DIAdapter)>>printRules
DIPhpDependencies>>testInput
DITestGroup>>build
[ :testGroup | testGroup build ] in DIDicto>>dictoBuild:
Array(SequenceableCollection)>>do:
DIDicto>>dictoBuild:
DIDicto>>dictoRun:
DIDicto>>dictoAll:
[ DIDicto new dictoAll: input ] in DIWebServiceAPI>>getRun
BlockClosure>>on:do:
DIWebServiceAPI>>getRun
DIWebServiceHandler>>post
DIWebServiceHandler(ZnRestCall)>>execute
[ call execute ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
BlockClosure>>on:do:
ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
[ self execute: call ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
BlockClosure>>on:do:
ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ :delegate | delegate handleRequest: request ] ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateRequest:do:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
[ self authenticateAndDelegateRequest: request ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
BlockClosure>>on:do:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequest:
ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeOneRequestResponseOn:
[ self executeOneRequestResponseOn: stream ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ 
p psValueAt: index put: anObject.
aBlock value ] in ZnCurrentServer(DynamicVariable)>>value:during:
BlockClosure>>ensure:
ZnCurrentServer(DynamicVariable)>>value:during:
ZnCurrentServer class(DynamicVariable class)>>value:during:
ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
[ self executeRequestResponseLoopOn: stream ] in [ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ] in [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
BlockClosure>>ensure:
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ] in [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
BlockClosure>>ifCurtailed:
[ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Halt
24 February 2015 12:18:14.377684 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
NBCogit NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
https://github.com/pharo-project/pharo-vm.git Commit: 4a0d556150d478ff2de3c9624d2f18e6eaa3fa5c Date: 2014-12-18 18:42:53 +0100 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14893

Image: Pharo3.0 [Latest update: #30863]

DIUtil class>>saveString:ToFile:
	Receiver: DIUtil
	Arguments and temporary variables: 
		aString: 	'[{ "subject" : "Dicto\\RuleResult",
	   "argument": "Dicto\\DictoTalk...etc...
		aFileName: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/mai/1424776670/DI...etc...
		stream: 	MultiByteFileStream: '/home/otruffer/dicto/bin/analysis/mai/1424776670/...etc...
		newFileName: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/mai/1424776670/...etc...
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary()
		format: 	2
		layout: 	a FixedLayout
		instanceVariables: 	#()
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#DIUtil
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Dicto-var-util'
		traitComposition: 	{}
		localSelectors: 	nil


DITestGroup>>build
	Receiver: a DITestGroup
	Arguments and temporary variables: 

	Receiver's instance variables: 
		rules: 	an OrderedCollection(RuleResult cannot depend on DictoTalker DictoTalker...etc...
		adapter: 	a DIPhpDependencies
		runCommandText: 	'#!/bin/bash
type -P hhvm &>/dev/null && hhvm /home/otruffer/di...etc...
		testSpecification: 	'[{ "subject" : "Dicto\\RuleResult",
	   "argument": "Dicto\...etc...
		adapterID: 	'DIPhpDependencies'
		resultFile: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/mai/1424776670/D...etc...
		specificationFile: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/mai/14247...etc...
		commandFile: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/mai/1424776670/...etc...


[ :testGroup | testGroup build ] in DIDicto>>dictoBuild:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = ...etc...
		adapterTestGroups: 	a Dictionary(DIGrepFileContent->a DITestGroup DIJMeterLoadTe...etc...
		testGroup: 	a DITestGroup
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424776669'
		singleShotTask: 	false


Array(SequenceableCollection)>>do:
	Receiver: an Array(a DITestGroup a DITestGroup a DITestGroup a DITestGroup a DITestGroup)
	Arguments and temporary variables: 
		aBlock: 	[ :testGroup | testGroup build ]
		index: 	4
	Receiver's instance variables: 
an Array(a DITestGroup a DITestGroup a DITestGroup a DITestGroup a DITestGroup)

DIDicto>>dictoBuild:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = ...etc...
		adapterTestGroups: 	a Dictionary(DIGrepFileContent->a DITestGroup DIJMeterLoadTe...etc...
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424776669'
		singleShotTask: 	false


DIDicto>>dictoRun:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = ...etc...
		adapterTestGroups: 	nil
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424776669'
		singleShotTask: 	false


DIDicto>>dictoAll:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = ...etc...
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424776669'
		singleShotTask: 	false


[ DIDicto new dictoAll: input ] in DIWebServiceAPI>>getRun
	Receiver: a DIWebServiceAPI
	Arguments and temporary variables: 
		in: 	'/home/otruffer/dicto/bin/analysis/mai/dicto.rules'
		input: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = PhpCl...etc...
		rulesFailed: 	nil
		rulesTotal: 	nil
	Receiver's instance variables: 
		request: 	nil
		response: 	nil
		variables: 	nil
		delegate: 	nil
		principal: 	nil
		credentials: 	nil


BlockClosure>>on:do:
	Receiver: [ DIDicto new dictoAll: input ]
	Arguments and temporary variables: 
		exception: 	DIException
		handlerAction: 	[ :ex | ^ self error: ex description ]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	DIWebServiceAPI>>getRun
		startpc: 	138
		numArgs: 	0


DIWebServiceAPI>>getRun
	Receiver: a DIWebServiceAPI
	Arguments and temporary variables: 
		in: 	'/home/otruffer/dicto/bin/analysis/mai/dicto.rules'
		input: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = PhpCl...etc...
		rulesFailed: 	nil
		rulesTotal: 	nil
	Receiver's instance variables: 
		request: 	nil
		response: 	nil
		variables: 	nil
		delegate: 	nil
		principal: 	nil
		credentials: 	nil


DIWebServiceHandler>>post
	Receiver: a DIWebServiceHandler
	Arguments and temporary variables: 
		api: 	a DIWebServiceAPI
	Receiver's instance variables: 
		request: 	a ZnRequest(POST /mai/run)
		response: 	nil
		variables: 	an OrderedCollection('mai' 'run')
		delegate: 	a ZnJSONRestServerDelegate
		principal: 	nil
		credentials: 	nil
		dicto: 	a DIDicto


DIWebServiceHandler(ZnRestCall)>>execute
	Receiver: a DIWebServiceHandler
	Arguments and temporary variables: 

	Receiver's instance variables: 
		request: 	a ZnRequest(POST /mai/run)
		response: 	nil
		variables: 	an OrderedCollection('mai' 'run')
		delegate: 	a ZnJSONRestServerDelegate
		principal: 	nil
		credentials: 	nil
		dicto: 	a DIDicto


[ call execute ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


BlockClosure>>on:do:
	Receiver: [ call execute ]
	Arguments and temporary variables: 
		exception: 	ZnRestCallUnauthorized
		handlerAction: 	[ :exception | self unauthorized: exception request ]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
		startpc: 	38
		numArgs: 	0


ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


[ self execute: call ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /mai/run)
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


BlockClosure>>on:do:
	Receiver: [ self execute: call ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :exception | 
request server debugMode
	ifTrue: [ exception pa...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
		startpc: 	99
		numArgs: 	0


ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /mai/run)
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ :delegate | delegate handleRequest: request ] ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /mai/run)
		delegate: 	a ZnJSONRestServerDelegate
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateRequest:do:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /mai/run)
		block: 	[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ ...etc...
		authenticator: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /mai/run)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


[ self authenticateAndDelegateRequest: request ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /mai/run)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


BlockClosure>>on:do:
	Receiver: [ self authenticateAndDelegateRequest: request ]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :exception | 
self debugMode
	ifTrue: [ exception pass ]
	ifFa...etc...
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequ...etc...
		startpc: 	58
		numArgs: 	0


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /mai/run)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /mai/run)
		response: 	nil
		initialMilliseconds: 	1469664
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeOneRequestResponseOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		stream: 	a ZdcSocketStream
		request: 	a ZnRequest(POST /mai/run)
		response: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


[ self executeOneRequestResponseOn: stream ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		stream: 	a ZdcSocketStream
		request: 	nil
		response: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


[ 
p psValueAt: index put: anObject.
aBlock value ] in ZnCurrentServer(DynamicVariable)>>value:during:
	Receiver: a ZnCurrentServer
	Arguments and temporary variables: 
		anObject: 	a ZnManagingMultiThreadedServer(running 8010)
		aBlock: 	[ self executeOneRequestResponseOn: stream ]
		p: 	a Process in nil
		oldValue: 	nil
	Receiver's instance variables: 
		index: 	5


BlockClosure>>ensure:
	Receiver: [ 
p psValueAt: index put: anObject.
aBlock value ]
	Arguments and temporary variables: 
		aBlock: 	[ p psValueAt: index put: oldValue ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ZnCurrentServer(DynamicVariable)>>value:during:
		startpc: 	62
		numArgs: 	0


ZnCurrentServer(DynamicVariable)>>value:during:
	Receiver: a ZnCurrentServer
	Arguments and temporary variables: 
		anObject: 	a ZnManagingMultiThreadedServer(running 8010)
		aBlock: 	[ self executeOneRequestResponseOn: stream ]
		p: 	a Process in nil
		oldValue: 	nil
	Receiver's instance variables: 
		index: 	5


ZnCurrentServer class(DynamicVariable class)>>value:during:
	Receiver: ZnCurrentServer
	Arguments and temporary variables: 
		anObject: 	a ZnManagingMultiThreadedServer(running 8010)
		aBlock: 	[ self executeOneRequestResponseOn: stream ]
	Receiver's instance variables: 
		superclass: 	DynamicVariable
		methodDict: 	a MethodDictionary()
		format: 	132
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#ZnCurrentServer
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Zinc-HTTP-Variables'
		traitComposition: 	{}
		localSelectors: 	nil
		hash: 	nil
		soleInstance: 	a ZnCurrentServer


ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		stream: 	a ZdcSocketStream
		request: 	nil
		response: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


[ self executeRequestResponseLoopOn: stream ] in [ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ] in [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		listeningSocket: 	a Socket[waitingForConnection]
		stream: 	a ZdcSocketStream
		socket: 	a Socket[connected]
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


BlockClosure>>ensure:
	Receiver: [ self executeRequestResponseLoopOn: stream ]
	Arguments and temporary variables: 
		aBlock: 	[ 
self log debug: 'Closing stream'.
self closeSocketStream: stream ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		se...etc...
		startpc: 	118
		numArgs: 	0


[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ] in [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		listeningSocket: 	a Socket[waitingForConnection]
		stream: 	a ZdcSocketStream
		socket: 	a Socket[connected]
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


BlockClosure>>ifCurtailed:
	Receiver: [ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing st...etc...
	Arguments and temporary variables: 
		aBlock: 	[ 
self log debug: 'Destroying socket'.
socket destroy ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	[ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
	...etc...
		startpc: 	113
		numArgs: 	0


[ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		listeningSocket: 	a Socket[waitingForConnection]
		stream: 	a ZdcSocketStream
		socket: 	a Socket[connected]
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnec...etc...
		startpc: 	108
		numArgs: 	0



--- The full stack ---
DIUtil class>>saveString:ToFile:
DITestGroup>>build
[ :testGroup | testGroup build ] in DIDicto>>dictoBuild:
Array(SequenceableCollection)>>do:
DIDicto>>dictoBuild:
DIDicto>>dictoRun:
DIDicto>>dictoAll:
[ DIDicto new dictoAll: input ] in DIWebServiceAPI>>getRun
BlockClosure>>on:do:
DIWebServiceAPI>>getRun
DIWebServiceHandler>>post
DIWebServiceHandler(ZnRestCall)>>execute
[ call execute ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
BlockClosure>>on:do:
ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
[ self execute: call ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
BlockClosure>>on:do:
ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ :delegate | delegate handleRequest: request ] ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateRequest:do:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
[ self authenticateAndDelegateRequest: request ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
BlockClosure>>on:do:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequest:
ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeOneRequestResponseOn:
[ self executeOneRequestResponseOn: stream ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
[ 
p psValueAt: index put: anObject.
aBlock value ] in ZnCurrentServer(DynamicVariable)>>value:during:
BlockClosure>>ensure:
ZnCurrentServer(DynamicVariable)>>value:during:
ZnCurrentServer class(DynamicVariable class)>>value:during:
ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
[ self executeRequestResponseLoopOn: stream ] in [ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ] in [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
BlockClosure>>ensure:
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ] in [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
BlockClosure>>ifCurtailed:
[ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Halt
24 February 2015 12:18:17.259128 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
NBCogit NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
https://github.com/pharo-project/pharo-vm.git Commit: 4a0d556150d478ff2de3c9624d2f18e6eaa3fa5c Date: 2014-12-18 18:42:53 +0100 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14893

Image: Pharo3.0 [Latest update: #30863]

DIUtil class>>saveString:ToFile:
	Receiver: DIUtil
	Arguments and temporary variables: 
		aString: 	'#!/bin/bash
type -P hhvm &>/dev/null && hhvm /home/otruffer/dicto/bin...etc...
		aFileName: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/mai/1424776670/DI...etc...
		stream: 	MultiByteFileStream: '/home/otruffer/dicto/bin/analysis/mai/1424776670/...etc...
		newFileName: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/mai/1424776670/...etc...
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary()
		format: 	2
		layout: 	a FixedLayout
		instanceVariables: 	#()
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#DIUtil
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Dicto-var-util'
		traitComposition: 	{}
		localSelectors: 	nil


DITestGroup>>build
	Receiver: a DITestGroup
	Arguments and temporary variables: 

	Receiver's instance variables: 
		rules: 	an OrderedCollection(RuleResult cannot depend on DictoTalker DictoTalker...etc...
		adapter: 	a DIPhpDependencies
		runCommandText: 	'#!/bin/bash
type -P hhvm &>/dev/null && hhvm /home/otruffer/di...etc...
		testSpecification: 	'[{ "subject" : "Dicto\\RuleResult",
	   "argument": "Dicto\...etc...
		adapterID: 	'DIPhpDependencies'
		resultFile: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/mai/1424776670/D...etc...
		specificationFile: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/mai/14247...etc...
		commandFile: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/mai/1424776670/...etc...


[ :testGroup | testGroup build ] in DIDicto>>dictoBuild:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = ...etc...
		adapterTestGroups: 	a Dictionary(DIGrepFileContent->a DITestGroup DIJMeterLoadTe...etc...
		testGroup: 	a DITestGroup
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424776669'
		singleShotTask: 	false


Array(SequenceableCollection)>>do:
	Receiver: an Array(a DITestGroup a DITestGroup a DITestGroup a DITestGroup a DITestGroup)
	Arguments and temporary variables: 
		aBlock: 	[ :testGroup | testGroup build ]
		index: 	4
	Receiver's instance variables: 
an Array(a DITestGroup a DITestGroup a DITestGroup a DITestGroup a DITestGroup)

DIDicto>>dictoBuild:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = ...etc...
		adapterTestGroups: 	a Dictionary(DIGrepFileContent->a DITestGroup DIJMeterLoadTe...etc...
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424776669'
		singleShotTask: 	false


DIDicto>>dictoRun:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = ...etc...
		adapterTestGroups: 	nil
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424776669'
		singleShotTask: 	false


DIDicto>>dictoAll:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = ...etc...
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424776669'
		singleShotTask: 	false


[ DIDicto new dictoAll: input ] in DIWebServiceAPI>>getRun
	Receiver: a DIWebServiceAPI
	Arguments and temporary variables: 
		in: 	'/home/otruffer/dicto/bin/analysis/mai/dicto.rules'
		input: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = PhpCl...etc...
		rulesFailed: 	nil
		rulesTotal: 	nil
	Receiver's instance variables: 
		request: 	nil
		response: 	nil
		variables: 	nil
		delegate: 	nil
		principal: 	nil
		credentials: 	nil


BlockClosure>>on:do:
	Receiver: [ DIDicto new dictoAll: input ]
	Arguments and temporary variables: 
		exception: 	DIException
		handlerAction: 	[ :ex | ^ self error: ex description ]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	DIWebServiceAPI>>getRun
		startpc: 	138
		numArgs: 	0


DIWebServiceAPI>>getRun
	Receiver: a DIWebServiceAPI
	Arguments and temporary variables: 
		in: 	'/home/otruffer/dicto/bin/analysis/mai/dicto.rules'
		input: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = PhpCl...etc...
		rulesFailed: 	nil
		rulesTotal: 	nil
	Receiver's instance variables: 
		request: 	nil
		response: 	nil
		variables: 	nil
		delegate: 	nil
		principal: 	nil
		credentials: 	nil


DIWebServiceHandler>>post
	Receiver: a DIWebServiceHandler
	Arguments and temporary variables: 
		api: 	a DIWebServiceAPI
	Receiver's instance variables: 
		request: 	a ZnRequest(POST /mai/run)
		response: 	nil
		variables: 	an OrderedCollection('mai' 'run')
		delegate: 	a ZnJSONRestServerDelegate
		principal: 	nil
		credentials: 	nil
		dicto: 	a DIDicto


DIWebServiceHandler(ZnRestCall)>>execute
	Receiver: a DIWebServiceHandler
	Arguments and temporary variables: 

	Receiver's instance variables: 
		request: 	a ZnRequest(POST /mai/run)
		response: 	nil
		variables: 	an OrderedCollection('mai' 'run')
		delegate: 	a ZnJSONRestServerDelegate
		principal: 	nil
		credentials: 	nil
		dicto: 	a DIDicto


[ call execute ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


BlockClosure>>on:do:
	Receiver: [ call execute ]
	Arguments and temporary variables: 
		exception: 	ZnRestCallUnauthorized
		handlerAction: 	[ :exception | self unauthorized: exception request ]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
		startpc: 	38
		numArgs: 	0


ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


[ self execute: call ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /mai/run)
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


BlockClosure>>on:do:
	Receiver: [ self execute: call ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :exception | 
request server debugMode
	ifTrue: [ exception pa...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
		startpc: 	99
		numArgs: 	0


ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /mai/run)
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ :delegate | delegate handleRequest: request ] ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /mai/run)
		delegate: 	a ZnJSONRestServerDelegate
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateRequest:do:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /mai/run)
		block: 	[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ ...etc...
		authenticator: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /mai/run)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


[ self authenticateAndDelegateRequest: request ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /mai/run)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


BlockClosure>>on:do:
	Receiver: [ self authenticateAndDelegateRequest: request ]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :exception | 
self debugMode
	ifTrue: [ exception pass ]
	ifFa...etc...
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequ...etc...
		startpc: 	58
		numArgs: 	0


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /mai/run)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /mai/run)
		response: 	nil
		initialMilliseconds: 	1469664
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeOneRequestResponseOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		stream: 	a ZdcSocketStream
		request: 	a ZnRequest(POST /mai/run)
		response: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


[ self executeOneRequestResponseOn: stream ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		stream: 	a ZdcSocketStream
		request: 	nil
		response: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


[ 
p psValueAt: index put: anObject.
aBlock value ] in ZnCurrentServer(DynamicVariable)>>value:during:
	Receiver: a ZnCurrentServer
	Arguments and temporary variables: 
		anObject: 	a ZnManagingMultiThreadedServer(running 8010)
		aBlock: 	[ self executeOneRequestResponseOn: stream ]
		p: 	a Process in nil
		oldValue: 	nil
	Receiver's instance variables: 
		index: 	5


BlockClosure>>ensure:
	Receiver: [ 
p psValueAt: index put: anObject.
aBlock value ]
	Arguments and temporary variables: 
		aBlock: 	[ p psValueAt: index put: oldValue ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ZnCurrentServer(DynamicVariable)>>value:during:
		startpc: 	62
		numArgs: 	0


ZnCurrentServer(DynamicVariable)>>value:during:
	Receiver: a ZnCurrentServer
	Arguments and temporary variables: 
		anObject: 	a ZnManagingMultiThreadedServer(running 8010)
		aBlock: 	[ self executeOneRequestResponseOn: stream ]
		p: 	a Process in nil
		oldValue: 	nil
	Receiver's instance variables: 
		index: 	5


ZnCurrentServer class(DynamicVariable class)>>value:during:
	Receiver: ZnCurrentServer
	Arguments and temporary variables: 
		anObject: 	a ZnManagingMultiThreadedServer(running 8010)
		aBlock: 	[ self executeOneRequestResponseOn: stream ]
	Receiver's instance variables: 
		superclass: 	DynamicVariable
		methodDict: 	a MethodDictionary()
		format: 	132
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#ZnCurrentServer
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Zinc-HTTP-Variables'
		traitComposition: 	{}
		localSelectors: 	nil
		hash: 	nil
		soleInstance: 	a ZnCurrentServer


ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		stream: 	a ZdcSocketStream
		request: 	nil
		response: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


[ self executeRequestResponseLoopOn: stream ] in [ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ] in [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		listeningSocket: 	a Socket[waitingForConnection]
		stream: 	a ZdcSocketStream
		socket: 	a Socket[connected]
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


BlockClosure>>ensure:
	Receiver: [ self executeRequestResponseLoopOn: stream ]
	Arguments and temporary variables: 
		aBlock: 	[ 
self log debug: 'Closing stream'.
self closeSocketStream: stream ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		se...etc...
		startpc: 	118
		numArgs: 	0


[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ] in [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		listeningSocket: 	a Socket[waitingForConnection]
		stream: 	a ZdcSocketStream
		socket: 	a Socket[connected]
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


BlockClosure>>ifCurtailed:
	Receiver: [ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing st...etc...
	Arguments and temporary variables: 
		aBlock: 	[ 
self log debug: 'Destroying socket'.
socket destroy ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	[ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
	...etc...
		startpc: 	113
		numArgs: 	0


[ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		listeningSocket: 	a Socket[waitingForConnection]
		stream: 	a ZdcSocketStream
		socket: 	a Socket[connected]
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnec...etc...
		startpc: 	108
		numArgs: 	0



--- The full stack ---
DIUtil class>>saveString:ToFile:
DITestGroup>>build
[ :testGroup | testGroup build ] in DIDicto>>dictoBuild:
Array(SequenceableCollection)>>do:
DIDicto>>dictoBuild:
DIDicto>>dictoRun:
DIDicto>>dictoAll:
[ DIDicto new dictoAll: input ] in DIWebServiceAPI>>getRun
BlockClosure>>on:do:
DIWebServiceAPI>>getRun
DIWebServiceHandler>>post
DIWebServiceHandler(ZnRestCall)>>execute
[ call execute ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
BlockClosure>>on:do:
ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
[ self execute: call ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
BlockClosure>>on:do:
ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ :delegate | delegate handleRequest: request ] ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateRequest:do:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
[ self authenticateAndDelegateRequest: request ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
BlockClosure>>on:do:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequest:
ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeOneRequestResponseOn:
[ self executeOneRequestResponseOn: stream ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
[ 
p psValueAt: index put: anObject.
aBlock value ] in ZnCurrentServer(DynamicVariable)>>value:during:
BlockClosure>>ensure:
ZnCurrentServer(DynamicVariable)>>value:during:
ZnCurrentServer class(DynamicVariable class)>>value:during:
ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
[ self executeRequestResponseLoopOn: stream ] in [ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ] in [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
BlockClosure>>ensure:
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ] in [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
BlockClosure>>ifCurtailed:
[ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Halt
24 February 2015 12:18:20.129211 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
NBCogit NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
https://github.com/pharo-project/pharo-vm.git Commit: 4a0d556150d478ff2de3c9624d2f18e6eaa3fa5c Date: 2014-12-18 18:42:53 +0100 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14893

Image: Pharo3.0 [Latest update: #30863]

DIUtil class>>saveString:ToFile:
	Receiver: DIUtil
	Arguments and temporary variables: 
		aString: 	'<results id="1424776670"><rules><rule id="1" failed="true" value="Rul...etc...
		aFileName: 	'/home/otruffer/dicto/bin/analysis/mai/results.xml'
		stream: 	MultiByteFileStream: '/home/otruffer/dicto/bin/analysis/mai/results.xml...etc...
		newFileName: 	'/home/otruffer/dicto/bin/analysis/mai/results.xml'
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary()
		format: 	2
		layout: 	a FixedLayout
		instanceVariables: 	#()
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#DIUtil
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Dicto-var-util'
		traitComposition: 	{}
		localSelectors: 	nil


DIXMLExporter>>export:to:
	Receiver: a DIXMLExporter
	Arguments and temporary variables: 
		testSuites: 	a Dictionary(DIGrepFileContent->a DITestGroup DIJMeterLoadTest->a D...etc...
		anXMLFile: 	'/home/otruffer/dicto/bin/analysis/mai/results.xml'
		out: 	'<results id="1424776670"><rules><rule id="1" failed="true" value="RuleRes...etc...
	Receiver's instance variables: 
a DIXMLExporter

DIDicto>>_exportTests:to:withExporter:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		testSuites: 	a Dictionary(DIGrepFileContent->a DITestGroup DIJMeterLoadTest->a D...etc...
		aFile: 	nil
		anExporterClass: 	DIXMLExporter
		ex: 	a DIXMLExporter
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424776669'
		singleShotTask: 	false


DIDicto>>dictoCheck:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = ...etc...
		adapterTestGroups: 	a Dictionary(DIGrepFileContent->a DITestGroup DIJMeterLoadTe...etc...
		exportFormat: 	nil
		xml: 	nil
		json: 	nil
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424776669'
		singleShotTask: 	false


DIDicto>>dictoAll:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = ...etc...
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424776669'
		singleShotTask: 	false


[ DIDicto new dictoAll: input ] in DIWebServiceAPI>>getRun
	Receiver: a DIWebServiceAPI
	Arguments and temporary variables: 
		in: 	'/home/otruffer/dicto/bin/analysis/mai/dicto.rules'
		input: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = PhpCl...etc...
		rulesFailed: 	nil
		rulesTotal: 	nil
	Receiver's instance variables: 
		request: 	nil
		response: 	nil
		variables: 	nil
		delegate: 	nil
		principal: 	nil
		credentials: 	nil


BlockClosure>>on:do:
	Receiver: [ DIDicto new dictoAll: input ]
	Arguments and temporary variables: 
		exception: 	DIException
		handlerAction: 	[ :ex | ^ self error: ex description ]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	DIWebServiceAPI>>getRun
		startpc: 	138
		numArgs: 	0


DIWebServiceAPI>>getRun
	Receiver: a DIWebServiceAPI
	Arguments and temporary variables: 
		in: 	'/home/otruffer/dicto/bin/analysis/mai/dicto.rules'
		input: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = PhpCl...etc...
		rulesFailed: 	nil
		rulesTotal: 	nil
	Receiver's instance variables: 
		request: 	nil
		response: 	nil
		variables: 	nil
		delegate: 	nil
		principal: 	nil
		credentials: 	nil


DIWebServiceHandler>>post
	Receiver: a DIWebServiceHandler
	Arguments and temporary variables: 
		api: 	a DIWebServiceAPI
	Receiver's instance variables: 
		request: 	a ZnRequest(POST /mai/run)
		response: 	nil
		variables: 	an OrderedCollection('mai' 'run')
		delegate: 	a ZnJSONRestServerDelegate
		principal: 	nil
		credentials: 	nil
		dicto: 	a DIDicto


DIWebServiceHandler(ZnRestCall)>>execute
	Receiver: a DIWebServiceHandler
	Arguments and temporary variables: 

	Receiver's instance variables: 
		request: 	a ZnRequest(POST /mai/run)
		response: 	nil
		variables: 	an OrderedCollection('mai' 'run')
		delegate: 	a ZnJSONRestServerDelegate
		principal: 	nil
		credentials: 	nil
		dicto: 	a DIDicto


[ call execute ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


BlockClosure>>on:do:
	Receiver: [ call execute ]
	Arguments and temporary variables: 
		exception: 	ZnRestCallUnauthorized
		handlerAction: 	[ :exception | self unauthorized: exception request ]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
		startpc: 	38
		numArgs: 	0


ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


[ self execute: call ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /mai/run)
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


BlockClosure>>on:do:
	Receiver: [ self execute: call ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :exception | 
request server debugMode
	ifTrue: [ exception pa...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
		startpc: 	99
		numArgs: 	0


ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /mai/run)
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ :delegate | delegate handleRequest: request ] ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /mai/run)
		delegate: 	a ZnJSONRestServerDelegate
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateRequest:do:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /mai/run)
		block: 	[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ ...etc...
		authenticator: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /mai/run)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


[ self authenticateAndDelegateRequest: request ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /mai/run)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


BlockClosure>>on:do:
	Receiver: [ self authenticateAndDelegateRequest: request ]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :exception | 
self debugMode
	ifTrue: [ exception pass ]
	ifFa...etc...
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequ...etc...
		startpc: 	58
		numArgs: 	0


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /mai/run)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /mai/run)
		response: 	nil
		initialMilliseconds: 	1469664
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeOneRequestResponseOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		stream: 	a ZdcSocketStream
		request: 	a ZnRequest(POST /mai/run)
		response: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


[ self executeOneRequestResponseOn: stream ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		stream: 	a ZdcSocketStream
		request: 	nil
		response: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


[ 
p psValueAt: index put: anObject.
aBlock value ] in ZnCurrentServer(DynamicVariable)>>value:during:
	Receiver: a ZnCurrentServer
	Arguments and temporary variables: 
		anObject: 	a ZnManagingMultiThreadedServer(running 8010)
		aBlock: 	[ self executeOneRequestResponseOn: stream ]
		p: 	a Process in nil
		oldValue: 	nil
	Receiver's instance variables: 
		index: 	5


BlockClosure>>ensure:
	Receiver: [ 
p psValueAt: index put: anObject.
aBlock value ]
	Arguments and temporary variables: 
		aBlock: 	[ p psValueAt: index put: oldValue ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ZnCurrentServer(DynamicVariable)>>value:during:
		startpc: 	62
		numArgs: 	0


ZnCurrentServer(DynamicVariable)>>value:during:
	Receiver: a ZnCurrentServer
	Arguments and temporary variables: 
		anObject: 	a ZnManagingMultiThreadedServer(running 8010)
		aBlock: 	[ self executeOneRequestResponseOn: stream ]
		p: 	a Process in nil
		oldValue: 	nil
	Receiver's instance variables: 
		index: 	5


ZnCurrentServer class(DynamicVariable class)>>value:during:
	Receiver: ZnCurrentServer
	Arguments and temporary variables: 
		anObject: 	a ZnManagingMultiThreadedServer(running 8010)
		aBlock: 	[ self executeOneRequestResponseOn: stream ]
	Receiver's instance variables: 
		superclass: 	DynamicVariable
		methodDict: 	a MethodDictionary()
		format: 	132
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#ZnCurrentServer
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Zinc-HTTP-Variables'
		traitComposition: 	{}
		localSelectors: 	nil
		hash: 	nil
		soleInstance: 	a ZnCurrentServer


ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		stream: 	a ZdcSocketStream
		request: 	nil
		response: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


[ self executeRequestResponseLoopOn: stream ] in [ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ] in [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		listeningSocket: 	a Socket[waitingForConnection]
		stream: 	a ZdcSocketStream
		socket: 	a Socket[connected]
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


BlockClosure>>ensure:
	Receiver: [ self executeRequestResponseLoopOn: stream ]
	Arguments and temporary variables: 
		aBlock: 	[ 
self log debug: 'Closing stream'.
self closeSocketStream: stream ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		se...etc...
		startpc: 	118
		numArgs: 	0


[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ] in [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		listeningSocket: 	a Socket[waitingForConnection]
		stream: 	a ZdcSocketStream
		socket: 	a Socket[connected]
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


BlockClosure>>ifCurtailed:
	Receiver: [ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing st...etc...
	Arguments and temporary variables: 
		aBlock: 	[ 
self log debug: 'Destroying socket'.
socket destroy ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	[ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
	...etc...
		startpc: 	113
		numArgs: 	0


[ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		listeningSocket: 	a Socket[waitingForConnection]
		stream: 	a ZdcSocketStream
		socket: 	a Socket[connected]
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnec...etc...
		startpc: 	108
		numArgs: 	0



--- The full stack ---
DIUtil class>>saveString:ToFile:
DIXMLExporter>>export:to:
DIDicto>>_exportTests:to:withExporter:
DIDicto>>dictoCheck:
DIDicto>>dictoAll:
[ DIDicto new dictoAll: input ] in DIWebServiceAPI>>getRun
BlockClosure>>on:do:
DIWebServiceAPI>>getRun
DIWebServiceHandler>>post
DIWebServiceHandler(ZnRestCall)>>execute
[ call execute ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
BlockClosure>>on:do:
ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
[ self execute: call ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
BlockClosure>>on:do:
ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ :delegate | delegate handleRequest: request ] ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateRequest:do:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
[ self authenticateAndDelegateRequest: request ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
BlockClosure>>on:do:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequest:
ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeOneRequestResponseOn:
[ self executeOneRequestResponseOn: stream ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
[ 
p psValueAt: index put: anObject.
aBlock value ] in ZnCurrentServer(DynamicVariable)>>value:during:
BlockClosure>>ensure:
ZnCurrentServer(DynamicVariable)>>value:during:
ZnCurrentServer class(DynamicVariable class)>>value:during:
ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
[ self executeRequestResponseLoopOn: stream ] in [ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ] in [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
BlockClosure>>ensure:
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ] in [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
BlockClosure>>ifCurtailed:
[ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: ConnectionTimedOut>>response
24 February 2015 12:24:31.463911 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
NBCogit NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
https://github.com/pharo-project/pharo-vm.git Commit: 4a0d556150d478ff2de3c9624d2f18e6eaa3fa5c Date: 2014-12-18 18:42:53 +0100 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14893

Image: Pharo3.0 [Latest update: #30863]

ConnectionTimedOut(Object)>>doesNotUnderstand: #response
	Receiver: ConnectionTimedOut: Data receive timed out.
	Arguments and temporary variables: 
		aMessage: 	response
		exception: 	MessageNotUnderstood: ConnectionTimedOut>>response
		resumeValue: 	nil
	Receiver's instance variables: 
		messageText: 	'Data receive timed out.'
		tag: 	nil
		signaler: 	a Socket[connected]
		signalContext: 	ConnectionTimedOut(Exception)>>signal
		handlerContext: 	BlockClosure>>on:do:
		outerContext: 	nil


[ :exception | 
exception response code = 404
	ifTrue: [ ^ false ].
exception pass ] in MCSmalltalkhubRepository>>includesFileNamed:
	Receiver: a MCSmalltalkhubRepository(http://smalltalkhub.com/mc/caracciolo/DICTO/main/)
	Arguments and temporary variables: 
		aString: 	'Dicto-OskarTruffer.85.mcz'
		exception: 	ConnectionTimedOut: Data receive timed out.
	Receiver's instance variables: 
		creationTemplate: 	nil
		storeDiffs: 	nil
		cache: 	a Dictionary('Dicto-Php-OskarTruffer.8.mcz'->a MCVersion(Dicto-Php-Oskar...etc...
		allFileNames: 	nil
		cacheFileNames: 	false
		location: 	nil
		user: 	'otruffer'
		password: 	'lenpen37at'
		readerCache: 	a Dictionary('ConfigurationOfDictoPHP-AC.3.mcz'->a MCMczReader 'Di...etc...
		owner: 	'caracciolo'
		project: 	'DICTO'


BlockClosure>>cull:
	Receiver: [ :exception | 
exception response code = 404
	ifTrue: [ ^ false ].
exception pass ]
	Arguments and temporary variables: 
		anArg: 	ConnectionTimedOut: Data receive timed out.
	Receiver's instance variables: 
		outerContext: 	MCSmalltalkhubRepository>>includesFileNamed:
		startpc: 	64
		numArgs: 	1


[ self exceptionHandlerBlock cull: exception ] in MethodContext(ContextPart)>>handleSignal:
	Receiver: BlockClosure>>on:do:
	Arguments and temporary variables: 
		exception: 	ConnectionTimedOut: Data receive timed out.
		value: 	nil
	Receiver's instance variables: 
		sender: 	[ 
[ self executeWithRetriesRemaining: self numberOfRetries ]
	on: Erro...etc...
		pc: 	17
		stackp: 	3
		method: 	BlockClosure>>#on:do:
		closureOrNil: 	nil
		receiver: 	[ self executeWithRetriesRemaining: self numberOfRetries ]


BlockClosure>>ensure:
	Receiver: [ self exceptionHandlerBlock cull: exception ]
	Arguments and temporary variables: 
		aBlock: 	[ self exceptionHandlerIsActive: true ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	MethodContext(ContextPart)>>handleSignal:
		startpc: 	99
		numArgs: 	0


MethodContext(ContextPart)>>handleSignal:
	Receiver: BlockClosure>>on:do:
	Arguments and temporary variables: 
		exception: 	ConnectionTimedOut: Data receive timed out.
		value: 	nil
	Receiver's instance variables: 
		sender: 	[ 
[ self executeWithRetriesRemaining: self numberOfRetries ]
	on: Erro...etc...
		pc: 	17
		stackp: 	3
		method: 	BlockClosure>>#on:do:
		closureOrNil: 	nil
		receiver: 	[ self executeWithRetriesRemaining: self numberOfRetries ]


ConnectionTimedOut(Exception)>>pass
	Receiver: ConnectionTimedOut: Data receive timed out.
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	'Data receive timed out.'
		tag: 	nil
		signaler: 	a Socket[connected]
		signalContext: 	ConnectionTimedOut(Exception)>>signal
		handlerContext: 	BlockClosure>>on:do:
		outerContext: 	nil


[ :exception | 
retryCount > 0
	ifTrue: [ 
		self
			handleRetry: exception;
			executeWithRetriesRemaining: retryCount - 1 ]
	ifFalse: [ exception pass ] ] in ZnClient>>executeWithRetriesRemaining:
	Receiver: a ZnClient
	Arguments and temporary variables: 
		retryCount: 	0
		exception: 	ConnectionTimedOut: Data receive timed out.
	Receiver's instance variables: 
		request: 	a ZnRequest(HEAD /mc/caracciolo/DICTO/main/Dicto-OskarTruffer.85.mcz)
		response: 	nil
		connection: 	a ZdcSocketStream
		lastUsed: 	nil
		options: 	a Dictionary(#enforceAcceptContentType->true #enforceHttpSuccess->true...etc...
		session: 	nil
		log: 	a ZnLogSupport


BlockClosure>>cull:
	Receiver: [ :exception | 
retryCount > 0
	ifTrue: [ 
		self
			handleRetry: exception;
			executeWit...etc...
	Arguments and temporary variables: 
		anArg: 	ConnectionTimedOut: Data receive timed out.
	Receiver's instance variables: 
		outerContext: 	ZnClient>>executeWithRetriesRemaining:
		startpc: 	88
		numArgs: 	1


[ self exceptionHandlerBlock cull: exception ] in MethodContext(ContextPart)>>handleSignal:
	Receiver: BlockClosure>>on:do:
	Arguments and temporary variables: 
		exception: 	ConnectionTimedOut: Data receive timed out.
		value: 	nil
	Receiver's instance variables: 
		sender: 	ZnClient>>executeWithRetriesRemaining:
		pc: 	17
		stackp: 	3
		method: 	BlockClosure>>#on:do:
		closureOrNil: 	nil
		receiver: 	[ self executeWithRedirectsRemaining: self maxNumberOfRedirects ]


BlockClosure>>ensure:
	Receiver: [ self exceptionHandlerBlock cull: exception ]
	Arguments and temporary variables: 
		aBlock: 	[ self exceptionHandlerIsActive: true ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	MethodContext(ContextPart)>>handleSignal:
		startpc: 	99
		numArgs: 	0


MethodContext(ContextPart)>>handleSignal:
	Receiver: BlockClosure>>on:do:
	Arguments and temporary variables: 
		exception: 	ConnectionTimedOut: Data receive timed out.
		value: 	nil
	Receiver's instance variables: 
		sender: 	ZnClient>>executeWithRetriesRemaining:
		pc: 	17
		stackp: 	3
		method: 	BlockClosure>>#on:do:
		closureOrNil: 	nil
		receiver: 	[ self executeWithRedirectsRemaining: self maxNumberOfRedirects ]


ConnectionTimedOut(Exception)>>signal
	Receiver: ConnectionTimedOut: Data receive timed out.
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	'Data receive timed out.'
		tag: 	nil
		signaler: 	a Socket[connected]
		signalContext: 	ConnectionTimedOut(Exception)>>signal
		handlerContext: 	BlockClosure>>on:do:
		outerContext: 	nil


ConnectionTimedOut(Exception)>>signal:
	Receiver: ConnectionTimedOut: Data receive timed out.
	Arguments and temporary variables: 
		signalerText: 	'Data receive timed out.'
	Receiver's instance variables: 
		messageText: 	'Data receive timed out.'
		tag: 	nil
		signaler: 	a Socket[connected]
		signalContext: 	ConnectionTimedOut(Exception)>>signal
		handlerContext: 	BlockClosure>>on:do:
		outerContext: 	nil


ConnectionTimedOut class(Exception class)>>signal:
	Receiver: ConnectionTimedOut
	Arguments and temporary variables: 
		message: 	'Data receive timed out.'
	Receiver's instance variables: 
		superclass: 	NetworkError
		methodDict: 	a MethodDictionary()
		format: 	142
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#ConnectionTimedOut
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Network-Kernel'
		traitComposition: 	{}
		localSelectors: 	nil


[ ConnectionTimedOut signal: 'Data receive timed out.' ] in Socket>>waitForDataFor:
	Receiver: a Socket[connected]
	Arguments and temporary variables: 
		timeout: 	30
	Receiver's instance variables: 
		semaphore: 	a Semaphore()
		socketHandle: 	#[249 211 84 85 0 0 0 0 216 109 142 9]
		readSemaphore: 	a Semaphore()
		writeSemaphore: 	a Semaphore()


Socket>>waitForDataFor:ifClosed:ifTimedOut:
	Receiver: a Socket[connected]
	Arguments and temporary variables: 
		timeout: 	30
		closedBlock: 	[ ConnectionClosed signal: 'Connection closed while waiting for da...etc...
		timedOutBlock: 	[ ConnectionTimedOut signal: 'Data receive timed out.' ]
		startTime: 	1841737
		msecsDelta: 	30000
	Receiver's instance variables: 
		semaphore: 	a Semaphore()
		socketHandle: 	#[249 211 84 85 0 0 0 0 216 109 142 9]
		readSemaphore: 	a Semaphore()
		writeSemaphore: 	a Semaphore()


Socket>>waitForDataFor:
	Receiver: a Socket[connected]
	Arguments and temporary variables: 
		timeout: 	30
	Receiver's instance variables: 
		semaphore: 	a Semaphore()
		socketHandle: 	#[249 211 84 85 0 0 0 0 216 109 142 9]
		readSemaphore: 	a Semaphore()
		writeSemaphore: 	a Semaphore()


ZdcSocketStream(ZdcAbstractSocketStream)>>socketWaitForData
	Receiver: a ZdcSocketStream
	Arguments and temporary variables: 

	Receiver's instance variables: 
		socket: 	a Socket[connected]
		readBuffer: 	a ZdcIOBuffer(#[] +4096)
		writeBuffer: 	a ZdcIOBuffer(#[] +4096)
		timeout: 	30
		debug: 	false


ZdcSocketStream(ZdcSimpleSocketStream)>>fillReadBuffer
	Receiver: a ZdcSocketStream
	Arguments and temporary variables: 

	Receiver's instance variables: 
		socket: 	a Socket[connected]
		readBuffer: 	a ZdcIOBuffer(#[] +4096)
		writeBuffer: 	a ZdcIOBuffer(#[] +4096)
		timeout: 	30
		debug: 	false


ZdcSocketStream(ZdcAbstractSocketStream)>>next
	Receiver: a ZdcSocketStream
	Arguments and temporary variables: 

	Receiver's instance variables: 
		socket: 	a Socket[connected]
		readBuffer: 	a ZdcIOBuffer(#[] +4096)
		writeBuffer: 	a ZdcIOBuffer(#[] +4096)
		timeout: 	30
		debug: 	false


ZnLineReader>>processNext
	Receiver: a ZnLineReader
	Arguments and temporary variables: 
		item: 	nil
	Receiver's instance variables: 
		stream: 	a ZdcSocketStream
		buffer: 	'                                                                '
		position: 	0
		limit: 	4096


ZnLineReader>>nextLine
	Receiver: a ZnLineReader
	Arguments and temporary variables: 

	Receiver's instance variables: 
		stream: 	a ZdcSocketStream
		buffer: 	'                                                                '
		position: 	0
		limit: 	4096


ZnStatusLine>>readFrom:
	Receiver: a ZnStatusLine
	Arguments and temporary variables: 
		stream: 	a ZdcSocketStream
		line: 	nil
		lineStream: 	nil
		httpCode: 	nil
	Receiver's instance variables: 
		version: 	nil
		code: 	nil
		reason: 	nil


ZnStatusLine class>>readFrom:
	Receiver: ZnStatusLine
	Arguments and temporary variables: 
		stream: 	a ZdcSocketStream
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#=->ZnStatusLine>>#= #code->ZnStatusLine>>#code ...etc...
		format: 	136
		layout: 	a FixedLayout
		instanceVariables: 	#('version' 'code' 'reason')
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#ZnStatusLine
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Zinc-HTTP-Core'
		traitComposition: 	{}
		localSelectors: 	nil


ZnResponse>>readHeaderFrom:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
		stream: 	a ZdcSocketStream
	Receiver's instance variables: 
		headers: 	nil
		entity: 	nil
		statusLine: 	nil


ZnResponse class(ZnMessage class)>>readHeaderFrom:
	Receiver: ZnResponse
	Arguments and temporary variables: 
		stream: 	a ZdcSocketStream
	Receiver's instance variables: 
		superclass: 	ZnMessage
		methodDict: 	a MethodDictionary(#=->ZnResponse>>#= #addCookie:->ZnResponse>>#add...etc...
		format: 	136
		layout: 	a FixedLayout
		instanceVariables: 	#('statusLine')
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#ZnResponse
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Zinc-HTTP-Core'
		traitComposition: 	{}
		localSelectors: 	nil


ZnClient>>executeRequestResponse
	Receiver: a ZnClient
	Arguments and temporary variables: 

	Receiver's instance variables: 
		request: 	a ZnRequest(HEAD /mc/caracciolo/DICTO/main/Dicto-OskarTruffer.85.mcz)
		response: 	nil
		connection: 	a ZdcSocketStream
		lastUsed: 	nil
		options: 	a Dictionary(#enforceAcceptContentType->true #enforceHttpSuccess->true...etc...
		session: 	nil
		log: 	a ZnLogSupport


[ self executeRequestResponse ] in ZnClient>>getConnectionAndExecute
	Receiver: a ZnClient
	Arguments and temporary variables: 

	Receiver's instance variables: 
		request: 	a ZnRequest(HEAD /mc/caracciolo/DICTO/main/Dicto-OskarTruffer.85.mcz)
		response: 	nil
		connection: 	a ZdcSocketStream
		lastUsed: 	nil
		options: 	a Dictionary(#enforceAcceptContentType->true #enforceHttpSuccess->true...etc...
		session: 	nil
		log: 	a ZnLogSupport


BlockClosure>>ensure:
	Receiver: [ self executeRequestResponse ]
	Arguments and temporary variables: 
		aBlock: 	[ self cleanupConnection ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ZnClient>>getConnectionAndExecute
		startpc: 	133
		numArgs: 	0


ZnClient>>getConnectionAndExecute
	Receiver: a ZnClient
	Arguments and temporary variables: 

	Receiver's instance variables: 
		request: 	a ZnRequest(HEAD /mc/caracciolo/DICTO/main/Dicto-OskarTruffer.85.mcz)
		response: 	nil
		connection: 	a ZdcSocketStream
		lastUsed: 	nil
		options: 	a Dictionary(#enforceAcceptContentType->true #enforceHttpSuccess->true...etc...
		session: 	nil
		log: 	a ZnLogSupport


ZnClient>>executeWithRedirectsRemaining:
	Receiver: a ZnClient
	Arguments and temporary variables: 
		redirectCount: 	3
	Receiver's instance variables: 
		request: 	a ZnRequest(HEAD /mc/caracciolo/DICTO/main/Dicto-OskarTruffer.85.mcz)
		response: 	nil
		connection: 	a ZdcSocketStream
		lastUsed: 	nil
		options: 	a Dictionary(#enforceAcceptContentType->true #enforceHttpSuccess->true...etc...
		session: 	nil
		log: 	a ZnLogSupport


[ self executeWithRedirectsRemaining: self maxNumberOfRedirects ] in ZnClient>>executeWithRetriesRemaining:
	Receiver: a ZnClient
	Arguments and temporary variables: 
		retryCount: 	0
	Receiver's instance variables: 
		request: 	a ZnRequest(HEAD /mc/caracciolo/DICTO/main/Dicto-OskarTruffer.85.mcz)
		response: 	nil
		connection: 	a ZdcSocketStream
		lastUsed: 	nil
		options: 	a Dictionary(#enforceAcceptContentType->true #enforceHttpSuccess->true...etc...
		session: 	nil
		log: 	a ZnLogSupport


BlockClosure>>on:do:
	Receiver: [ self executeWithRedirectsRemaining: self maxNumberOfRedirects ]
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :exception | 
retryCount > 0
	ifTrue: [ 
		self
			handleRetry...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	ZnClient>>executeWithRetriesRemaining:
		startpc: 	69
		numArgs: 	0


ZnClient>>executeWithRetriesRemaining:
	Receiver: a ZnClient
	Arguments and temporary variables: 
		retryCount: 	0
	Receiver's instance variables: 
		request: 	a ZnRequest(HEAD /mc/caracciolo/DICTO/main/Dicto-OskarTruffer.85.mcz)
		response: 	nil
		connection: 	a ZdcSocketStream
		lastUsed: 	nil
		options: 	a Dictionary(#enforceAcceptContentType->true #enforceHttpSuccess->true...etc...
		session: 	nil
		log: 	a ZnLogSupport


[ self executeWithRetriesRemaining: self numberOfRetries ] in [ 
[ self executeWithRetriesRemaining: self numberOfRetries ]
	on: Error
	do: self ifFailBlock ] in ZnClient>>executeWithTimeout
	Receiver: a ZnClient
	Arguments and temporary variables: 

	Receiver's instance variables: 
		request: 	a ZnRequest(HEAD /mc/caracciolo/DICTO/main/Dicto-OskarTruffer.85.mcz)
		response: 	nil
		connection: 	a ZdcSocketStream
		lastUsed: 	nil
		options: 	a Dictionary(#enforceAcceptContentType->true #enforceHttpSuccess->true...etc...
		session: 	nil
		log: 	a ZnLogSupport


BlockClosure>>on:do:
	Receiver: [ self executeWithRetriesRemaining: self numberOfRetries ]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :exception | 
exception response code = 404
	ifTrue: [ ^ false...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	[ 
[ self executeWithRetriesRemaining: self numberOfRetries ]
	on...etc...
		startpc: 	46
		numArgs: 	0


[ 
[ self executeWithRetriesRemaining: self numberOfRetries ]
	on: Error
	do: self ifFailBlock ] in ZnClient>>executeWithTimeout
	Receiver: a ZnClient
	Arguments and temporary variables: 

	Receiver's instance variables: 
		request: 	a ZnRequest(HEAD /mc/caracciolo/DICTO/main/Dicto-OskarTruffer.85.mcz)
		response: 	nil
		connection: 	a ZdcSocketStream
		lastUsed: 	nil
		options: 	a Dictionary(#enforceAcceptContentType->true #enforceHttpSuccess->true...etc...
		session: 	nil
		log: 	a ZnLogSupport


[ ^ block value ] in ZnClient>>withTimeoutDo:
	Receiver: a ZnClient
	Arguments and temporary variables: 
		block: 	[ 
[ self executeWithRetriesRemaining: self numberOfRetries ]
	on: Error...etc...
	Receiver's instance variables: 
		request: 	a ZnRequest(HEAD /mc/caracciolo/DICTO/main/Dicto-OskarTruffer.85.mcz)
		response: 	nil
		connection: 	a ZdcSocketStream
		lastUsed: 	nil
		options: 	a Dictionary(#enforceAcceptContentType->true #enforceHttpSuccess->true...etc...
		session: 	nil
		log: 	a ZnLogSupport



--- The full stack ---
ConnectionTimedOut(Object)>>doesNotUnderstand: #response
[ :exception | 
exception response code = 404
	ifTrue: [ ^ false ].
exception pass ] in MCSmalltalkhubRepository>>includesFileNamed:
BlockClosure>>cull:
[ self exceptionHandlerBlock cull: exception ] in MethodContext(ContextPart)>>handleSignal:
BlockClosure>>ensure:
MethodContext(ContextPart)>>handleSignal:
ConnectionTimedOut(Exception)>>pass
[ :exception | 
retryCount > 0
	ifTrue: [ 
		self
			handleRetry: exception;
			executeWithRetriesRemaining: retryCount - 1 ]
	ifFalse: [ exception pass ] ] in ZnClient>>executeWithRetriesRemaining:
BlockClosure>>cull:
[ self exceptionHandlerBlock cull: exception ] in MethodContext(ContextPart)>>handleSignal:
BlockClosure>>ensure:
MethodContext(ContextPart)>>handleSignal:
ConnectionTimedOut(Exception)>>signal
ConnectionTimedOut(Exception)>>signal:
ConnectionTimedOut class(Exception class)>>signal:
[ ConnectionTimedOut signal: 'Data receive timed out.' ] in Socket>>waitForDataFor:
Socket>>waitForDataFor:ifClosed:ifTimedOut:
Socket>>waitForDataFor:
ZdcSocketStream(ZdcAbstractSocketStream)>>socketWaitForData
ZdcSocketStream(ZdcSimpleSocketStream)>>fillReadBuffer
ZdcSocketStream(ZdcAbstractSocketStream)>>next
ZnLineReader>>processNext
ZnLineReader>>nextLine
ZnStatusLine>>readFrom:
ZnStatusLine class>>readFrom:
ZnResponse>>readHeaderFrom:
ZnResponse class(ZnMessage class)>>readHeaderFrom:
ZnClient>>executeRequestResponse
[ self executeRequestResponse ] in ZnClient>>getConnectionAndExecute
BlockClosure>>ensure:
ZnClient>>getConnectionAndExecute
ZnClient>>executeWithRedirectsRemaining:
[ self executeWithRedirectsRemaining: self maxNumberOfRedirects ] in ZnClient>>executeWithRetriesRemaining:
BlockClosure>>on:do:
ZnClient>>executeWithRetriesRemaining:
[ self executeWithRetriesRemaining: self numberOfRetries ] in [ 
[ self executeWithRetriesRemaining: self numberOfRetries ]
	on: Error
	do: self ifFailBlock ] in ZnClient>>executeWithTimeout
BlockClosure>>on:do:
[ 
[ self executeWithRetriesRemaining: self numberOfRetries ]
	on: Error
	do: self ifFailBlock ] in ZnClient>>executeWithTimeout
[ ^ block value ] in ZnClient>>withTimeoutDo:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ 
p psValueAt: index put: anObject.
aBlock value ] in ZnConnectionTimeout(DynamicVariable)>>value:during:
BlockClosure>>ensure:
ZnConnectionTimeout(DynamicVariable)>>value:during:
ZnConnectionTimeout class(DynamicVariable class)>>value:during:
ZnClient>>withTimeoutDo:
ZnClient>>executeWithTimeout
[ result := self executeWithTimeout ] in ZnClient>>execute
[ ^ block value ] in ZnClient>>withProgressDo:
[ 
p psValueAt: index put: anObject.
aBlock value ] in ZnSignalProgress(DynamicVariable)>>value:during:
BlockClosure>>ensure:
ZnSignalProgress(DynamicVariable)>>value:during:
ZnSignalProgress class(DynamicVariable class)>>value:during:
ZnClient>>withProgressDo:
ZnClient>>execute
ZnClient>>head
ZnClient>>head:
MCSmalltalkhubRepository>>includesFileNamed:
MCSmalltalkhubRepository>>includesVersionNamed:
[ 
versionName := self nextVersionName.
aRepository includesVersionNamed: versionName ] in MCWorkingCopy>>uniqueVersionNameIn:
BlockClosure>>cull:
[ result := block cull: self ] in [ 
self prepareForRunning.
[ result := block cull: self ]
	on: JobNotification
	do: [ :notification | notification handle: self ] ] in Job>>run
BlockClosure>>on:do:
[ 
self prepareForRunning.
[ result := block cull: self ]
	on: JobNotification
	do: [ :notification | notification handle: self ] ] in Job>>run
BlockClosure>>ensure:
Job>>run
MorphicUIManager(UIManager)>>displayProgress:from:to:during:
ByteString(String)>>displayProgressFrom:to:during:
MCWorkingCopy>>uniqueVersionNameIn:
MCWorkingCopy>>newVersionIn:
[ 
newVersion := workingCopy newVersionIn: aRepository.
waitForVersion signal ] in MCWorkingCopyBrowser>>basicSaveVersionIn:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ 
World doOneCycle.
Processor yield.
false ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Halt
24 February 2015 2:26:47.019234 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
NBCogit NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
https://github.com/pharo-project/pharo-vm.git Commit: 4a0d556150d478ff2de3c9624d2f18e6eaa3fa5c Date: 2014-12-18 18:42:53 +0100 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14893

Image: Pharo3.0 [Latest update: #30863]

DIUtil class>>DoIt
	Receiver: DIUtil
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary()
		format: 	2
		layout: 	a FixedLayout
		instanceVariables: 	#()
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#DIUtil
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Dicto-var-util'
		traitComposition: 	{}
		localSelectors: 	nil


OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	'self halt.'
		itsSelection: 	a Text for 'self halt.'
		itsSelectionString: 	'self halt.'
	Receiver's instance variables: 
		ast: 	DoIt
	^ self halt
		source: 	a ReadStream
		context: 	nil
		receiver: 	DIUtil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil
		useFaultyForParsing: 	false


SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | result ]
		result: 	nil
		rcvr: 	DIUtil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(509870080)
		selectionShowing: 	true
		model: 	a PackageTreeNautilusUI
		editingState: 	a SmalltalkEditingState


SmalltalkEditor>>evaluateSelection
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 

	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(509870080)
		selectionShowing: 	true
		model: 	a PackageTreeNautilusUI
		editingState: 	a SmalltalkEditingState


[ textMorph editor evaluateSelection ] in PluggableTextMorphWithLimits(PluggableTextMorph)>>doIt
	Receiver: a PluggableTextMorphWithLimits(303038464)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(30.0@455.0) corner: (876.0@849.0)
		owner: 	a MultipleMethodsEditor(286261248)
		submorphs: 	an Array(an AlphaImageMorph(499908608) a TransformMorph(735313920))
		fullBounds: 	(30@455) corner: (876@849)
		color: 	Color white
		extension: 	a MorphExtension (488636416) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.784 g: 0.784 b: 0.784 alpha: 1.0)
		model: 	a PackageTreeNautilusUI
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(344719360)
		scroller: 	a TransformMorph(735313920)
		getMenuSelector: 	#sourceCodeMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(65273856)
		textMorph: 	a TextMorphForEditView(509870080)
		getTextSelector: 	#sourceCodeFrom:
		setTextSelector: 	#compileSource:notifying:
		getSelectionSelector: 	#contentsSelectionFrom:
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(565 to: 564)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil
		doubleClickSelector: 	nil
		setSelectionSelector: 	nil
		alertLimit: 	700
		locked: 	false
		warningLimit: 	350
		method: 	nil
		lockIcon: 	an AlphaImageMorph(499908608)
		canLockChangeSelector: 	#canChangeLockFor:
		lockSelector: 	#lockTextArea:from:


[ result := editBlock value ] in PluggableTextMorphWithLimits(PluggableTextMorph)>>handleEdit:
	Receiver: a PluggableTextMorphWithLimits(303038464)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph editor evaluateSelection ]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(30.0@455.0) corner: (876.0@849.0)
		owner: 	a MultipleMethodsEditor(286261248)
		submorphs: 	an Array(an AlphaImageMorph(499908608) a TransformMorph(735313920))
		fullBounds: 	(30@455) corner: (876@849)
		color: 	Color white
		extension: 	a MorphExtension (488636416) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.784 g: 0.784 b: 0.784 alpha: 1.0)
		model: 	a PackageTreeNautilusUI
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(344719360)
		scroller: 	a TransformMorph(735313920)
		getMenuSelector: 	#sourceCodeMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(65273856)
		textMorph: 	a TextMorphForEditView(509870080)
		getTextSelector: 	#sourceCodeFrom:
		setTextSelector: 	#compileSource:notifying:
		getSelectionSelector: 	#contentsSelectionFrom:
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(565 to: 564)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil
		doubleClickSelector: 	nil
		setSelectionSelector: 	nil
		alertLimit: 	700
		locked: 	false
		warningLimit: 	350
		method: 	nil
		lockIcon: 	an AlphaImageMorph(499908608)
		canLockChangeSelector: 	#canChangeLockFor:
		lockSelector: 	#lockTextArea:from:


TextMorphForEditView(TextMorph)>>handleEdit:
	Receiver: a TextMorphForEditView(509870080)
	Arguments and temporary variables: 
		editBlock: 	[ result := editBlock value ]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (838@325)
		owner: 	a TransformMorph(735313920)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (838@325)
		color: 	Color black
		extension: 	a MorphExtension (552599552) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Source Code Pro
		text: 	a Text for 'runShellScriptAbsolutePath: script arguments: anArray
| outpu...etc...
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		defaultColor: 	Color black
		editView: 	a PluggableTextMorphWithLimits(303038464)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


PluggableTextMorphWithLimits(PluggableTextMorph)>>handleEdit:
	Receiver: a PluggableTextMorphWithLimits(303038464)
	Arguments and temporary variables: 
		result: 	nil
		editBlock: 	[ textMorph editor evaluateSelection ]
	Receiver's instance variables: 
		bounds: 	(30.0@455.0) corner: (876.0@849.0)
		owner: 	a MultipleMethodsEditor(286261248)
		submorphs: 	an Array(an AlphaImageMorph(499908608) a TransformMorph(735313920))
		fullBounds: 	(30@455) corner: (876@849)
		color: 	Color white
		extension: 	a MorphExtension (488636416) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.784 g: 0.784 b: 0.784 alpha: 1.0)
		model: 	a PackageTreeNautilusUI
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(344719360)
		scroller: 	a TransformMorph(735313920)
		getMenuSelector: 	#sourceCodeMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(65273856)
		textMorph: 	a TextMorphForEditView(509870080)
		getTextSelector: 	#sourceCodeFrom:
		setTextSelector: 	#compileSource:notifying:
		getSelectionSelector: 	#contentsSelectionFrom:
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(565 to: 564)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil
		doubleClickSelector: 	nil
		setSelectionSelector: 	nil
		alertLimit: 	700
		locked: 	false
		warningLimit: 	350
		method: 	nil
		lockIcon: 	an AlphaImageMorph(499908608)
		canLockChangeSelector: 	#canChangeLockFor:
		lockSelector: 	#lockTextArea:from:


PluggableTextMorphWithLimits(PluggableTextMorph)>>doIt
	Receiver: a PluggableTextMorphWithLimits(303038464)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(30.0@455.0) corner: (876.0@849.0)
		owner: 	a MultipleMethodsEditor(286261248)
		submorphs: 	an Array(an AlphaImageMorph(499908608) a TransformMorph(735313920))
		fullBounds: 	(30@455) corner: (876@849)
		color: 	Color white
		extension: 	a MorphExtension (488636416) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.784 g: 0.784 b: 0.784 alpha: 1.0)
		model: 	a PackageTreeNautilusUI
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(344719360)
		scroller: 	a TransformMorph(735313920)
		getMenuSelector: 	#sourceCodeMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(65273856)
		textMorph: 	a TextMorphForEditView(509870080)
		getTextSelector: 	#sourceCodeFrom:
		setTextSelector: 	#compileSource:notifying:
		getSelectionSelector: 	#contentsSelectionFrom:
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(565 to: 564)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil
		doubleClickSelector: 	nil
		setSelectionSelector: 	nil
		alertLimit: 	700
		locked: 	false
		warningLimit: 	350
		method: 	nil
		lockIcon: 	an AlphaImageMorph(499908608)
		canLockChangeSelector: 	#canChangeLockFor:
		lockSelector: 	#lockTextArea:from:


[ :target | target sourceTextArea doIt ] in AbstractNautilusUI class>>buildEditorKeymappingsOn:
	Receiver: AbstractNautilusUI
	Arguments and temporary variables: 
		aBuilder: 	a PragmaMenuAndShortcutRegistration
		target: 	a PackageTreeNautilusUI
	Receiver's instance variables: 
		superclass: 	AbstractTool
		methodDict: 	a MethodDictionary(size 430)
		format: 	180
		layout: 	a FixedLayout
		instanceVariables: 	#(#model #window #hierarchyClass #cachedHierarchy #sourceTex...etc...
		organization: 	a ClassOrganization
		subclasses: 	{NautilusUI}
		name: 	#AbstractNautilusUI
		classPool: 	a Dictionary(#ClassesIconsCache->a WeakIdentityKeyDictionary(UnixOSP...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#Nautilus
		traitComposition: 	{}
		localSelectors: 	nil


BlockClosure>>cull:
	Receiver: [ :target | target sourceTextArea doIt ]
	Arguments and temporary variables: 
		anArg: 	a PackageTreeNautilusUI
	Receiver's instance variables: 
		outerContext: 	AbstractNautilusUI class>>buildEditorKeymappingsOn:
		startpc: 	468
		numArgs: 	1


BlockClosure>>cull:cull:
	Receiver: [ :target | target sourceTextArea doIt ]
	Arguments and temporary variables: 
		firstArg: 	a PackageTreeNautilusUI
		secondArg: 	a PluggableTextMorphWithLimits(303038464)
	Receiver's instance variables: 
		outerContext: 	AbstractNautilusUI class>>buildEditorKeymappingsOn:
		startpc: 	468
		numArgs: 	1


BlockClosure>>cull:cull:cull:
	Receiver: [ :target | target sourceTextArea doIt ]
	Arguments and temporary variables: 
		firstArg: 	a PackageTreeNautilusUI
		secondArg: 	a PluggableTextMorphWithLimits(303038464)
		thirdArg: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		outerContext: 	AbstractNautilusUI class>>buildEditorKeymappingsOn:
		startpc: 	468
		numArgs: 	1


KMCategoryBinding>>completeMatch:buffer:
	Receiver: aKMCategoryTarget(#NautilusSourceCodeShortcuts)
	Arguments and temporary variables: 
		aKeymap: 	#doIt on Cmd + D do [ :target | target sourceTextArea doIt ]

		aBuffer: 	an OrderedCollection([keystroke '<Cmd-d>'])
	Receiver's instance variables: 
		target: 	a PackageTreeNautilusUI
		category: 	a KMCategory
		morph: 	a PluggableTextMorphWithLimits(303038464)


[ :l | l completeMatch: self buffer: aBuffer ] in KMKeymap>>notifyCompleteMatchTo:buffer:
	Receiver: #doIt on Cmd + D do [ :target | target sourceTextArea doIt ]

	Arguments and temporary variables: 
		aListener: 	an Array(aKMCategoryTarget(#NautilusSourceCodeShortcuts) a KMDispatc...etc...
		aBuffer: 	an OrderedCollection([keystroke '<Cmd-d>'])
		listeners: 	an Array(aKMCategoryTarget(#NautilusSourceCodeShortcuts) a KMDispatc...etc...
		l: 	aKMCategoryTarget(#NautilusSourceCodeShortcuts)
	Receiver's instance variables: 
		action: 	[ :target | target sourceTextArea doIt ]
		name: 	#doIt
		shortcut: 	Cmd + D
		defaultShortcut: 	Cmd + D
		description: 	''


Array(SequenceableCollection)>>do:
	Receiver: an Array(aKMCategoryTarget(#NautilusSourceCodeShortcuts) a KMDispatcher)
	Arguments and temporary variables: 
		aBlock: 	[ :l | l completeMatch: self buffer: aBuffer ]
		index: 	1
	Receiver's instance variables: 
an Array(aKMCategoryTarget(#NautilusSourceCodeShortcuts) a KMDispatcher)

KMKeymap>>notifyCompleteMatchTo:buffer:
	Receiver: #doIt on Cmd + D do [ :target | target sourceTextArea doIt ]

	Arguments and temporary variables: 
		aListener: 	an Array(aKMCategoryTarget(#NautilusSourceCodeShortcuts) a KMDispatc...etc...
		aBuffer: 	an OrderedCollection([keystroke '<Cmd-d>'])
		listeners: 	an Array(aKMCategoryTarget(#NautilusSourceCodeShortcuts) a KMDispatc...etc...
	Receiver's instance variables: 
		action: 	[ :target | target sourceTextArea doIt ]
		name: 	#doIt
		shortcut: 	Cmd + D
		defaultShortcut: 	Cmd + D
		description: 	''


KMKeymap>>onMatchWith:notify:andDo:
	Receiver: #doIt on Cmd + D do [ :target | target sourceTextArea doIt ]

	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-d>'])
		aMatchListener: 	an Array(aKMCategoryTarget(#NautilusSourceCodeShortcuts) a KMDi...etc...
		anAction: 	[ ^ self ]
	Receiver's instance variables: 
		action: 	[ :target | target sourceTextArea doIt ]
		name: 	#doIt
		shortcut: 	Cmd + D
		defaultShortcut: 	Cmd + D
		description: 	''


[ :entry | entry onMatchWith: anEventBuffer notify: aMatchListener andDo: aBlock ] in KMCategory>>onMatchWith:notify:andDo:
	Receiver: a KMCategory
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-d>'])
		aMatchListener: 	an Array(aKMCategoryTarget(#NautilusSourceCodeShortcuts) a KMDi...etc...
		aBlock: 	[ ^ self ]
		entry: 	#doIt on Cmd + D do [ :target | target sourceTextArea doIt ]

	Receiver's instance variables: 
		name: 	#NautilusSourceCodeShortcuts
		platforms: 	a Dictionary(#Unix->a KMStorage #all->a KMStorage )


Set>>do:
	Receiver: a Set(#cancel on Cmd + L do [ :target | target sourceTextArea cancelWithoutConfirmation ]
...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :entry | entry onMatchWith: anEventBuffer notify: aMatchListener andD...etc...
		index: 	31
		each: 	#doIt on Cmd + D do [ :target | target sourceTextArea doIt ]

	Receiver's instance variables: 
		tally: 	23
		array: 	an Array(#cancel on Cmd + L do [ :target | target sourceTextArea cancelW...etc...


KMCategory>>onMatchWith:notify:andDo:
	Receiver: a KMCategory
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-d>'])
		aMatchListener: 	an Array(aKMCategoryTarget(#NautilusSourceCodeShortcuts) a KMDi...etc...
		aBlock: 	[ ^ self ]
	Receiver's instance variables: 
		name: 	#NautilusSourceCodeShortcuts
		platforms: 	a Dictionary(#Unix->a KMStorage #all->a KMStorage )


KMCategoryBinding>>verifyMatchWith:notifying:thenDoing:
	Receiver: aKMCategoryTarget(#NautilusSourceCodeShortcuts)
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-d>'])
		aListener: 	a KMDispatcher
		anAction: 	[ ^ self ]
	Receiver's instance variables: 
		target: 	a PackageTreeNautilusUI
		category: 	a KMCategory
		morph: 	a PluggableTextMorphWithLimits(303038464)


[ :aTarget | 
"nice hack to stop in the first listener"
aTarget verifyMatchWith: anEventBuffer notifying: self thenDoing: [ ^ self ] ] in KMDispatcher>>dispatch:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-d>'])
		association: 	nil
		match: 	nil
		aTarget: 	aKMCategoryTarget(#NautilusSourceCodeShortcuts)
	Receiver's instance variables: 
		target: 	a KMTarget
		currentEvent: 	nil
		targets: 	a Set(aKMCategoryTarget(#SmalltalkEditor) aKMCategoryTarget(#TextEdito...etc...
		morph: 	a PluggableTextMorphWithLimits(303038464)
		directKeymaps: 	a KMCategory


OrderedCollection>>do:
	Receiver: an OrderedCollection(aKMCategoryTarget(nil) aKMCategoryTarget(#SmalltalkEditor) aKMCategor...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :aTarget | 
"nice hack to stop in the first listener"
aTarget verifyM...etc...
		index: 	7
	Receiver's instance variables: 
		array: 	an Array(aKMCategoryTarget(nil) aKMCategoryTarget(#SmalltalkEditor) aKMC...etc...
		firstIndex: 	1
		lastIndex: 	8


KMDispatcher>>dispatch:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-d>'])
		association: 	nil
		match: 	nil
	Receiver's instance variables: 
		target: 	a KMTarget
		currentEvent: 	nil
		targets: 	a Set(aKMCategoryTarget(#SmalltalkEditor) aKMCategoryTarget(#TextEdito...etc...
		morph: 	a PluggableTextMorphWithLimits(303038464)
		directKeymaps: 	a KMCategory


KMTarget>>dispatch:
	Receiver: a KMTarget
	Arguments and temporary variables: 
		buffer: 	an OrderedCollection([keystroke '<Cmd-d>'])
	Receiver's instance variables: 
		realTarget: 	nil
		morph: 	a PluggableTextMorphWithLimits(303038464)
		targetSelector: 	#yourself
		directKeymaps: 	nil
		perInstanceCategories: 	nil


[ :targetToDispatch | 
targetToDispatch dispatch: KMBuffer uniqueInstance buffer copy.
aKeyboardEvent wasHandled
	ifTrue: [ ^ self ] ] in KMDispatchChain>>dispatch:
	Receiver: a KMDispatchChain
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-d>']
		targetToDispatch: 	a KMTarget
	Receiver's instance variables: 
		target: 	a KMTarget
		dispatcher: 	a KMDispatcher
		initialTarget: 	a KmGlobalDispatcher


KMDispatchChain>>do:
	Receiver: a KMDispatchChain
	Arguments and temporary variables: 
		aBlock: 	[ :targetToDispatch | 
targetToDispatch dispatch: KMBuffer uniqueInstan...etc...
		currentTarget: 	a KMTarget
	Receiver's instance variables: 
		target: 	a KMTarget
		dispatcher: 	a KMDispatcher
		initialTarget: 	a KmGlobalDispatcher


KMDispatchChain>>dispatch:
	Receiver: a KMDispatchChain
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		target: 	a KMTarget
		dispatcher: 	a KMDispatcher
		initialTarget: 	a KmGlobalDispatcher


KMDispatcher>>dispatchKeystroke:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		aKeyEvent: 	[keystroke '<Cmd-d>']
		chain: 	a KMDispatchChain
	Receiver's instance variables: 
		target: 	a KMTarget
		currentEvent: 	nil
		targets: 	a Set(aKMCategoryTarget(#TextMorph) aKMCategoryTarget(#MorphFocusCtrlN...etc...
		morph: 	a TextMorphForEditView(509870080)
		directKeymaps: 	a KMCategory


TextMorphForEditView(Morph)>>dispatchKeystrokeForEvent:
	Receiver: a TextMorphForEditView(509870080)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (838@325)
		owner: 	a TransformMorph(735313920)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (838@325)
		color: 	Color black
		extension: 	a MorphExtension (552599552) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Source Code Pro
		text: 	a Text for 'runShellScriptAbsolutePath: script arguments: anArray
| outpu...etc...
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		defaultColor: 	Color black
		editView: 	a PluggableTextMorphWithLimits(303038464)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


TextMorphForEditView(TextMorph)>>handleKeystroke:
	Receiver: a TextMorphForEditView(509870080)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-d>']
		pasteUp: 	nil
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (838@325)
		owner: 	a TransformMorph(735313920)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (838@325)
		color: 	Color black
		extension: 	a MorphExtension (552599552) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Source Code Pro
		text: 	a Text for 'runShellScriptAbsolutePath: script arguments: anArray
| outpu...etc...
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		defaultColor: 	Color black
		editView: 	a PluggableTextMorphWithLimits(303038464)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


KeyboardEvent>>sentTo:
	Receiver: [keystroke '<Cmd-d>']
	Arguments and temporary variables: 
		anObject: 	a TextMorphForEditView(509870080)
	Receiver's instance variables: 
		timeStamp: 	9207267
		source: 	a HandMorph(760479744)
		windowIndex: 	nil
		type: 	#keystroke
		buttons: 	64
		position: 	(109@147)
		handler: 	nil
		wasHandled: 	true
		keyValue: 	100
		charCode: 	100
		scanCode: 	100


TextMorphForEditView(Morph)>>handleEvent:
	Receiver: a TextMorphForEditView(509870080)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (838@325)
		owner: 	a TransformMorph(735313920)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (838@325)
		color: 	Color black
		extension: 	a MorphExtension (552599552) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Source Code Pro
		text: 	a Text for 'runShellScriptAbsolutePath: script arguments: anArray
| outpu...etc...
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		defaultColor: 	Color black
		editView: 	a PluggableTextMorphWithLimits(303038464)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


TextMorphForEditView(Morph)>>handleFocusEvent:
	Receiver: a TextMorphForEditView(509870080)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (838@325)
		owner: 	a TransformMorph(735313920)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (838@325)
		color: 	Color black
		extension: 	a MorphExtension (552599552) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Source Code Pro
		text: 	a Text for 'runShellScriptAbsolutePath: script arguments: anArray
| outpu...etc...
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		defaultColor: 	Color black
		editView: 	a PluggableTextMorphWithLimits(303038464)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-d>']
		focusHolder: 	a TextMorphForEditView(509870080)
		aBlock: 	[ self keyboardFocus: nil ]
		w: 	a WorldMorph(511705088) [world]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(135@594) corner: (151@610)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(135@594) corner: (151@610)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	a TextMorphForEditView(509870080)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(143@603) mouseOver nil nil]
		targetOffset: 	(1@164)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	Form(16x16x8)
		temporaryCursorOffset: 	(-8@ -9)
		hardwareCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r...etc...
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 9199767 143 603 0 0 0 1)
		lastKeyScanCode: 	100
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	8


BlockClosure>>on:do:
	Receiver: [ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (an...etc...
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :ex | 
ActiveWorld := priorWorld.
ActiveEvent := priorEvent.
A...etc...
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	HandMorph>>sendFocusEvent:to:clear:
		startpc: 	67
		numArgs: 	0


WorldMorph(PasteUpMorph)>>becomeActiveDuring:
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 
		aBlock: 	[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder ha...etc...
		priorWorld: 	a WorldMorph(511705088) [world]
		priorHand: 	a HandMorph(760479744)
		priorEvent: 	nil
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1855@1056)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a NautilusWindow(542638080) a Sys...etc...
		fullBounds: 	(0@0) corner: (1855@1056)
		color: 	Color white
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		result: 	nil
		anEvent: 	[keystroke '<Cmd-d>']
		focusHolder: 	a TextMorphForEditView(509870080)
		aBlock: 	[ self keyboardFocus: nil ]
		w: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		bounds: 	(135@594) corner: (151@610)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(135@594) corner: (151@610)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	a TextMorphForEditView(509870080)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(143@603) mouseOver nil nil]
		targetOffset: 	(1@164)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	Form(16x16x8)
		temporaryCursorOffset: 	(-8@ -9)
		hardwareCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r...etc...
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 9199767 143 603 0 0 0 1)
		lastKeyScanCode: 	100
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	8



--- The full stack ---
DIUtil class>>DoIt
OpalCompiler>>evaluate
SmalltalkEditor>>evaluateSelectionAndDo:
SmalltalkEditor>>evaluateSelection
[ textMorph editor evaluateSelection ] in PluggableTextMorphWithLimits(PluggableTextMorph)>>doIt
[ result := editBlock value ] in PluggableTextMorphWithLimits(PluggableTextMorph)>>handleEdit:
TextMorphForEditView(TextMorph)>>handleEdit:
PluggableTextMorphWithLimits(PluggableTextMorph)>>handleEdit:
PluggableTextMorphWithLimits(PluggableTextMorph)>>doIt
[ :target | target sourceTextArea doIt ] in AbstractNautilusUI class>>buildEditorKeymappingsOn:
BlockClosure>>cull:
BlockClosure>>cull:cull:
BlockClosure>>cull:cull:cull:
KMCategoryBinding>>completeMatch:buffer:
[ :l | l completeMatch: self buffer: aBuffer ] in KMKeymap>>notifyCompleteMatchTo:buffer:
Array(SequenceableCollection)>>do:
KMKeymap>>notifyCompleteMatchTo:buffer:
KMKeymap>>onMatchWith:notify:andDo:
[ :entry | entry onMatchWith: anEventBuffer notify: aMatchListener andDo: aBlock ] in KMCategory>>onMatchWith:notify:andDo:
Set>>do:
KMCategory>>onMatchWith:notify:andDo:
KMCategoryBinding>>verifyMatchWith:notifying:thenDoing:
[ :aTarget | 
"nice hack to stop in the first listener"
aTarget verifyMatchWith: anEventBuffer notifying: self thenDoing: [ ^ self ] ] in KMDispatcher>>dispatch:
OrderedCollection>>do:
KMDispatcher>>dispatch:
KMTarget>>dispatch:
[ :targetToDispatch | 
targetToDispatch dispatch: KMBuffer uniqueInstance buffer copy.
aKeyboardEvent wasHandled
	ifTrue: [ ^ self ] ] in KMDispatchChain>>dispatch:
KMDispatchChain>>do:
KMDispatchChain>>dispatch:
KMDispatcher>>dispatchKeystroke:
TextMorphForEditView(Morph)>>dispatchKeystrokeForEvent:
TextMorphForEditView(TextMorph)>>handleKeystroke:
KeyboardEvent>>sentTo:
TextMorphForEditView(Morph)>>handleEvent:
TextMorphForEditView(Morph)>>handleFocusEvent:
[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendKeyboardEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ 
World doOneCycle.
Processor yield.
false ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Halt
24 February 2015 2:28:14.11523 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
NBCogit NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
https://github.com/pharo-project/pharo-vm.git Commit: 4a0d556150d478ff2de3c9624d2f18e6eaa3fa5c Date: 2014-12-18 18:42:53 +0100 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14893

Image: Pharo3.0 [Latest update: #30863]

DIUtil class>>runShellScriptAbsolutePath:arguments:
	Receiver: DIUtil
	Arguments and temporary variables: 
		script: 	'/home/otruffer/dicto/bin/tools/phpda/configs/modelScript-1424784494.sh...etc...
		anArray: 	#()
		output: 	MultiByteFileStream: '/home/otruffer/dicto/bin/dicto-engine/shell-outpu...etc...
		error: 	MultiByteFileStream: '/home/otruffer/dicto/bin/dicto-engine/shell-error....etc...
		desc: 	an Array(nil MultiByteFileStream: '/home/otruffer/dicto/bin/dicto-engine/...etc...
		cmd: 	'/home/otruffer/dicto/bin/tools/phpda/configs/modelScript-1424784494.sh'
		p: 	nil
		d: 	nil
		proc: 	nil
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary()
		format: 	2
		layout: 	a FixedLayout
		instanceVariables: 	#()
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#DIUtil
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Dicto-var-util'
		traitComposition: 	{}
		localSelectors: 	nil


DIPhpModel>>_createModelFile
	Receiver: a DIPhpModel
	Arguments and temporary variables: 

	Receiver's instance variables: 
		defRules: 	a DICollectionRule()
		defVars: 	a DICollectionVar(SYSTEM)
		analysisID: 	'1424784494'
		additionalProperties: 	a Dictionary()
		ruleCounter: 	0
		varCounter: 	0
		defVarElements: 	a DICollectionVarElements()
		defVarInvertedElements: 	a DICollectionVarElements()
		model: 	nil


DIPhpModel>>_loadPhpModel
	Receiver: a DIPhpModel
	Arguments and temporary variables: 

	Receiver's instance variables: 
		defRules: 	a DICollectionRule()
		defVars: 	a DICollectionVar(SYSTEM)
		analysisID: 	'1424784494'
		additionalProperties: 	a Dictionary()
		ruleCounter: 	0
		varCounter: 	0
		defVarElements: 	a DICollectionVarElements()
		defVarInvertedElements: 	a DICollectionVarElements()
		model: 	nil


DIPhpModel>>model
	Receiver: a DIPhpModel
	Arguments and temporary variables: 

	Receiver's instance variables: 
		defRules: 	a DICollectionRule()
		defVars: 	a DICollectionVar(SYSTEM)
		analysisID: 	'1424784494'
		additionalProperties: 	a Dictionary()
		ruleCounter: 	0
		varCounter: 	0
		defVarElements: 	a DICollectionVarElements()
		defVarInvertedElements: 	a DICollectionVarElements()
		model: 	nil


DIVarPhpClass>>allElements
	Receiver: BibEntry
	Arguments and temporary variables: 

	Receiver's instance variables: 
		isFirst: 	false
		dslText: 	'BibEntry=PhpClass with name:"ilBibliographicEntry"'
		type: 	'PhpClass'
		id: 	1
		entity: 	nil
		name: 	'BibEntry'
		specifiers: 	an OrderedCollection(name=ilBibliographicEntry)
		isInverted: 	false
		elements: 	a DICollectionVarElements()
		invertedElements: 	a DICollectionVarElements()


DIVarPhpClass(DIVar)>>elements
	Receiver: BibEntry
	Arguments and temporary variables: 
		valid: 	nil
	Receiver's instance variables: 
		isFirst: 	false
		dslText: 	'BibEntry=PhpClass with name:"ilBibliographicEntry"'
		type: 	'PhpClass'
		id: 	1
		entity: 	nil
		name: 	'BibEntry'
		specifiers: 	an OrderedCollection(name=ilBibliographicEntry)
		isInverted: 	false
		elements: 	a DICollectionVarElements()
		invertedElements: 	a DICollectionVarElements()


DISimpleRule>>subjectElements
	Receiver: BibEntry cannot depend on BibObj
	Arguments and temporary variables: 
		subjectElements: 	nil
	Receiver's instance variables: 
		isFirst: 	nil
		dslText: 	'BibEntry cannot depend on BibObj'
		type: 	#cannot
		id: 	1001
		entity: 	nil
		subjects: 	an Array(BibEntry)
		predicates: 	an Array(depend on BibObj)
		subRules: 	nil
		candidateAdapters: 	a SortedCollection(DIPhpDependencies)
		chosenAdapter: 	DIPhpDependencies
		hasFailed: 	false
		failureMessage: 	''
		failingPredicates: 	a Set()
		hasSubjectInverted: 	false
		hasPredicateInverted: 	false


printRulesEntityRelationship: someRules
	| res processedPredicates |
	res := ''.
	processedPredicates := Set new.
	someRules
		do: [ :rule | 
			| predicateSelector subjectElements argumentElements data isPredicateInv isSubjectInv |
			predicateSelector := (rule predicate nameNormalized , ':') asSymbol.
			isPredicateInv := rule hasPredicateInverted.
			isSubjectInv := rule hasSubjectInverted.
			subjectElements := rule subjectElements.
			argumentElements := rule argumentElements.
			subjectElements
				do: [ :subject | 
					argumentElements
						do: [ :argument | 
							| relId spec msgPass msgFail |
							relId := subject id , '-' , argument id.
							msgPass := subject id , '.' , rule predicate name , '(' , argument id , ')=True'.
							msgFail := subject id , '.' , rule predicate name , '(' , argument id , ')=False'.
							(processedPredicates includes: relId)
								ifFalse: [ 
									data := {(#subject -> subject value).
									(#argument -> argument value).
									(#ruleId -> rule id).
									(#propertyId -> relId).
									(#msgPass -> msgPass).
									(#msgFail -> msgFail)} asDictionary.
									spec := self perform: predicateSelector withArguments: {data}.
									spec := spec
										dictoReplace:
											{('$subject' -> subject value).
											('$argument' -> argument value).
											('$ruleId' -> rule id).
											('$propertyId' -> relId).
											('$msgPass' -> msgPass).
											('$msgFail' -> msgFail)}.
									res := res , spec ].	"avoid duplicate predicate evaluations"
							processedPredicates add: relId ] ] ].
	^ res in DIPhpDependencies(DIAdapter)>>printRulesEntityRelationship:
	Receiver: a DIPhpDependencies
	Arguments and temporary variables: 
		someRules: 	a DICollectionRule(BibEntry cannot depend on BibObj BibObj must depe...etc...
		processedPredicates: 	a Set()
		data: 	nil
		res: 	''
		rule: 	BibEntry cannot depend on BibObj
		predicateSelector: 	#dependOn:
		subjectElements: 	nil
		argumentElements: 	nil
		isPredicateInv: 	false
		isSubjectInv: 	false
	Receiver's instance variables: 
		output: 	''
		commandOutput: 	''
		NEWLINE: 	'
'
		rules: 	a DICollectionRule(BibEntry cannot depend on BibObj BibObj must depend o...etc...
		varSynonyms: 	nil
		sessionId: 	'1424784494'
		TIMESTAMP: 	'1424784494'
		TOOLNAME: 	'DIPhpDependencies'
		PROJECTROOT: 	'/var/www/ilias_50/'
		PROJECTSRC: 	'./'
		PROJECTBIN: 	'./'
		RESULTFILE: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/ilias-test/14247...etc...
		TESTFILE: 	nil
		testInputFileExt: 	'.st'
		SYSTEM: 	SYSTEM


DICollectionRule(OrderedCollection)>>do:
	Receiver: a DICollectionRule(BibEntry cannot depend on BibObj BibObj must depend on BibEntry BibObj ...etc...
	Arguments and temporary variables: 
		aBlock: 	printRulesEntityRelationship: someRules
	| res processedPredicates |
	r...etc...
		index: 	1
	Receiver's instance variables: 
		array: 	an Array(BibEntry cannot depend on BibObj BibObj must depend on BibEntry...etc...
		firstIndex: 	1
		lastIndex: 	3
		elements: 	nil
		elements: 	nil


DIPhpDependencies(DIAdapter)>>printRulesEntityRelationship:
	Receiver: a DIPhpDependencies
	Arguments and temporary variables: 
		res: 	''
		someRules: 	a DICollectionRule(BibEntry cannot depend on BibObj BibObj must depe...etc...
		processedPredicates: 	a Set()
	Receiver's instance variables: 
		output: 	''
		commandOutput: 	''
		NEWLINE: 	'
'
		rules: 	a DICollectionRule(BibEntry cannot depend on BibObj BibObj must depend o...etc...
		varSynonyms: 	nil
		sessionId: 	'1424784494'
		TIMESTAMP: 	'1424784494'
		TOOLNAME: 	'DIPhpDependencies'
		PROJECTROOT: 	'/var/www/ilias_50/'
		PROJECTSRC: 	'./'
		PROJECTBIN: 	'./'
		RESULTFILE: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/ilias-test/14247...etc...
		TESTFILE: 	nil
		testInputFileExt: 	'.st'
		SYSTEM: 	SYSTEM


DIPhpDependencies(DIAdapter)>>printRules
	Receiver: a DIPhpDependencies
	Arguments and temporary variables: 
		res: 	nil
		allRules: 	a DICollectionRule(BibEntry cannot depend on BibObj BibObj must depen...etc...
	Receiver's instance variables: 
		output: 	''
		commandOutput: 	''
		NEWLINE: 	'
'
		rules: 	a DICollectionRule(BibEntry cannot depend on BibObj BibObj must depend o...etc...
		varSynonyms: 	nil
		sessionId: 	'1424784494'
		TIMESTAMP: 	'1424784494'
		TOOLNAME: 	'DIPhpDependencies'
		PROJECTROOT: 	'/var/www/ilias_50/'
		PROJECTSRC: 	'./'
		PROJECTBIN: 	'./'
		RESULTFILE: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/ilias-test/14247...etc...
		TESTFILE: 	nil
		testInputFileExt: 	'.st'
		SYSTEM: 	SYSTEM


DIPhpDependencies>>testInput
	Receiver: a DIPhpDependencies
	Arguments and temporary variables: 
		strRules: 	nil
	Receiver's instance variables: 
		output: 	''
		commandOutput: 	''
		NEWLINE: 	'
'
		rules: 	a DICollectionRule(BibEntry cannot depend on BibObj BibObj must depend o...etc...
		varSynonyms: 	nil
		sessionId: 	'1424784494'
		TIMESTAMP: 	'1424784494'
		TOOLNAME: 	'DIPhpDependencies'
		PROJECTROOT: 	'/var/www/ilias_50/'
		PROJECTSRC: 	'./'
		PROJECTBIN: 	'./'
		RESULTFILE: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/ilias-test/14247...etc...
		TESTFILE: 	nil
		testInputFileExt: 	'.st'
		SYSTEM: 	SYSTEM


DITestGroup>>build
	Receiver: a DITestGroup
	Arguments and temporary variables: 

	Receiver's instance variables: 
		rules: 	an OrderedCollection(BibEntry cannot depend on BibObj BibObj must depend...etc...
		adapter: 	a DIPhpDependencies
		runCommandText: 	nil
		testSpecification: 	nil
		adapterID: 	'DIPhpDependencies'
		resultFile: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/ilias-test/14247...etc...
		specificationFile: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/ilias-tes...etc...
		commandFile: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/ilias-test/1424...etc...


[ :testGroup | testGroup build ] in DIDicto>>dictoBuild:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'BibEntry = PhpClass with name:"ilBibliographicEntry"
BibObj = PhpC...etc...
		adapterTestGroups: 	a Dictionary(DIGrepFileContent->a DITestGroup DIJMeterLoadTe...etc...
		testGroup: 	a DITestGroup
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424784494'
		singleShotTask: 	false


Array(SequenceableCollection)>>do:
	Receiver: an Array(a DITestGroup a DITestGroup a DITestGroup a DITestGroup a DITestGroup)
	Arguments and temporary variables: 
		aBlock: 	[ :testGroup | testGroup build ]
		index: 	4
	Receiver's instance variables: 
an Array(a DITestGroup a DITestGroup a DITestGroup a DITestGroup a DITestGroup)

DIDicto>>dictoBuild:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'BibEntry = PhpClass with name:"ilBibliographicEntry"
BibObj = PhpC...etc...
		adapterTestGroups: 	a Dictionary(DIGrepFileContent->a DITestGroup DIJMeterLoadTe...etc...
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424784494'
		singleShotTask: 	false


DIDicto>>dictoRun:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'BibEntry = PhpClass with name:"ilBibliographicEntry"
BibObj = PhpC...etc...
		adapterTestGroups: 	nil
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424784494'
		singleShotTask: 	false


DIDicto>>dictoAll:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'BibEntry = PhpClass with name:"ilBibliographicEntry"
BibObj = PhpC...etc...
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424784494'
		singleShotTask: 	false


[ DIDicto new dictoAll: input ] in DIWebServiceAPI>>getRun
	Receiver: a DIWebServiceAPI
	Arguments and temporary variables: 
		in: 	'/home/otruffer/dicto/bin/analysis/ilias-test/dicto.rules'
		input: 	'BibEntry = PhpClass with name:"ilBibliographicEntry"
BibObj = PhpClass ...etc...
		rulesFailed: 	nil
		rulesTotal: 	nil
	Receiver's instance variables: 
		request: 	nil
		response: 	nil
		variables: 	nil
		delegate: 	nil
		principal: 	nil
		credentials: 	nil


BlockClosure>>on:do:
	Receiver: [ DIDicto new dictoAll: input ]
	Arguments and temporary variables: 
		exception: 	DIException
		handlerAction: 	[ :ex | ^ self error: ex description ]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	DIWebServiceAPI>>getRun
		startpc: 	138
		numArgs: 	0


DIWebServiceAPI>>getRun
	Receiver: a DIWebServiceAPI
	Arguments and temporary variables: 
		in: 	'/home/otruffer/dicto/bin/analysis/ilias-test/dicto.rules'
		input: 	'BibEntry = PhpClass with name:"ilBibliographicEntry"
BibObj = PhpClass ...etc...
		rulesFailed: 	nil
		rulesTotal: 	nil
	Receiver's instance variables: 
		request: 	nil
		response: 	nil
		variables: 	nil
		delegate: 	nil
		principal: 	nil
		credentials: 	nil


DIWebServiceHandler>>post
	Receiver: a DIWebServiceHandler
	Arguments and temporary variables: 
		api: 	a DIWebServiceAPI
	Receiver's instance variables: 
		request: 	a ZnRequest(POST /ilias-test/run)
		response: 	nil
		variables: 	an OrderedCollection('ilias-test' 'run')
		delegate: 	a ZnJSONRestServerDelegate
		principal: 	nil
		credentials: 	nil
		dicto: 	a DIDicto


DIWebServiceHandler(ZnRestCall)>>execute
	Receiver: a DIWebServiceHandler
	Arguments and temporary variables: 

	Receiver's instance variables: 
		request: 	a ZnRequest(POST /ilias-test/run)
		response: 	nil
		variables: 	an OrderedCollection('ilias-test' 'run')
		delegate: 	a ZnJSONRestServerDelegate
		principal: 	nil
		credentials: 	nil
		dicto: 	a DIDicto


[ call execute ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


BlockClosure>>on:do:
	Receiver: [ call execute ]
	Arguments and temporary variables: 
		exception: 	ZnRestCallUnauthorized
		handlerAction: 	[ :exception | self unauthorized: exception request ]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
		startpc: 	38
		numArgs: 	0


ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


[ self execute: call ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /ilias-test/run)
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


BlockClosure>>on:do:
	Receiver: [ self execute: call ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :exception | 
request server debugMode
	ifTrue: [ exception pa...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
		startpc: 	99
		numArgs: 	0


ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /ilias-test/run)
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ :delegate | delegate handleRequest: request ] ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /ilias-test/run)
		delegate: 	a ZnJSONRestServerDelegate
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateRequest:do:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /ilias-test/run)
		block: 	[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ ...etc...
		authenticator: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /ilias-test/run)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream)


[ self authenticateAndDelegateRequest: request ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /ilias-test/run)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream)


BlockClosure>>on:do:
	Receiver: [ self authenticateAndDelegateRequest: request ]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :exception | 
self debugMode
	ifTrue: [ exception pass ]
	ifFa...etc...
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequ...etc...
		startpc: 	58
		numArgs: 	0


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /ilias-test/run)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /ilias-test/run)
		response: 	nil
		initialMilliseconds: 	9294309
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeOneRequestResponseOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		stream: 	a ZdcSocketStream
		request: 	a ZnRequest(POST /ilias-test/run)
		response: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream)


[ self executeOneRequestResponseOn: stream ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		stream: 	a ZdcSocketStream
		request: 	nil
		response: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream)


[ 
p psValueAt: index put: anObject.
aBlock value ] in ZnCurrentServer(DynamicVariable)>>value:during:
	Receiver: a ZnCurrentServer
	Arguments and temporary variables: 
		anObject: 	a ZnManagingMultiThreadedServer(running 8010)
		aBlock: 	[ self executeOneRequestResponseOn: stream ]
		p: 	a Process in nil
		oldValue: 	nil
	Receiver's instance variables: 
		index: 	5



--- The full stack ---
DIUtil class>>runShellScriptAbsolutePath:arguments:
DIPhpModel>>_createModelFile
DIPhpModel>>_loadPhpModel
DIPhpModel>>model
DIVarPhpClass>>allElements
DIVarPhpClass(DIVar)>>elements
DISimpleRule>>subjectElements
printRulesEntityRelationship: someRules
	| res processedPredicates |
	res := ''.
	processedPredicates := Set new.
	someRules
		do: [ :rule | 
			| predicateSelector subjectElements argumentElements data isPredicateInv isSubjectInv |
			predicateSelector := (rule predicate nameNormalized , ':') asSymbol.
			isPredicateInv := rule hasPredicateInverted.
			isSubjectInv := rule hasSubjectInverted.
			subjectElements := rule subjectElements.
			argumentElements := rule argumentElements.
			subjectElements
				do: [ :subject | 
					argumentElements
						do: [ :argument | 
							| relId spec msgPass msgFail |
							relId := subject id , '-' , argument id.
							msgPass := subject id , '.' , rule predicate name , '(' , argument id , ')=True'.
							msgFail := subject id , '.' , rule predicate name , '(' , argument id , ')=False'.
							(processedPredicates includes: relId)
								ifFalse: [ 
									data := {(#subject -> subject value).
									(#argument -> argument value).
									(#ruleId -> rule id).
									(#propertyId -> relId).
									(#msgPass -> msgPass).
									(#msgFail -> msgFail)} asDictionary.
									spec := self perform: predicateSelector withArguments: {data}.
									spec := spec
										dictoReplace:
											{('$subject' -> subject value).
											('$argument' -> argument value).
											('$ruleId' -> rule id).
											('$propertyId' -> relId).
											('$msgPass' -> msgPass).
											('$msgFail' -> msgFail)}.
									res := res , spec ].	"avoid duplicate predicate evaluations"
							processedPredicates add: relId ] ] ].
	^ res in DIPhpDependencies(DIAdapter)>>printRulesEntityRelationship:
DICollectionRule(OrderedCollection)>>do:
DIPhpDependencies(DIAdapter)>>printRulesEntityRelationship:
DIPhpDependencies(DIAdapter)>>printRules
DIPhpDependencies>>testInput
DITestGroup>>build
[ :testGroup | testGroup build ] in DIDicto>>dictoBuild:
Array(SequenceableCollection)>>do:
DIDicto>>dictoBuild:
DIDicto>>dictoRun:
DIDicto>>dictoAll:
[ DIDicto new dictoAll: input ] in DIWebServiceAPI>>getRun
BlockClosure>>on:do:
DIWebServiceAPI>>getRun
DIWebServiceHandler>>post
DIWebServiceHandler(ZnRestCall)>>execute
[ call execute ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
BlockClosure>>on:do:
ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
[ self execute: call ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
BlockClosure>>on:do:
ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ :delegate | delegate handleRequest: request ] ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateRequest:do:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
[ self authenticateAndDelegateRequest: request ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
BlockClosure>>on:do:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequest:
ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeOneRequestResponseOn:
[ self executeOneRequestResponseOn: stream ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
[ 
p psValueAt: index put: anObject.
aBlock value ] in ZnCurrentServer(DynamicVariable)>>value:during:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
BlockClosure>>ensure:
ZnCurrentServer(DynamicVariable)>>value:during:
ZnCurrentServer class(DynamicVariable class)>>value:during:
ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
[ self executeRequestResponseLoopOn: stream ] in [ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ] in [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
BlockClosure>>ensure:
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ] in [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
BlockClosure>>ifCurtailed:
[ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Halt
24 February 2015 2:42:16.009851 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
NBCogit NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
https://github.com/pharo-project/pharo-vm.git Commit: 4a0d556150d478ff2de3c9624d2f18e6eaa3fa5c Date: 2014-12-18 18:42:53 +0100 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14893

Image: Pharo3.0 [Latest update: #30863]

DIUtil class>>runShellScriptAbsolutePath:arguments:
	Receiver: DIUtil
	Arguments and temporary variables: 
		script: 	'/home/otruffer/dicto/bin/tools/phpda/configs/modelScript-1424784494.sh...etc...
		anArray: 	#()
		output: 	MultiByteFileStream: '/home/otruffer/dicto/bin/dicto-engine/shell-outpu...etc...
		error: 	MultiByteFileStream: '/home/otruffer/dicto/bin/dicto-engine/shell-error....etc...
		desc: 	an Array(nil MultiByteFileStream: '/home/otruffer/dicto/bin/dicto-engine/...etc...
		cmd: 	'/home/otruffer/dicto/bin/tools/phpda/configs/modelScript-1424784494.sh'
		p: 	a UnixProcess with pid 12195
		d: 	a Delay(50 msecs)
		proc: 	an ExternalUnixOSProcess with pid 16202 on /home/otruffer/dicto/bin/tools...etc...
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary()
		format: 	2
		layout: 	a FixedLayout
		instanceVariables: 	#()
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#DIUtil
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Dicto-var-util'
		traitComposition: 	{}
		localSelectors: 	nil


DIPhpModel>>_createModelFile
	Receiver: a DIPhpModel
	Arguments and temporary variables: 

	Receiver's instance variables: 
		defRules: 	a DICollectionRule()
		defVars: 	a DICollectionVar(SYSTEM)
		analysisID: 	'1424784494'
		additionalProperties: 	a Dictionary()
		ruleCounter: 	0
		varCounter: 	0
		defVarElements: 	a DICollectionVarElements()
		defVarInvertedElements: 	a DICollectionVarElements()
		model: 	nil


DIPhpModel>>_loadPhpModel
	Receiver: a DIPhpModel
	Arguments and temporary variables: 

	Receiver's instance variables: 
		defRules: 	a DICollectionRule()
		defVars: 	a DICollectionVar(SYSTEM)
		analysisID: 	'1424784494'
		additionalProperties: 	a Dictionary()
		ruleCounter: 	0
		varCounter: 	0
		defVarElements: 	a DICollectionVarElements()
		defVarInvertedElements: 	a DICollectionVarElements()
		model: 	nil


DIPhpModel>>model
	Receiver: a DIPhpModel
	Arguments and temporary variables: 

	Receiver's instance variables: 
		defRules: 	a DICollectionRule()
		defVars: 	a DICollectionVar(SYSTEM)
		analysisID: 	'1424784494'
		additionalProperties: 	a Dictionary()
		ruleCounter: 	0
		varCounter: 	0
		defVarElements: 	a DICollectionVarElements()
		defVarInvertedElements: 	a DICollectionVarElements()
		model: 	nil


DIVarPhpClass>>allElements
	Receiver: BibEntry
	Arguments and temporary variables: 

	Receiver's instance variables: 
		isFirst: 	false
		dslText: 	'BibEntry=PhpClass with name:"ilBibliographicEntry"'
		type: 	'PhpClass'
		id: 	1
		entity: 	nil
		name: 	'BibEntry'
		specifiers: 	an OrderedCollection(name=ilBibliographicEntry)
		isInverted: 	false
		elements: 	a DICollectionVarElements()
		invertedElements: 	a DICollectionVarElements()


DIVarPhpClass(DIVar)>>elements
	Receiver: BibEntry
	Arguments and temporary variables: 
		valid: 	nil
	Receiver's instance variables: 
		isFirst: 	false
		dslText: 	'BibEntry=PhpClass with name:"ilBibliographicEntry"'
		type: 	'PhpClass'
		id: 	1
		entity: 	nil
		name: 	'BibEntry'
		specifiers: 	an OrderedCollection(name=ilBibliographicEntry)
		isInverted: 	false
		elements: 	a DICollectionVarElements()
		invertedElements: 	a DICollectionVarElements()


DISimpleRule>>subjectElements
	Receiver: BibEntry cannot depend on BibObj
	Arguments and temporary variables: 
		subjectElements: 	nil
	Receiver's instance variables: 
		isFirst: 	nil
		dslText: 	'BibEntry cannot depend on BibObj'
		type: 	#cannot
		id: 	1001
		entity: 	nil
		subjects: 	an Array(BibEntry)
		predicates: 	an Array(depend on BibObj)
		subRules: 	nil
		candidateAdapters: 	a SortedCollection(DIPhpDependencies)
		chosenAdapter: 	DIPhpDependencies
		hasFailed: 	false
		failureMessage: 	''
		failingPredicates: 	a Set()
		hasSubjectInverted: 	false
		hasPredicateInverted: 	false


printRulesEntityRelationship: someRules
	| res processedPredicates |
	res := ''.
	processedPredicates := Set new.
	someRules
		do: [ :rule | 
			| predicateSelector subjectElements argumentElements data isPredicateInv isSubjectInv |
			predicateSelector := (rule predicate nameNormalized , ':') asSymbol.
			isPredicateInv := rule hasPredicateInverted.
			isSubjectInv := rule hasSubjectInverted.
			subjectElements := rule subjectElements.
			argumentElements := rule argumentElements.
			subjectElements
				do: [ :subject | 
					argumentElements
						do: [ :argument | 
							| relId spec msgPass msgFail |
							relId := subject id , '-' , argument id.
							msgPass := subject id , '.' , rule predicate name , '(' , argument id , ')=True'.
							msgFail := subject id , '.' , rule predicate name , '(' , argument id , ')=False'.
							(processedPredicates includes: relId)
								ifFalse: [ 
									data := {(#subject -> subject value).
									(#argument -> argument value).
									(#ruleId -> rule id).
									(#propertyId -> relId).
									(#msgPass -> msgPass).
									(#msgFail -> msgFail)} asDictionary.
									spec := self perform: predicateSelector withArguments: {data}.
									spec := spec
										dictoReplace:
											{('$subject' -> subject value).
											('$argument' -> argument value).
											('$ruleId' -> rule id).
											('$propertyId' -> relId).
											('$msgPass' -> msgPass).
											('$msgFail' -> msgFail)}.
									res := res , spec ].	"avoid duplicate predicate evaluations"
							processedPredicates add: relId ] ] ].
	^ res in DIPhpDependencies(DIAdapter)>>printRulesEntityRelationship:
	Receiver: a DIPhpDependencies
	Arguments and temporary variables: 
		someRules: 	a DICollectionRule(BibEntry cannot depend on BibObj BibObj must depe...etc...
		processedPredicates: 	a Set()
		data: 	nil
		res: 	''
		rule: 	BibEntry cannot depend on BibObj
		predicateSelector: 	#dependOn:
		subjectElements: 	nil
		argumentElements: 	nil
		isPredicateInv: 	false
		isSubjectInv: 	false
	Receiver's instance variables: 
		output: 	''
		commandOutput: 	''
		NEWLINE: 	'
'
		rules: 	a DICollectionRule(BibEntry cannot depend on BibObj BibObj must depend o...etc...
		varSynonyms: 	nil
		sessionId: 	'1424784494'
		TIMESTAMP: 	'1424784494'
		TOOLNAME: 	'DIPhpDependencies'
		PROJECTROOT: 	'/var/www/ilias_50/'
		PROJECTSRC: 	'./'
		PROJECTBIN: 	'./'
		RESULTFILE: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/ilias-test/14247...etc...
		TESTFILE: 	nil
		testInputFileExt: 	'.st'
		SYSTEM: 	SYSTEM


DICollectionRule(OrderedCollection)>>do:
	Receiver: a DICollectionRule(BibEntry cannot depend on BibObj BibObj must depend on BibEntry BibObj ...etc...
	Arguments and temporary variables: 
		aBlock: 	printRulesEntityRelationship: someRules
	| res processedPredicates |
	r...etc...
		index: 	1
	Receiver's instance variables: 
		array: 	an Array(BibEntry cannot depend on BibObj BibObj must depend on BibEntry...etc...
		firstIndex: 	1
		lastIndex: 	3
		elements: 	nil
		elements: 	nil


DIPhpDependencies(DIAdapter)>>printRulesEntityRelationship:
	Receiver: a DIPhpDependencies
	Arguments and temporary variables: 
		res: 	''
		someRules: 	a DICollectionRule(BibEntry cannot depend on BibObj BibObj must depe...etc...
		processedPredicates: 	a Set()
	Receiver's instance variables: 
		output: 	''
		commandOutput: 	''
		NEWLINE: 	'
'
		rules: 	a DICollectionRule(BibEntry cannot depend on BibObj BibObj must depend o...etc...
		varSynonyms: 	nil
		sessionId: 	'1424784494'
		TIMESTAMP: 	'1424784494'
		TOOLNAME: 	'DIPhpDependencies'
		PROJECTROOT: 	'/var/www/ilias_50/'
		PROJECTSRC: 	'./'
		PROJECTBIN: 	'./'
		RESULTFILE: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/ilias-test/14247...etc...
		TESTFILE: 	nil
		testInputFileExt: 	'.st'
		SYSTEM: 	SYSTEM


DIPhpDependencies(DIAdapter)>>printRules
	Receiver: a DIPhpDependencies
	Arguments and temporary variables: 
		res: 	nil
		allRules: 	a DICollectionRule(BibEntry cannot depend on BibObj BibObj must depen...etc...
	Receiver's instance variables: 
		output: 	''
		commandOutput: 	''
		NEWLINE: 	'
'
		rules: 	a DICollectionRule(BibEntry cannot depend on BibObj BibObj must depend o...etc...
		varSynonyms: 	nil
		sessionId: 	'1424784494'
		TIMESTAMP: 	'1424784494'
		TOOLNAME: 	'DIPhpDependencies'
		PROJECTROOT: 	'/var/www/ilias_50/'
		PROJECTSRC: 	'./'
		PROJECTBIN: 	'./'
		RESULTFILE: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/ilias-test/14247...etc...
		TESTFILE: 	nil
		testInputFileExt: 	'.st'
		SYSTEM: 	SYSTEM


DIPhpDependencies>>testInput
	Receiver: a DIPhpDependencies
	Arguments and temporary variables: 
		strRules: 	nil
	Receiver's instance variables: 
		output: 	''
		commandOutput: 	''
		NEWLINE: 	'
'
		rules: 	a DICollectionRule(BibEntry cannot depend on BibObj BibObj must depend o...etc...
		varSynonyms: 	nil
		sessionId: 	'1424784494'
		TIMESTAMP: 	'1424784494'
		TOOLNAME: 	'DIPhpDependencies'
		PROJECTROOT: 	'/var/www/ilias_50/'
		PROJECTSRC: 	'./'
		PROJECTBIN: 	'./'
		RESULTFILE: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/ilias-test/14247...etc...
		TESTFILE: 	nil
		testInputFileExt: 	'.st'
		SYSTEM: 	SYSTEM


DITestGroup>>build
	Receiver: a DITestGroup
	Arguments and temporary variables: 

	Receiver's instance variables: 
		rules: 	an OrderedCollection(BibEntry cannot depend on BibObj BibObj must depend...etc...
		adapter: 	a DIPhpDependencies
		runCommandText: 	nil
		testSpecification: 	nil
		adapterID: 	'DIPhpDependencies'
		resultFile: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/ilias-test/14247...etc...
		specificationFile: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/ilias-tes...etc...
		commandFile: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/ilias-test/1424...etc...


[ :testGroup | testGroup build ] in DIDicto>>dictoBuild:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'BibEntry = PhpClass with name:"ilBibliographicEntry"
BibObj = PhpC...etc...
		adapterTestGroups: 	a Dictionary(DIGrepFileContent->a DITestGroup DIJMeterLoadTe...etc...
		testGroup: 	a DITestGroup
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424784494'
		singleShotTask: 	false


Array(SequenceableCollection)>>do:
	Receiver: an Array(a DITestGroup a DITestGroup a DITestGroup a DITestGroup a DITestGroup)
	Arguments and temporary variables: 
		aBlock: 	[ :testGroup | testGroup build ]
		index: 	4
	Receiver's instance variables: 
an Array(a DITestGroup a DITestGroup a DITestGroup a DITestGroup a DITestGroup)

DIDicto>>dictoBuild:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'BibEntry = PhpClass with name:"ilBibliographicEntry"
BibObj = PhpC...etc...
		adapterTestGroups: 	a Dictionary(DIGrepFileContent->a DITestGroup DIJMeterLoadTe...etc...
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424784494'
		singleShotTask: 	false


DIDicto>>dictoRun:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'BibEntry = PhpClass with name:"ilBibliographicEntry"
BibObj = PhpC...etc...
		adapterTestGroups: 	nil
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424784494'
		singleShotTask: 	false


DIDicto>>dictoAll:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'BibEntry = PhpClass with name:"ilBibliographicEntry"
BibObj = PhpC...etc...
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424784494'
		singleShotTask: 	false


[ DIDicto new dictoAll: input ] in DIWebServiceAPI>>getRun
	Receiver: a DIWebServiceAPI
	Arguments and temporary variables: 
		in: 	'/home/otruffer/dicto/bin/analysis/ilias-test/dicto.rules'
		input: 	'BibEntry = PhpClass with name:"ilBibliographicEntry"
BibObj = PhpClass ...etc...
		rulesFailed: 	nil
		rulesTotal: 	nil
	Receiver's instance variables: 
		request: 	nil
		response: 	nil
		variables: 	nil
		delegate: 	nil
		principal: 	nil
		credentials: 	nil


BlockClosure>>on:do:
	Receiver: [ DIDicto new dictoAll: input ]
	Arguments and temporary variables: 
		exception: 	DIException
		handlerAction: 	[ :ex | ^ self error: ex description ]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	DIWebServiceAPI>>getRun
		startpc: 	138
		numArgs: 	0


DIWebServiceAPI>>getRun
	Receiver: a DIWebServiceAPI
	Arguments and temporary variables: 
		in: 	'/home/otruffer/dicto/bin/analysis/ilias-test/dicto.rules'
		input: 	'BibEntry = PhpClass with name:"ilBibliographicEntry"
BibObj = PhpClass ...etc...
		rulesFailed: 	nil
		rulesTotal: 	nil
	Receiver's instance variables: 
		request: 	nil
		response: 	nil
		variables: 	nil
		delegate: 	nil
		principal: 	nil
		credentials: 	nil


DIWebServiceHandler>>post
	Receiver: a DIWebServiceHandler
	Arguments and temporary variables: 
		api: 	a DIWebServiceAPI
	Receiver's instance variables: 
		request: 	a ZnRequest(POST /ilias-test/run)
		response: 	nil
		variables: 	an OrderedCollection('ilias-test' 'run')
		delegate: 	a ZnJSONRestServerDelegate
		principal: 	nil
		credentials: 	nil
		dicto: 	a DIDicto


DIWebServiceHandler(ZnRestCall)>>execute
	Receiver: a DIWebServiceHandler
	Arguments and temporary variables: 

	Receiver's instance variables: 
		request: 	a ZnRequest(POST /ilias-test/run)
		response: 	nil
		variables: 	an OrderedCollection('ilias-test' 'run')
		delegate: 	a ZnJSONRestServerDelegate
		principal: 	nil
		credentials: 	nil
		dicto: 	a DIDicto


[ call execute ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


BlockClosure>>on:do:
	Receiver: [ call execute ]
	Arguments and temporary variables: 
		exception: 	ZnRestCallUnauthorized
		handlerAction: 	[ :exception | self unauthorized: exception request ]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
		startpc: 	38
		numArgs: 	0


ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


[ self execute: call ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /ilias-test/run)
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


BlockClosure>>on:do:
	Receiver: [ self execute: call ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :exception | 
request server debugMode
	ifTrue: [ exception pa...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
		startpc: 	99
		numArgs: 	0


ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /ilias-test/run)
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ :delegate | delegate handleRequest: request ] ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /ilias-test/run)
		delegate: 	a ZnJSONRestServerDelegate
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateRequest:do:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /ilias-test/run)
		block: 	[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ ...etc...
		authenticator: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /ilias-test/run)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream)


[ self authenticateAndDelegateRequest: request ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /ilias-test/run)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream)


BlockClosure>>on:do:
	Receiver: [ self authenticateAndDelegateRequest: request ]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :exception | 
self debugMode
	ifTrue: [ exception pass ]
	ifFa...etc...
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequ...etc...
		startpc: 	58
		numArgs: 	0


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /ilias-test/run)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /ilias-test/run)
		response: 	nil
		initialMilliseconds: 	9294309
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeOneRequestResponseOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		stream: 	a ZdcSocketStream
		request: 	a ZnRequest(POST /ilias-test/run)
		response: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream)


[ self executeOneRequestResponseOn: stream ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		stream: 	a ZdcSocketStream
		request: 	nil
		response: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream)


[ 
p psValueAt: index put: anObject.
aBlock value ] in ZnCurrentServer(DynamicVariable)>>value:during:
	Receiver: a ZnCurrentServer
	Arguments and temporary variables: 
		anObject: 	a ZnManagingMultiThreadedServer(running 8010)
		aBlock: 	[ self executeOneRequestResponseOn: stream ]
		p: 	a Process in nil
		oldValue: 	nil
	Receiver's instance variables: 
		index: 	5



--- The full stack ---
DIUtil class>>runShellScriptAbsolutePath:arguments:
DIPhpModel>>_createModelFile
DIPhpModel>>_loadPhpModel
DIPhpModel>>model
DIVarPhpClass>>allElements
DIVarPhpClass(DIVar)>>elements
DISimpleRule>>subjectElements
printRulesEntityRelationship: someRules
	| res processedPredicates |
	res := ''.
	processedPredicates := Set new.
	someRules
		do: [ :rule | 
			| predicateSelector subjectElements argumentElements data isPredicateInv isSubjectInv |
			predicateSelector := (rule predicate nameNormalized , ':') asSymbol.
			isPredicateInv := rule hasPredicateInverted.
			isSubjectInv := rule hasSubjectInverted.
			subjectElements := rule subjectElements.
			argumentElements := rule argumentElements.
			subjectElements
				do: [ :subject | 
					argumentElements
						do: [ :argument | 
							| relId spec msgPass msgFail |
							relId := subject id , '-' , argument id.
							msgPass := subject id , '.' , rule predicate name , '(' , argument id , ')=True'.
							msgFail := subject id , '.' , rule predicate name , '(' , argument id , ')=False'.
							(processedPredicates includes: relId)
								ifFalse: [ 
									data := {(#subject -> subject value).
									(#argument -> argument value).
									(#ruleId -> rule id).
									(#propertyId -> relId).
									(#msgPass -> msgPass).
									(#msgFail -> msgFail)} asDictionary.
									spec := self perform: predicateSelector withArguments: {data}.
									spec := spec
										dictoReplace:
											{('$subject' -> subject value).
											('$argument' -> argument value).
											('$ruleId' -> rule id).
											('$propertyId' -> relId).
											('$msgPass' -> msgPass).
											('$msgFail' -> msgFail)}.
									res := res , spec ].	"avoid duplicate predicate evaluations"
							processedPredicates add: relId ] ] ].
	^ res in DIPhpDependencies(DIAdapter)>>printRulesEntityRelationship:
DICollectionRule(OrderedCollection)>>do:
DIPhpDependencies(DIAdapter)>>printRulesEntityRelationship:
DIPhpDependencies(DIAdapter)>>printRules
DIPhpDependencies>>testInput
DITestGroup>>build
[ :testGroup | testGroup build ] in DIDicto>>dictoBuild:
Array(SequenceableCollection)>>do:
DIDicto>>dictoBuild:
DIDicto>>dictoRun:
DIDicto>>dictoAll:
[ DIDicto new dictoAll: input ] in DIWebServiceAPI>>getRun
BlockClosure>>on:do:
DIWebServiceAPI>>getRun
DIWebServiceHandler>>post
DIWebServiceHandler(ZnRestCall)>>execute
[ call execute ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
BlockClosure>>on:do:
ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
[ self execute: call ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
BlockClosure>>on:do:
ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ :delegate | delegate handleRequest: request ] ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateRequest:do:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
[ self authenticateAndDelegateRequest: request ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
BlockClosure>>on:do:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequest:
ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeOneRequestResponseOn:
[ self executeOneRequestResponseOn: stream ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
[ 
p psValueAt: index put: anObject.
aBlock value ] in ZnCurrentServer(DynamicVariable)>>value:during:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
BlockClosure>>ensure:
ZnCurrentServer(DynamicVariable)>>value:during:
ZnCurrentServer class(DynamicVariable class)>>value:during:
ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
[ self executeRequestResponseLoopOn: stream ] in [ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ] in [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
BlockClosure>>ensure:
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ] in [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
BlockClosure>>ifCurtailed:
[ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Halt
24 February 2015 3:22:04.465317 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
NBCogit NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
https://github.com/pharo-project/pharo-vm.git Commit: 4a0d556150d478ff2de3c9624d2f18e6eaa3fa5c Date: 2014-12-18 18:42:53 +0100 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14893

Image: Pharo3.0 [Latest update: #30863]

DIUtil class>>runShellScriptAbsolutePath:arguments:
	Receiver: DIUtil
	Arguments and temporary variables: 
		script: 	'/home/otruffer/dicto/bin/dicto-engine/runAllAnalyses.sh'
		anArray: 	#('/home/otruffer/dicto/bin/analysis/ilias-test/1424784494')
		output: 	MultiByteFileStream: '/home/otruffer/dicto/bin/dicto-engine/shell-outpu...etc...
		error: 	MultiByteFileStream: '/home/otruffer/dicto/bin/dicto-engine/shell-error....etc...
		desc: 	an Array(nil MultiByteFileStream: '/home/otruffer/dicto/bin/dicto-engine/...etc...
		cmd: 	'/home/otruffer/dicto/bin/dicto-engine/runAllAnalyses.sh'
		p: 	nil
		d: 	nil
		proc: 	nil
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary()
		format: 	2
		layout: 	a FixedLayout
		instanceVariables: 	#()
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#DIUtil
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Dicto-var-util'
		traitComposition: 	{}
		localSelectors: 	nil


DIUtil class>>runShellScript:arguments:
	Receiver: DIUtil
	Arguments and temporary variables: 
		scriptName: 	'runAllAnalyses.sh'
		anArray: 	#('/home/otruffer/dicto/bin/analysis/ilias-test/1424784494')
		path: 	'/home/otruffer/dicto/bin/dicto-engine/runAllAnalyses.sh'
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary()
		format: 	2
		layout: 	a FixedLayout
		instanceVariables: 	#()
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#DIUtil
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Dicto-var-util'
		traitComposition: 	{}
		localSelectors: 	nil


DIDicto>>dictoRun:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'BibEntry = PhpClass with name:"ilBibliographicEntry"
BibObj = PhpC...etc...
		adapterTestGroups: 	a Dictionary(DIGrepFileContent->a DITestGroup DIJMeterLoadTe...etc...
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424784494'
		singleShotTask: 	false


DIDicto>>dictoAll:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'BibEntry = PhpClass with name:"ilBibliographicEntry"
BibObj = PhpC...etc...
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424784494'
		singleShotTask: 	false


[ DIDicto new dictoAll: input ] in DIWebServiceAPI>>getRun
	Receiver: a DIWebServiceAPI
	Arguments and temporary variables: 
		in: 	'/home/otruffer/dicto/bin/analysis/ilias-test/dicto.rules'
		input: 	'BibEntry = PhpClass with name:"ilBibliographicEntry"
BibObj = PhpClass ...etc...
		rulesFailed: 	nil
		rulesTotal: 	nil
	Receiver's instance variables: 
		request: 	nil
		response: 	nil
		variables: 	nil
		delegate: 	nil
		principal: 	nil
		credentials: 	nil


BlockClosure>>on:do:
	Receiver: [ DIDicto new dictoAll: input ]
	Arguments and temporary variables: 
		exception: 	DIException
		handlerAction: 	[ :ex | ^ self error: ex description ]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	DIWebServiceAPI>>getRun
		startpc: 	138
		numArgs: 	0


DIWebServiceAPI>>getRun
	Receiver: a DIWebServiceAPI
	Arguments and temporary variables: 
		in: 	'/home/otruffer/dicto/bin/analysis/ilias-test/dicto.rules'
		input: 	'BibEntry = PhpClass with name:"ilBibliographicEntry"
BibObj = PhpClass ...etc...
		rulesFailed: 	nil
		rulesTotal: 	nil
	Receiver's instance variables: 
		request: 	nil
		response: 	nil
		variables: 	nil
		delegate: 	nil
		principal: 	nil
		credentials: 	nil


DIWebServiceHandler>>post
	Receiver: a DIWebServiceHandler
	Arguments and temporary variables: 
		api: 	a DIWebServiceAPI
	Receiver's instance variables: 
		request: 	a ZnRequest(POST /ilias-test/run)
		response: 	nil
		variables: 	an OrderedCollection('ilias-test' 'run')
		delegate: 	a ZnJSONRestServerDelegate
		principal: 	nil
		credentials: 	nil
		dicto: 	a DIDicto


DIWebServiceHandler(ZnRestCall)>>execute
	Receiver: a DIWebServiceHandler
	Arguments and temporary variables: 

	Receiver's instance variables: 
		request: 	a ZnRequest(POST /ilias-test/run)
		response: 	nil
		variables: 	an OrderedCollection('ilias-test' 'run')
		delegate: 	a ZnJSONRestServerDelegate
		principal: 	nil
		credentials: 	nil
		dicto: 	a DIDicto


[ call execute ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


BlockClosure>>on:do:
	Receiver: [ call execute ]
	Arguments and temporary variables: 
		exception: 	ZnRestCallUnauthorized
		handlerAction: 	[ :exception | self unauthorized: exception request ]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
		startpc: 	38
		numArgs: 	0


ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


[ self execute: call ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /ilias-test/run)
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


BlockClosure>>on:do:
	Receiver: [ self execute: call ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :exception | 
request server debugMode
	ifTrue: [ exception pa...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
		startpc: 	99
		numArgs: 	0


ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /ilias-test/run)
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ :delegate | delegate handleRequest: request ] ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /ilias-test/run)
		delegate: 	a ZnJSONRestServerDelegate
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateRequest:do:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /ilias-test/run)
		block: 	[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ ...etc...
		authenticator: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /ilias-test/run)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream)


[ self authenticateAndDelegateRequest: request ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /ilias-test/run)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream)


BlockClosure>>on:do:
	Receiver: [ self authenticateAndDelegateRequest: request ]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :exception | 
self debugMode
	ifTrue: [ exception pass ]
	ifFa...etc...
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequ...etc...
		startpc: 	58
		numArgs: 	0


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /ilias-test/run)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /ilias-test/run)
		response: 	nil
		initialMilliseconds: 	9294309
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeOneRequestResponseOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		stream: 	a ZdcSocketStream
		request: 	a ZnRequest(POST /ilias-test/run)
		response: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream)


[ self executeOneRequestResponseOn: stream ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		stream: 	a ZdcSocketStream
		request: 	nil
		response: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream)


[ 
p psValueAt: index put: anObject.
aBlock value ] in ZnCurrentServer(DynamicVariable)>>value:during:
	Receiver: a ZnCurrentServer
	Arguments and temporary variables: 
		anObject: 	a ZnManagingMultiThreadedServer(running 8010)
		aBlock: 	[ self executeOneRequestResponseOn: stream ]
		p: 	a Process in nil
		oldValue: 	nil
	Receiver's instance variables: 
		index: 	5


BlockClosure>>ensure:
	Receiver: [ 
p psValueAt: index put: anObject.
aBlock value ]
	Arguments and temporary variables: 
		aBlock: 	[ p psValueAt: index put: oldValue ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ZnCurrentServer(DynamicVariable)>>value:during:
		startpc: 	62
		numArgs: 	0


ZnCurrentServer(DynamicVariable)>>value:during:
	Receiver: a ZnCurrentServer
	Arguments and temporary variables: 
		anObject: 	a ZnManagingMultiThreadedServer(running 8010)
		aBlock: 	[ self executeOneRequestResponseOn: stream ]
		p: 	a Process in nil
		oldValue: 	nil
	Receiver's instance variables: 
		index: 	5


ZnCurrentServer class(DynamicVariable class)>>value:during:
	Receiver: ZnCurrentServer
	Arguments and temporary variables: 
		anObject: 	a ZnManagingMultiThreadedServer(running 8010)
		aBlock: 	[ self executeOneRequestResponseOn: stream ]
	Receiver's instance variables: 
		superclass: 	DynamicVariable
		methodDict: 	a MethodDictionary()
		format: 	132
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#ZnCurrentServer
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Zinc-HTTP-Variables'
		traitComposition: 	{}
		localSelectors: 	nil
		hash: 	nil
		soleInstance: 	a ZnCurrentServer


ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		stream: 	a ZdcSocketStream
		request: 	nil
		response: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream)


[ self executeRequestResponseLoopOn: stream ] in [ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ] in [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		listeningSocket: 	a Socket[waitingForConnection]
		stream: 	a ZdcSocketStream
		socket: 	a Socket[connected]
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream)


BlockClosure>>ensure:
	Receiver: [ self executeRequestResponseLoopOn: stream ]
	Arguments and temporary variables: 
		aBlock: 	[ 
self log debug: 'Closing stream'.
self closeSocketStream: stream ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		se...etc...
		startpc: 	118
		numArgs: 	0


[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ] in [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		listeningSocket: 	a Socket[waitingForConnection]
		stream: 	a ZdcSocketStream
		socket: 	a Socket[connected]
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream)


BlockClosure>>ifCurtailed:
	Receiver: [ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing st...etc...
	Arguments and temporary variables: 
		aBlock: 	[ 
self log debug: 'Destroying socket'.
socket destroy ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	[ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
	...etc...
		startpc: 	113
		numArgs: 	0


[ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		listeningSocket: 	a Socket[waitingForConnection]
		stream: 	a ZdcSocketStream
		socket: 	a Socket[connected]
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream)


[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnec...etc...
		startpc: 	108
		numArgs: 	0



--- The full stack ---
DIUtil class>>runShellScriptAbsolutePath:arguments:
DIUtil class>>runShellScript:arguments:
DIDicto>>dictoRun:
DIDicto>>dictoAll:
[ DIDicto new dictoAll: input ] in DIWebServiceAPI>>getRun
BlockClosure>>on:do:
DIWebServiceAPI>>getRun
DIWebServiceHandler>>post
DIWebServiceHandler(ZnRestCall)>>execute
[ call execute ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
BlockClosure>>on:do:
ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
[ self execute: call ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
BlockClosure>>on:do:
ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ :delegate | delegate handleRequest: request ] ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateRequest:do:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
[ self authenticateAndDelegateRequest: request ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
BlockClosure>>on:do:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequest:
ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeOneRequestResponseOn:
[ self executeOneRequestResponseOn: stream ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
[ 
p psValueAt: index put: anObject.
aBlock value ] in ZnCurrentServer(DynamicVariable)>>value:during:
BlockClosure>>ensure:
ZnCurrentServer(DynamicVariable)>>value:during:
ZnCurrentServer class(DynamicVariable class)>>value:during:
ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
[ self executeRequestResponseLoopOn: stream ] in [ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ] in [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
BlockClosure>>ensure:
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ] in [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
BlockClosure>>ifCurtailed:
[ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Halt
24 February 2015 3:22:20.105818 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
NBCogit NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
https://github.com/pharo-project/pharo-vm.git Commit: 4a0d556150d478ff2de3c9624d2f18e6eaa3fa5c Date: 2014-12-18 18:42:53 +0100 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14893

Image: Pharo3.0 [Latest update: #30863]

DIUtil class>>runShellScriptAbsolutePath:arguments:
	Receiver: DIUtil
	Arguments and temporary variables: 
		script: 	'/home/otruffer/dicto/bin/dicto-engine/runAllAnalyses.sh'
		anArray: 	#('/home/otruffer/dicto/bin/analysis/ilias-test/1424784494')
		output: 	MultiByteFileStream: '/home/otruffer/dicto/bin/dicto-engine/shell-outpu...etc...
		error: 	MultiByteFileStream: '/home/otruffer/dicto/bin/dicto-engine/shell-error....etc...
		desc: 	an Array(nil MultiByteFileStream: '/home/otruffer/dicto/bin/dicto-engine/...etc...
		cmd: 	'/home/otruffer/dicto/bin/dicto-engine/runAllAnalyses.sh'
		p: 	a UnixProcess with pid 12195
		d: 	a Delay(50 msecs)
		proc: 	an ExternalUnixOSProcess with pid 17271 on /home/otruffer/dicto/bin/dicto...etc...
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary()
		format: 	2
		layout: 	a FixedLayout
		instanceVariables: 	#()
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#DIUtil
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Dicto-var-util'
		traitComposition: 	{}
		localSelectors: 	nil


DIUtil class>>runShellScript:arguments:
	Receiver: DIUtil
	Arguments and temporary variables: 
		scriptName: 	'runAllAnalyses.sh'
		anArray: 	#('/home/otruffer/dicto/bin/analysis/ilias-test/1424784494')
		path: 	'/home/otruffer/dicto/bin/dicto-engine/runAllAnalyses.sh'
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary()
		format: 	2
		layout: 	a FixedLayout
		instanceVariables: 	#()
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#DIUtil
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Dicto-var-util'
		traitComposition: 	{}
		localSelectors: 	nil


DIDicto>>dictoRun:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'BibEntry = PhpClass with name:"ilBibliographicEntry"
BibObj = PhpC...etc...
		adapterTestGroups: 	a Dictionary(DIGrepFileContent->a DITestGroup DIJMeterLoadTe...etc...
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424784494'
		singleShotTask: 	false


DIDicto>>dictoAll:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'BibEntry = PhpClass with name:"ilBibliographicEntry"
BibObj = PhpC...etc...
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424784494'
		singleShotTask: 	false


[ DIDicto new dictoAll: input ] in DIWebServiceAPI>>getRun
	Receiver: a DIWebServiceAPI
	Arguments and temporary variables: 
		in: 	'/home/otruffer/dicto/bin/analysis/ilias-test/dicto.rules'
		input: 	'BibEntry = PhpClass with name:"ilBibliographicEntry"
BibObj = PhpClass ...etc...
		rulesFailed: 	nil
		rulesTotal: 	nil
	Receiver's instance variables: 
		request: 	nil
		response: 	nil
		variables: 	nil
		delegate: 	nil
		principal: 	nil
		credentials: 	nil


BlockClosure>>on:do:
	Receiver: [ DIDicto new dictoAll: input ]
	Arguments and temporary variables: 
		exception: 	DIException
		handlerAction: 	[ :ex | ^ self error: ex description ]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	DIWebServiceAPI>>getRun
		startpc: 	138
		numArgs: 	0


DIWebServiceAPI>>getRun
	Receiver: a DIWebServiceAPI
	Arguments and temporary variables: 
		in: 	'/home/otruffer/dicto/bin/analysis/ilias-test/dicto.rules'
		input: 	'BibEntry = PhpClass with name:"ilBibliographicEntry"
BibObj = PhpClass ...etc...
		rulesFailed: 	nil
		rulesTotal: 	nil
	Receiver's instance variables: 
		request: 	nil
		response: 	nil
		variables: 	nil
		delegate: 	nil
		principal: 	nil
		credentials: 	nil


DIWebServiceHandler>>post
	Receiver: a DIWebServiceHandler
	Arguments and temporary variables: 
		api: 	a DIWebServiceAPI
	Receiver's instance variables: 
		request: 	a ZnRequest(POST /ilias-test/run)
		response: 	nil
		variables: 	an OrderedCollection('ilias-test' 'run')
		delegate: 	a ZnJSONRestServerDelegate
		principal: 	nil
		credentials: 	nil
		dicto: 	a DIDicto


DIWebServiceHandler(ZnRestCall)>>execute
	Receiver: a DIWebServiceHandler
	Arguments and temporary variables: 

	Receiver's instance variables: 
		request: 	a ZnRequest(POST /ilias-test/run)
		response: 	nil
		variables: 	an OrderedCollection('ilias-test' 'run')
		delegate: 	a ZnJSONRestServerDelegate
		principal: 	nil
		credentials: 	nil
		dicto: 	a DIDicto


[ call execute ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


BlockClosure>>on:do:
	Receiver: [ call execute ]
	Arguments and temporary variables: 
		exception: 	ZnRestCallUnauthorized
		handlerAction: 	[ :exception | self unauthorized: exception request ]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
		startpc: 	38
		numArgs: 	0


ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


[ self execute: call ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /ilias-test/run)
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


BlockClosure>>on:do:
	Receiver: [ self execute: call ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :exception | 
request server debugMode
	ifTrue: [ exception pa...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
		startpc: 	99
		numArgs: 	0


ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /ilias-test/run)
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ :delegate | delegate handleRequest: request ] ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /ilias-test/run)
		delegate: 	a ZnJSONRestServerDelegate
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateRequest:do:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /ilias-test/run)
		block: 	[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ ...etc...
		authenticator: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /ilias-test/run)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream)


[ self authenticateAndDelegateRequest: request ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /ilias-test/run)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream)


BlockClosure>>on:do:
	Receiver: [ self authenticateAndDelegateRequest: request ]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :exception | 
self debugMode
	ifTrue: [ exception pass ]
	ifFa...etc...
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequ...etc...
		startpc: 	58
		numArgs: 	0


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /ilias-test/run)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /ilias-test/run)
		response: 	nil
		initialMilliseconds: 	9294309
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeOneRequestResponseOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		stream: 	a ZdcSocketStream
		request: 	a ZnRequest(POST /ilias-test/run)
		response: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream)


[ self executeOneRequestResponseOn: stream ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		stream: 	a ZdcSocketStream
		request: 	nil
		response: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream)


[ 
p psValueAt: index put: anObject.
aBlock value ] in ZnCurrentServer(DynamicVariable)>>value:during:
	Receiver: a ZnCurrentServer
	Arguments and temporary variables: 
		anObject: 	a ZnManagingMultiThreadedServer(running 8010)
		aBlock: 	[ self executeOneRequestResponseOn: stream ]
		p: 	a Process in nil
		oldValue: 	nil
	Receiver's instance variables: 
		index: 	5


BlockClosure>>ensure:
	Receiver: [ 
p psValueAt: index put: anObject.
aBlock value ]
	Arguments and temporary variables: 
		aBlock: 	[ p psValueAt: index put: oldValue ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ZnCurrentServer(DynamicVariable)>>value:during:
		startpc: 	62
		numArgs: 	0


ZnCurrentServer(DynamicVariable)>>value:during:
	Receiver: a ZnCurrentServer
	Arguments and temporary variables: 
		anObject: 	a ZnManagingMultiThreadedServer(running 8010)
		aBlock: 	[ self executeOneRequestResponseOn: stream ]
		p: 	a Process in nil
		oldValue: 	nil
	Receiver's instance variables: 
		index: 	5


ZnCurrentServer class(DynamicVariable class)>>value:during:
	Receiver: ZnCurrentServer
	Arguments and temporary variables: 
		anObject: 	a ZnManagingMultiThreadedServer(running 8010)
		aBlock: 	[ self executeOneRequestResponseOn: stream ]
	Receiver's instance variables: 
		superclass: 	DynamicVariable
		methodDict: 	a MethodDictionary()
		format: 	132
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#ZnCurrentServer
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Zinc-HTTP-Variables'
		traitComposition: 	{}
		localSelectors: 	nil
		hash: 	nil
		soleInstance: 	a ZnCurrentServer


ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		stream: 	a ZdcSocketStream
		request: 	nil
		response: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream)


[ self executeRequestResponseLoopOn: stream ] in [ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ] in [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		listeningSocket: 	a Socket[waitingForConnection]
		stream: 	a ZdcSocketStream
		socket: 	a Socket[connected]
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream)


BlockClosure>>ensure:
	Receiver: [ self executeRequestResponseLoopOn: stream ]
	Arguments and temporary variables: 
		aBlock: 	[ 
self log debug: 'Closing stream'.
self closeSocketStream: stream ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		se...etc...
		startpc: 	118
		numArgs: 	0


[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ] in [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		listeningSocket: 	a Socket[waitingForConnection]
		stream: 	a ZdcSocketStream
		socket: 	a Socket[connected]
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream)


BlockClosure>>ifCurtailed:
	Receiver: [ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing st...etc...
	Arguments and temporary variables: 
		aBlock: 	[ 
self log debug: 'Destroying socket'.
socket destroy ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	[ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
	...etc...
		startpc: 	113
		numArgs: 	0


[ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		listeningSocket: 	a Socket[waitingForConnection]
		stream: 	a ZdcSocketStream
		socket: 	a Socket[connected]
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream)


[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnec...etc...
		startpc: 	108
		numArgs: 	0



--- The full stack ---
DIUtil class>>runShellScriptAbsolutePath:arguments:
DIUtil class>>runShellScript:arguments:
DIDicto>>dictoRun:
DIDicto>>dictoAll:
[ DIDicto new dictoAll: input ] in DIWebServiceAPI>>getRun
BlockClosure>>on:do:
DIWebServiceAPI>>getRun
DIWebServiceHandler>>post
DIWebServiceHandler(ZnRestCall)>>execute
[ call execute ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
BlockClosure>>on:do:
ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
[ self execute: call ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
BlockClosure>>on:do:
ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ :delegate | delegate handleRequest: request ] ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateRequest:do:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
[ self authenticateAndDelegateRequest: request ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
BlockClosure>>on:do:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequest:
ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeOneRequestResponseOn:
[ self executeOneRequestResponseOn: stream ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
[ 
p psValueAt: index put: anObject.
aBlock value ] in ZnCurrentServer(DynamicVariable)>>value:during:
BlockClosure>>ensure:
ZnCurrentServer(DynamicVariable)>>value:during:
ZnCurrentServer class(DynamicVariable class)>>value:during:
ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
[ self executeRequestResponseLoopOn: stream ] in [ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ] in [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
BlockClosure>>ensure:
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ] in [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
BlockClosure>>ifCurtailed:
[ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Halt
24 February 2015 4:26:00.637247 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
NBCogit NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
https://github.com/pharo-project/pharo-vm.git Commit: 4a0d556150d478ff2de3c9624d2f18e6eaa3fa5c Date: 2014-12-18 18:42:53 +0100 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14893

Image: Pharo3.0 [Latest update: #30863]

DIUtil class>>runShellScriptAbsolutePath:arguments:
	Receiver: DIUtil
	Arguments and temporary variables: 
		script: 	'/home/otruffer/dicto/bin/tools/phpda/configs/modelScript-1424791561.sh...etc...
		anArray: 	#()
		output: 	MultiByteFileStream: '/home/otruffer/dicto/bin/dicto-engine/shell-outpu...etc...
		error: 	MultiByteFileStream: '/home/otruffer/dicto/bin/dicto-engine/shell-error....etc...
		desc: 	an Array(nil MultiByteFileStream: '/home/otruffer/dicto/bin/dicto-engine/...etc...
		cmd: 	'/home/otruffer/dicto/bin/tools/phpda/configs/modelScript-1424791561.sh'
		p: 	nil
		d: 	nil
		proc: 	nil
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary()
		format: 	2
		layout: 	a FixedLayout
		instanceVariables: 	#()
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#DIUtil
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Dicto-var-util'
		traitComposition: 	{}
		localSelectors: 	nil


DIPhpModel>>_createModelFile
	Receiver: a DIPhpModel
	Arguments and temporary variables: 

	Receiver's instance variables: 
		defRules: 	a DICollectionRule()
		defVars: 	a DICollectionVar(SYSTEM)
		analysisID: 	'1424791561'
		additionalProperties: 	a Dictionary()
		ruleCounter: 	0
		varCounter: 	0
		defVarElements: 	a DICollectionVarElements()
		defVarInvertedElements: 	a DICollectionVarElements()
		model: 	nil


DIPhpModel>>_loadPhpModel
	Receiver: a DIPhpModel
	Arguments and temporary variables: 

	Receiver's instance variables: 
		defRules: 	a DICollectionRule()
		defVars: 	a DICollectionVar(SYSTEM)
		analysisID: 	'1424791561'
		additionalProperties: 	a Dictionary()
		ruleCounter: 	0
		varCounter: 	0
		defVarElements: 	a DICollectionVarElements()
		defVarInvertedElements: 	a DICollectionVarElements()
		model: 	nil


DIPhpModel>>model
	Receiver: a DIPhpModel
	Arguments and temporary variables: 

	Receiver's instance variables: 
		defRules: 	a DICollectionRule()
		defVars: 	a DICollectionVar(SYSTEM)
		analysisID: 	'1424791561'
		additionalProperties: 	a Dictionary()
		ruleCounter: 	0
		varCounter: 	0
		defVarElements: 	a DICollectionVarElements()
		defVarInvertedElements: 	a DICollectionVarElements()
		model: 	nil


DIVarPhpClass>>allElements
	Receiver: RuleResult
	Arguments and temporary variables: 

	Receiver's instance variables: 
		isFirst: 	false
		dslText: 	'RuleResult=PhpClass with name:"Dicto\\RuleResult"'
		type: 	'PhpClass'
		id: 	1
		entity: 	nil
		name: 	'RuleResult'
		specifiers: 	an OrderedCollection(name=Dicto\\RuleResult)
		isInverted: 	false
		elements: 	a DICollectionVarElements()
		invertedElements: 	a DICollectionVarElements()


DIVarPhpClass(DIVar)>>elements
	Receiver: RuleResult
	Arguments and temporary variables: 
		valid: 	nil
	Receiver's instance variables: 
		isFirst: 	false
		dslText: 	'RuleResult=PhpClass with name:"Dicto\\RuleResult"'
		type: 	'PhpClass'
		id: 	1
		entity: 	nil
		name: 	'RuleResult'
		specifiers: 	an OrderedCollection(name=Dicto\\RuleResult)
		isInverted: 	false
		elements: 	a DICollectionVarElements()
		invertedElements: 	a DICollectionVarElements()


DISimpleRule>>subjectElements
	Receiver: RuleResult cannot depend on DictoTalker
	Arguments and temporary variables: 
		subjectElements: 	nil
	Receiver's instance variables: 
		isFirst: 	nil
		dslText: 	'RuleResult cannot depend on DictoTalker'
		type: 	#cannot
		id: 	1001
		entity: 	nil
		subjects: 	an Array(RuleResult)
		predicates: 	an Array(depend on DictoTalker)
		subRules: 	nil
		candidateAdapters: 	a SortedCollection(DIPhpDependencies)
		chosenAdapter: 	DIPhpDependencies
		hasFailed: 	false
		failureMessage: 	''
		failingPredicates: 	a Set()
		hasSubjectInverted: 	false
		hasPredicateInverted: 	false


printRulesEntityRelationship: someRules
	| res processedPredicates |
	res := ''.
	processedPredicates := Set new.
	someRules
		do: [ :rule | 
			| predicateSelector subjectElements argumentElements data isPredicateInv isSubjectInv |
			predicateSelector := (rule predicate nameNormalized , ':') asSymbol.
			isPredicateInv := rule hasPredicateInverted.
			isSubjectInv := rule hasSubjectInverted.
			subjectElements := rule subjectElements.
			argumentElements := rule argumentElements.
			subjectElements
				do: [ :subject | 
					argumentElements
						do: [ :argument | 
							| relId spec msgPass msgFail |
							relId := subject id , '-' , argument id.
							msgPass := subject id , '.' , rule predicate name , '(' , argument id , ')=True'.
							msgFail := subject id , '.' , rule predicate name , '(' , argument id , ')=False'.
							(processedPredicates includes: relId)
								ifFalse: [ 
									data := {(#subject -> subject value).
									(#argument -> argument value).
									(#ruleId -> rule id).
									(#propertyId -> relId).
									(#msgPass -> msgPass).
									(#msgFail -> msgFail)} asDictionary.
									spec := self perform: predicateSelector withArguments: {data}.
									spec := spec
										dictoReplace:
											{('$subject' -> subject value).
											('$argument' -> argument value).
											('$ruleId' -> rule id).
											('$propertyId' -> relId).
											('$msgPass' -> msgPass).
											('$msgFail' -> msgFail)}.
									res := res , spec ].	"avoid duplicate predicate evaluations"
							processedPredicates add: relId ] ] ].
	^ res in DIPhpDependencies(DIAdapter)>>printRulesEntityRelationship:
	Receiver: a DIPhpDependencies
	Arguments and temporary variables: 
		someRules: 	a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalk...etc...
		processedPredicates: 	a Set()
		data: 	nil
		res: 	''
		rule: 	RuleResult cannot depend on DictoTalker
		predicateSelector: 	#dependOn:
		subjectElements: 	nil
		argumentElements: 	nil
		isPredicateInv: 	false
		isSubjectInv: 	false
	Receiver's instance variables: 
		output: 	''
		commandOutput: 	''
		NEWLINE: 	'
'
		rules: 	a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalker m...etc...
		varSynonyms: 	nil
		sessionId: 	'1424791561'
		TIMESTAMP: 	'1424791561'
		TOOLNAME: 	'DIPhpDependencies'
		PROJECTROOT: 	'/home/otruffer/DictoCLI'
		PROJECTSRC: 	'./'
		PROJECTBIN: 	'./'
		RESULTFILE: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/mai/1424791561/D...etc...
		TESTFILE: 	nil
		testInputFileExt: 	'.st'
		SYSTEM: 	SYSTEM


DICollectionRule(OrderedCollection)>>do:
	Receiver: a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalker must depend on Rule...etc...
	Arguments and temporary variables: 
		aBlock: 	printRulesEntityRelationship: someRules
	| res processedPredicates |
	r...etc...
		index: 	1
	Receiver's instance variables: 
		array: 	an Array(RuleResult cannot depend on DictoTalker DictoTalker must depend...etc...
		firstIndex: 	1
		lastIndex: 	3
		elements: 	nil
		elements: 	nil


DIPhpDependencies(DIAdapter)>>printRulesEntityRelationship:
	Receiver: a DIPhpDependencies
	Arguments and temporary variables: 
		res: 	''
		someRules: 	a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalk...etc...
		processedPredicates: 	a Set()
	Receiver's instance variables: 
		output: 	''
		commandOutput: 	''
		NEWLINE: 	'
'
		rules: 	a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalker m...etc...
		varSynonyms: 	nil
		sessionId: 	'1424791561'
		TIMESTAMP: 	'1424791561'
		TOOLNAME: 	'DIPhpDependencies'
		PROJECTROOT: 	'/home/otruffer/DictoCLI'
		PROJECTSRC: 	'./'
		PROJECTBIN: 	'./'
		RESULTFILE: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/mai/1424791561/D...etc...
		TESTFILE: 	nil
		testInputFileExt: 	'.st'
		SYSTEM: 	SYSTEM


DIPhpDependencies(DIAdapter)>>printRules
	Receiver: a DIPhpDependencies
	Arguments and temporary variables: 
		res: 	nil
		allRules: 	a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalke...etc...
	Receiver's instance variables: 
		output: 	''
		commandOutput: 	''
		NEWLINE: 	'
'
		rules: 	a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalker m...etc...
		varSynonyms: 	nil
		sessionId: 	'1424791561'
		TIMESTAMP: 	'1424791561'
		TOOLNAME: 	'DIPhpDependencies'
		PROJECTROOT: 	'/home/otruffer/DictoCLI'
		PROJECTSRC: 	'./'
		PROJECTBIN: 	'./'
		RESULTFILE: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/mai/1424791561/D...etc...
		TESTFILE: 	nil
		testInputFileExt: 	'.st'
		SYSTEM: 	SYSTEM


DIPhpDependencies>>testInput
	Receiver: a DIPhpDependencies
	Arguments and temporary variables: 
		strRules: 	nil
	Receiver's instance variables: 
		output: 	''
		commandOutput: 	''
		NEWLINE: 	'
'
		rules: 	a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalker m...etc...
		varSynonyms: 	nil
		sessionId: 	'1424791561'
		TIMESTAMP: 	'1424791561'
		TOOLNAME: 	'DIPhpDependencies'
		PROJECTROOT: 	'/home/otruffer/DictoCLI'
		PROJECTSRC: 	'./'
		PROJECTBIN: 	'./'
		RESULTFILE: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/mai/1424791561/D...etc...
		TESTFILE: 	nil
		testInputFileExt: 	'.st'
		SYSTEM: 	SYSTEM


DITestGroup>>build
	Receiver: a DITestGroup
	Arguments and temporary variables: 

	Receiver's instance variables: 
		rules: 	an OrderedCollection(RuleResult cannot depend on DictoTalker DictoTalker...etc...
		adapter: 	a DIPhpDependencies
		runCommandText: 	nil
		testSpecification: 	nil
		adapterID: 	'DIPhpDependencies'
		resultFile: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/mai/1424791561/D...etc...
		specificationFile: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/mai/14247...etc...
		commandFile: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/mai/1424791561/...etc...


[ :testGroup | testGroup build ] in DIDicto>>dictoBuild:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = ...etc...
		adapterTestGroups: 	a Dictionary(DIGrepFileContent->a DITestGroup DIJMeterLoadTe...etc...
		testGroup: 	a DITestGroup
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424791561'
		singleShotTask: 	false


Array(SequenceableCollection)>>do:
	Receiver: an Array(a DITestGroup a DITestGroup a DITestGroup a DITestGroup a DITestGroup)
	Arguments and temporary variables: 
		aBlock: 	[ :testGroup | testGroup build ]
		index: 	4
	Receiver's instance variables: 
an Array(a DITestGroup a DITestGroup a DITestGroup a DITestGroup a DITestGroup)

DIDicto>>dictoBuild:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = ...etc...
		adapterTestGroups: 	a Dictionary(DIGrepFileContent->a DITestGroup DIJMeterLoadTe...etc...
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424791561'
		singleShotTask: 	false


DIDicto>>dictoRun:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = ...etc...
		adapterTestGroups: 	nil
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424791561'
		singleShotTask: 	false


DIDicto>>dictoAll:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = ...etc...
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424791561'
		singleShotTask: 	false


[ DIDicto new dictoAll: input ] in DIWebServiceAPI>>getRun
	Receiver: a DIWebServiceAPI
	Arguments and temporary variables: 
		in: 	'/home/otruffer/dicto/bin/analysis/mai/dicto.rules'
		input: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = PhpCl...etc...
		rulesFailed: 	nil
		rulesTotal: 	nil
	Receiver's instance variables: 
		request: 	nil
		response: 	nil
		variables: 	nil
		delegate: 	nil
		principal: 	nil
		credentials: 	nil


BlockClosure>>on:do:
	Receiver: [ DIDicto new dictoAll: input ]
	Arguments and temporary variables: 
		exception: 	DIException
		handlerAction: 	[ :ex | ^ self error: ex description ]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	DIWebServiceAPI>>getRun
		startpc: 	138
		numArgs: 	0


DIWebServiceAPI>>getRun
	Receiver: a DIWebServiceAPI
	Arguments and temporary variables: 
		in: 	'/home/otruffer/dicto/bin/analysis/mai/dicto.rules'
		input: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = PhpCl...etc...
		rulesFailed: 	nil
		rulesTotal: 	nil
	Receiver's instance variables: 
		request: 	nil
		response: 	nil
		variables: 	nil
		delegate: 	nil
		principal: 	nil
		credentials: 	nil


DIWebServiceHandler>>post
	Receiver: a DIWebServiceHandler
	Arguments and temporary variables: 
		api: 	a DIWebServiceAPI
	Receiver's instance variables: 
		request: 	a ZnRequest(POST /mai/run)
		response: 	nil
		variables: 	an OrderedCollection('mai' 'run')
		delegate: 	a ZnJSONRestServerDelegate
		principal: 	nil
		credentials: 	nil
		dicto: 	a DIDicto


DIWebServiceHandler(ZnRestCall)>>execute
	Receiver: a DIWebServiceHandler
	Arguments and temporary variables: 

	Receiver's instance variables: 
		request: 	a ZnRequest(POST /mai/run)
		response: 	nil
		variables: 	an OrderedCollection('mai' 'run')
		delegate: 	a ZnJSONRestServerDelegate
		principal: 	nil
		credentials: 	nil
		dicto: 	a DIDicto


[ call execute ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


BlockClosure>>on:do:
	Receiver: [ call execute ]
	Arguments and temporary variables: 
		exception: 	ZnRestCallUnauthorized
		handlerAction: 	[ :exception | self unauthorized: exception request ]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
		startpc: 	38
		numArgs: 	0


ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


[ self execute: call ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /mai/run)
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


BlockClosure>>on:do:
	Receiver: [ self execute: call ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :exception | 
request server debugMode
	ifTrue: [ exception pa...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
		startpc: 	99
		numArgs: 	0


ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /mai/run)
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ :delegate | delegate handleRequest: request ] ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /mai/run)
		delegate: 	a ZnJSONRestServerDelegate
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateRequest:do:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /mai/run)
		block: 	[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ ...etc...
		authenticator: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /mai/run)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream)


[ self authenticateAndDelegateRequest: request ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /mai/run)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream)


BlockClosure>>on:do:
	Receiver: [ self authenticateAndDelegateRequest: request ]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :exception | 
self debugMode
	ifTrue: [ exception pass ]
	ifFa...etc...
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequ...etc...
		startpc: 	58
		numArgs: 	0


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /mai/run)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /mai/run)
		response: 	nil
		initialMilliseconds: 	16360861
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeOneRequestResponseOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		stream: 	a ZdcSocketStream
		request: 	a ZnRequest(POST /mai/run)
		response: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream)


[ self executeOneRequestResponseOn: stream ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		stream: 	a ZdcSocketStream
		request: 	nil
		response: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream)


[ 
p psValueAt: index put: anObject.
aBlock value ] in ZnCurrentServer(DynamicVariable)>>value:during:
	Receiver: a ZnCurrentServer
	Arguments and temporary variables: 
		anObject: 	a ZnManagingMultiThreadedServer(running 8010)
		aBlock: 	[ self executeOneRequestResponseOn: stream ]
		p: 	a Process in nil
		oldValue: 	nil
	Receiver's instance variables: 
		index: 	5



--- The full stack ---
DIUtil class>>runShellScriptAbsolutePath:arguments:
DIPhpModel>>_createModelFile
DIPhpModel>>_loadPhpModel
DIPhpModel>>model
DIVarPhpClass>>allElements
DIVarPhpClass(DIVar)>>elements
DISimpleRule>>subjectElements
printRulesEntityRelationship: someRules
	| res processedPredicates |
	res := ''.
	processedPredicates := Set new.
	someRules
		do: [ :rule | 
			| predicateSelector subjectElements argumentElements data isPredicateInv isSubjectInv |
			predicateSelector := (rule predicate nameNormalized , ':') asSymbol.
			isPredicateInv := rule hasPredicateInverted.
			isSubjectInv := rule hasSubjectInverted.
			subjectElements := rule subjectElements.
			argumentElements := rule argumentElements.
			subjectElements
				do: [ :subject | 
					argumentElements
						do: [ :argument | 
							| relId spec msgPass msgFail |
							relId := subject id , '-' , argument id.
							msgPass := subject id , '.' , rule predicate name , '(' , argument id , ')=True'.
							msgFail := subject id , '.' , rule predicate name , '(' , argument id , ')=False'.
							(processedPredicates includes: relId)
								ifFalse: [ 
									data := {(#subject -> subject value).
									(#argument -> argument value).
									(#ruleId -> rule id).
									(#propertyId -> relId).
									(#msgPass -> msgPass).
									(#msgFail -> msgFail)} asDictionary.
									spec := self perform: predicateSelector withArguments: {data}.
									spec := spec
										dictoReplace:
											{('$subject' -> subject value).
											('$argument' -> argument value).
											('$ruleId' -> rule id).
											('$propertyId' -> relId).
											('$msgPass' -> msgPass).
											('$msgFail' -> msgFail)}.
									res := res , spec ].	"avoid duplicate predicate evaluations"
							processedPredicates add: relId ] ] ].
	^ res in DIPhpDependencies(DIAdapter)>>printRulesEntityRelationship:
DICollectionRule(OrderedCollection)>>do:
DIPhpDependencies(DIAdapter)>>printRulesEntityRelationship:
DIPhpDependencies(DIAdapter)>>printRules
DIPhpDependencies>>testInput
DITestGroup>>build
[ :testGroup | testGroup build ] in DIDicto>>dictoBuild:
Array(SequenceableCollection)>>do:
DIDicto>>dictoBuild:
DIDicto>>dictoRun:
DIDicto>>dictoAll:
[ DIDicto new dictoAll: input ] in DIWebServiceAPI>>getRun
BlockClosure>>on:do:
DIWebServiceAPI>>getRun
DIWebServiceHandler>>post
DIWebServiceHandler(ZnRestCall)>>execute
[ call execute ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
BlockClosure>>on:do:
ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
[ self execute: call ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
BlockClosure>>on:do:
ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ :delegate | delegate handleRequest: request ] ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateRequest:do:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
[ self authenticateAndDelegateRequest: request ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
BlockClosure>>on:do:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequest:
ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeOneRequestResponseOn:
[ self executeOneRequestResponseOn: stream ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
[ 
p psValueAt: index put: anObject.
aBlock value ] in ZnCurrentServer(DynamicVariable)>>value:during:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
BlockClosure>>ensure:
ZnCurrentServer(DynamicVariable)>>value:during:
ZnCurrentServer class(DynamicVariable class)>>value:during:
ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
[ self executeRequestResponseLoopOn: stream ] in [ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ] in [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
BlockClosure>>ensure:
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ] in [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
BlockClosure>>ifCurtailed:
[ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: ThreadSafeTranscript>>write:
24 February 2015 5:05:59.081525 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
NBCogit NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
https://github.com/pharo-project/pharo-vm.git Commit: 4a0d556150d478ff2de3c9624d2f18e6eaa3fa5c Date: 2014-12-18 18:42:53 +0100 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14893

Image: Pharo3.0 [Latest update: #30863]

ThreadSafeTranscript(Object)>>doesNotUnderstand: #write:
	Receiver: Transcript
	Arguments and temporary variables: 
		aMessage: 	write: 'hi'
		exception: 	MessageNotUnderstood: ThreadSafeTranscript>>write:
		resumeValue: 	nil
	Receiver's instance variables: 
		dependents: 	nil
		stream: 	a WriteStream
		accessSemaphore: 	a Mutex


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	'Transcript write: ''hi''.'
		itsSelection: 	a Text for 'Transcript write: ''hi''.'
		itsSelectionString: 	'Transcript write: ''hi''.'
	Receiver's instance variables: 
		ast: 	DoIt
	^ Transcript write: 'hi'
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil
		useFaultyForParsing: 	false


RubSmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(14680064)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ textMorph textArea editor evaluateSelectionAndDo: ann action ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnEvaluateSelection:
	Receiver: a GLMMorphicPharoPlaygroundRenderer
	Arguments and temporary variables: 
		ann: 	a GLMEvaluateSelection
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(618397696)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ textMorph textArea editor evaluateSelectionAndDo: ann action ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (1855@1056)
		canvas: 	a FormCanvas on: DisplayScreen(1855x1056x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(30146560))(a DropListM...etc...
		lastStepTime: 	18759390
		lastStepMessage: 	nil
		lastCycleTime: 	18759390
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(736362496)))
		lastAlarmTime: 	18759390
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1855@1056)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a GLMSystemWindow(632029184) a Na...etc...
		fullBounds: 	(0@0) corner: (1855@1056)
		color: 	Color white
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (1855@1056)
		canvas: 	a FormCanvas on: DisplayScreen(1855x1056x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(30146560))(a DropListM...etc...
		lastStepTime: 	18759390
		lastStepMessage: 	nil
		lastCycleTime: 	18759390
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(736362496)))
		lastAlarmTime: 	18759390
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (1855@1056)
		canvas: 	a FormCanvas on: DisplayScreen(1855x1056x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(30146560))(a DropListM...etc...
		lastStepTime: 	18759390
		lastStepMessage: 	nil
		lastCycleTime: 	18759390
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(736362496)))
		lastAlarmTime: 	18759390
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1855@1056)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a GLMSystemWindow(632029184) a Na...etc...
		fullBounds: 	(0@0) corner: (1855@1056)
		color: 	Color white
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


[ 
World doOneCycle.
Processor yield.
false ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	Transcript


[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ 
World doOneCycle.
Processor yield.
false ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
ThreadSafeTranscript(Object)>>doesNotUnderstand: #write:
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluateSelectionAndDo:
[ textMorph textArea editor evaluateSelectionAndDo: ann action ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnEvaluateSelection:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ 
World doOneCycle.
Processor yield.
false ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: ThreadSafeTranscript>>hello
24 February 2015 5:08:32.536354 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
NBCogit NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
https://github.com/pharo-project/pharo-vm.git Commit: 4a0d556150d478ff2de3c9624d2f18e6eaa3fa5c Date: 2014-12-18 18:42:53 +0100 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14893

Image: Pharo3.0 [Latest update: #30863]

ThreadSafeTranscript(Object)>>doesNotUnderstand: #hello
	Receiver: Transcript
	Arguments and temporary variables: 
		aMessage: 	hello
		exception: 	MessageNotUnderstood: ThreadSafeTranscript>>hello
		resumeValue: 	nil
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SystemWindow(657195008) a ThreadSafeTranscriptP...etc...
		stream: 	a WriteStream
		accessSemaphore: 	a Mutex


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	'Transcript hello'
		itsSelection: 	a Text for 'Transcript hello'
		itsSelectionString: 	'Transcript hello'
	Receiver's instance variables: 
		ast: 	DoIt
	^ Transcript hello
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil
		useFaultyForParsing: 	false


RubSmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(14680064)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ textMorph textArea editor evaluateSelectionAndDo: ann action ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnEvaluateSelection:
	Receiver: a GLMMorphicPharoPlaygroundRenderer
	Arguments and temporary variables: 
		ann: 	a GLMEvaluateSelection
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(618397696)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ textMorph textArea editor evaluateSelectionAndDo: ann action ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (1855@1056)
		canvas: 	a FormCanvas on: DisplayScreen(1855x1056x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> 3PButton(#switchToByteCodeButton 25349...etc...
		lastStepTime: 	18912800
		lastStepMessage: 	nil
		lastCycleTime: 	18912822
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(736362496)))
		lastAlarmTime: 	18912800
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1855@1056)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a GLMSystemWindow(632029184) a Na...etc...
		fullBounds: 	(0@0) corner: (1855@1056)
		color: 	Color white
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (1855@1056)
		canvas: 	a FormCanvas on: DisplayScreen(1855x1056x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> 3PButton(#switchToByteCodeButton 25349...etc...
		lastStepTime: 	18912800
		lastStepMessage: 	nil
		lastCycleTime: 	18912822
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(736362496)))
		lastAlarmTime: 	18912800
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (1855@1056)
		canvas: 	a FormCanvas on: DisplayScreen(1855x1056x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> 3PButton(#switchToByteCodeButton 25349...etc...
		lastStepTime: 	18912800
		lastStepMessage: 	nil
		lastCycleTime: 	18912822
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(736362496)))
		lastAlarmTime: 	18912800
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1855@1056)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a GLMSystemWindow(632029184) a Na...etc...
		fullBounds: 	(0@0) corner: (1855@1056)
		color: 	Color white
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


[ 
World doOneCycle.
Processor yield.
false ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	Transcript


[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ 
World doOneCycle.
Processor yield.
false ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
ThreadSafeTranscript(Object)>>doesNotUnderstand: #hello
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluateSelectionAndDo:
[ textMorph textArea editor evaluateSelectionAndDo: ann action ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnEvaluateSelection:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ 
World doOneCycle.
Processor yield.
false ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Halt
24 February 2015 5:35:27.777968 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
NBCogit NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
https://github.com/pharo-project/pharo-vm.git Commit: 4a0d556150d478ff2de3c9624d2f18e6eaa3fa5c Date: 2014-12-18 18:42:53 +0100 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14893

Image: Pharo3.0 [Latest update: #30863]

DIPhpDependencies>>testInput
	Receiver: a DIPhpDependencies
	Arguments and temporary variables: 
		strRules: 	'{ "subject" : "arEditField",
	   "argument": "ilDateTimeInputGUI",
	...etc...
	Receiver's instance variables: 
		output: 	''
		commandOutput: 	''
		NEWLINE: 	'
'
		rules: 	a DICollectionRule(Model cannot depend on Controller arDeleteGUI must de...etc...
		varSynonyms: 	nil
		sessionId: 	'1424795725'
		TIMESTAMP: 	'1424795725'
		TOOLNAME: 	'DIPhpDependencies'
		PROJECTROOT: 	'/home/otruffer/dicto/TestProjectPhp'
		PROJECTSRC: 	'src/'
		PROJECTBIN: 	'bin/'
		RESULTFILE: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/DictoTestSuite/1...etc...
		TESTFILE: 	nil
		testInputFileExt: 	'.st'
		SYSTEM: 	SYSTEM


DITestGroup>>build
	Receiver: a DITestGroup
	Arguments and temporary variables: 

	Receiver's instance variables: 
		rules: 	an OrderedCollection(Model cannot depend on Controller arDeleteGUI must ...etc...
		adapter: 	a DIPhpDependencies
		runCommandText: 	nil
		testSpecification: 	nil
		adapterID: 	'DIPhpDependencies'
		resultFile: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/DictoTestSuite/1...etc...
		specificationFile: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/DictoTest...etc...
		commandFile: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/DictoTestSuite/...etc...


[ :testGroup | testGroup build ] in DIDicto>>dictoBuild:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'
Model = PhpClass with name:"ar*"
Controller = PhpClass with name:...etc...
		adapterTestGroups: 	a Dictionary(DIGrepFileContent->a DITestGroup DIJMeterLoadTe...etc...
		testGroup: 	a DITestGroup
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424795725'
		singleShotTask: 	false


Array(SequenceableCollection)>>do:
	Receiver: an Array(a DITestGroup a DITestGroup a DITestGroup a DITestGroup a DITestGroup)
	Arguments and temporary variables: 
		aBlock: 	[ :testGroup | testGroup build ]
		index: 	4
	Receiver's instance variables: 
an Array(a DITestGroup a DITestGroup a DITestGroup a DITestGroup a DITestGroup)

DIDicto>>dictoBuild:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'
Model = PhpClass with name:"ar*"
Controller = PhpClass with name:...etc...
		adapterTestGroups: 	a Dictionary(DIGrepFileContent->a DITestGroup DIJMeterLoadTe...etc...
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424795725'
		singleShotTask: 	false


DIDicto>>dictoRun:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'
Model = PhpClass with name:"ar*"
Controller = PhpClass with name:...etc...
		adapterTestGroups: 	nil
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424795725'
		singleShotTask: 	false


DIDicto>>dictoAll:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'
Model = PhpClass with name:"ar*"
Controller = PhpClass with name:...etc...
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424795725'
		singleShotTask: 	false


DIPHPTests(DIDSLTests)>>runAndReturnObjWithText:andSuccessResults:onProject:
	Receiver: DIPHPTests>>#testPhp
	Arguments and temporary variables: 
		dslText: 	'
Model = PhpClass with name:"ar*"
Controller = PhpClass with name:"*G...etc...
		res: 	#(false true false)
		project: 	'TestProjectPhp'
		dicto: 	a DIDicto
	Receiver's instance variables: 
		testSelector: 	#testPhp
		expectedFails: 	nil


DIPHPTests>>testPhp
	Receiver: DIPHPTests>>#testPhp
	Arguments and temporary variables: 
		dsl: 	'
Model = PhpClass with name:"ar*"
Controller = PhpClass with name:"*GUI"
...etc...
		success: 	#(false true false)
	Receiver's instance variables: 
		testSelector: 	#testPhp
		expectedFails: 	nil


DIPHPTests(TestCase)>>performTest
	Receiver: DIPHPTests>>#testPhp
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testPhp
		expectedFails: 	nil


[ 
self setUp.
self performTest ] in DIPHPTests(TestCase)>>runCase
	Receiver: DIPHPTests>>#testPhp
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testPhp
		expectedFails: 	nil


BlockClosure>>ensure:
	Receiver: [ 
self setUp.
self performTest ]
	Arguments and temporary variables: 
		aBlock: 	[ 
self tearDown.
self cleanUpInstanceVariables ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	DIPHPTests(TestCase)>>runCase
		startpc: 	57
		numArgs: 	0


DIPHPTests(TestCase)>>runCase
	Receiver: DIPHPTests>>#testPhp
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testPhp
		expectedFails: 	nil


[ 
aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCase.
aTestCase announce: TestCaseEnded withResult: self.
self addPass: aTestCase ] in TestResult>>runCase:
	Receiver: 0 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 0 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	DIPHPTests>>#testPhp
	Receiver's instance variables: 
		timeStamp: 	2015-02-24T17:35:24.770808+01:00
		failures: 	a Set()
		errors: 	an OrderedCollection()
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


BlockClosure>>on:do:
	Receiver: [ 
aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCase.
aTestCase anno...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :ex | ex sunitAnnounce: aTestCase toResult: self ]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	TestResult>>runCase:
		startpc: 	70
		numArgs: 	0


TestResult>>runCase:
	Receiver: 0 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 0 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	DIPHPTests>>#testPhp
	Receiver's instance variables: 
		timeStamp: 	2015-02-24T17:35:24.770808+01:00
		failures: 	a Set()
		errors: 	an OrderedCollection()
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


DIPHPTests(TestCase)>>run:
	Receiver: DIPHPTests>>#testPhp
	Arguments and temporary variables: 
		aResult: 	0 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 0 errors,...etc...
	Receiver's instance variables: 
		testSelector: 	#testPhp
		expectedFails: 	nil


[ self run: result ] in DIPHPTests(TestCase)>>run
	Receiver: DIPHPTests>>#testPhp
	Arguments and temporary variables: 
		result: 	0 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 0 errors, ...etc...
	Receiver's instance variables: 
		testSelector: 	#testPhp
		expectedFails: 	nil


BlockClosure>>ensure:
	Receiver: [ self run: result ]
	Arguments and temporary variables: 
		aBlock: 	[ self classForTestResource resetResources: self resources ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	DIPHPTests(TestCase)>>run
		startpc: 	46
		numArgs: 	0


DIPHPTests(TestCase)>>run
	Receiver: DIPHPTests>>#testPhp
	Arguments and temporary variables: 
		result: 	0 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 0 errors, ...etc...
	Receiver's instance variables: 
		testSelector: 	#testPhp
		expectedFails: 	nil


DIPHPTests class(TestCase class)>>run:
	Receiver: DIPHPTests
	Arguments and temporary variables: 
		aSymbol: 	#testPhp
	Receiver's instance variables: 
		superclass: 	DIDSLTests
		methodDict: 	a MethodDictionary(#testPhp->DIPHPTests>>#testPhp )
		format: 	134
		layout: 	a FixedLayout
		instanceVariables: 	#()
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#DIPHPTests
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Dicto-var-tests'
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set(#testP...etc...


PackageTreeNautilusUI(NautilusUI)>>runTestForAMethodWithAnHalt:
	Receiver: a PackageTreeNautilusUI
	Arguments and temporary variables: 
		aMethod: 	DIPHPTests>>#testPhp
		testMethod: 	DIPHPTests>>#testPhp
		color: 	nil
		vScroll: 	0.0
		testClass: 	DIPHPTests
		testResult: 	nil
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a CategoryWidget a MethodWidget a NautilusWindow(...etc...
		model: 	a PackageTreeNautilus
		window: 	a NautilusWindow(542638080)
		hierarchyClass: 	nil
		cachedHierarchy: 	a SortHierarchically
		sourceTextArea: 	a PluggableTextMorphWithLimits(303038464)
		groupsSelection: 	a Dictionary()
		packagesSelection: 	a Dictionary(var-tests->true )
		classesSelection: 	a Dictionary(DIPHPTests->true )
		list: 	a MorphTreeMorph(273940480)
		list2: 	a PluggableIconListMorph(454295552)
		sourceCodePanel: 	a PanelMorph(183500800)
		commentTextArea: 	nil
		currentDisplayChoice: 	#SourceCode
		sourceTextAreaLimit: 	350
		sourceCodeContainer: 	a PanelMorph(584843264)
		list2Elements: 	{DIDSLTests. DIJavaTests. DIPHPTests. DISTTests}
		listElements: 	nil
		shouldUpdateTitle: 	true
		testSemaphore: 	a Semaphore()
		sourceTextAreas: 	an OrderedCollection(a PluggableTextMorphWithLimits(303038464)...etc...
		multipleMethodsEditor: 	a MultipleMethodsEditor(286261248)
		contentSelection: 	nil
		acceptor: 	a MethodDefinitionAcceptor
		classifier: 	a MethodClassifier
		categoryWidget: 	a CategoryWidget
		methodWidget: 	a MethodWidget
		packagePattern: 	a RxMatcher
		searchWidget: 	a SearchMorph(866648064)


[ self runTestForAMethodWithAnHalt: aMethod ] in [ :e | 
aBoolean
	ifTrue: [ 
		[ self runTestForAMethodWithAnHalt: aMethod ] fork.
		shouldAnnounce := false.
		TestAsserter classForTestResult new ]
	ifFalse: [ 
		TestAsserter classForTestResult new
			addFailure: (testClass selector: testMethod selector);
			yourself ] ] in [ 
| vScroll testClass testResult |
vScroll := methodWidget vScrollValue.
testClass := testMethod methodClass.
testResult := [ testClass run: testMethod selector ]
	on: Halt
	do: [ :e | 
		aBoolean
			ifTrue: [ 
				[ self runTestForAMethodWithAnHalt: aMethod ] fork.
				shouldAnnounce := false.
				TestAsserter classForTestResult new ]
			ifFalse: [ 
				TestAsserter classForTestResult new
					addFailure: (testClass selector: testMethod selector);
					yourself ] ].
testResult updateResultsInHistory.
testSemaphoreForMethod signal.
(aBoolean and: [ testResult failures isEmpty not or: [ testResult errors isEmpty not ] ])
	ifTrue: [ testClass debug: testMethod selector ].
ClassesIconsCache removeKey: aMethod methodClass ifAbsent: [  ].
UIManager default defer: [ methodWidget vScrollValue: vScroll ] ] in PackageTreeNautilusUI(NautilusUI)>>runTestForAMethod:notifying:priority:
	Receiver: a PackageTreeNautilusUI
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a CategoryWidget a MethodWidget a NautilusWindow(...etc...
		model: 	a PackageTreeNautilus
		window: 	a NautilusWindow(542638080)
		hierarchyClass: 	nil
		cachedHierarchy: 	a SortHierarchically
		sourceTextArea: 	a PluggableTextMorphWithLimits(303038464)
		groupsSelection: 	a Dictionary()
		packagesSelection: 	a Dictionary(var-tests->true )
		classesSelection: 	a Dictionary(DIPHPTests->true )
		list: 	a MorphTreeMorph(273940480)
		list2: 	a PluggableIconListMorph(454295552)
		sourceCodePanel: 	a PanelMorph(183500800)
		commentTextArea: 	nil
		currentDisplayChoice: 	#SourceCode
		sourceTextAreaLimit: 	350
		sourceCodeContainer: 	a PanelMorph(584843264)
		list2Elements: 	{DIDSLTests. DIJavaTests. DIPHPTests. DISTTests}
		listElements: 	nil
		shouldUpdateTitle: 	true
		testSemaphore: 	a Semaphore()
		sourceTextAreas: 	an OrderedCollection(a PluggableTextMorphWithLimits(303038464)...etc...
		multipleMethodsEditor: 	a MultipleMethodsEditor(286261248)
		contentSelection: 	nil
		acceptor: 	a MethodDefinitionAcceptor
		classifier: 	a MethodClassifier
		categoryWidget: 	a CategoryWidget
		methodWidget: 	a MethodWidget
		packagePattern: 	a RxMatcher
		searchWidget: 	a SearchMorph(866648064)


[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ self runTestForAMethodWithAnHalt: aMethod ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	[ :e | 
aBoolean
	ifTrue: [ 
		[ self runTestForAMethodWithAnHalt...etc...
		startpc: 	275
		numArgs: 	0



--- The full stack ---
DIPhpDependencies>>testInput
DITestGroup>>build
[ :testGroup | testGroup build ] in DIDicto>>dictoBuild:
Array(SequenceableCollection)>>do:
DIDicto>>dictoBuild:
DIDicto>>dictoRun:
DIDicto>>dictoAll:
DIPHPTests(DIDSLTests)>>runAndReturnObjWithText:andSuccessResults:onProject:
DIPHPTests>>testPhp
DIPHPTests(TestCase)>>performTest
[ 
self setUp.
self performTest ] in DIPHPTests(TestCase)>>runCase
BlockClosure>>ensure:
DIPHPTests(TestCase)>>runCase
[ 
aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCase.
aTestCase announce: TestCaseEnded withResult: self.
self addPass: aTestCase ] in TestResult>>runCase:
BlockClosure>>on:do:
TestResult>>runCase:
DIPHPTests(TestCase)>>run:
[ self run: result ] in DIPHPTests(TestCase)>>run
BlockClosure>>ensure:
DIPHPTests(TestCase)>>run
DIPHPTests class(TestCase class)>>run:
PackageTreeNautilusUI(NautilusUI)>>runTestForAMethodWithAnHalt:
[ self runTestForAMethodWithAnHalt: aMethod ] in [ :e | 
aBoolean
	ifTrue: [ 
		[ self runTestForAMethodWithAnHalt: aMethod ] fork.
		shouldAnnounce := false.
		TestAsserter classForTestResult new ]
	ifFalse: [ 
		TestAsserter classForTestResult new
			addFailure: (testClass selector: testMethod selector);
			yourself ] ] in [ 
| vScroll testClass testResult |
vScroll := methodWidget vScrollValue.
testClass := testMethod methodClass.
testResult := [ testClass run: testMethod selector ]
	on: Halt
	do: [ :e | 
		aBoolean
			ifTrue: [ 
				[ self runTestForAMethodWithAnHalt: aMethod ] fork.
				shouldAnnounce := false.
				TestAsserter classForTestResult new ]
			ifFalse: [ 
				TestAsserter classForTestResult new
					addFailure: (testClass selector: testMethod selector);
					yourself ] ].
testResult updateResultsInHistory.
testSemaphoreForMethod signal.
(aBoolean and: [ testResult failures isEmpty not or: [ testResult errors isEmpty not ] ])
	ifTrue: [ testClass debug: testMethod selector ].
ClassesIconsCache removeKey: aMethod methodClass ifAbsent: [  ].
UIManager default defer: [ methodWidget vScrollValue: vScroll ] ] in PackageTreeNautilusUI(NautilusUI)>>runTestForAMethod:notifying:priority:
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Halt
24 February 2015 5:35:31.764639 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
NBCogit NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
https://github.com/pharo-project/pharo-vm.git Commit: 4a0d556150d478ff2de3c9624d2f18e6eaa3fa5c Date: 2014-12-18 18:42:53 +0100 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14893

Image: Pharo3.0 [Latest update: #30863]

DIPhpDependencies>>testRun
	Receiver: a DIPhpDependencies
	Arguments and temporary variables: 
		command: 	nil
	Receiver's instance variables: 
		output: 	''
		commandOutput: 	''
		NEWLINE: 	'
'
		rules: 	a DICollectionRule(Model cannot depend on Controller arDeleteGUI must de...etc...
		varSynonyms: 	nil
		sessionId: 	'1424795725'
		TIMESTAMP: 	'1424795725'
		TOOLNAME: 	'DIPhpDependencies'
		PROJECTROOT: 	'/home/otruffer/dicto/TestProjectPhp'
		PROJECTSRC: 	'src/'
		PROJECTBIN: 	'bin/'
		RESULTFILE: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/DictoTestSuite/1...etc...
		TESTFILE: 	nil
		testInputFileExt: 	'.st'
		SYSTEM: 	SYSTEM


DITestGroup>>build
	Receiver: a DITestGroup
	Arguments and temporary variables: 

	Receiver's instance variables: 
		rules: 	an OrderedCollection(Model cannot depend on Controller arDeleteGUI must ...etc...
		adapter: 	a DIPhpDependencies
		runCommandText: 	nil
		testSpecification: 	'[{ "subject" : "arEditField",
	   "argument": "ilDateTimeIn...etc...
		adapterID: 	'DIPhpDependencies'
		resultFile: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/DictoTestSuite/1...etc...
		specificationFile: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/DictoTest...etc...
		commandFile: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/DictoTestSuite/...etc...


[ :testGroup | testGroup build ] in DIDicto>>dictoBuild:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'
Model = PhpClass with name:"ar*"
Controller = PhpClass with name:...etc...
		adapterTestGroups: 	a Dictionary(DIGrepFileContent->a DITestGroup DIJMeterLoadTe...etc...
		testGroup: 	a DITestGroup
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424795725'
		singleShotTask: 	false


Array(SequenceableCollection)>>do:
	Receiver: an Array(a DITestGroup a DITestGroup a DITestGroup a DITestGroup a DITestGroup)
	Arguments and temporary variables: 
		aBlock: 	[ :testGroup | testGroup build ]
		index: 	4
	Receiver's instance variables: 
an Array(a DITestGroup a DITestGroup a DITestGroup a DITestGroup a DITestGroup)

DIDicto>>dictoBuild:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'
Model = PhpClass with name:"ar*"
Controller = PhpClass with name:...etc...
		adapterTestGroups: 	a Dictionary(DIGrepFileContent->a DITestGroup DIJMeterLoadTe...etc...
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424795725'
		singleShotTask: 	false


DIDicto>>dictoRun:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'
Model = PhpClass with name:"ar*"
Controller = PhpClass with name:...etc...
		adapterTestGroups: 	nil
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424795725'
		singleShotTask: 	false


DIDicto>>dictoAll:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'
Model = PhpClass with name:"ar*"
Controller = PhpClass with name:...etc...
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424795725'
		singleShotTask: 	false


DIPHPTests(DIDSLTests)>>runAndReturnObjWithText:andSuccessResults:onProject:
	Receiver: DIPHPTests>>#testPhp
	Arguments and temporary variables: 
		dslText: 	'
Model = PhpClass with name:"ar*"
Controller = PhpClass with name:"*G...etc...
		res: 	#(false true false)
		project: 	'TestProjectPhp'
		dicto: 	a DIDicto
	Receiver's instance variables: 
		testSelector: 	#testPhp
		expectedFails: 	nil


DIPHPTests>>testPhp
	Receiver: DIPHPTests>>#testPhp
	Arguments and temporary variables: 
		dsl: 	'
Model = PhpClass with name:"ar*"
Controller = PhpClass with name:"*GUI"
...etc...
		success: 	#(false true false)
	Receiver's instance variables: 
		testSelector: 	#testPhp
		expectedFails: 	nil


DIPHPTests(TestCase)>>performTest
	Receiver: DIPHPTests>>#testPhp
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testPhp
		expectedFails: 	nil


[ 
self setUp.
self performTest ] in DIPHPTests(TestCase)>>runCase
	Receiver: DIPHPTests>>#testPhp
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testPhp
		expectedFails: 	nil


BlockClosure>>ensure:
	Receiver: [ 
self setUp.
self performTest ]
	Arguments and temporary variables: 
		aBlock: 	[ 
self tearDown.
self cleanUpInstanceVariables ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	DIPHPTests(TestCase)>>runCase
		startpc: 	57
		numArgs: 	0


DIPHPTests(TestCase)>>runCase
	Receiver: DIPHPTests>>#testPhp
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testPhp
		expectedFails: 	nil


[ 
aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCase.
aTestCase announce: TestCaseEnded withResult: self.
self addPass: aTestCase ] in TestResult>>runCase:
	Receiver: 0 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 0 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	DIPHPTests>>#testPhp
	Receiver's instance variables: 
		timeStamp: 	2015-02-24T17:35:24.770808+01:00
		failures: 	a Set()
		errors: 	an OrderedCollection()
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


BlockClosure>>on:do:
	Receiver: [ 
aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCase.
aTestCase anno...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :ex | ex sunitAnnounce: aTestCase toResult: self ]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	TestResult>>runCase:
		startpc: 	70
		numArgs: 	0


TestResult>>runCase:
	Receiver: 0 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 0 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	DIPHPTests>>#testPhp
	Receiver's instance variables: 
		timeStamp: 	2015-02-24T17:35:24.770808+01:00
		failures: 	a Set()
		errors: 	an OrderedCollection()
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


DIPHPTests(TestCase)>>run:
	Receiver: DIPHPTests>>#testPhp
	Arguments and temporary variables: 
		aResult: 	0 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 0 errors,...etc...
	Receiver's instance variables: 
		testSelector: 	#testPhp
		expectedFails: 	nil


[ self run: result ] in DIPHPTests(TestCase)>>run
	Receiver: DIPHPTests>>#testPhp
	Arguments and temporary variables: 
		result: 	0 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 0 errors, ...etc...
	Receiver's instance variables: 
		testSelector: 	#testPhp
		expectedFails: 	nil


BlockClosure>>ensure:
	Receiver: [ self run: result ]
	Arguments and temporary variables: 
		aBlock: 	[ self classForTestResource resetResources: self resources ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	DIPHPTests(TestCase)>>run
		startpc: 	46
		numArgs: 	0


DIPHPTests(TestCase)>>run
	Receiver: DIPHPTests>>#testPhp
	Arguments and temporary variables: 
		result: 	0 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 0 errors, ...etc...
	Receiver's instance variables: 
		testSelector: 	#testPhp
		expectedFails: 	nil


DIPHPTests class(TestCase class)>>run:
	Receiver: DIPHPTests
	Arguments and temporary variables: 
		aSymbol: 	#testPhp
	Receiver's instance variables: 
		superclass: 	DIDSLTests
		methodDict: 	a MethodDictionary(#testPhp->DIPHPTests>>#testPhp )
		format: 	134
		layout: 	a FixedLayout
		instanceVariables: 	#()
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#DIPHPTests
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Dicto-var-tests'
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set(#testP...etc...


PackageTreeNautilusUI(NautilusUI)>>runTestForAMethodWithAnHalt:
	Receiver: a PackageTreeNautilusUI
	Arguments and temporary variables: 
		aMethod: 	DIPHPTests>>#testPhp
		testMethod: 	DIPHPTests>>#testPhp
		color: 	nil
		vScroll: 	0.0
		testClass: 	DIPHPTests
		testResult: 	nil
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a CategoryWidget a MethodWidget a NautilusWindow(...etc...
		model: 	a PackageTreeNautilus
		window: 	a NautilusWindow(542638080)
		hierarchyClass: 	nil
		cachedHierarchy: 	a SortHierarchically
		sourceTextArea: 	a PluggableTextMorphWithLimits(303038464)
		groupsSelection: 	a Dictionary()
		packagesSelection: 	a Dictionary(var-tests->true )
		classesSelection: 	a Dictionary(DIPHPTests->true )
		list: 	a MorphTreeMorph(273940480)
		list2: 	a PluggableIconListMorph(454295552)
		sourceCodePanel: 	a PanelMorph(183500800)
		commentTextArea: 	nil
		currentDisplayChoice: 	#SourceCode
		sourceTextAreaLimit: 	350
		sourceCodeContainer: 	a PanelMorph(584843264)
		list2Elements: 	{DIDSLTests. DIJavaTests. DIPHPTests. DISTTests}
		listElements: 	nil
		shouldUpdateTitle: 	true
		testSemaphore: 	a Semaphore()
		sourceTextAreas: 	an OrderedCollection(a PluggableTextMorphWithLimits(303038464)...etc...
		multipleMethodsEditor: 	a MultipleMethodsEditor(286261248)
		contentSelection: 	nil
		acceptor: 	a MethodDefinitionAcceptor
		classifier: 	a MethodClassifier
		categoryWidget: 	a CategoryWidget
		methodWidget: 	a MethodWidget
		packagePattern: 	a RxMatcher
		searchWidget: 	a SearchMorph(866648064)


[ self runTestForAMethodWithAnHalt: aMethod ] in [ :e | 
aBoolean
	ifTrue: [ 
		[ self runTestForAMethodWithAnHalt: aMethod ] fork.
		shouldAnnounce := false.
		TestAsserter classForTestResult new ]
	ifFalse: [ 
		TestAsserter classForTestResult new
			addFailure: (testClass selector: testMethod selector);
			yourself ] ] in [ 
| vScroll testClass testResult |
vScroll := methodWidget vScrollValue.
testClass := testMethod methodClass.
testResult := [ testClass run: testMethod selector ]
	on: Halt
	do: [ :e | 
		aBoolean
			ifTrue: [ 
				[ self runTestForAMethodWithAnHalt: aMethod ] fork.
				shouldAnnounce := false.
				TestAsserter classForTestResult new ]
			ifFalse: [ 
				TestAsserter classForTestResult new
					addFailure: (testClass selector: testMethod selector);
					yourself ] ].
testResult updateResultsInHistory.
testSemaphoreForMethod signal.
(aBoolean and: [ testResult failures isEmpty not or: [ testResult errors isEmpty not ] ])
	ifTrue: [ testClass debug: testMethod selector ].
ClassesIconsCache removeKey: aMethod methodClass ifAbsent: [  ].
UIManager default defer: [ methodWidget vScrollValue: vScroll ] ] in PackageTreeNautilusUI(NautilusUI)>>runTestForAMethod:notifying:priority:
	Receiver: a PackageTreeNautilusUI
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a CategoryWidget a MethodWidget a NautilusWindow(...etc...
		model: 	a PackageTreeNautilus
		window: 	a NautilusWindow(542638080)
		hierarchyClass: 	nil
		cachedHierarchy: 	a SortHierarchically
		sourceTextArea: 	a PluggableTextMorphWithLimits(303038464)
		groupsSelection: 	a Dictionary()
		packagesSelection: 	a Dictionary(var-tests->true )
		classesSelection: 	a Dictionary(DIPHPTests->true )
		list: 	a MorphTreeMorph(273940480)
		list2: 	a PluggableIconListMorph(454295552)
		sourceCodePanel: 	a PanelMorph(183500800)
		commentTextArea: 	nil
		currentDisplayChoice: 	#SourceCode
		sourceTextAreaLimit: 	350
		sourceCodeContainer: 	a PanelMorph(584843264)
		list2Elements: 	{DIDSLTests. DIJavaTests. DIPHPTests. DISTTests}
		listElements: 	nil
		shouldUpdateTitle: 	true
		testSemaphore: 	a Semaphore()
		sourceTextAreas: 	an OrderedCollection(a PluggableTextMorphWithLimits(303038464)...etc...
		multipleMethodsEditor: 	a MultipleMethodsEditor(286261248)
		contentSelection: 	nil
		acceptor: 	a MethodDefinitionAcceptor
		classifier: 	a MethodClassifier
		categoryWidget: 	a CategoryWidget
		methodWidget: 	a MethodWidget
		packagePattern: 	a RxMatcher
		searchWidget: 	a SearchMorph(866648064)


[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ self runTestForAMethodWithAnHalt: aMethod ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	[ :e | 
aBoolean
	ifTrue: [ 
		[ self runTestForAMethodWithAnHalt...etc...
		startpc: 	275
		numArgs: 	0



--- The full stack ---
DIPhpDependencies>>testRun
DITestGroup>>build
[ :testGroup | testGroup build ] in DIDicto>>dictoBuild:
Array(SequenceableCollection)>>do:
DIDicto>>dictoBuild:
DIDicto>>dictoRun:
DIDicto>>dictoAll:
DIPHPTests(DIDSLTests)>>runAndReturnObjWithText:andSuccessResults:onProject:
DIPHPTests>>testPhp
DIPHPTests(TestCase)>>performTest
[ 
self setUp.
self performTest ] in DIPHPTests(TestCase)>>runCase
BlockClosure>>ensure:
DIPHPTests(TestCase)>>runCase
[ 
aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCase.
aTestCase announce: TestCaseEnded withResult: self.
self addPass: aTestCase ] in TestResult>>runCase:
BlockClosure>>on:do:
TestResult>>runCase:
DIPHPTests(TestCase)>>run:
[ self run: result ] in DIPHPTests(TestCase)>>run
BlockClosure>>ensure:
DIPHPTests(TestCase)>>run
DIPHPTests class(TestCase class)>>run:
PackageTreeNautilusUI(NautilusUI)>>runTestForAMethodWithAnHalt:
[ self runTestForAMethodWithAnHalt: aMethod ] in [ :e | 
aBoolean
	ifTrue: [ 
		[ self runTestForAMethodWithAnHalt: aMethod ] fork.
		shouldAnnounce := false.
		TestAsserter classForTestResult new ]
	ifFalse: [ 
		TestAsserter classForTestResult new
			addFailure: (testClass selector: testMethod selector);
			yourself ] ] in [ 
| vScroll testClass testResult |
vScroll := methodWidget vScrollValue.
testClass := testMethod methodClass.
testResult := [ testClass run: testMethod selector ]
	on: Halt
	do: [ :e | 
		aBoolean
			ifTrue: [ 
				[ self runTestForAMethodWithAnHalt: aMethod ] fork.
				shouldAnnounce := false.
				TestAsserter classForTestResult new ]
			ifFalse: [ 
				TestAsserter classForTestResult new
					addFailure: (testClass selector: testMethod selector);
					yourself ] ].
testResult updateResultsInHistory.
testSemaphoreForMethod signal.
(aBoolean and: [ testResult failures isEmpty not or: [ testResult errors isEmpty not ] ])
	ifTrue: [ testClass debug: testMethod selector ].
ClassesIconsCache removeKey: aMethod methodClass ifAbsent: [  ].
UIManager default defer: [ methodWidget vScrollValue: vScroll ] ] in PackageTreeNautilusUI(NautilusUI)>>runTestForAMethod:notifying:priority:
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: DIPHPTests class>>runAndReturnObjWithText:andSuccessResults:onProject:
24 February 2015 5:35:54.708661 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
NBCogit NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
https://github.com/pharo-project/pharo-vm.git Commit: 4a0d556150d478ff2de3c9624d2f18e6eaa3fa5c Date: 2014-12-18 18:42:53 +0100 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14893

Image: Pharo3.0 [Latest update: #30863]

DIPHPTests class(Object)>>doesNotUnderstand: #runAndReturnObjWithText:andSuccessResults:onProject:
	Receiver: DIPHPTests
	Arguments and temporary variables: 
		aMessage: 	runAndReturnObjWithText: '
Model = PhpClass with name:"ar*"
Controlle...etc...
		exception: 	MessageNotUnderstood: DIPHPTests class>>runAndReturnObjWithText:andS...etc...
		resumeValue: 	nil
	Receiver's instance variables: 
		superclass: 	DIDSLTests
		methodDict: 	a MethodDictionary(#testPhp->DIPHPTests>>#testPhp )
		format: 	134
		layout: 	a FixedLayout
		instanceVariables: 	#()
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#DIPHPTests
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Dicto-var-tests'
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set(#testP...etc...


DIPHPTests class>>DoIt
	Receiver: DIPHPTests
	Arguments and temporary variables: 
		dsl: 	'
Model = PhpClass with name:"ar*"
Controller = PhpClass with name:"*GUI"
...etc...
		success: 	#(false true false)
	Receiver's instance variables: 
		superclass: 	DIDSLTests
		methodDict: 	a MethodDictionary(#testPhp->DIPHPTests>>#testPhp )
		format: 	134
		layout: 	a FixedLayout
		instanceVariables: 	#()
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#DIPHPTests
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Dicto-var-tests'
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set(#testP...etc...


CompiledMethod>>valueWithReceiver:arguments:
	Receiver: DIPHPTests class>>#DoIt
	Arguments and temporary variables: 
		aReceiver: 	DIPHPTests
		anArray: 	#()
	Receiver's instance variables: 
DIPHPTests class>>#DoIt

[ v := compiledMethod valueWithReceiver: receiver arguments: #() ] in SmalltalkEditor>>tallySelection
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		receiver: 	DIPHPTests
		context: 	nil
		compiledMethod: 	DIPHPTests class>>#DoIt
		profiler: 	nil
		v: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(509870080)
		selectionShowing: 	true
		model: 	a PackageTreeNautilusUI
		editingState: 	a SmalltalkEditingState


BlockClosure>>ensure:
	Receiver: [ v := compiledMethod valueWithReceiver: receiver arguments: #() ]
	Arguments and temporary variables: 
		aBlock: 	[ 
"cancel the probe and return the value"
"Could have already been ter...etc...
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor>>tallySelection
		startpc: 	105
		numArgs: 	0


MessageTally>>spyEvery:on:
	Receiver: nil(SmalltalkEditor) >> tallySelection
	Arguments and temporary variables: 
		observedProcess: 	a Process in nil
		millisecs: 	1
		aBlock: 	[ v := compiledMethod valueWithReceiver: receiver arguments: #() ]
		myDelay: 	a Delay(1 msecs; 1 msecs remaining)
		time0: 	346257
	Receiver's instance variables: 
		class: 	SmalltalkEditor
		method: 	SmalltalkEditor>>#tallySelection
		process: 	nil
		tally: 	43
		receivers: 	an Array(nil(MorphicUIManager) >> spawnNewProcess nil(MorphicUIManag...etc...
		senders: 	nil
		time: 	0
		gcStats: 	#(64500196 66464468 70611580 nil nil 2000 3 295 1492 629 90 0 0 0 0 0 ...etc...
		maxClassNameSize: 	1000
		maxClassPlusSelectorSize: 	1000
		maxTabs: 	100
		reportOtherProcesses: 	true


TimeProfiler>>runBlock:pollingEvery:
	Receiver: a TimeProfiler
	Arguments and temporary variables: 
		aBlock: 	[ v := compiledMethod valueWithReceiver: receiver arguments: #() ]
		pollPeriod: 	1
	Receiver's instance variables: 
		dependents: 	nil
		selection: 	nil
		announcer: 	nil
		rootItems: 	nil
		autoMultiSelection: 	nil
		headerLabel: 	nil
		multiSelection: 	nil
		wrapBlockOrSelector: 	nil
		isCheckList: 	nil
		enabled: 	nil
		win: 	nil
		rootMessageTally: 	nil(SmalltalkEditor) >> tallySelection
		threshold: 	nil
		minPercentageToExpand: 	nil
		treeMorph: 	nil
		block: 	[ v := compiledMethod valueWithReceiver: receiver arguments: #() ]
		blockCodePane: 	nil
		withBlockCodePane: 	false
		blockSource: 	nil
		reportOtherProcesses: 	nil
		showLeavesOnly: 	nil
		codeTabPane: 	nil
		resultPane: 	nil
		result: 	nil
		withToolBar: 	false


TimeProfiler>>openOnBlock:
	Receiver: a TimeProfiler
	Arguments and temporary variables: 
		aBlock: 	[ v := compiledMethod valueWithReceiver: receiver arguments: #() ]
	Receiver's instance variables: 
		dependents: 	nil
		selection: 	nil
		announcer: 	nil
		rootItems: 	nil
		autoMultiSelection: 	nil
		headerLabel: 	nil
		multiSelection: 	nil
		wrapBlockOrSelector: 	nil
		isCheckList: 	nil
		enabled: 	nil
		win: 	nil
		rootMessageTally: 	nil(SmalltalkEditor) >> tallySelection
		threshold: 	nil
		minPercentageToExpand: 	nil
		treeMorph: 	nil
		block: 	[ v := compiledMethod valueWithReceiver: receiver arguments: #() ]
		blockCodePane: 	nil
		withBlockCodePane: 	false
		blockSource: 	nil
		reportOtherProcesses: 	nil
		showLeavesOnly: 	nil
		codeTabPane: 	nil
		resultPane: 	nil
		result: 	nil
		withToolBar: 	false


TimeProfiler class>>spyOn:
	Receiver: TimeProfiler
	Arguments and temporary variables: 
		aBlock: 	[ v := compiledMethod valueWithReceiver: receiver arguments: #() ]
	Receiver's instance variables: 
		superclass: 	MorphTreeModel
		methodDict: 	a MethodDictionary(#blockCode->TimeProfiler>>#blockCode #blockCode:...etc...
		format: 	180
		layout: 	a FixedLayout
		instanceVariables: 	#(#win #rootMessageTally #threshold #minPercentageToExpand #...etc...
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#TimeProfiler
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Tools-Profilers'
		traitComposition: 	{}
		localSelectors: 	nil


SmalltalkEditor>>tallySelection
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		v: 	nil
		receiver: 	DIPHPTests
		context: 	nil
		compiledMethod: 	DIPHPTests class>>#DoIt
		profiler: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(509870080)
		selectionShowing: 	true
		model: 	a PackageTreeNautilusUI
		editingState: 	a SmalltalkEditingState


SmalltalkEditor>>tallyIt
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 

	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(509870080)
		selectionShowing: 	true
		model: 	a PackageTreeNautilusUI
		editingState: 	a SmalltalkEditingState


[ textMorph editor tallyIt ] in PluggableTextMorphWithLimits(PluggableTextMorph)>>tallyIt
	Receiver: a PluggableTextMorphWithLimits(303038464)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(286.0@435.0) corner: (1132.0@829.0)
		owner: 	a MultipleMethodsEditor(286261248)
		submorphs: 	an Array(an AlphaImageMorph(499908608) a TransformMorph(735313920))
		fullBounds: 	(286@435) corner: (1132@829)
		color: 	Color white
		extension: 	a MorphExtension (488636416) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.784 g: 0.784 b: 0.784 alpha: 1.0)
		model: 	a PackageTreeNautilusUI
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(344719360)
		scroller: 	a TransformMorph(735313920)
		getMenuSelector: 	#sourceCodeMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(65273856)
		textMorph: 	a TextMorphForEditView(509870080)
		getTextSelector: 	#sourceCodeFrom:
		setTextSelector: 	#compileSource:notifying:
		getSelectionSelector: 	#contentsSelectionFrom:
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(9 to: 449)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil
		doubleClickSelector: 	nil
		setSelectionSelector: 	nil
		alertLimit: 	700
		locked: 	false
		warningLimit: 	350
		method: 	nil
		lockIcon: 	an AlphaImageMorph(499908608)
		canLockChangeSelector: 	#canChangeLockFor:
		lockSelector: 	#lockTextArea:from:


[ result := editBlock value ] in PluggableTextMorphWithLimits(PluggableTextMorph)>>handleEdit:
	Receiver: a PluggableTextMorphWithLimits(303038464)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph editor tallyIt ]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(286.0@435.0) corner: (1132.0@829.0)
		owner: 	a MultipleMethodsEditor(286261248)
		submorphs: 	an Array(an AlphaImageMorph(499908608) a TransformMorph(735313920))
		fullBounds: 	(286@435) corner: (1132@829)
		color: 	Color white
		extension: 	a MorphExtension (488636416) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.784 g: 0.784 b: 0.784 alpha: 1.0)
		model: 	a PackageTreeNautilusUI
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(344719360)
		scroller: 	a TransformMorph(735313920)
		getMenuSelector: 	#sourceCodeMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(65273856)
		textMorph: 	a TextMorphForEditView(509870080)
		getTextSelector: 	#sourceCodeFrom:
		setTextSelector: 	#compileSource:notifying:
		getSelectionSelector: 	#contentsSelectionFrom:
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(9 to: 449)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil
		doubleClickSelector: 	nil
		setSelectionSelector: 	nil
		alertLimit: 	700
		locked: 	false
		warningLimit: 	350
		method: 	nil
		lockIcon: 	an AlphaImageMorph(499908608)
		canLockChangeSelector: 	#canChangeLockFor:
		lockSelector: 	#lockTextArea:from:


TextMorphForEditView(TextMorph)>>handleEdit:
	Receiver: a TextMorphForEditView(509870080)
	Arguments and temporary variables: 
		editBlock: 	[ result := editBlock value ]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (838@344)
		owner: 	a TransformMorph(735313920)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (838@344)
		color: 	Color black
		extension: 	a MorphExtension (552599552) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Source Code Pro
		text: 	a Text for 'testPhp
| dsl success|
	
dsl := ''
Model = PhpClass with name...etc...
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		defaultColor: 	Color black
		editView: 	a PluggableTextMorphWithLimits(303038464)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


PluggableTextMorphWithLimits(PluggableTextMorph)>>handleEdit:
	Receiver: a PluggableTextMorphWithLimits(303038464)
	Arguments and temporary variables: 
		result: 	nil
		editBlock: 	[ textMorph editor tallyIt ]
	Receiver's instance variables: 
		bounds: 	(286.0@435.0) corner: (1132.0@829.0)
		owner: 	a MultipleMethodsEditor(286261248)
		submorphs: 	an Array(an AlphaImageMorph(499908608) a TransformMorph(735313920))
		fullBounds: 	(286@435) corner: (1132@829)
		color: 	Color white
		extension: 	a MorphExtension (488636416) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.784 g: 0.784 b: 0.784 alpha: 1.0)
		model: 	a PackageTreeNautilusUI
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(344719360)
		scroller: 	a TransformMorph(735313920)
		getMenuSelector: 	#sourceCodeMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(65273856)
		textMorph: 	a TextMorphForEditView(509870080)
		getTextSelector: 	#sourceCodeFrom:
		setTextSelector: 	#compileSource:notifying:
		getSelectionSelector: 	#contentsSelectionFrom:
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(9 to: 449)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil
		doubleClickSelector: 	nil
		setSelectionSelector: 	nil
		alertLimit: 	700
		locked: 	false
		warningLimit: 	350
		method: 	nil
		lockIcon: 	an AlphaImageMorph(499908608)
		canLockChangeSelector: 	#canChangeLockFor:
		lockSelector: 	#lockTextArea:from:


PluggableTextMorphWithLimits(PluggableTextMorph)>>tallyIt
	Receiver: a PluggableTextMorphWithLimits(303038464)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(286.0@435.0) corner: (1132.0@829.0)
		owner: 	a MultipleMethodsEditor(286261248)
		submorphs: 	an Array(an AlphaImageMorph(499908608) a TransformMorph(735313920))
		fullBounds: 	(286@435) corner: (1132@829)
		color: 	Color white
		extension: 	a MorphExtension (488636416) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.784 g: 0.784 b: 0.784 alpha: 1.0)
		model: 	a PackageTreeNautilusUI
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(344719360)
		scroller: 	a TransformMorph(735313920)
		getMenuSelector: 	#sourceCodeMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(65273856)
		textMorph: 	a TextMorphForEditView(509870080)
		getTextSelector: 	#sourceCodeFrom:
		setTextSelector: 	#compileSource:notifying:
		getSelectionSelector: 	#contentsSelectionFrom:
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(9 to: 449)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil
		doubleClickSelector: 	nil
		setSelectionSelector: 	nil
		alertLimit: 	700
		locked: 	false
		warningLimit: 	350
		method: 	nil
		lockIcon: 	an AlphaImageMorph(499908608)
		canLockChangeSelector: 	#canChangeLockFor:
		lockSelector: 	#lockTextArea:from:


PackageTreeNautilusUI(Object)>>perform:orSendTo:
	Receiver: a PackageTreeNautilusUI
	Arguments and temporary variables: 
		selector: 	#tallyIt
		otherTarget: 	a PluggableTextMorphWithLimits(303038464)
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a CategoryWidget a MethodWidget a NautilusWindow(...etc...
		model: 	a PackageTreeNautilus
		window: 	a NautilusWindow(542638080)
		hierarchyClass: 	nil
		cachedHierarchy: 	a SortHierarchically
		sourceTextArea: 	a PluggableTextMorphWithLimits(303038464)
		groupsSelection: 	a Dictionary()
		packagesSelection: 	a Dictionary(var-tests->true )
		classesSelection: 	a Dictionary(DIPHPTests->true )
		list: 	a MorphTreeMorph(273940480)
		list2: 	a PluggableIconListMorph(454295552)
		sourceCodePanel: 	a PanelMorph(183500800)
		commentTextArea: 	nil
		currentDisplayChoice: 	#SourceCode
		sourceTextAreaLimit: 	350
		sourceCodeContainer: 	a PanelMorph(584843264)
		list2Elements: 	{DIDSLTests. DIJavaTests. DIPHPTests. DISTTests}
		listElements: 	nil
		shouldUpdateTitle: 	true
		testSemaphore: 	a Semaphore()
		sourceTextAreas: 	an OrderedCollection(a PluggableTextMorphWithLimits(303038464)...etc...
		multipleMethodsEditor: 	a MultipleMethodsEditor(286261248)
		contentSelection: 	nil
		acceptor: 	a MethodDefinitionAcceptor
		classifier: 	a MethodClassifier
		categoryWidget: 	a CategoryWidget
		methodWidget: 	a MethodWidget
		packagePattern: 	a RxMatcher
		searchWidget: 	a SearchMorph(866648064)


[ 
| selArgCount |
"show cursor in case item opens a new MVC window"
(selArgCount := selector numArgs) = 0
	ifTrue: [ target perform: selector ]
	ifFalse: [ 
		selArgCount = arguments size
			ifTrue: [ target perform: selector withArguments: arguments ]
			ifFalse: [ target perform: selector withArguments: (arguments copyWith: evt) ] ].
self changed ] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(198443008)'Profile it'
	Arguments and temporary variables: 
		evt: 	[(526@579) mouseUp 346221 nil]
		w: 	a WorldMorph(511705088) [world]
		selArgCount: 	2
	Receiver's instance variables: 
		bounds: 	(443.0@576.0) corner: (614.0@594.0)
		owner: 	a MenuMorph(34865152)
		submorphs: 	#()
		fullBounds: 	(443.0@576.0) corner: (614.0@594.0)
		color: 	Color black
		extension: 	a MorphExtension (221773824)
		font: 	a LogicalFont
 familyName: Source Sans Pro
 emphasis: nil
 pointSize: 10
...etc...
		emphasis: 	0
		contents: 	'Profile it'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a PackageTreeNautilusUI
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#tallyIt a PluggableTextMorphWithLimits(303038464))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


BlockClosure>>ensure:
	Receiver: [ 
| selArgCount |
"show cursor in case item opens a new MVC window"
(selArgCount := selec...etc...
	Arguments and temporary variables: 
		aBlock: 	[ oldcursor show ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
		startpc: 	134
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r100000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[ 
| selArgCount |
"show cursor in case item opens a new MVC window"
(s...etc...
		oldcursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	(-1@ -1)
		maskForm: 	Form(16x16x1)


ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(198443008)'Profile it'
	Arguments and temporary variables: 
		evt: 	[(526@579) mouseUp 346221 nil]
		w: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		bounds: 	(443.0@576.0) corner: (614.0@594.0)
		owner: 	a MenuMorph(34865152)
		submorphs: 	#()
		fullBounds: 	(443.0@576.0) corner: (614.0@594.0)
		color: 	Color black
		extension: 	a MorphExtension (221773824)
		font: 	a LogicalFont
 familyName: Source Sans Pro
 emphasis: nil
 pointSize: 10
...etc...
		emphasis: 	0
		contents: 	'Profile it'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a PackageTreeNautilusUI
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#tallyIt a PluggableTextMorphWithLimits(303038464))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
	Receiver: a ToggleMenuItemMorph(198443008)'Profile it'
	Arguments and temporary variables: 
		evt: 	[(526@579) mouseUp 346221 nil]
	Receiver's instance variables: 
		bounds: 	(443.0@576.0) corner: (614.0@594.0)
		owner: 	a MenuMorph(34865152)
		submorphs: 	#()
		fullBounds: 	(443.0@576.0) corner: (614.0@594.0)
		color: 	Color black
		extension: 	a MorphExtension (221773824)
		font: 	a LogicalFont
 familyName: Source Sans Pro
 emphasis: nil
 pointSize: 10
...etc...
		emphasis: 	0
		contents: 	'Profile it'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a PackageTreeNautilusUI
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#tallyIt a PluggableTextMorphWithLimits(303038464))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
	Receiver: a ToggleMenuItemMorph(198443008)'Profile it'
	Arguments and temporary variables: 
		anEvent: 	[(526@579) mouseUp 346221 nil]
	Receiver's instance variables: 
		bounds: 	(443.0@576.0) corner: (614.0@594.0)
		owner: 	a MenuMorph(34865152)
		submorphs: 	#()
		fullBounds: 	(443.0@576.0) corner: (614.0@594.0)
		color: 	Color black
		extension: 	a MorphExtension (221773824)
		font: 	a LogicalFont
 familyName: Source Sans Pro
 emphasis: nil
 pointSize: 10
...etc...
		emphasis: 	0
		contents: 	'Profile it'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a PackageTreeNautilusUI
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#tallyIt a PluggableTextMorphWithLimits(303038464))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [(526@579) mouseUp 346221 nil]
	Arguments and temporary variables: 
		anObject: 	a ToggleMenuItemMorph(198443008)'Profile it'
	Receiver's instance variables: 
		timeStamp: 	346221
		source: 	a HandMorph(760479744)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(526@579)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


ToggleMenuItemMorph(Morph)>>handleEvent:
	Receiver: a ToggleMenuItemMorph(198443008)'Profile it'
	Arguments and temporary variables: 
		anEvent: 	[(526@579) mouseUp 346221 nil]
	Receiver's instance variables: 
		bounds: 	(443.0@576.0) corner: (614.0@594.0)
		owner: 	a MenuMorph(34865152)
		submorphs: 	#()
		fullBounds: 	(443.0@576.0) corner: (614.0@594.0)
		color: 	Color black
		extension: 	a MorphExtension (221773824)
		font: 	a LogicalFont
 familyName: Source Sans Pro
 emphasis: nil
 pointSize: 10
...etc...
		emphasis: 	0
		contents: 	'Profile it'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a PackageTreeNautilusUI
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#tallyIt a PluggableTextMorphWithLimits(303038464))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(526@579) mouseUp 346221 nil]
		aMorph: 	a ToggleMenuItemMorph(198443008)'Profile it'
		localEvt: 	nil
		index: 	1
		child: 	nil
		morphs: 	#()
		inside: 	true
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(526@579) mouseUp 346221 nil]
		aMorph: 	a ToggleMenuItemMorph(198443008)'Profile it'
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


ToggleMenuItemMorph(Morph)>>processEvent:using:
	Receiver: a ToggleMenuItemMorph(198443008)'Profile it'
	Arguments and temporary variables: 
		anEvent: 	[(526@579) mouseUp 346221 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	(443.0@576.0) corner: (614.0@594.0)
		owner: 	a MenuMorph(34865152)
		submorphs: 	#()
		fullBounds: 	(443.0@576.0) corner: (614.0@594.0)
		color: 	Color black
		extension: 	a MorphExtension (221773824)
		font: 	a LogicalFont
 familyName: Source Sans Pro
 emphasis: nil
 pointSize: 10
...etc...
		emphasis: 	0
		contents: 	'Profile it'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a PackageTreeNautilusUI
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#tallyIt a PluggableTextMorphWithLimits(303038464))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(526@579) mouseUp 346221 nil]
		aMorph: 	a MenuMorph(34865152)
		localEvt: 	[(526@579) mouseUp 346221 nil]
		index: 	11
		child: 	a ToggleMenuItemMorph(198443008)'Profile it'
		morphs: 	an Array(a ToggleMenuItemMorph(1010302976)'Suggestions' a MenuLineMorph...etc...
		inside: 	false
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(526@579) mouseUp 346221 nil]
		aMorph: 	a MenuMorph(34865152)
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MenuMorph(Morph)>>processEvent:using:
	Receiver: a MenuMorph(34865152)
	Arguments and temporary variables: 
		anEvent: 	[(526@579) mouseUp 346221 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	(438.0@416.0) corner: (619.0@858.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(1010302976)'Suggestions' a MenuLineMo...etc...
		fullBounds: 	(438.0@416.0) corner: (619.0@858.0)
		color: 	(Color r: 0.894 g: 0.894 b: 0.894 alpha: 1.0)
		extension: 	a MorphExtension (76283904) [other:  (basicColor -> (Color r: 0.8230...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.674 g: 0.674 b: 0.674 alpha: 1.0)
		defaultTarget: 	a PackageTreeNautilusUI
		selectedItem: 	a ToggleMenuItemMorph(198443008)'Profile it'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(1010302976)'Suggestions' ...etc...


MenuMorph(Morph)>>processEvent:
	Receiver: a MenuMorph(34865152)
	Arguments and temporary variables: 
		anEvent: 	[(526@579) mouseUp 346221 nil]
	Receiver's instance variables: 
		bounds: 	(438.0@416.0) corner: (619.0@858.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(1010302976)'Suggestions' a MenuLineMo...etc...
		fullBounds: 	(438.0@416.0) corner: (619.0@858.0)
		color: 	(Color r: 0.894 g: 0.894 b: 0.894 alpha: 1.0)
		extension: 	a MorphExtension (76283904) [other:  (basicColor -> (Color r: 0.8230...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.674 g: 0.674 b: 0.674 alpha: 1.0)
		defaultTarget: 	a PackageTreeNautilusUI
		selectedItem: 	a ToggleMenuItemMorph(198443008)'Profile it'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(1010302976)'Suggestions' ...etc...


MenuMorph>>handleFocusEvent:
	Receiver: a MenuMorph(34865152)
	Arguments and temporary variables: 
		evt: 	[(526@579) mouseUp 346221 nil]
	Receiver's instance variables: 
		bounds: 	(438.0@416.0) corner: (619.0@858.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(1010302976)'Suggestions' a MenuLineMo...etc...
		fullBounds: 	(438.0@416.0) corner: (619.0@858.0)
		color: 	(Color r: 0.894 g: 0.894 b: 0.894 alpha: 1.0)
		extension: 	a MorphExtension (76283904) [other:  (basicColor -> (Color r: 0.8230...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.674 g: 0.674 b: 0.674 alpha: 1.0)
		defaultTarget: 	a PackageTreeNautilusUI
		selectedItem: 	a ToggleMenuItemMorph(198443008)'Profile it'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(1010302976)'Suggestions' ...etc...


[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[(526@579) mouseUp 346221 nil]
		focusHolder: 	a MenuMorph(34865152)
		aBlock: 	[ self mouseFocus: nil ]
		w: 	a WorldMorph(511705088) [world]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(526@579) corner: (542@595)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(526@579) corner: (542@595)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(526@579) mouseOver nil nil]
		targetOffset: 	(83.0@3.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 346221 526 579 0 0 0 1)
		lastKeyScanCode: 	115
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


BlockClosure>>on:do:
	Receiver: [ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (an...etc...
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :ex | 
ActiveWorld := priorWorld.
ActiveEvent := priorEvent.
A...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	HandMorph>>sendFocusEvent:to:clear:
		startpc: 	67
		numArgs: 	0


WorldMorph(PasteUpMorph)>>becomeActiveDuring:
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 
		aBlock: 	[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder ha...etc...
		priorWorld: 	a WorldMorph(511705088) [world]
		priorHand: 	a HandMorph(760479744)
		priorEvent: 	[(526@579) mouseOver red nil nil]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1535@876)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a NautilusWindow(542638080) a GLM...etc...
		fullBounds: 	(0@0) corner: (1535@876)
		color: 	Color white
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		result: 	nil
		anEvent: 	[(526@579) mouseUp 346221 nil]
		focusHolder: 	a MenuMorph(34865152)
		aBlock: 	[ self mouseFocus: nil ]
		w: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		bounds: 	(526@579) corner: (542@595)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(526@579) corner: (542@595)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(526@579) mouseOver nil nil]
		targetOffset: 	(83.0@3.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 346221 526 579 0 0 0 1)
		lastKeyScanCode: 	115
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[(526@579) mouseUp 346221 nil]
		focusHolder: 	a MenuMorph(34865152)
		aBlock: 	[ self mouseFocus: nil ]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(526@579) corner: (542@595)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(526@579) corner: (542@595)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(526@579) mouseOver nil nil]
		targetOffset: 	(83.0@3.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 346221 526 579 0 0 0 1)
		lastKeyScanCode: 	115
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[(526@579) mouseUp 346221 nil]
	Receiver's instance variables: 
		bounds: 	(526@579) corner: (542@595)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(526@579) corner: (542@595)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(526@579) mouseOver nil nil]
		targetOffset: 	(83.0@3.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 346221 526 579 0 0 0 1)
		lastKeyScanCode: 	115
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0



--- The full stack ---
DIPHPTests class(Object)>>doesNotUnderstand: #runAndReturnObjWithText:andSuccessResults:onProject:
DIPHPTests class>>DoIt
CompiledMethod>>valueWithReceiver:arguments:
[ v := compiledMethod valueWithReceiver: receiver arguments: #() ] in SmalltalkEditor>>tallySelection
BlockClosure>>ensure:
MessageTally>>spyEvery:on:
TimeProfiler>>runBlock:pollingEvery:
TimeProfiler>>openOnBlock:
TimeProfiler class>>spyOn:
SmalltalkEditor>>tallySelection
SmalltalkEditor>>tallyIt
[ textMorph editor tallyIt ] in PluggableTextMorphWithLimits(PluggableTextMorph)>>tallyIt
[ result := editBlock value ] in PluggableTextMorphWithLimits(PluggableTextMorph)>>handleEdit:
TextMorphForEditView(TextMorph)>>handleEdit:
PluggableTextMorphWithLimits(PluggableTextMorph)>>handleEdit:
PluggableTextMorphWithLimits(PluggableTextMorph)>>tallyIt
PackageTreeNautilusUI(Object)>>perform:orSendTo:
[ 
| selArgCount |
"show cursor in case item opens a new MVC window"
(selArgCount := selector numArgs) = 0
	ifTrue: [ target perform: selector ]
	ifFalse: [ 
		selArgCount = arguments size
			ifTrue: [ target perform: selector withArguments: arguments ]
			ifFalse: [ target perform: selector withArguments: (arguments copyWith: evt) ] ].
self changed ] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
ToggleMenuItemMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
ToggleMenuItemMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
MenuMorph(Morph)>>processEvent:using:
MenuMorph(Morph)>>processEvent:
MenuMorph>>handleFocusEvent:
[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
HandMorph>>handleEvent:
HandMorph>>processEvents
[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldState>>doOneSubCycleFor:
WorldMorph>>doOneSubCycle
MenuMorph>>invokeModalAt:in:allowKeyboard:
MenuMorph>>invokeModal:
MenuMorph>>invokeModal
PluggableTextMorphWithLimits(PluggableTextMorph)>>yellowButtonActivity:
SmalltalkEditor(TextEditor)>>mouseUp:
[ editor mouseUp: evt ] in TextMorphForEditView(TextMorph)>>mouseUp:
TextMorphForEditView(TextMorph)>>handleInteraction:
TextMorphForEditView>>handleInteraction:
TextMorphForEditView(TextMorph)>>mouseUp:
TextMorphForEditView>>mouseUp:
TextMorphForEditView(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
TextMorphForEditView(Morph)>>handleEvent:
TextMorphForEditView(Morph)>>handleFocusEvent:
[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ 
World doOneCycle.
Processor yield.
false ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: DIPHPTests class>>runAndReturnObjWithText:andSuccessResults:onProject:
24 February 2015 5:36:19.877784 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
NBCogit NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
https://github.com/pharo-project/pharo-vm.git Commit: 4a0d556150d478ff2de3c9624d2f18e6eaa3fa5c Date: 2014-12-18 18:42:53 +0100 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14893

Image: Pharo3.0 [Latest update: #30863]

DIPHPTests class(Object)>>doesNotUnderstand: #runAndReturnObjWithText:andSuccessResults:onProject:
	Receiver: DIPHPTests
	Arguments and temporary variables: 
		aMessage: 	runAndReturnObjWithText: '
Model = PhpClass with name:"ar*"
Controlle...etc...
		exception: 	MessageNotUnderstood: DIPHPTests class>>runAndReturnObjWithText:andS...etc...
		resumeValue: 	nil
	Receiver's instance variables: 
		superclass: 	DIDSLTests
		methodDict: 	a MethodDictionary(#testPhp->DIPHPTests>>#testPhp )
		format: 	134
		layout: 	a FixedLayout
		instanceVariables: 	#()
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#DIPHPTests
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Dicto-var-tests'
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set(#testP...etc...


DIPHPTests class>>DoIt
	Receiver: DIPHPTests
	Arguments and temporary variables: 
		dsl: 	'
Model = PhpClass with name:"ar*"
Controller = PhpClass with name:"*GUI"
...etc...
		success: 	#(false true false)
	Receiver's instance variables: 
		superclass: 	DIDSLTests
		methodDict: 	a MethodDictionary(#testPhp->DIPHPTests>>#testPhp )
		format: 	134
		layout: 	a FixedLayout
		instanceVariables: 	#()
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#DIPHPTests
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Dicto-var-tests'
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set(#testP...etc...


CompiledMethod>>valueWithReceiver:arguments:
	Receiver: DIPHPTests class>>#DoIt
	Arguments and temporary variables: 
		aReceiver: 	DIPHPTests
		anArray: 	#()
	Receiver's instance variables: 
DIPHPTests class>>#DoIt

[ v := compiledMethod valueWithReceiver: receiver arguments: #() ] in SmalltalkEditor>>tallySelection
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		receiver: 	DIPHPTests
		context: 	nil
		compiledMethod: 	DIPHPTests class>>#DoIt
		profiler: 	nil
		v: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(509870080)
		selectionShowing: 	true
		model: 	a PackageTreeNautilusUI
		editingState: 	a SmalltalkEditingState


BlockClosure>>ensure:
	Receiver: [ v := compiledMethod valueWithReceiver: receiver arguments: #() ]
	Arguments and temporary variables: 
		aBlock: 	[ 
"cancel the probe and return the value"
"Could have already been ter...etc...
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor>>tallySelection
		startpc: 	105
		numArgs: 	0


MessageTally>>spyEvery:on:
	Receiver: nil(SmalltalkEditor) >> tallySelection
	Arguments and temporary variables: 
		observedProcess: 	a Process in nil
		millisecs: 	1
		aBlock: 	[ v := compiledMethod valueWithReceiver: receiver arguments: #() ]
		myDelay: 	a Delay(1 msecs; 1 msecs remaining)
		time0: 	371439
	Receiver's instance variables: 
		class: 	SmalltalkEditor
		method: 	SmalltalkEditor>>#tallySelection
		process: 	nil
		tally: 	20
		receivers: 	an Array(nil(MorphicUIManager) >> spawnNewProcess nil(MorphicUIManag...etc...
		senders: 	nil
		time: 	0
		gcStats: 	#(67022136 67621348 74859132 nil nil 2000 3 295 1615 748 124 0 0 0 0 0...etc...
		maxClassNameSize: 	1000
		maxClassPlusSelectorSize: 	1000
		maxTabs: 	100
		reportOtherProcesses: 	true


TimeProfiler>>runBlock:pollingEvery:
	Receiver: a TimeProfiler
	Arguments and temporary variables: 
		aBlock: 	[ v := compiledMethod valueWithReceiver: receiver arguments: #() ]
		pollPeriod: 	1
	Receiver's instance variables: 
		dependents: 	nil
		selection: 	nil
		announcer: 	nil
		rootItems: 	nil
		autoMultiSelection: 	nil
		headerLabel: 	nil
		multiSelection: 	nil
		wrapBlockOrSelector: 	nil
		isCheckList: 	nil
		enabled: 	nil
		win: 	nil
		rootMessageTally: 	nil(SmalltalkEditor) >> tallySelection
		threshold: 	nil
		minPercentageToExpand: 	nil
		treeMorph: 	nil
		block: 	[ v := compiledMethod valueWithReceiver: receiver arguments: #() ]
		blockCodePane: 	nil
		withBlockCodePane: 	false
		blockSource: 	nil
		reportOtherProcesses: 	nil
		showLeavesOnly: 	nil
		codeTabPane: 	nil
		resultPane: 	nil
		result: 	nil
		withToolBar: 	false


TimeProfiler>>openOnBlock:
	Receiver: a TimeProfiler
	Arguments and temporary variables: 
		aBlock: 	[ v := compiledMethod valueWithReceiver: receiver arguments: #() ]
	Receiver's instance variables: 
		dependents: 	nil
		selection: 	nil
		announcer: 	nil
		rootItems: 	nil
		autoMultiSelection: 	nil
		headerLabel: 	nil
		multiSelection: 	nil
		wrapBlockOrSelector: 	nil
		isCheckList: 	nil
		enabled: 	nil
		win: 	nil
		rootMessageTally: 	nil(SmalltalkEditor) >> tallySelection
		threshold: 	nil
		minPercentageToExpand: 	nil
		treeMorph: 	nil
		block: 	[ v := compiledMethod valueWithReceiver: receiver arguments: #() ]
		blockCodePane: 	nil
		withBlockCodePane: 	false
		blockSource: 	nil
		reportOtherProcesses: 	nil
		showLeavesOnly: 	nil
		codeTabPane: 	nil
		resultPane: 	nil
		result: 	nil
		withToolBar: 	false


TimeProfiler class>>spyOn:
	Receiver: TimeProfiler
	Arguments and temporary variables: 
		aBlock: 	[ v := compiledMethod valueWithReceiver: receiver arguments: #() ]
	Receiver's instance variables: 
		superclass: 	MorphTreeModel
		methodDict: 	a MethodDictionary(#blockCode->TimeProfiler>>#blockCode #blockCode:...etc...
		format: 	180
		layout: 	a FixedLayout
		instanceVariables: 	#(#win #rootMessageTally #threshold #minPercentageToExpand #...etc...
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#TimeProfiler
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Tools-Profilers'
		traitComposition: 	{}
		localSelectors: 	nil


SmalltalkEditor>>tallySelection
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		v: 	nil
		receiver: 	DIPHPTests
		context: 	nil
		compiledMethod: 	DIPHPTests class>>#DoIt
		profiler: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(509870080)
		selectionShowing: 	true
		model: 	a PackageTreeNautilusUI
		editingState: 	a SmalltalkEditingState


SmalltalkEditor>>tallyIt
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 

	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(509870080)
		selectionShowing: 	true
		model: 	a PackageTreeNautilusUI
		editingState: 	a SmalltalkEditingState


[ textMorph editor tallyIt ] in PluggableTextMorphWithLimits(PluggableTextMorph)>>tallyIt
	Receiver: a PluggableTextMorphWithLimits(303038464)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(286.0@435.0) corner: (1132.0@829.0)
		owner: 	a MultipleMethodsEditor(286261248)
		submorphs: 	an Array(an AlphaImageMorph(499908608) a TransformMorph(735313920))
		fullBounds: 	(286@435) corner: (1132@829)
		color: 	Color white
		extension: 	a MorphExtension (488636416) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.784 g: 0.784 b: 0.784 alpha: 1.0)
		model: 	a PackageTreeNautilusUI
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(344719360)
		scroller: 	a TransformMorph(735313920)
		getMenuSelector: 	#sourceCodeMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(65273856)
		textMorph: 	a TextMorphForEditView(509870080)
		getTextSelector: 	#sourceCodeFrom:
		setTextSelector: 	#compileSource:notifying:
		getSelectionSelector: 	#contentsSelectionFrom:
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(9 to: 449)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil
		doubleClickSelector: 	nil
		setSelectionSelector: 	nil
		alertLimit: 	700
		locked: 	false
		warningLimit: 	350
		method: 	nil
		lockIcon: 	an AlphaImageMorph(499908608)
		canLockChangeSelector: 	#canChangeLockFor:
		lockSelector: 	#lockTextArea:from:


[ result := editBlock value ] in PluggableTextMorphWithLimits(PluggableTextMorph)>>handleEdit:
	Receiver: a PluggableTextMorphWithLimits(303038464)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph editor tallyIt ]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(286.0@435.0) corner: (1132.0@829.0)
		owner: 	a MultipleMethodsEditor(286261248)
		submorphs: 	an Array(an AlphaImageMorph(499908608) a TransformMorph(735313920))
		fullBounds: 	(286@435) corner: (1132@829)
		color: 	Color white
		extension: 	a MorphExtension (488636416) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.784 g: 0.784 b: 0.784 alpha: 1.0)
		model: 	a PackageTreeNautilusUI
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(344719360)
		scroller: 	a TransformMorph(735313920)
		getMenuSelector: 	#sourceCodeMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(65273856)
		textMorph: 	a TextMorphForEditView(509870080)
		getTextSelector: 	#sourceCodeFrom:
		setTextSelector: 	#compileSource:notifying:
		getSelectionSelector: 	#contentsSelectionFrom:
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(9 to: 449)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil
		doubleClickSelector: 	nil
		setSelectionSelector: 	nil
		alertLimit: 	700
		locked: 	false
		warningLimit: 	350
		method: 	nil
		lockIcon: 	an AlphaImageMorph(499908608)
		canLockChangeSelector: 	#canChangeLockFor:
		lockSelector: 	#lockTextArea:from:


TextMorphForEditView(TextMorph)>>handleEdit:
	Receiver: a TextMorphForEditView(509870080)
	Arguments and temporary variables: 
		editBlock: 	[ result := editBlock value ]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (838@344)
		owner: 	a TransformMorph(735313920)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (838@344)
		color: 	Color black
		extension: 	a MorphExtension (552599552) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Source Code Pro
		text: 	a Text for 'testPhp
| dsl success|
	
dsl := ''
Model = PhpClass with name...etc...
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		defaultColor: 	Color black
		editView: 	a PluggableTextMorphWithLimits(303038464)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


PluggableTextMorphWithLimits(PluggableTextMorph)>>handleEdit:
	Receiver: a PluggableTextMorphWithLimits(303038464)
	Arguments and temporary variables: 
		result: 	nil
		editBlock: 	[ textMorph editor tallyIt ]
	Receiver's instance variables: 
		bounds: 	(286.0@435.0) corner: (1132.0@829.0)
		owner: 	a MultipleMethodsEditor(286261248)
		submorphs: 	an Array(an AlphaImageMorph(499908608) a TransformMorph(735313920))
		fullBounds: 	(286@435) corner: (1132@829)
		color: 	Color white
		extension: 	a MorphExtension (488636416) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.784 g: 0.784 b: 0.784 alpha: 1.0)
		model: 	a PackageTreeNautilusUI
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(344719360)
		scroller: 	a TransformMorph(735313920)
		getMenuSelector: 	#sourceCodeMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(65273856)
		textMorph: 	a TextMorphForEditView(509870080)
		getTextSelector: 	#sourceCodeFrom:
		setTextSelector: 	#compileSource:notifying:
		getSelectionSelector: 	#contentsSelectionFrom:
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(9 to: 449)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil
		doubleClickSelector: 	nil
		setSelectionSelector: 	nil
		alertLimit: 	700
		locked: 	false
		warningLimit: 	350
		method: 	nil
		lockIcon: 	an AlphaImageMorph(499908608)
		canLockChangeSelector: 	#canChangeLockFor:
		lockSelector: 	#lockTextArea:from:


PluggableTextMorphWithLimits(PluggableTextMorph)>>tallyIt
	Receiver: a PluggableTextMorphWithLimits(303038464)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(286.0@435.0) corner: (1132.0@829.0)
		owner: 	a MultipleMethodsEditor(286261248)
		submorphs: 	an Array(an AlphaImageMorph(499908608) a TransformMorph(735313920))
		fullBounds: 	(286@435) corner: (1132@829)
		color: 	Color white
		extension: 	a MorphExtension (488636416) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.784 g: 0.784 b: 0.784 alpha: 1.0)
		model: 	a PackageTreeNautilusUI
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(344719360)
		scroller: 	a TransformMorph(735313920)
		getMenuSelector: 	#sourceCodeMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(65273856)
		textMorph: 	a TextMorphForEditView(509870080)
		getTextSelector: 	#sourceCodeFrom:
		setTextSelector: 	#compileSource:notifying:
		getSelectionSelector: 	#contentsSelectionFrom:
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(9 to: 449)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil
		doubleClickSelector: 	nil
		setSelectionSelector: 	nil
		alertLimit: 	700
		locked: 	false
		warningLimit: 	350
		method: 	nil
		lockIcon: 	an AlphaImageMorph(499908608)
		canLockChangeSelector: 	#canChangeLockFor:
		lockSelector: 	#lockTextArea:from:


PackageTreeNautilusUI(Object)>>perform:orSendTo:
	Receiver: a PackageTreeNautilusUI
	Arguments and temporary variables: 
		selector: 	#tallyIt
		otherTarget: 	a PluggableTextMorphWithLimits(303038464)
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a CategoryWidget a MethodWidget a NautilusWindow(...etc...
		model: 	a PackageTreeNautilus
		window: 	a NautilusWindow(542638080)
		hierarchyClass: 	nil
		cachedHierarchy: 	a SortHierarchically
		sourceTextArea: 	a PluggableTextMorphWithLimits(303038464)
		groupsSelection: 	a Dictionary()
		packagesSelection: 	a Dictionary(var-tests->true )
		classesSelection: 	a Dictionary(DIPHPTests->true )
		list: 	a MorphTreeMorph(273940480)
		list2: 	a PluggableIconListMorph(454295552)
		sourceCodePanel: 	a PanelMorph(183500800)
		commentTextArea: 	nil
		currentDisplayChoice: 	#SourceCode
		sourceTextAreaLimit: 	350
		sourceCodeContainer: 	a PanelMorph(584843264)
		list2Elements: 	{DIDSLTests. DIJavaTests. DIPHPTests. DISTTests}
		listElements: 	nil
		shouldUpdateTitle: 	true
		testSemaphore: 	a Semaphore()
		sourceTextAreas: 	an OrderedCollection(a PluggableTextMorphWithLimits(303038464)...etc...
		multipleMethodsEditor: 	a MultipleMethodsEditor(286261248)
		contentSelection: 	nil
		acceptor: 	a MethodDefinitionAcceptor
		classifier: 	a MethodClassifier
		categoryWidget: 	a CategoryWidget
		methodWidget: 	a MethodWidget
		packagePattern: 	a RxMatcher
		searchWidget: 	a SearchMorph(866648064)


[ 
| selArgCount |
"show cursor in case item opens a new MVC window"
(selArgCount := selector numArgs) = 0
	ifTrue: [ target perform: selector ]
	ifFalse: [ 
		selArgCount = arguments size
			ifTrue: [ target perform: selector withArguments: arguments ]
			ifFalse: [ target perform: selector withArguments: (arguments copyWith: evt) ] ].
self changed ] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(83099648)'Profile it'
	Arguments and temporary variables: 
		evt: 	[(526@581) mouseUp 371417 nil]
		w: 	a WorldMorph(511705088) [world]
		selArgCount: 	2
	Receiver's instance variables: 
		bounds: 	(435.0@576.0) corner: (606.0@594.0)
		owner: 	a MenuMorph(61341696)
		submorphs: 	#()
		fullBounds: 	(435.0@576.0) corner: (606.0@594.0)
		color: 	Color black
		extension: 	a MorphExtension (106430464)
		font: 	a LogicalFont
 familyName: Source Sans Pro
 emphasis: nil
 pointSize: 10
...etc...
		emphasis: 	0
		contents: 	'Profile it'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a PackageTreeNautilusUI
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#tallyIt a PluggableTextMorphWithLimits(303038464))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


BlockClosure>>ensure:
	Receiver: [ 
| selArgCount |
"show cursor in case item opens a new MVC window"
(selArgCount := selec...etc...
	Arguments and temporary variables: 
		aBlock: 	[ oldcursor show ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
		startpc: 	134
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r100000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[ 
| selArgCount |
"show cursor in case item opens a new MVC window"
(s...etc...
		oldcursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	(-1@ -1)
		maskForm: 	Form(16x16x1)


ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(83099648)'Profile it'
	Arguments and temporary variables: 
		evt: 	[(526@581) mouseUp 371417 nil]
		w: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		bounds: 	(435.0@576.0) corner: (606.0@594.0)
		owner: 	a MenuMorph(61341696)
		submorphs: 	#()
		fullBounds: 	(435.0@576.0) corner: (606.0@594.0)
		color: 	Color black
		extension: 	a MorphExtension (106430464)
		font: 	a LogicalFont
 familyName: Source Sans Pro
 emphasis: nil
 pointSize: 10
...etc...
		emphasis: 	0
		contents: 	'Profile it'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a PackageTreeNautilusUI
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#tallyIt a PluggableTextMorphWithLimits(303038464))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
	Receiver: a ToggleMenuItemMorph(83099648)'Profile it'
	Arguments and temporary variables: 
		evt: 	[(526@581) mouseUp 371417 nil]
	Receiver's instance variables: 
		bounds: 	(435.0@576.0) corner: (606.0@594.0)
		owner: 	a MenuMorph(61341696)
		submorphs: 	#()
		fullBounds: 	(435.0@576.0) corner: (606.0@594.0)
		color: 	Color black
		extension: 	a MorphExtension (106430464)
		font: 	a LogicalFont
 familyName: Source Sans Pro
 emphasis: nil
 pointSize: 10
...etc...
		emphasis: 	0
		contents: 	'Profile it'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a PackageTreeNautilusUI
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#tallyIt a PluggableTextMorphWithLimits(303038464))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
	Receiver: a ToggleMenuItemMorph(83099648)'Profile it'
	Arguments and temporary variables: 
		anEvent: 	[(526@581) mouseUp 371417 nil]
	Receiver's instance variables: 
		bounds: 	(435.0@576.0) corner: (606.0@594.0)
		owner: 	a MenuMorph(61341696)
		submorphs: 	#()
		fullBounds: 	(435.0@576.0) corner: (606.0@594.0)
		color: 	Color black
		extension: 	a MorphExtension (106430464)
		font: 	a LogicalFont
 familyName: Source Sans Pro
 emphasis: nil
 pointSize: 10
...etc...
		emphasis: 	0
		contents: 	'Profile it'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a PackageTreeNautilusUI
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#tallyIt a PluggableTextMorphWithLimits(303038464))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [(526@581) mouseUp 371417 nil]
	Arguments and temporary variables: 
		anObject: 	a ToggleMenuItemMorph(83099648)'Profile it'
	Receiver's instance variables: 
		timeStamp: 	371417
		source: 	a HandMorph(760479744)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(526@581)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


ToggleMenuItemMorph(Morph)>>handleEvent:
	Receiver: a ToggleMenuItemMorph(83099648)'Profile it'
	Arguments and temporary variables: 
		anEvent: 	[(526@581) mouseUp 371417 nil]
	Receiver's instance variables: 
		bounds: 	(435.0@576.0) corner: (606.0@594.0)
		owner: 	a MenuMorph(61341696)
		submorphs: 	#()
		fullBounds: 	(435.0@576.0) corner: (606.0@594.0)
		color: 	Color black
		extension: 	a MorphExtension (106430464)
		font: 	a LogicalFont
 familyName: Source Sans Pro
 emphasis: nil
 pointSize: 10
...etc...
		emphasis: 	0
		contents: 	'Profile it'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a PackageTreeNautilusUI
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#tallyIt a PluggableTextMorphWithLimits(303038464))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(526@581) mouseUp 371417 nil]
		aMorph: 	a ToggleMenuItemMorph(83099648)'Profile it'
		localEvt: 	nil
		index: 	1
		child: 	nil
		morphs: 	#()
		inside: 	true
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(526@581) mouseUp 371417 nil]
		aMorph: 	a ToggleMenuItemMorph(83099648)'Profile it'
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


ToggleMenuItemMorph(Morph)>>processEvent:using:
	Receiver: a ToggleMenuItemMorph(83099648)'Profile it'
	Arguments and temporary variables: 
		anEvent: 	[(526@581) mouseUp 371417 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	(435.0@576.0) corner: (606.0@594.0)
		owner: 	a MenuMorph(61341696)
		submorphs: 	#()
		fullBounds: 	(435.0@576.0) corner: (606.0@594.0)
		color: 	Color black
		extension: 	a MorphExtension (106430464)
		font: 	a LogicalFont
 familyName: Source Sans Pro
 emphasis: nil
 pointSize: 10
...etc...
		emphasis: 	0
		contents: 	'Profile it'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a PackageTreeNautilusUI
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#tallyIt a PluggableTextMorphWithLimits(303038464))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(526@581) mouseUp 371417 nil]
		aMorph: 	a MenuMorph(61341696)
		localEvt: 	[(526@581) mouseUp 371417 nil]
		index: 	11
		child: 	a ToggleMenuItemMorph(83099648)'Profile it'
		morphs: 	an Array(a ToggleMenuItemMorph(172228608)'Suggestions' a MenuLineMorph(...etc...
		inside: 	false
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(526@581) mouseUp 371417 nil]
		aMorph: 	a MenuMorph(61341696)
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MenuMorph(Morph)>>processEvent:using:
	Receiver: a MenuMorph(61341696)
	Arguments and temporary variables: 
		anEvent: 	[(526@581) mouseUp 371417 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	(430.0@416.0) corner: (611.0@858.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(172228608)'Suggestions' a MenuLineMor...etc...
		fullBounds: 	(430.0@416.0) corner: (611.0@858.0)
		color: 	(Color r: 0.894 g: 0.894 b: 0.894 alpha: 1.0)
		extension: 	a MorphExtension (102760448) [other:  (basicColor -> (Color r: 0.823...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.674 g: 0.674 b: 0.674 alpha: 1.0)
		defaultTarget: 	a PackageTreeNautilusUI
		selectedItem: 	a ToggleMenuItemMorph(83099648)'Profile it'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(172228608)'Suggestions' a...etc...


MenuMorph(Morph)>>processEvent:
	Receiver: a MenuMorph(61341696)
	Arguments and temporary variables: 
		anEvent: 	[(526@581) mouseUp 371417 nil]
	Receiver's instance variables: 
		bounds: 	(430.0@416.0) corner: (611.0@858.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(172228608)'Suggestions' a MenuLineMor...etc...
		fullBounds: 	(430.0@416.0) corner: (611.0@858.0)
		color: 	(Color r: 0.894 g: 0.894 b: 0.894 alpha: 1.0)
		extension: 	a MorphExtension (102760448) [other:  (basicColor -> (Color r: 0.823...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.674 g: 0.674 b: 0.674 alpha: 1.0)
		defaultTarget: 	a PackageTreeNautilusUI
		selectedItem: 	a ToggleMenuItemMorph(83099648)'Profile it'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(172228608)'Suggestions' a...etc...


MenuMorph>>handleFocusEvent:
	Receiver: a MenuMorph(61341696)
	Arguments and temporary variables: 
		evt: 	[(526@581) mouseUp 371417 nil]
	Receiver's instance variables: 
		bounds: 	(430.0@416.0) corner: (611.0@858.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(172228608)'Suggestions' a MenuLineMor...etc...
		fullBounds: 	(430.0@416.0) corner: (611.0@858.0)
		color: 	(Color r: 0.894 g: 0.894 b: 0.894 alpha: 1.0)
		extension: 	a MorphExtension (102760448) [other:  (basicColor -> (Color r: 0.823...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.674 g: 0.674 b: 0.674 alpha: 1.0)
		defaultTarget: 	a PackageTreeNautilusUI
		selectedItem: 	a ToggleMenuItemMorph(83099648)'Profile it'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(172228608)'Suggestions' a...etc...


[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[(526@581) mouseUp 371417 nil]
		focusHolder: 	a MenuMorph(61341696)
		aBlock: 	[ self mouseFocus: nil ]
		w: 	a WorldMorph(511705088) [world]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(526@581) corner: (542@597)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(526@581) corner: (542@597)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(526@581) mouseOver nil nil]
		targetOffset: 	(91.0@5.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 371417 526 581 0 0 0 1)
		lastKeyScanCode: 	115
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


BlockClosure>>on:do:
	Receiver: [ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (an...etc...
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :ex | 
ActiveWorld := priorWorld.
ActiveEvent := priorEvent.
A...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	HandMorph>>sendFocusEvent:to:clear:
		startpc: 	67
		numArgs: 	0


WorldMorph(PasteUpMorph)>>becomeActiveDuring:
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 
		aBlock: 	[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder ha...etc...
		priorWorld: 	a WorldMorph(511705088) [world]
		priorHand: 	a HandMorph(760479744)
		priorEvent: 	[(526@581) mouseOver red nil nil]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1535@876)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a NautilusWindow(542638080) a GLM...etc...
		fullBounds: 	(0@0) corner: (1535@876)
		color: 	Color white
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		result: 	nil
		anEvent: 	[(526@581) mouseUp 371417 nil]
		focusHolder: 	a MenuMorph(61341696)
		aBlock: 	[ self mouseFocus: nil ]
		w: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		bounds: 	(526@581) corner: (542@597)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(526@581) corner: (542@597)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(526@581) mouseOver nil nil]
		targetOffset: 	(91.0@5.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 371417 526 581 0 0 0 1)
		lastKeyScanCode: 	115
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[(526@581) mouseUp 371417 nil]
		focusHolder: 	a MenuMorph(61341696)
		aBlock: 	[ self mouseFocus: nil ]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(526@581) corner: (542@597)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(526@581) corner: (542@597)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(526@581) mouseOver nil nil]
		targetOffset: 	(91.0@5.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 371417 526 581 0 0 0 1)
		lastKeyScanCode: 	115
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[(526@581) mouseUp 371417 nil]
	Receiver's instance variables: 
		bounds: 	(526@581) corner: (542@597)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(526@581) corner: (542@597)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(526@581) mouseOver nil nil]
		targetOffset: 	(91.0@5.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 371417 526 581 0 0 0 1)
		lastKeyScanCode: 	115
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0



--- The full stack ---
DIPHPTests class(Object)>>doesNotUnderstand: #runAndReturnObjWithText:andSuccessResults:onProject:
DIPHPTests class>>DoIt
CompiledMethod>>valueWithReceiver:arguments:
[ v := compiledMethod valueWithReceiver: receiver arguments: #() ] in SmalltalkEditor>>tallySelection
BlockClosure>>ensure:
MessageTally>>spyEvery:on:
TimeProfiler>>runBlock:pollingEvery:
TimeProfiler>>openOnBlock:
TimeProfiler class>>spyOn:
SmalltalkEditor>>tallySelection
SmalltalkEditor>>tallyIt
[ textMorph editor tallyIt ] in PluggableTextMorphWithLimits(PluggableTextMorph)>>tallyIt
[ result := editBlock value ] in PluggableTextMorphWithLimits(PluggableTextMorph)>>handleEdit:
TextMorphForEditView(TextMorph)>>handleEdit:
PluggableTextMorphWithLimits(PluggableTextMorph)>>handleEdit:
PluggableTextMorphWithLimits(PluggableTextMorph)>>tallyIt
PackageTreeNautilusUI(Object)>>perform:orSendTo:
[ 
| selArgCount |
"show cursor in case item opens a new MVC window"
(selArgCount := selector numArgs) = 0
	ifTrue: [ target perform: selector ]
	ifFalse: [ 
		selArgCount = arguments size
			ifTrue: [ target perform: selector withArguments: arguments ]
			ifFalse: [ target perform: selector withArguments: (arguments copyWith: evt) ] ].
self changed ] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
ToggleMenuItemMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
ToggleMenuItemMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
MenuMorph(Morph)>>processEvent:using:
MenuMorph(Morph)>>processEvent:
MenuMorph>>handleFocusEvent:
[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
HandMorph>>handleEvent:
HandMorph>>processEvents
[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldState>>doOneSubCycleFor:
WorldMorph>>doOneSubCycle
MenuMorph>>invokeModalAt:in:allowKeyboard:
MenuMorph>>invokeModal:
MenuMorph>>invokeModal
PluggableTextMorphWithLimits(PluggableTextMorph)>>yellowButtonActivity:
SmalltalkEditor(TextEditor)>>mouseUp:
[ editor mouseUp: evt ] in TextMorphForEditView(TextMorph)>>mouseUp:
TextMorphForEditView(TextMorph)>>handleInteraction:
TextMorphForEditView>>handleInteraction:
TextMorphForEditView(TextMorph)>>mouseUp:
TextMorphForEditView>>mouseUp:
TextMorphForEditView(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
TextMorphForEditView(Morph)>>handleEvent:
TextMorphForEditView(Morph)>>handleFocusEvent:
[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ 
World doOneCycle.
Processor yield.
false ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Halt
24 February 2015 5:37:43.395046 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
NBCogit NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
https://github.com/pharo-project/pharo-vm.git Commit: 4a0d556150d478ff2de3c9624d2f18e6eaa3fa5c Date: 2014-12-18 18:42:53 +0100 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14893

Image: Pharo3.0 [Latest update: #30863]

DIPhpDependencies>>testInput
	Receiver: a DIPhpDependencies
	Arguments and temporary variables: 
		strRules: 	'{ "subject" : "arEditField",
	   "argument": "ilDateTimeInputGUI",
	...etc...
	Receiver's instance variables: 
		output: 	''
		commandOutput: 	''
		NEWLINE: 	'
'
		rules: 	a DICollectionRule(Model cannot depend on Controller arDeleteGUI must de...etc...
		varSynonyms: 	nil
		sessionId: 	'1424795861'
		TIMESTAMP: 	'1424795861'
		TOOLNAME: 	'DIPhpDependencies'
		PROJECTROOT: 	'/home/otruffer/dicto/TestProjectPhp'
		PROJECTSRC: 	'src/'
		PROJECTBIN: 	'bin/'
		RESULTFILE: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/DictoTestSuite/1...etc...
		TESTFILE: 	nil
		testInputFileExt: 	'.st'
		SYSTEM: 	SYSTEM


DITestGroup>>build
	Receiver: a DITestGroup
	Arguments and temporary variables: 

	Receiver's instance variables: 
		rules: 	an OrderedCollection(Model cannot depend on Controller arDeleteGUI must ...etc...
		adapter: 	a DIPhpDependencies
		runCommandText: 	nil
		testSpecification: 	nil
		adapterID: 	'DIPhpDependencies'
		resultFile: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/DictoTestSuite/1...etc...
		specificationFile: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/DictoTest...etc...
		commandFile: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/DictoTestSuite/...etc...


[ :testGroup | testGroup build ] in DIDicto>>dictoBuild:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'
Model = PhpClass with name:"ar*"
Controller = PhpClass with name:...etc...
		adapterTestGroups: 	a Dictionary(DIGrepFileContent->a DITestGroup DIJMeterLoadTe...etc...
		testGroup: 	a DITestGroup
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424795861'
		singleShotTask: 	false


Array(SequenceableCollection)>>do:
	Receiver: an Array(a DITestGroup a DITestGroup a DITestGroup a DITestGroup a DITestGroup)
	Arguments and temporary variables: 
		aBlock: 	[ :testGroup | testGroup build ]
		index: 	4
	Receiver's instance variables: 
an Array(a DITestGroup a DITestGroup a DITestGroup a DITestGroup a DITestGroup)

DIDicto>>dictoBuild:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'
Model = PhpClass with name:"ar*"
Controller = PhpClass with name:...etc...
		adapterTestGroups: 	a Dictionary(DIGrepFileContent->a DITestGroup DIJMeterLoadTe...etc...
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424795861'
		singleShotTask: 	false


DIDicto>>dictoRun:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'
Model = PhpClass with name:"ar*"
Controller = PhpClass with name:...etc...
		adapterTestGroups: 	nil
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424795861'
		singleShotTask: 	false


DIDicto>>dictoAll:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'
Model = PhpClass with name:"ar*"
Controller = PhpClass with name:...etc...
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424795861'
		singleShotTask: 	false


DIPHPTests(DIDSLTests)>>runAndReturnObjWithText:andSuccessResults:onProject:
	Receiver: DIPHPTests
	Arguments and temporary variables: 
		dslText: 	'
Model = PhpClass with name:"ar*"
Controller = PhpClass with name:"*G...etc...
		res: 	#(false true false)
		project: 	'TestProjectPhp'
		dicto: 	a DIDicto
	Receiver's instance variables: 
		testSelector: 	nil
		expectedFails: 	nil


DIPHPTests class>>DoIt
	Receiver: DIPHPTests
	Arguments and temporary variables: 
		dsl: 	'
Model = PhpClass with name:"ar*"
Controller = PhpClass with name:"*GUI"
...etc...
		success: 	#(false true false)
		tester: 	DIPHPTests
	Receiver's instance variables: 
		superclass: 	DIDSLTests
		methodDict: 	a MethodDictionary(#testPhp->DIPHPTests>>#testPhp )
		format: 	134
		layout: 	a FixedLayout
		instanceVariables: 	#()
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#DIPHPTests
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Dicto-var-tests'
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set(#testP...etc...


CompiledMethod>>valueWithReceiver:arguments:
	Receiver: DIPHPTests class>>#DoIt
	Arguments and temporary variables: 
		aReceiver: 	DIPHPTests
		anArray: 	#()
	Receiver's instance variables: 
DIPHPTests class>>#DoIt

[ v := compiledMethod valueWithReceiver: receiver arguments: #() ] in SmalltalkEditor>>tallySelection
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		receiver: 	DIPHPTests
		context: 	nil
		compiledMethod: 	DIPHPTests class>>#DoIt
		profiler: 	nil
		v: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(509870080)
		selectionShowing: 	true
		model: 	a PackageTreeNautilusUI
		editingState: 	a SmalltalkEditingState


BlockClosure>>ensure:
	Receiver: [ v := compiledMethod valueWithReceiver: receiver arguments: #() ]
	Arguments and temporary variables: 
		aBlock: 	[ 
"cancel the probe and return the value"
"Could have already been ter...etc...
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor>>tallySelection
		startpc: 	105
		numArgs: 	0


MessageTally>>spyEvery:on:
	Receiver: nil(SmalltalkEditor) >> tallySelection
	Arguments and temporary variables: 
		observedProcess: 	a Process in nil
		millisecs: 	1
		aBlock: 	[ v := compiledMethod valueWithReceiver: receiver arguments: #() ]
		myDelay: 	a Delay(1 msecs; 1 msecs remaining)
		time0: 	452241
	Receiver's instance variables: 
		class: 	SmalltalkEditor
		method: 	SmalltalkEditor>>#tallySelection
		process: 	nil
		tally: 	2738
		receivers: 	an Array(nil(CompiledMethod) >> valueWithReceiver:arguments: nil(DID...etc...
		senders: 	nil
		time: 	0
		gcStats: 	#(64174716 64779312 71412012 nil nil 2000 5 524 1890 1019 165 0 0 0 0 ...etc...
		maxClassNameSize: 	1000
		maxClassPlusSelectorSize: 	1000
		maxTabs: 	100
		reportOtherProcesses: 	true


TimeProfiler>>runBlock:pollingEvery:
	Receiver: a TimeProfiler
	Arguments and temporary variables: 
		aBlock: 	[ v := compiledMethod valueWithReceiver: receiver arguments: #() ]
		pollPeriod: 	1
	Receiver's instance variables: 
		dependents: 	nil
		selection: 	nil
		announcer: 	nil
		rootItems: 	nil
		autoMultiSelection: 	nil
		headerLabel: 	nil
		multiSelection: 	nil
		wrapBlockOrSelector: 	nil
		isCheckList: 	nil
		enabled: 	nil
		win: 	nil
		rootMessageTally: 	nil(SmalltalkEditor) >> tallySelection
		threshold: 	nil
		minPercentageToExpand: 	nil
		treeMorph: 	nil
		block: 	[ v := compiledMethod valueWithReceiver: receiver arguments: #() ]
		blockCodePane: 	nil
		withBlockCodePane: 	false
		blockSource: 	nil
		reportOtherProcesses: 	nil
		showLeavesOnly: 	nil
		codeTabPane: 	nil
		resultPane: 	nil
		result: 	nil
		withToolBar: 	false


TimeProfiler>>openOnBlock:
	Receiver: a TimeProfiler
	Arguments and temporary variables: 
		aBlock: 	[ v := compiledMethod valueWithReceiver: receiver arguments: #() ]
	Receiver's instance variables: 
		dependents: 	nil
		selection: 	nil
		announcer: 	nil
		rootItems: 	nil
		autoMultiSelection: 	nil
		headerLabel: 	nil
		multiSelection: 	nil
		wrapBlockOrSelector: 	nil
		isCheckList: 	nil
		enabled: 	nil
		win: 	nil
		rootMessageTally: 	nil(SmalltalkEditor) >> tallySelection
		threshold: 	nil
		minPercentageToExpand: 	nil
		treeMorph: 	nil
		block: 	[ v := compiledMethod valueWithReceiver: receiver arguments: #() ]
		blockCodePane: 	nil
		withBlockCodePane: 	false
		blockSource: 	nil
		reportOtherProcesses: 	nil
		showLeavesOnly: 	nil
		codeTabPane: 	nil
		resultPane: 	nil
		result: 	nil
		withToolBar: 	false


TimeProfiler class>>spyOn:
	Receiver: TimeProfiler
	Arguments and temporary variables: 
		aBlock: 	[ v := compiledMethod valueWithReceiver: receiver arguments: #() ]
	Receiver's instance variables: 
		superclass: 	MorphTreeModel
		methodDict: 	a MethodDictionary(#blockCode->TimeProfiler>>#blockCode #blockCode:...etc...
		format: 	180
		layout: 	a FixedLayout
		instanceVariables: 	#(#win #rootMessageTally #threshold #minPercentageToExpand #...etc...
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#TimeProfiler
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Tools-Profilers'
		traitComposition: 	{}
		localSelectors: 	nil


SmalltalkEditor>>tallySelection
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		v: 	nil
		receiver: 	DIPHPTests
		context: 	nil
		compiledMethod: 	DIPHPTests class>>#DoIt
		profiler: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(509870080)
		selectionShowing: 	true
		model: 	a PackageTreeNautilusUI
		editingState: 	a SmalltalkEditingState


SmalltalkEditor>>tallyIt
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 

	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(509870080)
		selectionShowing: 	true
		model: 	a PackageTreeNautilusUI
		editingState: 	a SmalltalkEditingState


[ textMorph editor tallyIt ] in PluggableTextMorphWithLimits(PluggableTextMorph)>>tallyIt
	Receiver: a PluggableTextMorphWithLimits(303038464)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(286.0@435.0) corner: (1132.0@829.0)
		owner: 	a MultipleMethodsEditor(286261248)
		submorphs: 	an Array(an AlphaImageMorph(499908608) a TransformMorph(735313920))
		fullBounds: 	(286@435) corner: (1132@829)
		color: 	Color white
		extension: 	a MorphExtension (488636416) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.784 g: 0.784 b: 0.784 alpha: 1.0)
		model: 	a PackageTreeNautilusUI
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(344719360)
		scroller: 	a TransformMorph(735313920)
		getMenuSelector: 	#sourceCodeMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(65273856)
		textMorph: 	a TextMorphForEditView(509870080)
		getTextSelector: 	#sourceCodeFrom:
		setTextSelector: 	#compileSource:notifying:
		getSelectionSelector: 	#contentsSelectionFrom:
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(9 to: 483)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil
		doubleClickSelector: 	nil
		setSelectionSelector: 	nil
		alertLimit: 	700
		locked: 	false
		warningLimit: 	350
		method: 	nil
		lockIcon: 	an AlphaImageMorph(499908608)
		canLockChangeSelector: 	#canChangeLockFor:
		lockSelector: 	#lockTextArea:from:


[ result := editBlock value ] in PluggableTextMorphWithLimits(PluggableTextMorph)>>handleEdit:
	Receiver: a PluggableTextMorphWithLimits(303038464)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph editor tallyIt ]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(286.0@435.0) corner: (1132.0@829.0)
		owner: 	a MultipleMethodsEditor(286261248)
		submorphs: 	an Array(an AlphaImageMorph(499908608) a TransformMorph(735313920))
		fullBounds: 	(286@435) corner: (1132@829)
		color: 	Color white
		extension: 	a MorphExtension (488636416) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.784 g: 0.784 b: 0.784 alpha: 1.0)
		model: 	a PackageTreeNautilusUI
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(344719360)
		scroller: 	a TransformMorph(735313920)
		getMenuSelector: 	#sourceCodeMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(65273856)
		textMorph: 	a TextMorphForEditView(509870080)
		getTextSelector: 	#sourceCodeFrom:
		setTextSelector: 	#compileSource:notifying:
		getSelectionSelector: 	#contentsSelectionFrom:
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(9 to: 483)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil
		doubleClickSelector: 	nil
		setSelectionSelector: 	nil
		alertLimit: 	700
		locked: 	false
		warningLimit: 	350
		method: 	nil
		lockIcon: 	an AlphaImageMorph(499908608)
		canLockChangeSelector: 	#canChangeLockFor:
		lockSelector: 	#lockTextArea:from:


TextMorphForEditView(TextMorph)>>handleEdit:
	Receiver: a TextMorphForEditView(509870080)
	Arguments and temporary variables: 
		editBlock: 	[ result := editBlock value ]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (838@344)
		owner: 	a TransformMorph(735313920)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (838@344)
		color: 	Color black
		extension: 	a MorphExtension (552599552) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Source Code Pro
		text: 	a Text for 'testPhp
| dsl success tester|
	
dsl := ''
Model = PhpClass wi...etc...
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		defaultColor: 	Color black
		editView: 	a PluggableTextMorphWithLimits(303038464)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


PluggableTextMorphWithLimits(PluggableTextMorph)>>handleEdit:
	Receiver: a PluggableTextMorphWithLimits(303038464)
	Arguments and temporary variables: 
		result: 	nil
		editBlock: 	[ textMorph editor tallyIt ]
	Receiver's instance variables: 
		bounds: 	(286.0@435.0) corner: (1132.0@829.0)
		owner: 	a MultipleMethodsEditor(286261248)
		submorphs: 	an Array(an AlphaImageMorph(499908608) a TransformMorph(735313920))
		fullBounds: 	(286@435) corner: (1132@829)
		color: 	Color white
		extension: 	a MorphExtension (488636416) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.784 g: 0.784 b: 0.784 alpha: 1.0)
		model: 	a PackageTreeNautilusUI
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(344719360)
		scroller: 	a TransformMorph(735313920)
		getMenuSelector: 	#sourceCodeMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(65273856)
		textMorph: 	a TextMorphForEditView(509870080)
		getTextSelector: 	#sourceCodeFrom:
		setTextSelector: 	#compileSource:notifying:
		getSelectionSelector: 	#contentsSelectionFrom:
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(9 to: 483)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil
		doubleClickSelector: 	nil
		setSelectionSelector: 	nil
		alertLimit: 	700
		locked: 	false
		warningLimit: 	350
		method: 	nil
		lockIcon: 	an AlphaImageMorph(499908608)
		canLockChangeSelector: 	#canChangeLockFor:
		lockSelector: 	#lockTextArea:from:


PluggableTextMorphWithLimits(PluggableTextMorph)>>tallyIt
	Receiver: a PluggableTextMorphWithLimits(303038464)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(286.0@435.0) corner: (1132.0@829.0)
		owner: 	a MultipleMethodsEditor(286261248)
		submorphs: 	an Array(an AlphaImageMorph(499908608) a TransformMorph(735313920))
		fullBounds: 	(286@435) corner: (1132@829)
		color: 	Color white
		extension: 	a MorphExtension (488636416) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.784 g: 0.784 b: 0.784 alpha: 1.0)
		model: 	a PackageTreeNautilusUI
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(344719360)
		scroller: 	a TransformMorph(735313920)
		getMenuSelector: 	#sourceCodeMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(65273856)
		textMorph: 	a TextMorphForEditView(509870080)
		getTextSelector: 	#sourceCodeFrom:
		setTextSelector: 	#compileSource:notifying:
		getSelectionSelector: 	#contentsSelectionFrom:
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(9 to: 483)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil
		doubleClickSelector: 	nil
		setSelectionSelector: 	nil
		alertLimit: 	700
		locked: 	false
		warningLimit: 	350
		method: 	nil
		lockIcon: 	an AlphaImageMorph(499908608)
		canLockChangeSelector: 	#canChangeLockFor:
		lockSelector: 	#lockTextArea:from:


PackageTreeNautilusUI(Object)>>perform:orSendTo:
	Receiver: a PackageTreeNautilusUI
	Arguments and temporary variables: 
		selector: 	#tallyIt
		otherTarget: 	a PluggableTextMorphWithLimits(303038464)
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a CategoryWidget a MethodWidget a NautilusWindow(...etc...
		model: 	a PackageTreeNautilus
		window: 	a NautilusWindow(542638080)
		hierarchyClass: 	nil
		cachedHierarchy: 	a SortHierarchically
		sourceTextArea: 	a PluggableTextMorphWithLimits(303038464)
		groupsSelection: 	a Dictionary()
		packagesSelection: 	a Dictionary(var-tests->true )
		classesSelection: 	a Dictionary(DIDSLTests->false DIPHPTests->true )
		list: 	a MorphTreeMorph(273940480)
		list2: 	a PluggableIconListMorph(454295552)
		sourceCodePanel: 	a PanelMorph(183500800)
		commentTextArea: 	nil
		currentDisplayChoice: 	#SourceCode
		sourceTextAreaLimit: 	350
		sourceCodeContainer: 	a PanelMorph(584843264)
		list2Elements: 	{DIDSLTests. DIJavaTests. DIPHPTests. DISTTests}
		listElements: 	nil
		shouldUpdateTitle: 	true
		testSemaphore: 	a Semaphore()
		sourceTextAreas: 	an OrderedCollection(a PluggableTextMorphWithLimits(303038464)...etc...
		multipleMethodsEditor: 	a MultipleMethodsEditor(286261248)
		contentSelection: 	nil
		acceptor: 	a MethodDefinitionAcceptor
		classifier: 	a MethodClassifier
		categoryWidget: 	a CategoryWidget
		methodWidget: 	a MethodWidget
		packagePattern: 	a RxMatcher
		searchWidget: 	a SearchMorph(866648064)


[ 
| selArgCount |
"show cursor in case item opens a new MVC window"
(selArgCount := selector numArgs) = 0
	ifTrue: [ target perform: selector ]
	ifFalse: [ 
		selArgCount = arguments size
			ifTrue: [ target perform: selector withArguments: arguments ]
			ifFalse: [ target perform: selector withArguments: (arguments copyWith: evt) ] ].
self changed ] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(952107008)'Profile it'
	Arguments and temporary variables: 
		evt: 	[(543@582) mouseUp 452207 nil]
		w: 	a WorldMorph(511705088) [world]
		selArgCount: 	2
	Receiver's instance variables: 
		bounds: 	(494.0@576.0) corner: (665.0@594.0)
		owner: 	a MenuMorph(569114624)
		submorphs: 	#()
		fullBounds: 	(494.0@576.0) corner: (665.0@594.0)
		color: 	Color black
		extension: 	a MorphExtension (975437824)
		font: 	a LogicalFont
 familyName: Source Sans Pro
 emphasis: nil
 pointSize: 10
...etc...
		emphasis: 	0
		contents: 	'Profile it'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a PackageTreeNautilusUI
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#tallyIt a PluggableTextMorphWithLimits(303038464))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


BlockClosure>>ensure:
	Receiver: [ 
| selArgCount |
"show cursor in case item opens a new MVC window"
(selArgCount := selec...etc...
	Arguments and temporary variables: 
		aBlock: 	[ oldcursor show ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
		startpc: 	134
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r100000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[ 
| selArgCount |
"show cursor in case item opens a new MVC window"
(s...etc...
		oldcursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	(-1@ -1)
		maskForm: 	Form(16x16x1)


ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(952107008)'Profile it'
	Arguments and temporary variables: 
		evt: 	[(543@582) mouseUp 452207 nil]
		w: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		bounds: 	(494.0@576.0) corner: (665.0@594.0)
		owner: 	a MenuMorph(569114624)
		submorphs: 	#()
		fullBounds: 	(494.0@576.0) corner: (665.0@594.0)
		color: 	Color black
		extension: 	a MorphExtension (975437824)
		font: 	a LogicalFont
 familyName: Source Sans Pro
 emphasis: nil
 pointSize: 10
...etc...
		emphasis: 	0
		contents: 	'Profile it'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a PackageTreeNautilusUI
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#tallyIt a PluggableTextMorphWithLimits(303038464))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
	Receiver: a ToggleMenuItemMorph(952107008)'Profile it'
	Arguments and temporary variables: 
		evt: 	[(543@582) mouseUp 452207 nil]
	Receiver's instance variables: 
		bounds: 	(494.0@576.0) corner: (665.0@594.0)
		owner: 	a MenuMorph(569114624)
		submorphs: 	#()
		fullBounds: 	(494.0@576.0) corner: (665.0@594.0)
		color: 	Color black
		extension: 	a MorphExtension (975437824)
		font: 	a LogicalFont
 familyName: Source Sans Pro
 emphasis: nil
 pointSize: 10
...etc...
		emphasis: 	0
		contents: 	'Profile it'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a PackageTreeNautilusUI
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#tallyIt a PluggableTextMorphWithLimits(303038464))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
	Receiver: a ToggleMenuItemMorph(952107008)'Profile it'
	Arguments and temporary variables: 
		anEvent: 	[(543@582) mouseUp 452207 nil]
	Receiver's instance variables: 
		bounds: 	(494.0@576.0) corner: (665.0@594.0)
		owner: 	a MenuMorph(569114624)
		submorphs: 	#()
		fullBounds: 	(494.0@576.0) corner: (665.0@594.0)
		color: 	Color black
		extension: 	a MorphExtension (975437824)
		font: 	a LogicalFont
 familyName: Source Sans Pro
 emphasis: nil
 pointSize: 10
...etc...
		emphasis: 	0
		contents: 	'Profile it'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a PackageTreeNautilusUI
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#tallyIt a PluggableTextMorphWithLimits(303038464))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [(543@582) mouseUp 452207 nil]
	Arguments and temporary variables: 
		anObject: 	a ToggleMenuItemMorph(952107008)'Profile it'
	Receiver's instance variables: 
		timeStamp: 	452207
		source: 	a HandMorph(760479744)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(543@582)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


ToggleMenuItemMorph(Morph)>>handleEvent:
	Receiver: a ToggleMenuItemMorph(952107008)'Profile it'
	Arguments and temporary variables: 
		anEvent: 	[(543@582) mouseUp 452207 nil]
	Receiver's instance variables: 
		bounds: 	(494.0@576.0) corner: (665.0@594.0)
		owner: 	a MenuMorph(569114624)
		submorphs: 	#()
		fullBounds: 	(494.0@576.0) corner: (665.0@594.0)
		color: 	Color black
		extension: 	a MorphExtension (975437824)
		font: 	a LogicalFont
 familyName: Source Sans Pro
 emphasis: nil
 pointSize: 10
...etc...
		emphasis: 	0
		contents: 	'Profile it'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a PackageTreeNautilusUI
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#tallyIt a PluggableTextMorphWithLimits(303038464))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(543@582) mouseUp 452207 nil]
		aMorph: 	a ToggleMenuItemMorph(952107008)'Profile it'
		localEvt: 	nil
		index: 	1
		child: 	nil
		morphs: 	#()
		inside: 	true
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(543@582) mouseUp 452207 nil]
		aMorph: 	a ToggleMenuItemMorph(952107008)'Profile it'
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


ToggleMenuItemMorph(Morph)>>processEvent:using:
	Receiver: a ToggleMenuItemMorph(952107008)'Profile it'
	Arguments and temporary variables: 
		anEvent: 	[(543@582) mouseUp 452207 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	(494.0@576.0) corner: (665.0@594.0)
		owner: 	a MenuMorph(569114624)
		submorphs: 	#()
		fullBounds: 	(494.0@576.0) corner: (665.0@594.0)
		color: 	Color black
		extension: 	a MorphExtension (975437824)
		font: 	a LogicalFont
 familyName: Source Sans Pro
 emphasis: nil
 pointSize: 10
...etc...
		emphasis: 	0
		contents: 	'Profile it'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a PackageTreeNautilusUI
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#tallyIt a PluggableTextMorphWithLimits(303038464))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(543@582) mouseUp 452207 nil]
		aMorph: 	a MenuMorph(569114624)
		localEvt: 	[(543@582) mouseUp 452207 nil]
		index: 	11
		child: 	a ToggleMenuItemMorph(952107008)'Profile it'
		morphs: 	an Array(a ToggleMenuItemMorph(32768000)'Suggestions' a MenuLineMorph(7...etc...
		inside: 	false
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(543@582) mouseUp 452207 nil]
		aMorph: 	a MenuMorph(569114624)
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MenuMorph(Morph)>>processEvent:using:
	Receiver: a MenuMorph(569114624)
	Arguments and temporary variables: 
		anEvent: 	[(543@582) mouseUp 452207 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	(489.0@416.0) corner: (670.0@858.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(32768000)'Suggestions' a MenuLineMorp...etc...
		fullBounds: 	(489.0@416.0) corner: (670.0@858.0)
		color: 	(Color r: 0.894 g: 0.894 b: 0.894 alpha: 1.0)
		extension: 	a MorphExtension (610533376) [other:  (basicColor -> (Color r: 0.823...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.674 g: 0.674 b: 0.674 alpha: 1.0)
		defaultTarget: 	a PackageTreeNautilusUI
		selectedItem: 	a ToggleMenuItemMorph(952107008)'Profile it'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(32768000)'Suggestions' a ...etc...


MenuMorph(Morph)>>processEvent:
	Receiver: a MenuMorph(569114624)
	Arguments and temporary variables: 
		anEvent: 	[(543@582) mouseUp 452207 nil]
	Receiver's instance variables: 
		bounds: 	(489.0@416.0) corner: (670.0@858.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(32768000)'Suggestions' a MenuLineMorp...etc...
		fullBounds: 	(489.0@416.0) corner: (670.0@858.0)
		color: 	(Color r: 0.894 g: 0.894 b: 0.894 alpha: 1.0)
		extension: 	a MorphExtension (610533376) [other:  (basicColor -> (Color r: 0.823...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.674 g: 0.674 b: 0.674 alpha: 1.0)
		defaultTarget: 	a PackageTreeNautilusUI
		selectedItem: 	a ToggleMenuItemMorph(952107008)'Profile it'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(32768000)'Suggestions' a ...etc...



--- The full stack ---
DIPhpDependencies>>testInput
DITestGroup>>build
[ :testGroup | testGroup build ] in DIDicto>>dictoBuild:
Array(SequenceableCollection)>>do:
DIDicto>>dictoBuild:
DIDicto>>dictoRun:
DIDicto>>dictoAll:
DIPHPTests(DIDSLTests)>>runAndReturnObjWithText:andSuccessResults:onProject:
DIPHPTests class>>DoIt
CompiledMethod>>valueWithReceiver:arguments:
[ v := compiledMethod valueWithReceiver: receiver arguments: #() ] in SmalltalkEditor>>tallySelection
BlockClosure>>ensure:
MessageTally>>spyEvery:on:
TimeProfiler>>runBlock:pollingEvery:
TimeProfiler>>openOnBlock:
TimeProfiler class>>spyOn:
SmalltalkEditor>>tallySelection
SmalltalkEditor>>tallyIt
[ textMorph editor tallyIt ] in PluggableTextMorphWithLimits(PluggableTextMorph)>>tallyIt
[ result := editBlock value ] in PluggableTextMorphWithLimits(PluggableTextMorph)>>handleEdit:
TextMorphForEditView(TextMorph)>>handleEdit:
PluggableTextMorphWithLimits(PluggableTextMorph)>>handleEdit:
PluggableTextMorphWithLimits(PluggableTextMorph)>>tallyIt
PackageTreeNautilusUI(Object)>>perform:orSendTo:
[ 
| selArgCount |
"show cursor in case item opens a new MVC window"
(selArgCount := selector numArgs) = 0
	ifTrue: [ target perform: selector ]
	ifFalse: [ 
		selArgCount = arguments size
			ifTrue: [ target perform: selector withArguments: arguments ]
			ifFalse: [ target perform: selector withArguments: (arguments copyWith: evt) ] ].
self changed ] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
ToggleMenuItemMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
ToggleMenuItemMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
MenuMorph(Morph)>>processEvent:using:
MenuMorph(Morph)>>processEvent:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
MenuMorph>>handleFocusEvent:
[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldState>>doOneSubCycleFor:
WorldMorph>>doOneSubCycle
MenuMorph>>invokeModalAt:in:allowKeyboard:
MenuMorph>>invokeModal:
MenuMorph>>invokeModal
PluggableTextMorphWithLimits(PluggableTextMorph)>>yellowButtonActivity:
SmalltalkEditor(TextEditor)>>mouseUp:
[ editor mouseUp: evt ] in TextMorphForEditView(TextMorph)>>mouseUp:
TextMorphForEditView(TextMorph)>>handleInteraction:
TextMorphForEditView>>handleInteraction:
TextMorphForEditView(TextMorph)>>mouseUp:
TextMorphForEditView>>mouseUp:
TextMorphForEditView(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
TextMorphForEditView(Morph)>>handleEvent:
TextMorphForEditView(Morph)>>handleFocusEvent:
[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ 
World doOneCycle.
Processor yield.
false ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Halt
24 February 2015 5:37:46.608771 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
NBCogit NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
https://github.com/pharo-project/pharo-vm.git Commit: 4a0d556150d478ff2de3c9624d2f18e6eaa3fa5c Date: 2014-12-18 18:42:53 +0100 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14893

Image: Pharo3.0 [Latest update: #30863]

DIPhpDependencies>>testRun
	Receiver: a DIPhpDependencies
	Arguments and temporary variables: 
		command: 	nil
	Receiver's instance variables: 
		output: 	''
		commandOutput: 	''
		NEWLINE: 	'
'
		rules: 	a DICollectionRule(Model cannot depend on Controller arDeleteGUI must de...etc...
		varSynonyms: 	nil
		sessionId: 	'1424795861'
		TIMESTAMP: 	'1424795861'
		TOOLNAME: 	'DIPhpDependencies'
		PROJECTROOT: 	'/home/otruffer/dicto/TestProjectPhp'
		PROJECTSRC: 	'src/'
		PROJECTBIN: 	'bin/'
		RESULTFILE: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/DictoTestSuite/1...etc...
		TESTFILE: 	nil
		testInputFileExt: 	'.st'
		SYSTEM: 	SYSTEM


DITestGroup>>build
	Receiver: a DITestGroup
	Arguments and temporary variables: 

	Receiver's instance variables: 
		rules: 	an OrderedCollection(Model cannot depend on Controller arDeleteGUI must ...etc...
		adapter: 	a DIPhpDependencies
		runCommandText: 	nil
		testSpecification: 	'[{ "subject" : "arEditField",
	   "argument": "ilDateTimeIn...etc...
		adapterID: 	'DIPhpDependencies'
		resultFile: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/DictoTestSuite/1...etc...
		specificationFile: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/DictoTest...etc...
		commandFile: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/DictoTestSuite/...etc...


[ :testGroup | testGroup build ] in DIDicto>>dictoBuild:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'
Model = PhpClass with name:"ar*"
Controller = PhpClass with name:...etc...
		adapterTestGroups: 	a Dictionary(DIGrepFileContent->a DITestGroup DIJMeterLoadTe...etc...
		testGroup: 	a DITestGroup
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424795861'
		singleShotTask: 	false


Array(SequenceableCollection)>>do:
	Receiver: an Array(a DITestGroup a DITestGroup a DITestGroup a DITestGroup a DITestGroup)
	Arguments and temporary variables: 
		aBlock: 	[ :testGroup | testGroup build ]
		index: 	4
	Receiver's instance variables: 
an Array(a DITestGroup a DITestGroup a DITestGroup a DITestGroup a DITestGroup)

DIDicto>>dictoBuild:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'
Model = PhpClass with name:"ar*"
Controller = PhpClass with name:...etc...
		adapterTestGroups: 	a Dictionary(DIGrepFileContent->a DITestGroup DIJMeterLoadTe...etc...
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424795861'
		singleShotTask: 	false


DIDicto>>dictoRun:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'
Model = PhpClass with name:"ar*"
Controller = PhpClass with name:...etc...
		adapterTestGroups: 	nil
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424795861'
		singleShotTask: 	false


DIDicto>>dictoAll:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'
Model = PhpClass with name:"ar*"
Controller = PhpClass with name:...etc...
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424795861'
		singleShotTask: 	false


DIPHPTests(DIDSLTests)>>runAndReturnObjWithText:andSuccessResults:onProject:
	Receiver: DIPHPTests
	Arguments and temporary variables: 
		dslText: 	'
Model = PhpClass with name:"ar*"
Controller = PhpClass with name:"*G...etc...
		res: 	#(false true false)
		project: 	'TestProjectPhp'
		dicto: 	a DIDicto
	Receiver's instance variables: 
		testSelector: 	nil
		expectedFails: 	nil


DIPHPTests class>>DoIt
	Receiver: DIPHPTests
	Arguments and temporary variables: 
		dsl: 	'
Model = PhpClass with name:"ar*"
Controller = PhpClass with name:"*GUI"
...etc...
		success: 	#(false true false)
		tester: 	DIPHPTests
	Receiver's instance variables: 
		superclass: 	DIDSLTests
		methodDict: 	a MethodDictionary(#testPhp->DIPHPTests>>#testPhp )
		format: 	134
		layout: 	a FixedLayout
		instanceVariables: 	#()
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#DIPHPTests
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Dicto-var-tests'
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set(#testP...etc...


CompiledMethod>>valueWithReceiver:arguments:
	Receiver: DIPHPTests class>>#DoIt
	Arguments and temporary variables: 
		aReceiver: 	DIPHPTests
		anArray: 	#()
	Receiver's instance variables: 
DIPHPTests class>>#DoIt

[ v := compiledMethod valueWithReceiver: receiver arguments: #() ] in SmalltalkEditor>>tallySelection
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		receiver: 	DIPHPTests
		context: 	nil
		compiledMethod: 	DIPHPTests class>>#DoIt
		profiler: 	nil
		v: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(509870080)
		selectionShowing: 	true
		model: 	a PackageTreeNautilusUI
		editingState: 	a SmalltalkEditingState


BlockClosure>>ensure:
	Receiver: [ v := compiledMethod valueWithReceiver: receiver arguments: #() ]
	Arguments and temporary variables: 
		aBlock: 	[ 
"cancel the probe and return the value"
"Could have already been ter...etc...
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor>>tallySelection
		startpc: 	105
		numArgs: 	0


MessageTally>>spyEvery:on:
	Receiver: nil(SmalltalkEditor) >> tallySelection
	Arguments and temporary variables: 
		observedProcess: 	a Process in nil
		millisecs: 	1
		aBlock: 	[ v := compiledMethod valueWithReceiver: receiver arguments: #() ]
		myDelay: 	a Delay(1 msecs; 1 msecs remaining)
		time0: 	452241
	Receiver's instance variables: 
		class: 	SmalltalkEditor
		method: 	SmalltalkEditor>>#tallySelection
		process: 	nil
		tally: 	5958
		receivers: 	an Array(nil(CompiledMethod) >> valueWithReceiver:arguments: nil(DID...etc...
		senders: 	nil
		time: 	0
		gcStats: 	#(64174716 64779312 71412012 nil nil 2000 5 524 1890 1019 165 0 0 0 0 ...etc...
		maxClassNameSize: 	1000
		maxClassPlusSelectorSize: 	1000
		maxTabs: 	100
		reportOtherProcesses: 	true


TimeProfiler>>runBlock:pollingEvery:
	Receiver: a TimeProfiler
	Arguments and temporary variables: 
		aBlock: 	[ v := compiledMethod valueWithReceiver: receiver arguments: #() ]
		pollPeriod: 	1
	Receiver's instance variables: 
		dependents: 	nil
		selection: 	nil
		announcer: 	nil
		rootItems: 	nil
		autoMultiSelection: 	nil
		headerLabel: 	nil
		multiSelection: 	nil
		wrapBlockOrSelector: 	nil
		isCheckList: 	nil
		enabled: 	nil
		win: 	nil
		rootMessageTally: 	nil(SmalltalkEditor) >> tallySelection
		threshold: 	nil
		minPercentageToExpand: 	nil
		treeMorph: 	nil
		block: 	[ v := compiledMethod valueWithReceiver: receiver arguments: #() ]
		blockCodePane: 	nil
		withBlockCodePane: 	false
		blockSource: 	nil
		reportOtherProcesses: 	nil
		showLeavesOnly: 	nil
		codeTabPane: 	nil
		resultPane: 	nil
		result: 	nil
		withToolBar: 	false


TimeProfiler>>openOnBlock:
	Receiver: a TimeProfiler
	Arguments and temporary variables: 
		aBlock: 	[ v := compiledMethod valueWithReceiver: receiver arguments: #() ]
	Receiver's instance variables: 
		dependents: 	nil
		selection: 	nil
		announcer: 	nil
		rootItems: 	nil
		autoMultiSelection: 	nil
		headerLabel: 	nil
		multiSelection: 	nil
		wrapBlockOrSelector: 	nil
		isCheckList: 	nil
		enabled: 	nil
		win: 	nil
		rootMessageTally: 	nil(SmalltalkEditor) >> tallySelection
		threshold: 	nil
		minPercentageToExpand: 	nil
		treeMorph: 	nil
		block: 	[ v := compiledMethod valueWithReceiver: receiver arguments: #() ]
		blockCodePane: 	nil
		withBlockCodePane: 	false
		blockSource: 	nil
		reportOtherProcesses: 	nil
		showLeavesOnly: 	nil
		codeTabPane: 	nil
		resultPane: 	nil
		result: 	nil
		withToolBar: 	false


TimeProfiler class>>spyOn:
	Receiver: TimeProfiler
	Arguments and temporary variables: 
		aBlock: 	[ v := compiledMethod valueWithReceiver: receiver arguments: #() ]
	Receiver's instance variables: 
		superclass: 	MorphTreeModel
		methodDict: 	a MethodDictionary(#blockCode->TimeProfiler>>#blockCode #blockCode:...etc...
		format: 	180
		layout: 	a FixedLayout
		instanceVariables: 	#(#win #rootMessageTally #threshold #minPercentageToExpand #...etc...
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#TimeProfiler
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Tools-Profilers'
		traitComposition: 	{}
		localSelectors: 	nil


SmalltalkEditor>>tallySelection
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		v: 	nil
		receiver: 	DIPHPTests
		context: 	nil
		compiledMethod: 	DIPHPTests class>>#DoIt
		profiler: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(509870080)
		selectionShowing: 	true
		model: 	a PackageTreeNautilusUI
		editingState: 	a SmalltalkEditingState


SmalltalkEditor>>tallyIt
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 

	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(509870080)
		selectionShowing: 	true
		model: 	a PackageTreeNautilusUI
		editingState: 	a SmalltalkEditingState


[ textMorph editor tallyIt ] in PluggableTextMorphWithLimits(PluggableTextMorph)>>tallyIt
	Receiver: a PluggableTextMorphWithLimits(303038464)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(286.0@435.0) corner: (1132.0@829.0)
		owner: 	a MultipleMethodsEditor(286261248)
		submorphs: 	an Array(an AlphaImageMorph(499908608) a TransformMorph(735313920))
		fullBounds: 	(286@435) corner: (1132@829)
		color: 	Color white
		extension: 	a MorphExtension (488636416) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.784 g: 0.784 b: 0.784 alpha: 1.0)
		model: 	a PackageTreeNautilusUI
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(344719360)
		scroller: 	a TransformMorph(735313920)
		getMenuSelector: 	#sourceCodeMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(65273856)
		textMorph: 	a TextMorphForEditView(509870080)
		getTextSelector: 	#sourceCodeFrom:
		setTextSelector: 	#compileSource:notifying:
		getSelectionSelector: 	#contentsSelectionFrom:
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(9 to: 483)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil
		doubleClickSelector: 	nil
		setSelectionSelector: 	nil
		alertLimit: 	700
		locked: 	false
		warningLimit: 	350
		method: 	nil
		lockIcon: 	an AlphaImageMorph(499908608)
		canLockChangeSelector: 	#canChangeLockFor:
		lockSelector: 	#lockTextArea:from:


[ result := editBlock value ] in PluggableTextMorphWithLimits(PluggableTextMorph)>>handleEdit:
	Receiver: a PluggableTextMorphWithLimits(303038464)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph editor tallyIt ]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(286.0@435.0) corner: (1132.0@829.0)
		owner: 	a MultipleMethodsEditor(286261248)
		submorphs: 	an Array(an AlphaImageMorph(499908608) a TransformMorph(735313920))
		fullBounds: 	(286@435) corner: (1132@829)
		color: 	Color white
		extension: 	a MorphExtension (488636416) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.784 g: 0.784 b: 0.784 alpha: 1.0)
		model: 	a PackageTreeNautilusUI
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(344719360)
		scroller: 	a TransformMorph(735313920)
		getMenuSelector: 	#sourceCodeMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(65273856)
		textMorph: 	a TextMorphForEditView(509870080)
		getTextSelector: 	#sourceCodeFrom:
		setTextSelector: 	#compileSource:notifying:
		getSelectionSelector: 	#contentsSelectionFrom:
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(9 to: 483)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil
		doubleClickSelector: 	nil
		setSelectionSelector: 	nil
		alertLimit: 	700
		locked: 	false
		warningLimit: 	350
		method: 	nil
		lockIcon: 	an AlphaImageMorph(499908608)
		canLockChangeSelector: 	#canChangeLockFor:
		lockSelector: 	#lockTextArea:from:


TextMorphForEditView(TextMorph)>>handleEdit:
	Receiver: a TextMorphForEditView(509870080)
	Arguments and temporary variables: 
		editBlock: 	[ result := editBlock value ]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (838@344)
		owner: 	a TransformMorph(735313920)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (838@344)
		color: 	Color black
		extension: 	a MorphExtension (552599552) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Source Code Pro
		text: 	a Text for 'testPhp
| dsl success tester|
	
dsl := ''
Model = PhpClass wi...etc...
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		defaultColor: 	Color black
		editView: 	a PluggableTextMorphWithLimits(303038464)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


PluggableTextMorphWithLimits(PluggableTextMorph)>>handleEdit:
	Receiver: a PluggableTextMorphWithLimits(303038464)
	Arguments and temporary variables: 
		result: 	nil
		editBlock: 	[ textMorph editor tallyIt ]
	Receiver's instance variables: 
		bounds: 	(286.0@435.0) corner: (1132.0@829.0)
		owner: 	a MultipleMethodsEditor(286261248)
		submorphs: 	an Array(an AlphaImageMorph(499908608) a TransformMorph(735313920))
		fullBounds: 	(286@435) corner: (1132@829)
		color: 	Color white
		extension: 	a MorphExtension (488636416) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.784 g: 0.784 b: 0.784 alpha: 1.0)
		model: 	a PackageTreeNautilusUI
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(344719360)
		scroller: 	a TransformMorph(735313920)
		getMenuSelector: 	#sourceCodeMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(65273856)
		textMorph: 	a TextMorphForEditView(509870080)
		getTextSelector: 	#sourceCodeFrom:
		setTextSelector: 	#compileSource:notifying:
		getSelectionSelector: 	#contentsSelectionFrom:
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(9 to: 483)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil
		doubleClickSelector: 	nil
		setSelectionSelector: 	nil
		alertLimit: 	700
		locked: 	false
		warningLimit: 	350
		method: 	nil
		lockIcon: 	an AlphaImageMorph(499908608)
		canLockChangeSelector: 	#canChangeLockFor:
		lockSelector: 	#lockTextArea:from:


PluggableTextMorphWithLimits(PluggableTextMorph)>>tallyIt
	Receiver: a PluggableTextMorphWithLimits(303038464)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(286.0@435.0) corner: (1132.0@829.0)
		owner: 	a MultipleMethodsEditor(286261248)
		submorphs: 	an Array(an AlphaImageMorph(499908608) a TransformMorph(735313920))
		fullBounds: 	(286@435) corner: (1132@829)
		color: 	Color white
		extension: 	a MorphExtension (488636416) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.784 g: 0.784 b: 0.784 alpha: 1.0)
		model: 	a PackageTreeNautilusUI
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(344719360)
		scroller: 	a TransformMorph(735313920)
		getMenuSelector: 	#sourceCodeMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(65273856)
		textMorph: 	a TextMorphForEditView(509870080)
		getTextSelector: 	#sourceCodeFrom:
		setTextSelector: 	#compileSource:notifying:
		getSelectionSelector: 	#contentsSelectionFrom:
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(9 to: 483)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil
		doubleClickSelector: 	nil
		setSelectionSelector: 	nil
		alertLimit: 	700
		locked: 	false
		warningLimit: 	350
		method: 	nil
		lockIcon: 	an AlphaImageMorph(499908608)
		canLockChangeSelector: 	#canChangeLockFor:
		lockSelector: 	#lockTextArea:from:


PackageTreeNautilusUI(Object)>>perform:orSendTo:
	Receiver: a PackageTreeNautilusUI
	Arguments and temporary variables: 
		selector: 	#tallyIt
		otherTarget: 	a PluggableTextMorphWithLimits(303038464)
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a CategoryWidget a MethodWidget a NautilusWindow(...etc...
		model: 	a PackageTreeNautilus
		window: 	a NautilusWindow(542638080)
		hierarchyClass: 	nil
		cachedHierarchy: 	a SortHierarchically
		sourceTextArea: 	a PluggableTextMorphWithLimits(303038464)
		groupsSelection: 	a Dictionary()
		packagesSelection: 	a Dictionary(var-tests->true )
		classesSelection: 	a Dictionary(DIDSLTests->false DIPHPTests->true )
		list: 	a MorphTreeMorph(273940480)
		list2: 	a PluggableIconListMorph(454295552)
		sourceCodePanel: 	a PanelMorph(183500800)
		commentTextArea: 	nil
		currentDisplayChoice: 	#SourceCode
		sourceTextAreaLimit: 	350
		sourceCodeContainer: 	a PanelMorph(584843264)
		list2Elements: 	{DIDSLTests. DIJavaTests. DIPHPTests. DISTTests}
		listElements: 	nil
		shouldUpdateTitle: 	true
		testSemaphore: 	a Semaphore()
		sourceTextAreas: 	an OrderedCollection(a PluggableTextMorphWithLimits(303038464)...etc...
		multipleMethodsEditor: 	a MultipleMethodsEditor(286261248)
		contentSelection: 	nil
		acceptor: 	a MethodDefinitionAcceptor
		classifier: 	a MethodClassifier
		categoryWidget: 	a CategoryWidget
		methodWidget: 	a MethodWidget
		packagePattern: 	a RxMatcher
		searchWidget: 	a SearchMorph(866648064)


[ 
| selArgCount |
"show cursor in case item opens a new MVC window"
(selArgCount := selector numArgs) = 0
	ifTrue: [ target perform: selector ]
	ifFalse: [ 
		selArgCount = arguments size
			ifTrue: [ target perform: selector withArguments: arguments ]
			ifFalse: [ target perform: selector withArguments: (arguments copyWith: evt) ] ].
self changed ] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(952107008)'Profile it'
	Arguments and temporary variables: 
		evt: 	[(543@582) mouseUp 452207 nil]
		w: 	a WorldMorph(511705088) [world]
		selArgCount: 	2
	Receiver's instance variables: 
		bounds: 	(494.0@576.0) corner: (665.0@594.0)
		owner: 	a MenuMorph(569114624)
		submorphs: 	#()
		fullBounds: 	(494.0@576.0) corner: (665.0@594.0)
		color: 	Color black
		extension: 	a MorphExtension (975437824)
		font: 	a LogicalFont
 familyName: Source Sans Pro
 emphasis: nil
 pointSize: 10
...etc...
		emphasis: 	0
		contents: 	'Profile it'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a PackageTreeNautilusUI
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#tallyIt a PluggableTextMorphWithLimits(303038464))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


BlockClosure>>ensure:
	Receiver: [ 
| selArgCount |
"show cursor in case item opens a new MVC window"
(selArgCount := selec...etc...
	Arguments and temporary variables: 
		aBlock: 	[ oldcursor show ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
		startpc: 	134
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r100000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[ 
| selArgCount |
"show cursor in case item opens a new MVC window"
(s...etc...
		oldcursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	(-1@ -1)
		maskForm: 	Form(16x16x1)


ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(952107008)'Profile it'
	Arguments and temporary variables: 
		evt: 	[(543@582) mouseUp 452207 nil]
		w: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		bounds: 	(494.0@576.0) corner: (665.0@594.0)
		owner: 	a MenuMorph(569114624)
		submorphs: 	#()
		fullBounds: 	(494.0@576.0) corner: (665.0@594.0)
		color: 	Color black
		extension: 	a MorphExtension (975437824)
		font: 	a LogicalFont
 familyName: Source Sans Pro
 emphasis: nil
 pointSize: 10
...etc...
		emphasis: 	0
		contents: 	'Profile it'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a PackageTreeNautilusUI
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#tallyIt a PluggableTextMorphWithLimits(303038464))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
	Receiver: a ToggleMenuItemMorph(952107008)'Profile it'
	Arguments and temporary variables: 
		evt: 	[(543@582) mouseUp 452207 nil]
	Receiver's instance variables: 
		bounds: 	(494.0@576.0) corner: (665.0@594.0)
		owner: 	a MenuMorph(569114624)
		submorphs: 	#()
		fullBounds: 	(494.0@576.0) corner: (665.0@594.0)
		color: 	Color black
		extension: 	a MorphExtension (975437824)
		font: 	a LogicalFont
 familyName: Source Sans Pro
 emphasis: nil
 pointSize: 10
...etc...
		emphasis: 	0
		contents: 	'Profile it'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a PackageTreeNautilusUI
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#tallyIt a PluggableTextMorphWithLimits(303038464))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
	Receiver: a ToggleMenuItemMorph(952107008)'Profile it'
	Arguments and temporary variables: 
		anEvent: 	[(543@582) mouseUp 452207 nil]
	Receiver's instance variables: 
		bounds: 	(494.0@576.0) corner: (665.0@594.0)
		owner: 	a MenuMorph(569114624)
		submorphs: 	#()
		fullBounds: 	(494.0@576.0) corner: (665.0@594.0)
		color: 	Color black
		extension: 	a MorphExtension (975437824)
		font: 	a LogicalFont
 familyName: Source Sans Pro
 emphasis: nil
 pointSize: 10
...etc...
		emphasis: 	0
		contents: 	'Profile it'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a PackageTreeNautilusUI
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#tallyIt a PluggableTextMorphWithLimits(303038464))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [(543@582) mouseUp 452207 nil]
	Arguments and temporary variables: 
		anObject: 	a ToggleMenuItemMorph(952107008)'Profile it'
	Receiver's instance variables: 
		timeStamp: 	452207
		source: 	a HandMorph(760479744)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(543@582)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


ToggleMenuItemMorph(Morph)>>handleEvent:
	Receiver: a ToggleMenuItemMorph(952107008)'Profile it'
	Arguments and temporary variables: 
		anEvent: 	[(543@582) mouseUp 452207 nil]
	Receiver's instance variables: 
		bounds: 	(494.0@576.0) corner: (665.0@594.0)
		owner: 	a MenuMorph(569114624)
		submorphs: 	#()
		fullBounds: 	(494.0@576.0) corner: (665.0@594.0)
		color: 	Color black
		extension: 	a MorphExtension (975437824)
		font: 	a LogicalFont
 familyName: Source Sans Pro
 emphasis: nil
 pointSize: 10
...etc...
		emphasis: 	0
		contents: 	'Profile it'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a PackageTreeNautilusUI
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#tallyIt a PluggableTextMorphWithLimits(303038464))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(543@582) mouseUp 452207 nil]
		aMorph: 	a ToggleMenuItemMorph(952107008)'Profile it'
		localEvt: 	nil
		index: 	1
		child: 	nil
		morphs: 	#()
		inside: 	true
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(543@582) mouseUp 452207 nil]
		aMorph: 	a ToggleMenuItemMorph(952107008)'Profile it'
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


ToggleMenuItemMorph(Morph)>>processEvent:using:
	Receiver: a ToggleMenuItemMorph(952107008)'Profile it'
	Arguments and temporary variables: 
		anEvent: 	[(543@582) mouseUp 452207 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	(494.0@576.0) corner: (665.0@594.0)
		owner: 	a MenuMorph(569114624)
		submorphs: 	#()
		fullBounds: 	(494.0@576.0) corner: (665.0@594.0)
		color: 	Color black
		extension: 	a MorphExtension (975437824)
		font: 	a LogicalFont
 familyName: Source Sans Pro
 emphasis: nil
 pointSize: 10
...etc...
		emphasis: 	0
		contents: 	'Profile it'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a PackageTreeNautilusUI
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#tallyIt a PluggableTextMorphWithLimits(303038464))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(543@582) mouseUp 452207 nil]
		aMorph: 	a MenuMorph(569114624)
		localEvt: 	[(543@582) mouseUp 452207 nil]
		index: 	11
		child: 	a ToggleMenuItemMorph(952107008)'Profile it'
		morphs: 	an Array(a ToggleMenuItemMorph(32768000)'Suggestions' a MenuLineMorph(7...etc...
		inside: 	false
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(543@582) mouseUp 452207 nil]
		aMorph: 	a MenuMorph(569114624)
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MenuMorph(Morph)>>processEvent:using:
	Receiver: a MenuMorph(569114624)
	Arguments and temporary variables: 
		anEvent: 	[(543@582) mouseUp 452207 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	(489.0@416.0) corner: (670.0@858.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(32768000)'Suggestions' a MenuLineMorp...etc...
		fullBounds: 	(489.0@416.0) corner: (670.0@858.0)
		color: 	(Color r: 0.894 g: 0.894 b: 0.894 alpha: 1.0)
		extension: 	a MorphExtension (610533376) [other:  (basicColor -> (Color r: 0.823...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.674 g: 0.674 b: 0.674 alpha: 1.0)
		defaultTarget: 	a PackageTreeNautilusUI
		selectedItem: 	a ToggleMenuItemMorph(952107008)'Profile it'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(32768000)'Suggestions' a ...etc...


MenuMorph(Morph)>>processEvent:
	Receiver: a MenuMorph(569114624)
	Arguments and temporary variables: 
		anEvent: 	[(543@582) mouseUp 452207 nil]
	Receiver's instance variables: 
		bounds: 	(489.0@416.0) corner: (670.0@858.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(32768000)'Suggestions' a MenuLineMorp...etc...
		fullBounds: 	(489.0@416.0) corner: (670.0@858.0)
		color: 	(Color r: 0.894 g: 0.894 b: 0.894 alpha: 1.0)
		extension: 	a MorphExtension (610533376) [other:  (basicColor -> (Color r: 0.823...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.674 g: 0.674 b: 0.674 alpha: 1.0)
		defaultTarget: 	a PackageTreeNautilusUI
		selectedItem: 	a ToggleMenuItemMorph(952107008)'Profile it'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(32768000)'Suggestions' a ...etc...



--- The full stack ---
DIPhpDependencies>>testRun
DITestGroup>>build
[ :testGroup | testGroup build ] in DIDicto>>dictoBuild:
Array(SequenceableCollection)>>do:
DIDicto>>dictoBuild:
DIDicto>>dictoRun:
DIDicto>>dictoAll:
DIPHPTests(DIDSLTests)>>runAndReturnObjWithText:andSuccessResults:onProject:
DIPHPTests class>>DoIt
CompiledMethod>>valueWithReceiver:arguments:
[ v := compiledMethod valueWithReceiver: receiver arguments: #() ] in SmalltalkEditor>>tallySelection
BlockClosure>>ensure:
MessageTally>>spyEvery:on:
TimeProfiler>>runBlock:pollingEvery:
TimeProfiler>>openOnBlock:
TimeProfiler class>>spyOn:
SmalltalkEditor>>tallySelection
SmalltalkEditor>>tallyIt
[ textMorph editor tallyIt ] in PluggableTextMorphWithLimits(PluggableTextMorph)>>tallyIt
[ result := editBlock value ] in PluggableTextMorphWithLimits(PluggableTextMorph)>>handleEdit:
TextMorphForEditView(TextMorph)>>handleEdit:
PluggableTextMorphWithLimits(PluggableTextMorph)>>handleEdit:
PluggableTextMorphWithLimits(PluggableTextMorph)>>tallyIt
PackageTreeNautilusUI(Object)>>perform:orSendTo:
[ 
| selArgCount |
"show cursor in case item opens a new MVC window"
(selArgCount := selector numArgs) = 0
	ifTrue: [ target perform: selector ]
	ifFalse: [ 
		selArgCount = arguments size
			ifTrue: [ target perform: selector withArguments: arguments ]
			ifFalse: [ target perform: selector withArguments: (arguments copyWith: evt) ] ].
self changed ] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
ToggleMenuItemMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
ToggleMenuItemMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
MenuMorph(Morph)>>processEvent:using:
MenuMorph(Morph)>>processEvent:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
MenuMorph>>handleFocusEvent:
[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldState>>doOneSubCycleFor:
WorldMorph>>doOneSubCycle
MenuMorph>>invokeModalAt:in:allowKeyboard:
MenuMorph>>invokeModal:
MenuMorph>>invokeModal
PluggableTextMorphWithLimits(PluggableTextMorph)>>yellowButtonActivity:
SmalltalkEditor(TextEditor)>>mouseUp:
[ editor mouseUp: evt ] in TextMorphForEditView(TextMorph)>>mouseUp:
TextMorphForEditView(TextMorph)>>handleInteraction:
TextMorphForEditView>>handleInteraction:
TextMorphForEditView(TextMorph)>>mouseUp:
TextMorphForEditView>>mouseUp:
TextMorphForEditView(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
TextMorphForEditView(Morph)>>handleEvent:
TextMorphForEditView(Morph)>>handleFocusEvent:
[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ 
World doOneCycle.
Processor yield.
false ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Halt
24 February 2015 5:48:09.117755 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
NBCogit NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
https://github.com/pharo-project/pharo-vm.git Commit: 4a0d556150d478ff2de3c9624d2f18e6eaa3fa5c Date: 2014-12-18 18:42:53 +0100 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14893

Image: Pharo3.0 [Latest update: #30863]

DIPhpDependencies>>testInput
	Receiver: a DIPhpDependencies
	Arguments and temporary variables: 
		strRules: 	'{ "subject" : "arEditField",
	   "argument": "ilDateTimeInputGUI",
	...etc...
	Receiver's instance variables: 
		output: 	''
		commandOutput: 	''
		NEWLINE: 	'
'
		rules: 	a DICollectionRule(Model cannot depend on Controller arDeleteGUI must de...etc...
		varSynonyms: 	nil
		sessionId: 	'1424796486'
		TIMESTAMP: 	'1424796486'
		TOOLNAME: 	'DIPhpDependencies'
		PROJECTROOT: 	'/home/otruffer/dicto/TestProjectPhp'
		PROJECTSRC: 	'src/'
		PROJECTBIN: 	'bin/'
		RESULTFILE: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/DictoTestSuite/1...etc...
		TESTFILE: 	nil
		testInputFileExt: 	'.st'
		SYSTEM: 	SYSTEM


DITestGroup>>build
	Receiver: a DITestGroup
	Arguments and temporary variables: 

	Receiver's instance variables: 
		rules: 	an OrderedCollection(Model cannot depend on Controller arDeleteGUI must ...etc...
		adapter: 	a DIPhpDependencies
		runCommandText: 	nil
		testSpecification: 	nil
		adapterID: 	'DIPhpDependencies'
		resultFile: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/DictoTestSuite/1...etc...
		specificationFile: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/DictoTest...etc...
		commandFile: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/DictoTestSuite/...etc...
		rawOutput: 	nil
		xmlOutput: 	nil


[ :testGroup | testGroup build ] in DIDicto>>dictoBuild:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'
Model = PhpClass with name:"ar*"
Controller = PhpClass with name:...etc...
		adapterTestGroups: 	a Dictionary(DIGrepFileContent->a DITestGroup DIJMeterLoadTe...etc...
		testGroup: 	a DITestGroup
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424796486'
		singleShotTask: 	false


Array(SequenceableCollection)>>do:
	Receiver: an Array(a DITestGroup a DITestGroup a DITestGroup a DITestGroup a DITestGroup)
	Arguments and temporary variables: 
		aBlock: 	[ :testGroup | testGroup build ]
		index: 	4
	Receiver's instance variables: 
an Array(a DITestGroup a DITestGroup a DITestGroup a DITestGroup a DITestGroup)

DIDicto>>dictoBuild:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'
Model = PhpClass with name:"ar*"
Controller = PhpClass with name:...etc...
		adapterTestGroups: 	a Dictionary(DIGrepFileContent->a DITestGroup DIJMeterLoadTe...etc...
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424796486'
		singleShotTask: 	false


DIDicto>>dictoRun:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'
Model = PhpClass with name:"ar*"
Controller = PhpClass with name:...etc...
		adapterTestGroups: 	nil
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424796486'
		singleShotTask: 	false


DIDicto>>dictoAll:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'
Model = PhpClass with name:"ar*"
Controller = PhpClass with name:...etc...
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424796486'
		singleShotTask: 	false


DIPHPTests(DIDSLTests)>>runAndReturnObjWithText:andSuccessResults:onProject:
	Receiver: DIPHPTests
	Arguments and temporary variables: 
		dslText: 	'
Model = PhpClass with name:"ar*"
Controller = PhpClass with name:"*G...etc...
		res: 	#(false true false)
		project: 	'TestProjectPhp'
		dicto: 	a DIDicto
	Receiver's instance variables: 
		testSelector: 	nil
		expectedFails: 	nil


DIPHPTests class>>DoIt
	Receiver: DIPHPTests
	Arguments and temporary variables: 
		dsl: 	'
Model = PhpClass with name:"ar*"
Controller = PhpClass with name:"*GUI"
...etc...
		success: 	#(false true false)
		test: 	DIPHPTests
	Receiver's instance variables: 
		superclass: 	DIDSLTests
		methodDict: 	a MethodDictionary(#testPhp->DIPHPTests>>#testPhp )
		format: 	134
		layout: 	a FixedLayout
		instanceVariables: 	#()
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#DIPHPTests
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Dicto-var-tests'
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set(#testP...etc...


CompiledMethod>>valueWithReceiver:arguments:
	Receiver: DIPHPTests class>>#DoIt
	Arguments and temporary variables: 
		aReceiver: 	DIPHPTests
		anArray: 	#()
	Receiver's instance variables: 
DIPHPTests class>>#DoIt

[ v := compiledMethod valueWithReceiver: receiver arguments: #() ] in SmalltalkEditor>>tallySelection
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		receiver: 	DIPHPTests
		context: 	nil
		compiledMethod: 	DIPHPTests class>>#DoIt
		profiler: 	nil
		v: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(509870080)
		selectionShowing: 	true
		model: 	a PackageTreeNautilusUI
		editingState: 	a SmalltalkEditingState


BlockClosure>>ensure:
	Receiver: [ v := compiledMethod valueWithReceiver: receiver arguments: #() ]
	Arguments and temporary variables: 
		aBlock: 	[ 
"cancel the probe and return the value"
"Could have already been ter...etc...
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor>>tallySelection
		startpc: 	105
		numArgs: 	0


MessageTally>>spyEvery:on:
	Receiver: nil(SmalltalkEditor) >> tallySelection
	Arguments and temporary variables: 
		observedProcess: 	a Process in nil
		millisecs: 	1
		aBlock: 	[ v := compiledMethod valueWithReceiver: receiver arguments: #() ]
		myDelay: 	a Delay(1 msecs; 1 msecs remaining)
		time0: 	1077966
	Receiver's instance variables: 
		class: 	SmalltalkEditor
		method: 	SmalltalkEditor>>#tallySelection
		process: 	nil
		tally: 	2745
		receivers: 	an Array(nil(CompiledMethod) >> valueWithReceiver:arguments: nil(DID...etc...
		senders: 	nil
		time: 	0
		gcStats: 	#(61090196 62475912 68844264 nil nil 2000 6 624 3846 2685 309 0 0 0 0 ...etc...
		maxClassNameSize: 	1000
		maxClassPlusSelectorSize: 	1000
		maxTabs: 	100
		reportOtherProcesses: 	true


TimeProfiler>>runBlock:pollingEvery:
	Receiver: a TimeProfiler
	Arguments and temporary variables: 
		aBlock: 	[ v := compiledMethod valueWithReceiver: receiver arguments: #() ]
		pollPeriod: 	1
	Receiver's instance variables: 
		dependents: 	nil
		selection: 	nil
		announcer: 	nil
		rootItems: 	nil
		autoMultiSelection: 	nil
		headerLabel: 	nil
		multiSelection: 	nil
		wrapBlockOrSelector: 	nil
		isCheckList: 	nil
		enabled: 	nil
		win: 	nil
		rootMessageTally: 	nil(SmalltalkEditor) >> tallySelection
		threshold: 	nil
		minPercentageToExpand: 	nil
		treeMorph: 	nil
		block: 	[ v := compiledMethod valueWithReceiver: receiver arguments: #() ]
		blockCodePane: 	nil
		withBlockCodePane: 	false
		blockSource: 	nil
		reportOtherProcesses: 	nil
		showLeavesOnly: 	nil
		codeTabPane: 	nil
		resultPane: 	nil
		result: 	nil
		withToolBar: 	false


TimeProfiler>>openOnBlock:
	Receiver: a TimeProfiler
	Arguments and temporary variables: 
		aBlock: 	[ v := compiledMethod valueWithReceiver: receiver arguments: #() ]
	Receiver's instance variables: 
		dependents: 	nil
		selection: 	nil
		announcer: 	nil
		rootItems: 	nil
		autoMultiSelection: 	nil
		headerLabel: 	nil
		multiSelection: 	nil
		wrapBlockOrSelector: 	nil
		isCheckList: 	nil
		enabled: 	nil
		win: 	nil
		rootMessageTally: 	nil(SmalltalkEditor) >> tallySelection
		threshold: 	nil
		minPercentageToExpand: 	nil
		treeMorph: 	nil
		block: 	[ v := compiledMethod valueWithReceiver: receiver arguments: #() ]
		blockCodePane: 	nil
		withBlockCodePane: 	false
		blockSource: 	nil
		reportOtherProcesses: 	nil
		showLeavesOnly: 	nil
		codeTabPane: 	nil
		resultPane: 	nil
		result: 	nil
		withToolBar: 	false


TimeProfiler class>>spyOn:
	Receiver: TimeProfiler
	Arguments and temporary variables: 
		aBlock: 	[ v := compiledMethod valueWithReceiver: receiver arguments: #() ]
	Receiver's instance variables: 
		superclass: 	MorphTreeModel
		methodDict: 	a MethodDictionary(#blockCode->TimeProfiler>>#blockCode #blockCode:...etc...
		format: 	180
		layout: 	a FixedLayout
		instanceVariables: 	#(#win #rootMessageTally #threshold #minPercentageToExpand #...etc...
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#TimeProfiler
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Tools-Profilers'
		traitComposition: 	{}
		localSelectors: 	nil


SmalltalkEditor>>tallySelection
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		v: 	nil
		receiver: 	DIPHPTests
		context: 	nil
		compiledMethod: 	DIPHPTests class>>#DoIt
		profiler: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(509870080)
		selectionShowing: 	true
		model: 	a PackageTreeNautilusUI
		editingState: 	a SmalltalkEditingState


SmalltalkEditor>>tallyIt
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 

	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(509870080)
		selectionShowing: 	true
		model: 	a PackageTreeNautilusUI
		editingState: 	a SmalltalkEditingState


[ textMorph editor tallyIt ] in PluggableTextMorphWithLimits(PluggableTextMorph)>>tallyIt
	Receiver: a PluggableTextMorphWithLimits(303038464)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(286.0@435.0) corner: (1132.0@829.0)
		owner: 	a MultipleMethodsEditor(286261248)
		submorphs: 	an Array(an AlphaImageMorph(499908608) a TransformMorph(735313920))
		fullBounds: 	(286@435) corner: (1132@829)
		color: 	Color white
		extension: 	a MorphExtension (488636416) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.784 g: 0.784 b: 0.784 alpha: 1.0)
		model: 	a PackageTreeNautilusUI
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(344719360)
		scroller: 	a TransformMorph(735313920)
		getMenuSelector: 	#sourceCodeMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(65273856)
		textMorph: 	a TextMorphForEditView(509870080)
		getTextSelector: 	#sourceCodeFrom:
		setTextSelector: 	#compileSource:notifying:
		getSelectionSelector: 	#contentsSelectionFrom:
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(9 to: 477)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil
		doubleClickSelector: 	nil
		setSelectionSelector: 	nil
		alertLimit: 	700
		locked: 	false
		warningLimit: 	350
		method: 	nil
		lockIcon: 	an AlphaImageMorph(499908608)
		canLockChangeSelector: 	#canChangeLockFor:
		lockSelector: 	#lockTextArea:from:


[ result := editBlock value ] in PluggableTextMorphWithLimits(PluggableTextMorph)>>handleEdit:
	Receiver: a PluggableTextMorphWithLimits(303038464)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph editor tallyIt ]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(286.0@435.0) corner: (1132.0@829.0)
		owner: 	a MultipleMethodsEditor(286261248)
		submorphs: 	an Array(an AlphaImageMorph(499908608) a TransformMorph(735313920))
		fullBounds: 	(286@435) corner: (1132@829)
		color: 	Color white
		extension: 	a MorphExtension (488636416) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.784 g: 0.784 b: 0.784 alpha: 1.0)
		model: 	a PackageTreeNautilusUI
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(344719360)
		scroller: 	a TransformMorph(735313920)
		getMenuSelector: 	#sourceCodeMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(65273856)
		textMorph: 	a TextMorphForEditView(509870080)
		getTextSelector: 	#sourceCodeFrom:
		setTextSelector: 	#compileSource:notifying:
		getSelectionSelector: 	#contentsSelectionFrom:
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(9 to: 477)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil
		doubleClickSelector: 	nil
		setSelectionSelector: 	nil
		alertLimit: 	700
		locked: 	false
		warningLimit: 	350
		method: 	nil
		lockIcon: 	an AlphaImageMorph(499908608)
		canLockChangeSelector: 	#canChangeLockFor:
		lockSelector: 	#lockTextArea:from:


TextMorphForEditView(TextMorph)>>handleEdit:
	Receiver: a TextMorphForEditView(509870080)
	Arguments and temporary variables: 
		editBlock: 	[ result := editBlock value ]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (838@344)
		owner: 	a TransformMorph(735313920)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (838@344)
		color: 	Color black
		extension: 	a MorphExtension (552599552) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Source Code Pro
		text: 	a Text for 'testPhp
| dsl success test|
	
dsl := ''
Model = PhpClass with...etc...
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		defaultColor: 	Color black
		editView: 	a PluggableTextMorphWithLimits(303038464)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


PluggableTextMorphWithLimits(PluggableTextMorph)>>handleEdit:
	Receiver: a PluggableTextMorphWithLimits(303038464)
	Arguments and temporary variables: 
		result: 	nil
		editBlock: 	[ textMorph editor tallyIt ]
	Receiver's instance variables: 
		bounds: 	(286.0@435.0) corner: (1132.0@829.0)
		owner: 	a MultipleMethodsEditor(286261248)
		submorphs: 	an Array(an AlphaImageMorph(499908608) a TransformMorph(735313920))
		fullBounds: 	(286@435) corner: (1132@829)
		color: 	Color white
		extension: 	a MorphExtension (488636416) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.784 g: 0.784 b: 0.784 alpha: 1.0)
		model: 	a PackageTreeNautilusUI
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(344719360)
		scroller: 	a TransformMorph(735313920)
		getMenuSelector: 	#sourceCodeMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(65273856)
		textMorph: 	a TextMorphForEditView(509870080)
		getTextSelector: 	#sourceCodeFrom:
		setTextSelector: 	#compileSource:notifying:
		getSelectionSelector: 	#contentsSelectionFrom:
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(9 to: 477)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil
		doubleClickSelector: 	nil
		setSelectionSelector: 	nil
		alertLimit: 	700
		locked: 	false
		warningLimit: 	350
		method: 	nil
		lockIcon: 	an AlphaImageMorph(499908608)
		canLockChangeSelector: 	#canChangeLockFor:
		lockSelector: 	#lockTextArea:from:


PluggableTextMorphWithLimits(PluggableTextMorph)>>tallyIt
	Receiver: a PluggableTextMorphWithLimits(303038464)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(286.0@435.0) corner: (1132.0@829.0)
		owner: 	a MultipleMethodsEditor(286261248)
		submorphs: 	an Array(an AlphaImageMorph(499908608) a TransformMorph(735313920))
		fullBounds: 	(286@435) corner: (1132@829)
		color: 	Color white
		extension: 	a MorphExtension (488636416) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.784 g: 0.784 b: 0.784 alpha: 1.0)
		model: 	a PackageTreeNautilusUI
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(344719360)
		scroller: 	a TransformMorph(735313920)
		getMenuSelector: 	#sourceCodeMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(65273856)
		textMorph: 	a TextMorphForEditView(509870080)
		getTextSelector: 	#sourceCodeFrom:
		setTextSelector: 	#compileSource:notifying:
		getSelectionSelector: 	#contentsSelectionFrom:
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(9 to: 477)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil
		doubleClickSelector: 	nil
		setSelectionSelector: 	nil
		alertLimit: 	700
		locked: 	false
		warningLimit: 	350
		method: 	nil
		lockIcon: 	an AlphaImageMorph(499908608)
		canLockChangeSelector: 	#canChangeLockFor:
		lockSelector: 	#lockTextArea:from:


PackageTreeNautilusUI(Object)>>perform:orSendTo:
	Receiver: a PackageTreeNautilusUI
	Arguments and temporary variables: 
		selector: 	#tallyIt
		otherTarget: 	a PluggableTextMorphWithLimits(303038464)
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a CategoryWidget a MethodWidget a NautilusWindow(...etc...
		model: 	a PackageTreeNautilus
		window: 	a NautilusWindow(542638080)
		hierarchyClass: 	DITestGroup
		cachedHierarchy: 	a SortHierarchically
		sourceTextArea: 	a PluggableTextMorphWithLimits(303038464)
		groupsSelection: 	a Dictionary()
		packagesSelection: 	a Dictionary(var-tests->true )
		classesSelection: 	a Dictionary(DIPHPTests->true )
		list: 	a MorphTreeMorph(273940480)
		list2: 	a PluggableIconListMorph(454295552)
		sourceCodePanel: 	a PanelMorph(183500800)
		commentTextArea: 	nil
		currentDisplayChoice: 	#SourceCode
		sourceTextAreaLimit: 	350
		sourceCodeContainer: 	a PanelMorph(584843264)
		list2Elements: 	{DIDSLTests. DIJavaTests. DIPHPTests. DISTTests}
		listElements: 	nil
		shouldUpdateTitle: 	true
		testSemaphore: 	a Semaphore()
		sourceTextAreas: 	an OrderedCollection(a PluggableTextMorphWithLimits(303038464)...etc...
		multipleMethodsEditor: 	a MultipleMethodsEditor(286261248)
		contentSelection: 	nil
		acceptor: 	a MethodDefinitionAcceptor
		classifier: 	a MethodClassifier
		categoryWidget: 	a CategoryWidget
		methodWidget: 	a MethodWidget
		packagePattern: 	a RxMatcher
		searchWidget: 	a SearchMorph(866648064)


[ 
| selArgCount |
"show cursor in case item opens a new MVC window"
(selArgCount := selector numArgs) = 0
	ifTrue: [ target perform: selector ]
	ifFalse: [ 
		selArgCount = arguments size
			ifTrue: [ target perform: selector withArguments: arguments ]
			ifFalse: [ target perform: selector withArguments: (arguments copyWith: evt) ] ].
self changed ] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(703856640)'Profile it'
	Arguments and temporary variables: 
		evt: 	[(575@586) mouseUp 1077928 nil]
		w: 	a WorldMorph(511705088) [world]
		selArgCount: 	2
	Receiver's instance variables: 
		bounds: 	(463.0@576.0) corner: (634.0@594.0)
		owner: 	a MenuMorph(206569472)
		submorphs: 	#()
		fullBounds: 	(463.0@576.0) corner: (634.0@594.0)
		color: 	Color black
		extension: 	a MorphExtension (727187456)
		font: 	a LogicalFont
 familyName: Source Sans Pro
 emphasis: nil
 pointSize: 10
...etc...
		emphasis: 	0
		contents: 	'Profile it'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a PackageTreeNautilusUI
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#tallyIt a PluggableTextMorphWithLimits(303038464))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


BlockClosure>>ensure:
	Receiver: [ 
| selArgCount |
"show cursor in case item opens a new MVC window"
(selArgCount := selec...etc...
	Arguments and temporary variables: 
		aBlock: 	[ oldcursor show ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
		startpc: 	134
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r100000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[ 
| selArgCount |
"show cursor in case item opens a new MVC window"
(s...etc...
		oldcursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	(-1@ -1)
		maskForm: 	Form(16x16x1)


ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(703856640)'Profile it'
	Arguments and temporary variables: 
		evt: 	[(575@586) mouseUp 1077928 nil]
		w: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		bounds: 	(463.0@576.0) corner: (634.0@594.0)
		owner: 	a MenuMorph(206569472)
		submorphs: 	#()
		fullBounds: 	(463.0@576.0) corner: (634.0@594.0)
		color: 	Color black
		extension: 	a MorphExtension (727187456)
		font: 	a LogicalFont
 familyName: Source Sans Pro
 emphasis: nil
 pointSize: 10
...etc...
		emphasis: 	0
		contents: 	'Profile it'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a PackageTreeNautilusUI
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#tallyIt a PluggableTextMorphWithLimits(303038464))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
	Receiver: a ToggleMenuItemMorph(703856640)'Profile it'
	Arguments and temporary variables: 
		evt: 	[(575@586) mouseUp 1077928 nil]
	Receiver's instance variables: 
		bounds: 	(463.0@576.0) corner: (634.0@594.0)
		owner: 	a MenuMorph(206569472)
		submorphs: 	#()
		fullBounds: 	(463.0@576.0) corner: (634.0@594.0)
		color: 	Color black
		extension: 	a MorphExtension (727187456)
		font: 	a LogicalFont
 familyName: Source Sans Pro
 emphasis: nil
 pointSize: 10
...etc...
		emphasis: 	0
		contents: 	'Profile it'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a PackageTreeNautilusUI
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#tallyIt a PluggableTextMorphWithLimits(303038464))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
	Receiver: a ToggleMenuItemMorph(703856640)'Profile it'
	Arguments and temporary variables: 
		anEvent: 	[(575@586) mouseUp 1077928 nil]
	Receiver's instance variables: 
		bounds: 	(463.0@576.0) corner: (634.0@594.0)
		owner: 	a MenuMorph(206569472)
		submorphs: 	#()
		fullBounds: 	(463.0@576.0) corner: (634.0@594.0)
		color: 	Color black
		extension: 	a MorphExtension (727187456)
		font: 	a LogicalFont
 familyName: Source Sans Pro
 emphasis: nil
 pointSize: 10
...etc...
		emphasis: 	0
		contents: 	'Profile it'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a PackageTreeNautilusUI
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#tallyIt a PluggableTextMorphWithLimits(303038464))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [(575@586) mouseUp 1077928 nil]
	Arguments and temporary variables: 
		anObject: 	a ToggleMenuItemMorph(703856640)'Profile it'
	Receiver's instance variables: 
		timeStamp: 	1077928
		source: 	a HandMorph(760479744)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(575@586)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


ToggleMenuItemMorph(Morph)>>handleEvent:
	Receiver: a ToggleMenuItemMorph(703856640)'Profile it'
	Arguments and temporary variables: 
		anEvent: 	[(575@586) mouseUp 1077928 nil]
	Receiver's instance variables: 
		bounds: 	(463.0@576.0) corner: (634.0@594.0)
		owner: 	a MenuMorph(206569472)
		submorphs: 	#()
		fullBounds: 	(463.0@576.0) corner: (634.0@594.0)
		color: 	Color black
		extension: 	a MorphExtension (727187456)
		font: 	a LogicalFont
 familyName: Source Sans Pro
 emphasis: nil
 pointSize: 10
...etc...
		emphasis: 	0
		contents: 	'Profile it'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a PackageTreeNautilusUI
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#tallyIt a PluggableTextMorphWithLimits(303038464))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(575@586) mouseUp 1077928 nil]
		aMorph: 	a ToggleMenuItemMorph(703856640)'Profile it'
		localEvt: 	nil
		index: 	1
		child: 	nil
		morphs: 	#()
		inside: 	true
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(575@586) mouseUp 1077928 nil]
		aMorph: 	a ToggleMenuItemMorph(703856640)'Profile it'
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


ToggleMenuItemMorph(Morph)>>processEvent:using:
	Receiver: a ToggleMenuItemMorph(703856640)'Profile it'
	Arguments and temporary variables: 
		anEvent: 	[(575@586) mouseUp 1077928 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	(463.0@576.0) corner: (634.0@594.0)
		owner: 	a MenuMorph(206569472)
		submorphs: 	#()
		fullBounds: 	(463.0@576.0) corner: (634.0@594.0)
		color: 	Color black
		extension: 	a MorphExtension (727187456)
		font: 	a LogicalFont
 familyName: Source Sans Pro
 emphasis: nil
 pointSize: 10
...etc...
		emphasis: 	0
		contents: 	'Profile it'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a PackageTreeNautilusUI
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#tallyIt a PluggableTextMorphWithLimits(303038464))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(575@586) mouseUp 1077928 nil]
		aMorph: 	a MenuMorph(206569472)
		localEvt: 	[(575@586) mouseUp 1077928 nil]
		index: 	11
		child: 	a ToggleMenuItemMorph(703856640)'Profile it'
		morphs: 	an Array(a ToggleMenuItemMorph(356515840)'Suggestions' a MenuLineMorph(...etc...
		inside: 	false
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(575@586) mouseUp 1077928 nil]
		aMorph: 	a MenuMorph(206569472)
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MenuMorph(Morph)>>processEvent:using:
	Receiver: a MenuMorph(206569472)
	Arguments and temporary variables: 
		anEvent: 	[(575@586) mouseUp 1077928 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	(458.0@416.0) corner: (639.0@858.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(356515840)'Suggestions' a MenuLineMor...etc...
		fullBounds: 	(458.0@416.0) corner: (639.0@858.0)
		color: 	(Color r: 0.894 g: 0.894 b: 0.894 alpha: 1.0)
		extension: 	a MorphExtension (241958912) [other:  (basicColor -> (Color r: 0.823...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.674 g: 0.674 b: 0.674 alpha: 1.0)
		defaultTarget: 	a PackageTreeNautilusUI
		selectedItem: 	a ToggleMenuItemMorph(703856640)'Profile it'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(356515840)'Suggestions' a...etc...


MenuMorph(Morph)>>processEvent:
	Receiver: a MenuMorph(206569472)
	Arguments and temporary variables: 
		anEvent: 	[(575@586) mouseUp 1077928 nil]
	Receiver's instance variables: 
		bounds: 	(458.0@416.0) corner: (639.0@858.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(356515840)'Suggestions' a MenuLineMor...etc...
		fullBounds: 	(458.0@416.0) corner: (639.0@858.0)
		color: 	(Color r: 0.894 g: 0.894 b: 0.894 alpha: 1.0)
		extension: 	a MorphExtension (241958912) [other:  (basicColor -> (Color r: 0.823...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.674 g: 0.674 b: 0.674 alpha: 1.0)
		defaultTarget: 	a PackageTreeNautilusUI
		selectedItem: 	a ToggleMenuItemMorph(703856640)'Profile it'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(356515840)'Suggestions' a...etc...



--- The full stack ---
DIPhpDependencies>>testInput
DITestGroup>>build
[ :testGroup | testGroup build ] in DIDicto>>dictoBuild:
Array(SequenceableCollection)>>do:
DIDicto>>dictoBuild:
DIDicto>>dictoRun:
DIDicto>>dictoAll:
DIPHPTests(DIDSLTests)>>runAndReturnObjWithText:andSuccessResults:onProject:
DIPHPTests class>>DoIt
CompiledMethod>>valueWithReceiver:arguments:
[ v := compiledMethod valueWithReceiver: receiver arguments: #() ] in SmalltalkEditor>>tallySelection
BlockClosure>>ensure:
MessageTally>>spyEvery:on:
TimeProfiler>>runBlock:pollingEvery:
TimeProfiler>>openOnBlock:
TimeProfiler class>>spyOn:
SmalltalkEditor>>tallySelection
SmalltalkEditor>>tallyIt
[ textMorph editor tallyIt ] in PluggableTextMorphWithLimits(PluggableTextMorph)>>tallyIt
[ result := editBlock value ] in PluggableTextMorphWithLimits(PluggableTextMorph)>>handleEdit:
TextMorphForEditView(TextMorph)>>handleEdit:
PluggableTextMorphWithLimits(PluggableTextMorph)>>handleEdit:
PluggableTextMorphWithLimits(PluggableTextMorph)>>tallyIt
PackageTreeNautilusUI(Object)>>perform:orSendTo:
[ 
| selArgCount |
"show cursor in case item opens a new MVC window"
(selArgCount := selector numArgs) = 0
	ifTrue: [ target perform: selector ]
	ifFalse: [ 
		selArgCount = arguments size
			ifTrue: [ target perform: selector withArguments: arguments ]
			ifFalse: [ target perform: selector withArguments: (arguments copyWith: evt) ] ].
self changed ] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
ToggleMenuItemMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
ToggleMenuItemMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
MenuMorph(Morph)>>processEvent:using:
MenuMorph(Morph)>>processEvent:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
MenuMorph>>handleFocusEvent:
[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldState>>doOneSubCycleFor:
WorldMorph>>doOneSubCycle
MenuMorph>>invokeModalAt:in:allowKeyboard:
MenuMorph>>invokeModal:
MenuMorph>>invokeModal
PluggableTextMorphWithLimits(PluggableTextMorph)>>yellowButtonActivity:
SmalltalkEditor(TextEditor)>>mouseUp:
[ editor mouseUp: evt ] in TextMorphForEditView(TextMorph)>>mouseUp:
TextMorphForEditView(TextMorph)>>handleInteraction:
TextMorphForEditView>>handleInteraction:
TextMorphForEditView(TextMorph)>>mouseUp:
TextMorphForEditView>>mouseUp:
TextMorphForEditView(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
TextMorphForEditView(Morph)>>handleEvent:
TextMorphForEditView(Morph)>>handleFocusEvent:
[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ 
World doOneCycle.
Processor yield.
false ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Halt
24 February 2015 5:48:13.356906 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
NBCogit NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
https://github.com/pharo-project/pharo-vm.git Commit: 4a0d556150d478ff2de3c9624d2f18e6eaa3fa5c Date: 2014-12-18 18:42:53 +0100 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14893

Image: Pharo3.0 [Latest update: #30863]

DIPhpDependencies>>testRun
	Receiver: a DIPhpDependencies
	Arguments and temporary variables: 
		command: 	nil
	Receiver's instance variables: 
		output: 	''
		commandOutput: 	''
		NEWLINE: 	'
'
		rules: 	a DICollectionRule(Model cannot depend on Controller arDeleteGUI must de...etc...
		varSynonyms: 	nil
		sessionId: 	'1424796486'
		TIMESTAMP: 	'1424796486'
		TOOLNAME: 	'DIPhpDependencies'
		PROJECTROOT: 	'/home/otruffer/dicto/TestProjectPhp'
		PROJECTSRC: 	'src/'
		PROJECTBIN: 	'bin/'
		RESULTFILE: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/DictoTestSuite/1...etc...
		TESTFILE: 	nil
		testInputFileExt: 	'.st'
		SYSTEM: 	SYSTEM


DITestGroup>>build
	Receiver: a DITestGroup
	Arguments and temporary variables: 

	Receiver's instance variables: 
		rules: 	an OrderedCollection(Model cannot depend on Controller arDeleteGUI must ...etc...
		adapter: 	a DIPhpDependencies
		runCommandText: 	nil
		testSpecification: 	'[{ "subject" : "arEditField",
	   "argument": "ilDateTimeIn...etc...
		adapterID: 	'DIPhpDependencies'
		resultFile: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/DictoTestSuite/1...etc...
		specificationFile: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/DictoTest...etc...
		commandFile: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/DictoTestSuite/...etc...
		rawOutput: 	nil
		xmlOutput: 	nil


[ :testGroup | testGroup build ] in DIDicto>>dictoBuild:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'
Model = PhpClass with name:"ar*"
Controller = PhpClass with name:...etc...
		adapterTestGroups: 	a Dictionary(DIGrepFileContent->a DITestGroup DIJMeterLoadTe...etc...
		testGroup: 	a DITestGroup
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424796486'
		singleShotTask: 	false


Array(SequenceableCollection)>>do:
	Receiver: an Array(a DITestGroup a DITestGroup a DITestGroup a DITestGroup a DITestGroup)
	Arguments and temporary variables: 
		aBlock: 	[ :testGroup | testGroup build ]
		index: 	4
	Receiver's instance variables: 
an Array(a DITestGroup a DITestGroup a DITestGroup a DITestGroup a DITestGroup)

DIDicto>>dictoBuild:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'
Model = PhpClass with name:"ar*"
Controller = PhpClass with name:...etc...
		adapterTestGroups: 	a Dictionary(DIGrepFileContent->a DITestGroup DIJMeterLoadTe...etc...
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424796486'
		singleShotTask: 	false


DIDicto>>dictoRun:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'
Model = PhpClass with name:"ar*"
Controller = PhpClass with name:...etc...
		adapterTestGroups: 	nil
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424796486'
		singleShotTask: 	false


DIDicto>>dictoAll:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'
Model = PhpClass with name:"ar*"
Controller = PhpClass with name:...etc...
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424796486'
		singleShotTask: 	false


DIPHPTests(DIDSLTests)>>runAndReturnObjWithText:andSuccessResults:onProject:
	Receiver: DIPHPTests
	Arguments and temporary variables: 
		dslText: 	'
Model = PhpClass with name:"ar*"
Controller = PhpClass with name:"*G...etc...
		res: 	#(false true false)
		project: 	'TestProjectPhp'
		dicto: 	a DIDicto
	Receiver's instance variables: 
		testSelector: 	nil
		expectedFails: 	nil


DIPHPTests class>>DoIt
	Receiver: DIPHPTests
	Arguments and temporary variables: 
		dsl: 	'
Model = PhpClass with name:"ar*"
Controller = PhpClass with name:"*GUI"
...etc...
		success: 	#(false true false)
		test: 	DIPHPTests
	Receiver's instance variables: 
		superclass: 	DIDSLTests
		methodDict: 	a MethodDictionary(#testPhp->DIPHPTests>>#testPhp )
		format: 	134
		layout: 	a FixedLayout
		instanceVariables: 	#()
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#DIPHPTests
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Dicto-var-tests'
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set(#testP...etc...


CompiledMethod>>valueWithReceiver:arguments:
	Receiver: DIPHPTests class>>#DoIt
	Arguments and temporary variables: 
		aReceiver: 	DIPHPTests
		anArray: 	#()
	Receiver's instance variables: 
DIPHPTests class>>#DoIt

[ v := compiledMethod valueWithReceiver: receiver arguments: #() ] in SmalltalkEditor>>tallySelection
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		receiver: 	DIPHPTests
		context: 	nil
		compiledMethod: 	DIPHPTests class>>#DoIt
		profiler: 	nil
		v: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(509870080)
		selectionShowing: 	true
		model: 	a PackageTreeNautilusUI
		editingState: 	a SmalltalkEditingState


BlockClosure>>ensure:
	Receiver: [ v := compiledMethod valueWithReceiver: receiver arguments: #() ]
	Arguments and temporary variables: 
		aBlock: 	[ 
"cancel the probe and return the value"
"Could have already been ter...etc...
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor>>tallySelection
		startpc: 	105
		numArgs: 	0


MessageTally>>spyEvery:on:
	Receiver: nil(SmalltalkEditor) >> tallySelection
	Arguments and temporary variables: 
		observedProcess: 	a Process in nil
		millisecs: 	1
		aBlock: 	[ v := compiledMethod valueWithReceiver: receiver arguments: #() ]
		myDelay: 	a Delay(1 msecs; 1 msecs remaining)
		time0: 	1077966
	Receiver's instance variables: 
		class: 	SmalltalkEditor
		method: 	SmalltalkEditor>>#tallySelection
		process: 	nil
		tally: 	6981
		receivers: 	an Array(nil(CompiledMethod) >> valueWithReceiver:arguments: nil(DID...etc...
		senders: 	nil
		time: 	0
		gcStats: 	#(61090196 62475912 68844264 nil nil 2000 6 624 3846 2685 309 0 0 0 0 ...etc...
		maxClassNameSize: 	1000
		maxClassPlusSelectorSize: 	1000
		maxTabs: 	100
		reportOtherProcesses: 	true


TimeProfiler>>runBlock:pollingEvery:
	Receiver: a TimeProfiler
	Arguments and temporary variables: 
		aBlock: 	[ v := compiledMethod valueWithReceiver: receiver arguments: #() ]
		pollPeriod: 	1
	Receiver's instance variables: 
		dependents: 	nil
		selection: 	nil
		announcer: 	nil
		rootItems: 	nil
		autoMultiSelection: 	nil
		headerLabel: 	nil
		multiSelection: 	nil
		wrapBlockOrSelector: 	nil
		isCheckList: 	nil
		enabled: 	nil
		win: 	nil
		rootMessageTally: 	nil(SmalltalkEditor) >> tallySelection
		threshold: 	nil
		minPercentageToExpand: 	nil
		treeMorph: 	nil
		block: 	[ v := compiledMethod valueWithReceiver: receiver arguments: #() ]
		blockCodePane: 	nil
		withBlockCodePane: 	false
		blockSource: 	nil
		reportOtherProcesses: 	nil
		showLeavesOnly: 	nil
		codeTabPane: 	nil
		resultPane: 	nil
		result: 	nil
		withToolBar: 	false


TimeProfiler>>openOnBlock:
	Receiver: a TimeProfiler
	Arguments and temporary variables: 
		aBlock: 	[ v := compiledMethod valueWithReceiver: receiver arguments: #() ]
	Receiver's instance variables: 
		dependents: 	nil
		selection: 	nil
		announcer: 	nil
		rootItems: 	nil
		autoMultiSelection: 	nil
		headerLabel: 	nil
		multiSelection: 	nil
		wrapBlockOrSelector: 	nil
		isCheckList: 	nil
		enabled: 	nil
		win: 	nil
		rootMessageTally: 	nil(SmalltalkEditor) >> tallySelection
		threshold: 	nil
		minPercentageToExpand: 	nil
		treeMorph: 	nil
		block: 	[ v := compiledMethod valueWithReceiver: receiver arguments: #() ]
		blockCodePane: 	nil
		withBlockCodePane: 	false
		blockSource: 	nil
		reportOtherProcesses: 	nil
		showLeavesOnly: 	nil
		codeTabPane: 	nil
		resultPane: 	nil
		result: 	nil
		withToolBar: 	false


TimeProfiler class>>spyOn:
	Receiver: TimeProfiler
	Arguments and temporary variables: 
		aBlock: 	[ v := compiledMethod valueWithReceiver: receiver arguments: #() ]
	Receiver's instance variables: 
		superclass: 	MorphTreeModel
		methodDict: 	a MethodDictionary(#blockCode->TimeProfiler>>#blockCode #blockCode:...etc...
		format: 	180
		layout: 	a FixedLayout
		instanceVariables: 	#(#win #rootMessageTally #threshold #minPercentageToExpand #...etc...
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#TimeProfiler
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Tools-Profilers'
		traitComposition: 	{}
		localSelectors: 	nil


SmalltalkEditor>>tallySelection
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		v: 	nil
		receiver: 	DIPHPTests
		context: 	nil
		compiledMethod: 	DIPHPTests class>>#DoIt
		profiler: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(509870080)
		selectionShowing: 	true
		model: 	a PackageTreeNautilusUI
		editingState: 	a SmalltalkEditingState


SmalltalkEditor>>tallyIt
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 

	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(509870080)
		selectionShowing: 	true
		model: 	a PackageTreeNautilusUI
		editingState: 	a SmalltalkEditingState


[ textMorph editor tallyIt ] in PluggableTextMorphWithLimits(PluggableTextMorph)>>tallyIt
	Receiver: a PluggableTextMorphWithLimits(303038464)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(286.0@435.0) corner: (1132.0@829.0)
		owner: 	a MultipleMethodsEditor(286261248)
		submorphs: 	an Array(an AlphaImageMorph(499908608) a TransformMorph(735313920))
		fullBounds: 	(286@435) corner: (1132@829)
		color: 	Color white
		extension: 	a MorphExtension (488636416) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.784 g: 0.784 b: 0.784 alpha: 1.0)
		model: 	a PackageTreeNautilusUI
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(344719360)
		scroller: 	a TransformMorph(735313920)
		getMenuSelector: 	#sourceCodeMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(65273856)
		textMorph: 	a TextMorphForEditView(509870080)
		getTextSelector: 	#sourceCodeFrom:
		setTextSelector: 	#compileSource:notifying:
		getSelectionSelector: 	#contentsSelectionFrom:
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(9 to: 477)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil
		doubleClickSelector: 	nil
		setSelectionSelector: 	nil
		alertLimit: 	700
		locked: 	false
		warningLimit: 	350
		method: 	nil
		lockIcon: 	an AlphaImageMorph(499908608)
		canLockChangeSelector: 	#canChangeLockFor:
		lockSelector: 	#lockTextArea:from:


[ result := editBlock value ] in PluggableTextMorphWithLimits(PluggableTextMorph)>>handleEdit:
	Receiver: a PluggableTextMorphWithLimits(303038464)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph editor tallyIt ]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(286.0@435.0) corner: (1132.0@829.0)
		owner: 	a MultipleMethodsEditor(286261248)
		submorphs: 	an Array(an AlphaImageMorph(499908608) a TransformMorph(735313920))
		fullBounds: 	(286@435) corner: (1132@829)
		color: 	Color white
		extension: 	a MorphExtension (488636416) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.784 g: 0.784 b: 0.784 alpha: 1.0)
		model: 	a PackageTreeNautilusUI
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(344719360)
		scroller: 	a TransformMorph(735313920)
		getMenuSelector: 	#sourceCodeMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(65273856)
		textMorph: 	a TextMorphForEditView(509870080)
		getTextSelector: 	#sourceCodeFrom:
		setTextSelector: 	#compileSource:notifying:
		getSelectionSelector: 	#contentsSelectionFrom:
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(9 to: 477)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil
		doubleClickSelector: 	nil
		setSelectionSelector: 	nil
		alertLimit: 	700
		locked: 	false
		warningLimit: 	350
		method: 	nil
		lockIcon: 	an AlphaImageMorph(499908608)
		canLockChangeSelector: 	#canChangeLockFor:
		lockSelector: 	#lockTextArea:from:


TextMorphForEditView(TextMorph)>>handleEdit:
	Receiver: a TextMorphForEditView(509870080)
	Arguments and temporary variables: 
		editBlock: 	[ result := editBlock value ]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (838@344)
		owner: 	a TransformMorph(735313920)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (838@344)
		color: 	Color black
		extension: 	a MorphExtension (552599552) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Source Code Pro
		text: 	a Text for 'testPhp
| dsl success test|
	
dsl := ''
Model = PhpClass with...etc...
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		defaultColor: 	Color black
		editView: 	a PluggableTextMorphWithLimits(303038464)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


PluggableTextMorphWithLimits(PluggableTextMorph)>>handleEdit:
	Receiver: a PluggableTextMorphWithLimits(303038464)
	Arguments and temporary variables: 
		result: 	nil
		editBlock: 	[ textMorph editor tallyIt ]
	Receiver's instance variables: 
		bounds: 	(286.0@435.0) corner: (1132.0@829.0)
		owner: 	a MultipleMethodsEditor(286261248)
		submorphs: 	an Array(an AlphaImageMorph(499908608) a TransformMorph(735313920))
		fullBounds: 	(286@435) corner: (1132@829)
		color: 	Color white
		extension: 	a MorphExtension (488636416) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.784 g: 0.784 b: 0.784 alpha: 1.0)
		model: 	a PackageTreeNautilusUI
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(344719360)
		scroller: 	a TransformMorph(735313920)
		getMenuSelector: 	#sourceCodeMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(65273856)
		textMorph: 	a TextMorphForEditView(509870080)
		getTextSelector: 	#sourceCodeFrom:
		setTextSelector: 	#compileSource:notifying:
		getSelectionSelector: 	#contentsSelectionFrom:
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(9 to: 477)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil
		doubleClickSelector: 	nil
		setSelectionSelector: 	nil
		alertLimit: 	700
		locked: 	false
		warningLimit: 	350
		method: 	nil
		lockIcon: 	an AlphaImageMorph(499908608)
		canLockChangeSelector: 	#canChangeLockFor:
		lockSelector: 	#lockTextArea:from:


PluggableTextMorphWithLimits(PluggableTextMorph)>>tallyIt
	Receiver: a PluggableTextMorphWithLimits(303038464)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(286.0@435.0) corner: (1132.0@829.0)
		owner: 	a MultipleMethodsEditor(286261248)
		submorphs: 	an Array(an AlphaImageMorph(499908608) a TransformMorph(735313920))
		fullBounds: 	(286@435) corner: (1132@829)
		color: 	Color white
		extension: 	a MorphExtension (488636416) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.784 g: 0.784 b: 0.784 alpha: 1.0)
		model: 	a PackageTreeNautilusUI
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(344719360)
		scroller: 	a TransformMorph(735313920)
		getMenuSelector: 	#sourceCodeMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(65273856)
		textMorph: 	a TextMorphForEditView(509870080)
		getTextSelector: 	#sourceCodeFrom:
		setTextSelector: 	#compileSource:notifying:
		getSelectionSelector: 	#contentsSelectionFrom:
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(9 to: 477)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil
		doubleClickSelector: 	nil
		setSelectionSelector: 	nil
		alertLimit: 	700
		locked: 	false
		warningLimit: 	350
		method: 	nil
		lockIcon: 	an AlphaImageMorph(499908608)
		canLockChangeSelector: 	#canChangeLockFor:
		lockSelector: 	#lockTextArea:from:


PackageTreeNautilusUI(Object)>>perform:orSendTo:
	Receiver: a PackageTreeNautilusUI
	Arguments and temporary variables: 
		selector: 	#tallyIt
		otherTarget: 	a PluggableTextMorphWithLimits(303038464)
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a CategoryWidget a MethodWidget a NautilusWindow(...etc...
		model: 	a PackageTreeNautilus
		window: 	a NautilusWindow(542638080)
		hierarchyClass: 	DITestGroup
		cachedHierarchy: 	a SortHierarchically
		sourceTextArea: 	a PluggableTextMorphWithLimits(303038464)
		groupsSelection: 	a Dictionary()
		packagesSelection: 	a Dictionary(var-tests->true )
		classesSelection: 	a Dictionary(DIPHPTests->true )
		list: 	a MorphTreeMorph(273940480)
		list2: 	a PluggableIconListMorph(454295552)
		sourceCodePanel: 	a PanelMorph(183500800)
		commentTextArea: 	nil
		currentDisplayChoice: 	#SourceCode
		sourceTextAreaLimit: 	350
		sourceCodeContainer: 	a PanelMorph(584843264)
		list2Elements: 	{DIDSLTests. DIJavaTests. DIPHPTests. DISTTests}
		listElements: 	nil
		shouldUpdateTitle: 	true
		testSemaphore: 	a Semaphore()
		sourceTextAreas: 	an OrderedCollection(a PluggableTextMorphWithLimits(303038464)...etc...
		multipleMethodsEditor: 	a MultipleMethodsEditor(286261248)
		contentSelection: 	nil
		acceptor: 	a MethodDefinitionAcceptor
		classifier: 	a MethodClassifier
		categoryWidget: 	a CategoryWidget
		methodWidget: 	a MethodWidget
		packagePattern: 	a RxMatcher
		searchWidget: 	a SearchMorph(866648064)


[ 
| selArgCount |
"show cursor in case item opens a new MVC window"
(selArgCount := selector numArgs) = 0
	ifTrue: [ target perform: selector ]
	ifFalse: [ 
		selArgCount = arguments size
			ifTrue: [ target perform: selector withArguments: arguments ]
			ifFalse: [ target perform: selector withArguments: (arguments copyWith: evt) ] ].
self changed ] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(703856640)'Profile it'
	Arguments and temporary variables: 
		evt: 	[(575@586) mouseUp 1077928 nil]
		w: 	a WorldMorph(511705088) [world]
		selArgCount: 	2
	Receiver's instance variables: 
		bounds: 	(463.0@576.0) corner: (634.0@594.0)
		owner: 	a MenuMorph(206569472)
		submorphs: 	#()
		fullBounds: 	(463.0@576.0) corner: (634.0@594.0)
		color: 	Color black
		extension: 	a MorphExtension (727187456)
		font: 	a LogicalFont
 familyName: Source Sans Pro
 emphasis: nil
 pointSize: 10
...etc...
		emphasis: 	0
		contents: 	'Profile it'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a PackageTreeNautilusUI
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#tallyIt a PluggableTextMorphWithLimits(303038464))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


BlockClosure>>ensure:
	Receiver: [ 
| selArgCount |
"show cursor in case item opens a new MVC window"
(selArgCount := selec...etc...
	Arguments and temporary variables: 
		aBlock: 	[ oldcursor show ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
		startpc: 	134
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r100000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[ 
| selArgCount |
"show cursor in case item opens a new MVC window"
(s...etc...
		oldcursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	(-1@ -1)
		maskForm: 	Form(16x16x1)


ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(703856640)'Profile it'
	Arguments and temporary variables: 
		evt: 	[(575@586) mouseUp 1077928 nil]
		w: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		bounds: 	(463.0@576.0) corner: (634.0@594.0)
		owner: 	a MenuMorph(206569472)
		submorphs: 	#()
		fullBounds: 	(463.0@576.0) corner: (634.0@594.0)
		color: 	Color black
		extension: 	a MorphExtension (727187456)
		font: 	a LogicalFont
 familyName: Source Sans Pro
 emphasis: nil
 pointSize: 10
...etc...
		emphasis: 	0
		contents: 	'Profile it'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a PackageTreeNautilusUI
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#tallyIt a PluggableTextMorphWithLimits(303038464))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
	Receiver: a ToggleMenuItemMorph(703856640)'Profile it'
	Arguments and temporary variables: 
		evt: 	[(575@586) mouseUp 1077928 nil]
	Receiver's instance variables: 
		bounds: 	(463.0@576.0) corner: (634.0@594.0)
		owner: 	a MenuMorph(206569472)
		submorphs: 	#()
		fullBounds: 	(463.0@576.0) corner: (634.0@594.0)
		color: 	Color black
		extension: 	a MorphExtension (727187456)
		font: 	a LogicalFont
 familyName: Source Sans Pro
 emphasis: nil
 pointSize: 10
...etc...
		emphasis: 	0
		contents: 	'Profile it'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a PackageTreeNautilusUI
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#tallyIt a PluggableTextMorphWithLimits(303038464))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
	Receiver: a ToggleMenuItemMorph(703856640)'Profile it'
	Arguments and temporary variables: 
		anEvent: 	[(575@586) mouseUp 1077928 nil]
	Receiver's instance variables: 
		bounds: 	(463.0@576.0) corner: (634.0@594.0)
		owner: 	a MenuMorph(206569472)
		submorphs: 	#()
		fullBounds: 	(463.0@576.0) corner: (634.0@594.0)
		color: 	Color black
		extension: 	a MorphExtension (727187456)
		font: 	a LogicalFont
 familyName: Source Sans Pro
 emphasis: nil
 pointSize: 10
...etc...
		emphasis: 	0
		contents: 	'Profile it'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a PackageTreeNautilusUI
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#tallyIt a PluggableTextMorphWithLimits(303038464))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [(575@586) mouseUp 1077928 nil]
	Arguments and temporary variables: 
		anObject: 	a ToggleMenuItemMorph(703856640)'Profile it'
	Receiver's instance variables: 
		timeStamp: 	1077928
		source: 	a HandMorph(760479744)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(575@586)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


ToggleMenuItemMorph(Morph)>>handleEvent:
	Receiver: a ToggleMenuItemMorph(703856640)'Profile it'
	Arguments and temporary variables: 
		anEvent: 	[(575@586) mouseUp 1077928 nil]
	Receiver's instance variables: 
		bounds: 	(463.0@576.0) corner: (634.0@594.0)
		owner: 	a MenuMorph(206569472)
		submorphs: 	#()
		fullBounds: 	(463.0@576.0) corner: (634.0@594.0)
		color: 	Color black
		extension: 	a MorphExtension (727187456)
		font: 	a LogicalFont
 familyName: Source Sans Pro
 emphasis: nil
 pointSize: 10
...etc...
		emphasis: 	0
		contents: 	'Profile it'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a PackageTreeNautilusUI
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#tallyIt a PluggableTextMorphWithLimits(303038464))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(575@586) mouseUp 1077928 nil]
		aMorph: 	a ToggleMenuItemMorph(703856640)'Profile it'
		localEvt: 	nil
		index: 	1
		child: 	nil
		morphs: 	#()
		inside: 	true
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(575@586) mouseUp 1077928 nil]
		aMorph: 	a ToggleMenuItemMorph(703856640)'Profile it'
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


ToggleMenuItemMorph(Morph)>>processEvent:using:
	Receiver: a ToggleMenuItemMorph(703856640)'Profile it'
	Arguments and temporary variables: 
		anEvent: 	[(575@586) mouseUp 1077928 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	(463.0@576.0) corner: (634.0@594.0)
		owner: 	a MenuMorph(206569472)
		submorphs: 	#()
		fullBounds: 	(463.0@576.0) corner: (634.0@594.0)
		color: 	Color black
		extension: 	a MorphExtension (727187456)
		font: 	a LogicalFont
 familyName: Source Sans Pro
 emphasis: nil
 pointSize: 10
...etc...
		emphasis: 	0
		contents: 	'Profile it'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a PackageTreeNautilusUI
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#tallyIt a PluggableTextMorphWithLimits(303038464))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(575@586) mouseUp 1077928 nil]
		aMorph: 	a MenuMorph(206569472)
		localEvt: 	[(575@586) mouseUp 1077928 nil]
		index: 	11
		child: 	a ToggleMenuItemMorph(703856640)'Profile it'
		morphs: 	an Array(a ToggleMenuItemMorph(356515840)'Suggestions' a MenuLineMorph(...etc...
		inside: 	false
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(575@586) mouseUp 1077928 nil]
		aMorph: 	a MenuMorph(206569472)
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MenuMorph(Morph)>>processEvent:using:
	Receiver: a MenuMorph(206569472)
	Arguments and temporary variables: 
		anEvent: 	[(575@586) mouseUp 1077928 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	(458.0@416.0) corner: (639.0@858.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(356515840)'Suggestions' a MenuLineMor...etc...
		fullBounds: 	(458.0@416.0) corner: (639.0@858.0)
		color: 	(Color r: 0.894 g: 0.894 b: 0.894 alpha: 1.0)
		extension: 	a MorphExtension (241958912) [other:  (basicColor -> (Color r: 0.823...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.674 g: 0.674 b: 0.674 alpha: 1.0)
		defaultTarget: 	a PackageTreeNautilusUI
		selectedItem: 	a ToggleMenuItemMorph(703856640)'Profile it'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(356515840)'Suggestions' a...etc...


MenuMorph(Morph)>>processEvent:
	Receiver: a MenuMorph(206569472)
	Arguments and temporary variables: 
		anEvent: 	[(575@586) mouseUp 1077928 nil]
	Receiver's instance variables: 
		bounds: 	(458.0@416.0) corner: (639.0@858.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(356515840)'Suggestions' a MenuLineMor...etc...
		fullBounds: 	(458.0@416.0) corner: (639.0@858.0)
		color: 	(Color r: 0.894 g: 0.894 b: 0.894 alpha: 1.0)
		extension: 	a MorphExtension (241958912) [other:  (basicColor -> (Color r: 0.823...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.674 g: 0.674 b: 0.674 alpha: 1.0)
		defaultTarget: 	a PackageTreeNautilusUI
		selectedItem: 	a ToggleMenuItemMorph(703856640)'Profile it'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(356515840)'Suggestions' a...etc...



--- The full stack ---
DIPhpDependencies>>testRun
DITestGroup>>build
[ :testGroup | testGroup build ] in DIDicto>>dictoBuild:
Array(SequenceableCollection)>>do:
DIDicto>>dictoBuild:
DIDicto>>dictoRun:
DIDicto>>dictoAll:
DIPHPTests(DIDSLTests)>>runAndReturnObjWithText:andSuccessResults:onProject:
DIPHPTests class>>DoIt
CompiledMethod>>valueWithReceiver:arguments:
[ v := compiledMethod valueWithReceiver: receiver arguments: #() ] in SmalltalkEditor>>tallySelection
BlockClosure>>ensure:
MessageTally>>spyEvery:on:
TimeProfiler>>runBlock:pollingEvery:
TimeProfiler>>openOnBlock:
TimeProfiler class>>spyOn:
SmalltalkEditor>>tallySelection
SmalltalkEditor>>tallyIt
[ textMorph editor tallyIt ] in PluggableTextMorphWithLimits(PluggableTextMorph)>>tallyIt
[ result := editBlock value ] in PluggableTextMorphWithLimits(PluggableTextMorph)>>handleEdit:
TextMorphForEditView(TextMorph)>>handleEdit:
PluggableTextMorphWithLimits(PluggableTextMorph)>>handleEdit:
PluggableTextMorphWithLimits(PluggableTextMorph)>>tallyIt
PackageTreeNautilusUI(Object)>>perform:orSendTo:
[ 
| selArgCount |
"show cursor in case item opens a new MVC window"
(selArgCount := selector numArgs) = 0
	ifTrue: [ target perform: selector ]
	ifFalse: [ 
		selArgCount = arguments size
			ifTrue: [ target perform: selector withArguments: arguments ]
			ifFalse: [ target perform: selector withArguments: (arguments copyWith: evt) ] ].
self changed ] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
ToggleMenuItemMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
ToggleMenuItemMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
MenuMorph(Morph)>>processEvent:using:
MenuMorph(Morph)>>processEvent:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
MenuMorph>>handleFocusEvent:
[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldState>>doOneSubCycleFor:
WorldMorph>>doOneSubCycle
MenuMorph>>invokeModalAt:in:allowKeyboard:
MenuMorph>>invokeModal:
MenuMorph>>invokeModal
PluggableTextMorphWithLimits(PluggableTextMorph)>>yellowButtonActivity:
SmalltalkEditor(TextEditor)>>mouseUp:
[ editor mouseUp: evt ] in TextMorphForEditView(TextMorph)>>mouseUp:
TextMorphForEditView(TextMorph)>>handleInteraction:
TextMorphForEditView>>handleInteraction:
TextMorphForEditView(TextMorph)>>mouseUp:
TextMorphForEditView>>mouseUp:
TextMorphForEditView(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
TextMorphForEditView(Morph)>>handleEvent:
TextMorphForEditView(Morph)>>handleFocusEvent:
[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ 
World doOneCycle.
Processor yield.
false ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Halt
24 February 2015 5:49:19.934349 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
NBCogit NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
https://github.com/pharo-project/pharo-vm.git Commit: 4a0d556150d478ff2de3c9624d2f18e6eaa3fa5c Date: 2014-12-18 18:42:53 +0100 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14893

Image: Pharo3.0 [Latest update: #30863]

DIPhpDependencies>>testInput
	Receiver: a DIPhpDependencies
	Arguments and temporary variables: 
		strRules: 	'{ "subject" : "arEditField",
	   "argument": "ilDateTimeInputGUI",
	...etc...
	Receiver's instance variables: 
		output: 	''
		commandOutput: 	''
		NEWLINE: 	'
'
		rules: 	a DICollectionRule(Model cannot depend on Controller arDeleteGUI must de...etc...
		varSynonyms: 	nil
		sessionId: 	'1424796557'
		TIMESTAMP: 	'1424796557'
		TOOLNAME: 	'DIPhpDependencies'
		PROJECTROOT: 	'/home/otruffer/dicto/TestProjectPhp'
		PROJECTSRC: 	'src/'
		PROJECTBIN: 	'bin/'
		RESULTFILE: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/DictoTestSuite/1...etc...
		TESTFILE: 	nil
		testInputFileExt: 	'.st'
		SYSTEM: 	SYSTEM


DITestGroup>>build
	Receiver: a DITestGroup
	Arguments and temporary variables: 

	Receiver's instance variables: 
		rules: 	an OrderedCollection(Model cannot depend on Controller arDeleteGUI must ...etc...
		adapter: 	a DIPhpDependencies
		runCommandText: 	nil
		testSpecification: 	nil
		adapterID: 	'DIPhpDependencies'
		resultFile: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/DictoTestSuite/1...etc...
		specificationFile: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/DictoTest...etc...
		commandFile: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/DictoTestSuite/...etc...
		rawOutput: 	nil
		xmlOutput: 	nil


[ :testGroup | testGroup build ] in DIDicto>>dictoBuild:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'
Model = PhpClass with name:"ar*"
Controller = PhpClass with name:...etc...
		adapterTestGroups: 	a Dictionary(DIGrepFileContent->a DITestGroup DIJMeterLoadTe...etc...
		testGroup: 	a DITestGroup
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424796557'
		singleShotTask: 	false


Array(SequenceableCollection)>>do:
	Receiver: an Array(a DITestGroup a DITestGroup a DITestGroup a DITestGroup a DITestGroup)
	Arguments and temporary variables: 
		aBlock: 	[ :testGroup | testGroup build ]
		index: 	4
	Receiver's instance variables: 
an Array(a DITestGroup a DITestGroup a DITestGroup a DITestGroup a DITestGroup)

DIDicto>>dictoBuild:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'
Model = PhpClass with name:"ar*"
Controller = PhpClass with name:...etc...
		adapterTestGroups: 	a Dictionary(DIGrepFileContent->a DITestGroup DIJMeterLoadTe...etc...
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424796557'
		singleShotTask: 	false


DIDicto>>dictoRun:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'
Model = PhpClass with name:"ar*"
Controller = PhpClass with name:...etc...
		adapterTestGroups: 	nil
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424796557'
		singleShotTask: 	false


DIDicto>>dictoAll:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'
Model = PhpClass with name:"ar*"
Controller = PhpClass with name:...etc...
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424796557'
		singleShotTask: 	false


DIPHPTests(DIDSLTests)>>runAndReturnObjWithText:andSuccessResults:onProject:
	Receiver: DIPHPTests
	Arguments and temporary variables: 
		dslText: 	'
Model = PhpClass with name:"ar*"
Controller = PhpClass with name:"*G...etc...
		res: 	#(false true false)
		project: 	'TestProjectPhp'
		dicto: 	a DIDicto
	Receiver's instance variables: 
		testSelector: 	nil
		expectedFails: 	nil


DIPHPTests>>testPhp
	Receiver: DIPHPTests>>#testPhp
	Arguments and temporary variables: 
		dsl: 	'
Model = PhpClass with name:"ar*"
Controller = PhpClass with name:"*GUI"
...etc...
		success: 	#(false true false)
		test: 	DIPHPTests
	Receiver's instance variables: 
		testSelector: 	#testPhp
		expectedFails: 	nil


DIPHPTests(TestCase)>>performTest
	Receiver: DIPHPTests>>#testPhp
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testPhp
		expectedFails: 	nil


[ 
self setUp.
self performTest ] in DIPHPTests(TestCase)>>runCase
	Receiver: DIPHPTests>>#testPhp
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testPhp
		expectedFails: 	nil


BlockClosure>>ensure:
	Receiver: [ 
self setUp.
self performTest ]
	Arguments and temporary variables: 
		aBlock: 	[ 
self tearDown.
self cleanUpInstanceVariables ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	DIPHPTests(TestCase)>>runCase
		startpc: 	57
		numArgs: 	0


DIPHPTests(TestCase)>>runCase
	Receiver: DIPHPTests>>#testPhp
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testPhp
		expectedFails: 	nil


[ 
aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCase.
aTestCase announce: TestCaseEnded withResult: self.
self addPass: aTestCase ] in TestResult>>runCase:
	Receiver: 0 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 0 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	DIPHPTests>>#testPhp
	Receiver's instance variables: 
		timeStamp: 	2015-02-24T17:49:17.043599+01:00
		failures: 	a Set()
		errors: 	an OrderedCollection()
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


BlockClosure>>on:do:
	Receiver: [ 
aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCase.
aTestCase anno...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :ex | ex sunitAnnounce: aTestCase toResult: self ]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	TestResult>>runCase:
		startpc: 	70
		numArgs: 	0


TestResult>>runCase:
	Receiver: 0 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 0 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	DIPHPTests>>#testPhp
	Receiver's instance variables: 
		timeStamp: 	2015-02-24T17:49:17.043599+01:00
		failures: 	a Set()
		errors: 	an OrderedCollection()
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


DIPHPTests(TestCase)>>run:
	Receiver: DIPHPTests>>#testPhp
	Arguments and temporary variables: 
		aResult: 	0 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 0 errors,...etc...
	Receiver's instance variables: 
		testSelector: 	#testPhp
		expectedFails: 	nil


[ self run: result ] in DIPHPTests(TestCase)>>run
	Receiver: DIPHPTests>>#testPhp
	Arguments and temporary variables: 
		result: 	0 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 0 errors, ...etc...
	Receiver's instance variables: 
		testSelector: 	#testPhp
		expectedFails: 	nil


BlockClosure>>ensure:
	Receiver: [ self run: result ]
	Arguments and temporary variables: 
		aBlock: 	[ self classForTestResource resetResources: self resources ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	DIPHPTests(TestCase)>>run
		startpc: 	46
		numArgs: 	0


DIPHPTests(TestCase)>>run
	Receiver: DIPHPTests>>#testPhp
	Arguments and temporary variables: 
		result: 	0 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 0 errors, ...etc...
	Receiver's instance variables: 
		testSelector: 	#testPhp
		expectedFails: 	nil


DIPHPTests class(TestCase class)>>run:
	Receiver: DIPHPTests
	Arguments and temporary variables: 
		aSymbol: 	#testPhp
	Receiver's instance variables: 
		superclass: 	DIDSLTests
		methodDict: 	a MethodDictionary(#testPhp->DIPHPTests>>#testPhp )
		format: 	134
		layout: 	a FixedLayout
		instanceVariables: 	#()
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#DIPHPTests
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Dicto-var-tests'
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set(#testP...etc...


PackageTreeNautilusUI(NautilusUI)>>runTestForAMethodWithAnHalt:
	Receiver: a PackageTreeNautilusUI
	Arguments and temporary variables: 
		aMethod: 	DIPHPTests>>#testPhp
		testMethod: 	DIPHPTests>>#testPhp
		color: 	nil
		vScroll: 	0.0
		testClass: 	DIPHPTests
		testResult: 	nil
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a CategoryWidget a MethodWidget a NautilusWindow(...etc...
		model: 	a PackageTreeNautilus
		window: 	a NautilusWindow(542638080)
		hierarchyClass: 	DITestGroup
		cachedHierarchy: 	a SortHierarchically
		sourceTextArea: 	a PluggableTextMorphWithLimits(303038464)
		groupsSelection: 	a Dictionary()
		packagesSelection: 	a Dictionary(var-tests->true )
		classesSelection: 	a Dictionary(DIPHPTests->true )
		list: 	a MorphTreeMorph(273940480)
		list2: 	a PluggableIconListMorph(454295552)
		sourceCodePanel: 	a PanelMorph(183500800)
		commentTextArea: 	nil
		currentDisplayChoice: 	#SourceCode
		sourceTextAreaLimit: 	350
		sourceCodeContainer: 	a PanelMorph(584843264)
		list2Elements: 	{DIDSLTests. DIJavaTests. DIPHPTests. DISTTests}
		listElements: 	nil
		shouldUpdateTitle: 	true
		testSemaphore: 	a Semaphore()
		sourceTextAreas: 	an OrderedCollection(a PluggableTextMorphWithLimits(303038464)...etc...
		multipleMethodsEditor: 	a MultipleMethodsEditor(286261248)
		contentSelection: 	nil
		acceptor: 	a MethodDefinitionAcceptor
		classifier: 	a MethodClassifier
		categoryWidget: 	a CategoryWidget
		methodWidget: 	a MethodWidget
		packagePattern: 	a RxMatcher
		searchWidget: 	a SearchMorph(866648064)


[ self runTestForAMethodWithAnHalt: aMethod ] in [ :e | 
aBoolean
	ifTrue: [ 
		[ self runTestForAMethodWithAnHalt: aMethod ] fork.
		shouldAnnounce := false.
		TestAsserter classForTestResult new ]
	ifFalse: [ 
		TestAsserter classForTestResult new
			addFailure: (testClass selector: testMethod selector);
			yourself ] ] in [ 
| vScroll testClass testResult |
vScroll := methodWidget vScrollValue.
testClass := testMethod methodClass.
testResult := [ testClass run: testMethod selector ]
	on: Halt
	do: [ :e | 
		aBoolean
			ifTrue: [ 
				[ self runTestForAMethodWithAnHalt: aMethod ] fork.
				shouldAnnounce := false.
				TestAsserter classForTestResult new ]
			ifFalse: [ 
				TestAsserter classForTestResult new
					addFailure: (testClass selector: testMethod selector);
					yourself ] ].
testResult updateResultsInHistory.
testSemaphoreForMethod signal.
(aBoolean and: [ testResult failures isEmpty not or: [ testResult errors isEmpty not ] ])
	ifTrue: [ testClass debug: testMethod selector ].
ClassesIconsCache removeKey: aMethod methodClass ifAbsent: [  ].
UIManager default defer: [ methodWidget vScrollValue: vScroll ] ] in PackageTreeNautilusUI(NautilusUI)>>runTestForAMethod:notifying:priority:
	Receiver: a PackageTreeNautilusUI
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a CategoryWidget a MethodWidget a NautilusWindow(...etc...
		model: 	a PackageTreeNautilus
		window: 	a NautilusWindow(542638080)
		hierarchyClass: 	DITestGroup
		cachedHierarchy: 	a SortHierarchically
		sourceTextArea: 	a PluggableTextMorphWithLimits(303038464)
		groupsSelection: 	a Dictionary()
		packagesSelection: 	a Dictionary(var-tests->true )
		classesSelection: 	a Dictionary(DIPHPTests->true )
		list: 	a MorphTreeMorph(273940480)
		list2: 	a PluggableIconListMorph(454295552)
		sourceCodePanel: 	a PanelMorph(183500800)
		commentTextArea: 	nil
		currentDisplayChoice: 	#SourceCode
		sourceTextAreaLimit: 	350
		sourceCodeContainer: 	a PanelMorph(584843264)
		list2Elements: 	{DIDSLTests. DIJavaTests. DIPHPTests. DISTTests}
		listElements: 	nil
		shouldUpdateTitle: 	true
		testSemaphore: 	a Semaphore()
		sourceTextAreas: 	an OrderedCollection(a PluggableTextMorphWithLimits(303038464)...etc...
		multipleMethodsEditor: 	a MultipleMethodsEditor(286261248)
		contentSelection: 	nil
		acceptor: 	a MethodDefinitionAcceptor
		classifier: 	a MethodClassifier
		categoryWidget: 	a CategoryWidget
		methodWidget: 	a MethodWidget
		packagePattern: 	a RxMatcher
		searchWidget: 	a SearchMorph(866648064)


[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ self runTestForAMethodWithAnHalt: aMethod ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	[ :e | 
aBoolean
	ifTrue: [ 
		[ self runTestForAMethodWithAnHalt...etc...
		startpc: 	275
		numArgs: 	0



--- The full stack ---
DIPhpDependencies>>testInput
DITestGroup>>build
[ :testGroup | testGroup build ] in DIDicto>>dictoBuild:
Array(SequenceableCollection)>>do:
DIDicto>>dictoBuild:
DIDicto>>dictoRun:
DIDicto>>dictoAll:
DIPHPTests(DIDSLTests)>>runAndReturnObjWithText:andSuccessResults:onProject:
DIPHPTests>>testPhp
DIPHPTests(TestCase)>>performTest
[ 
self setUp.
self performTest ] in DIPHPTests(TestCase)>>runCase
BlockClosure>>ensure:
DIPHPTests(TestCase)>>runCase
[ 
aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCase.
aTestCase announce: TestCaseEnded withResult: self.
self addPass: aTestCase ] in TestResult>>runCase:
BlockClosure>>on:do:
TestResult>>runCase:
DIPHPTests(TestCase)>>run:
[ self run: result ] in DIPHPTests(TestCase)>>run
BlockClosure>>ensure:
DIPHPTests(TestCase)>>run
DIPHPTests class(TestCase class)>>run:
PackageTreeNautilusUI(NautilusUI)>>runTestForAMethodWithAnHalt:
[ self runTestForAMethodWithAnHalt: aMethod ] in [ :e | 
aBoolean
	ifTrue: [ 
		[ self runTestForAMethodWithAnHalt: aMethod ] fork.
		shouldAnnounce := false.
		TestAsserter classForTestResult new ]
	ifFalse: [ 
		TestAsserter classForTestResult new
			addFailure: (testClass selector: testMethod selector);
			yourself ] ] in [ 
| vScroll testClass testResult |
vScroll := methodWidget vScrollValue.
testClass := testMethod methodClass.
testResult := [ testClass run: testMethod selector ]
	on: Halt
	do: [ :e | 
		aBoolean
			ifTrue: [ 
				[ self runTestForAMethodWithAnHalt: aMethod ] fork.
				shouldAnnounce := false.
				TestAsserter classForTestResult new ]
			ifFalse: [ 
				TestAsserter classForTestResult new
					addFailure: (testClass selector: testMethod selector);
					yourself ] ].
testResult updateResultsInHistory.
testSemaphoreForMethod signal.
(aBoolean and: [ testResult failures isEmpty not or: [ testResult errors isEmpty not ] ])
	ifTrue: [ testClass debug: testMethod selector ].
ClassesIconsCache removeKey: aMethod methodClass ifAbsent: [  ].
UIManager default defer: [ methodWidget vScrollValue: vScroll ] ] in PackageTreeNautilusUI(NautilusUI)>>runTestForAMethod:notifying:priority:
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Halt
24 February 2015 5:49:24.257779 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
NBCogit NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
https://github.com/pharo-project/pharo-vm.git Commit: 4a0d556150d478ff2de3c9624d2f18e6eaa3fa5c Date: 2014-12-18 18:42:53 +0100 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14893

Image: Pharo3.0 [Latest update: #30863]

DIPhpDependencies>>testRun
	Receiver: a DIPhpDependencies
	Arguments and temporary variables: 
		command: 	nil
	Receiver's instance variables: 
		output: 	''
		commandOutput: 	''
		NEWLINE: 	'
'
		rules: 	a DICollectionRule(Model cannot depend on Controller arDeleteGUI must de...etc...
		varSynonyms: 	nil
		sessionId: 	'1424796557'
		TIMESTAMP: 	'1424796557'
		TOOLNAME: 	'DIPhpDependencies'
		PROJECTROOT: 	'/home/otruffer/dicto/TestProjectPhp'
		PROJECTSRC: 	'src/'
		PROJECTBIN: 	'bin/'
		RESULTFILE: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/DictoTestSuite/1...etc...
		TESTFILE: 	nil
		testInputFileExt: 	'.st'
		SYSTEM: 	SYSTEM


DITestGroup>>build
	Receiver: a DITestGroup
	Arguments and temporary variables: 

	Receiver's instance variables: 
		rules: 	an OrderedCollection(Model cannot depend on Controller arDeleteGUI must ...etc...
		adapter: 	a DIPhpDependencies
		runCommandText: 	nil
		testSpecification: 	'[{ "subject" : "arEditField",
	   "argument": "ilDateTimeIn...etc...
		adapterID: 	'DIPhpDependencies'
		resultFile: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/DictoTestSuite/1...etc...
		specificationFile: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/DictoTest...etc...
		commandFile: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/DictoTestSuite/...etc...
		rawOutput: 	nil
		xmlOutput: 	nil


[ :testGroup | testGroup build ] in DIDicto>>dictoBuild:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'
Model = PhpClass with name:"ar*"
Controller = PhpClass with name:...etc...
		adapterTestGroups: 	a Dictionary(DIGrepFileContent->a DITestGroup DIJMeterLoadTe...etc...
		testGroup: 	a DITestGroup
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424796557'
		singleShotTask: 	false


Array(SequenceableCollection)>>do:
	Receiver: an Array(a DITestGroup a DITestGroup a DITestGroup a DITestGroup a DITestGroup)
	Arguments and temporary variables: 
		aBlock: 	[ :testGroup | testGroup build ]
		index: 	4
	Receiver's instance variables: 
an Array(a DITestGroup a DITestGroup a DITestGroup a DITestGroup a DITestGroup)

DIDicto>>dictoBuild:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'
Model = PhpClass with name:"ar*"
Controller = PhpClass with name:...etc...
		adapterTestGroups: 	a Dictionary(DIGrepFileContent->a DITestGroup DIJMeterLoadTe...etc...
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424796557'
		singleShotTask: 	false


DIDicto>>dictoRun:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'
Model = PhpClass with name:"ar*"
Controller = PhpClass with name:...etc...
		adapterTestGroups: 	nil
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424796557'
		singleShotTask: 	false


DIDicto>>dictoAll:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'
Model = PhpClass with name:"ar*"
Controller = PhpClass with name:...etc...
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424796557'
		singleShotTask: 	false


DIPHPTests(DIDSLTests)>>runAndReturnObjWithText:andSuccessResults:onProject:
	Receiver: DIPHPTests
	Arguments and temporary variables: 
		dslText: 	'
Model = PhpClass with name:"ar*"
Controller = PhpClass with name:"*G...etc...
		res: 	#(false true false)
		project: 	'TestProjectPhp'
		dicto: 	a DIDicto
	Receiver's instance variables: 
		testSelector: 	nil
		expectedFails: 	nil


DIPHPTests>>testPhp
	Receiver: DIPHPTests>>#testPhp
	Arguments and temporary variables: 
		dsl: 	'
Model = PhpClass with name:"ar*"
Controller = PhpClass with name:"*GUI"
...etc...
		success: 	#(false true false)
		test: 	DIPHPTests
	Receiver's instance variables: 
		testSelector: 	#testPhp
		expectedFails: 	nil


DIPHPTests(TestCase)>>performTest
	Receiver: DIPHPTests>>#testPhp
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testPhp
		expectedFails: 	nil


[ 
self setUp.
self performTest ] in DIPHPTests(TestCase)>>runCase
	Receiver: DIPHPTests>>#testPhp
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testPhp
		expectedFails: 	nil


BlockClosure>>ensure:
	Receiver: [ 
self setUp.
self performTest ]
	Arguments and temporary variables: 
		aBlock: 	[ 
self tearDown.
self cleanUpInstanceVariables ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	DIPHPTests(TestCase)>>runCase
		startpc: 	57
		numArgs: 	0


DIPHPTests(TestCase)>>runCase
	Receiver: DIPHPTests>>#testPhp
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testPhp
		expectedFails: 	nil


[ 
aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCase.
aTestCase announce: TestCaseEnded withResult: self.
self addPass: aTestCase ] in TestResult>>runCase:
	Receiver: 0 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 0 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	DIPHPTests>>#testPhp
	Receiver's instance variables: 
		timeStamp: 	2015-02-24T17:49:17.043599+01:00
		failures: 	a Set()
		errors: 	an OrderedCollection()
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


BlockClosure>>on:do:
	Receiver: [ 
aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCase.
aTestCase anno...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :ex | ex sunitAnnounce: aTestCase toResult: self ]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	TestResult>>runCase:
		startpc: 	70
		numArgs: 	0


TestResult>>runCase:
	Receiver: 0 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 0 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	DIPHPTests>>#testPhp
	Receiver's instance variables: 
		timeStamp: 	2015-02-24T17:49:17.043599+01:00
		failures: 	a Set()
		errors: 	an OrderedCollection()
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


DIPHPTests(TestCase)>>run:
	Receiver: DIPHPTests>>#testPhp
	Arguments and temporary variables: 
		aResult: 	0 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 0 errors,...etc...
	Receiver's instance variables: 
		testSelector: 	#testPhp
		expectedFails: 	nil


[ self run: result ] in DIPHPTests(TestCase)>>run
	Receiver: DIPHPTests>>#testPhp
	Arguments and temporary variables: 
		result: 	0 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 0 errors, ...etc...
	Receiver's instance variables: 
		testSelector: 	#testPhp
		expectedFails: 	nil


BlockClosure>>ensure:
	Receiver: [ self run: result ]
	Arguments and temporary variables: 
		aBlock: 	[ self classForTestResource resetResources: self resources ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	DIPHPTests(TestCase)>>run
		startpc: 	46
		numArgs: 	0


DIPHPTests(TestCase)>>run
	Receiver: DIPHPTests>>#testPhp
	Arguments and temporary variables: 
		result: 	0 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 0 errors, ...etc...
	Receiver's instance variables: 
		testSelector: 	#testPhp
		expectedFails: 	nil


DIPHPTests class(TestCase class)>>run:
	Receiver: DIPHPTests
	Arguments and temporary variables: 
		aSymbol: 	#testPhp
	Receiver's instance variables: 
		superclass: 	DIDSLTests
		methodDict: 	a MethodDictionary(#testPhp->DIPHPTests>>#testPhp )
		format: 	134
		layout: 	a FixedLayout
		instanceVariables: 	#()
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#DIPHPTests
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Dicto-var-tests'
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set(#testP...etc...


PackageTreeNautilusUI(NautilusUI)>>runTestForAMethodWithAnHalt:
	Receiver: a PackageTreeNautilusUI
	Arguments and temporary variables: 
		aMethod: 	DIPHPTests>>#testPhp
		testMethod: 	DIPHPTests>>#testPhp
		color: 	nil
		vScroll: 	0.0
		testClass: 	DIPHPTests
		testResult: 	nil
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a CategoryWidget a MethodWidget a NautilusWindow(...etc...
		model: 	a PackageTreeNautilus
		window: 	a NautilusWindow(542638080)
		hierarchyClass: 	DITestGroup
		cachedHierarchy: 	a SortHierarchically
		sourceTextArea: 	a PluggableTextMorphWithLimits(303038464)
		groupsSelection: 	a Dictionary()
		packagesSelection: 	a Dictionary(var-tests->true )
		classesSelection: 	a Dictionary(DIPHPTests->true )
		list: 	a MorphTreeMorph(273940480)
		list2: 	a PluggableIconListMorph(454295552)
		sourceCodePanel: 	a PanelMorph(183500800)
		commentTextArea: 	nil
		currentDisplayChoice: 	#SourceCode
		sourceTextAreaLimit: 	350
		sourceCodeContainer: 	a PanelMorph(584843264)
		list2Elements: 	{DIDSLTests. DIJavaTests. DIPHPTests. DISTTests}
		listElements: 	nil
		shouldUpdateTitle: 	true
		testSemaphore: 	a Semaphore()
		sourceTextAreas: 	an OrderedCollection(a PluggableTextMorphWithLimits(303038464)...etc...
		multipleMethodsEditor: 	a MultipleMethodsEditor(286261248)
		contentSelection: 	nil
		acceptor: 	a MethodDefinitionAcceptor
		classifier: 	a MethodClassifier
		categoryWidget: 	a CategoryWidget
		methodWidget: 	a MethodWidget
		packagePattern: 	a RxMatcher
		searchWidget: 	a SearchMorph(866648064)


[ self runTestForAMethodWithAnHalt: aMethod ] in [ :e | 
aBoolean
	ifTrue: [ 
		[ self runTestForAMethodWithAnHalt: aMethod ] fork.
		shouldAnnounce := false.
		TestAsserter classForTestResult new ]
	ifFalse: [ 
		TestAsserter classForTestResult new
			addFailure: (testClass selector: testMethod selector);
			yourself ] ] in [ 
| vScroll testClass testResult |
vScroll := methodWidget vScrollValue.
testClass := testMethod methodClass.
testResult := [ testClass run: testMethod selector ]
	on: Halt
	do: [ :e | 
		aBoolean
			ifTrue: [ 
				[ self runTestForAMethodWithAnHalt: aMethod ] fork.
				shouldAnnounce := false.
				TestAsserter classForTestResult new ]
			ifFalse: [ 
				TestAsserter classForTestResult new
					addFailure: (testClass selector: testMethod selector);
					yourself ] ].
testResult updateResultsInHistory.
testSemaphoreForMethod signal.
(aBoolean and: [ testResult failures isEmpty not or: [ testResult errors isEmpty not ] ])
	ifTrue: [ testClass debug: testMethod selector ].
ClassesIconsCache removeKey: aMethod methodClass ifAbsent: [  ].
UIManager default defer: [ methodWidget vScrollValue: vScroll ] ] in PackageTreeNautilusUI(NautilusUI)>>runTestForAMethod:notifying:priority:
	Receiver: a PackageTreeNautilusUI
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a CategoryWidget a MethodWidget a NautilusWindow(...etc...
		model: 	a PackageTreeNautilus
		window: 	a NautilusWindow(542638080)
		hierarchyClass: 	DITestGroup
		cachedHierarchy: 	a SortHierarchically
		sourceTextArea: 	a PluggableTextMorphWithLimits(303038464)
		groupsSelection: 	a Dictionary()
		packagesSelection: 	a Dictionary(var-tests->true )
		classesSelection: 	a Dictionary(DIPHPTests->true )
		list: 	a MorphTreeMorph(273940480)
		list2: 	a PluggableIconListMorph(454295552)
		sourceCodePanel: 	a PanelMorph(183500800)
		commentTextArea: 	nil
		currentDisplayChoice: 	#SourceCode
		sourceTextAreaLimit: 	350
		sourceCodeContainer: 	a PanelMorph(584843264)
		list2Elements: 	{DIDSLTests. DIJavaTests. DIPHPTests. DISTTests}
		listElements: 	nil
		shouldUpdateTitle: 	true
		testSemaphore: 	a Semaphore()
		sourceTextAreas: 	an OrderedCollection(a PluggableTextMorphWithLimits(303038464)...etc...
		multipleMethodsEditor: 	a MultipleMethodsEditor(286261248)
		contentSelection: 	nil
		acceptor: 	a MethodDefinitionAcceptor
		classifier: 	a MethodClassifier
		categoryWidget: 	a CategoryWidget
		methodWidget: 	a MethodWidget
		packagePattern: 	a RxMatcher
		searchWidget: 	a SearchMorph(866648064)


[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ self runTestForAMethodWithAnHalt: aMethod ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	[ :e | 
aBoolean
	ifTrue: [ 
		[ self runTestForAMethodWithAnHalt...etc...
		startpc: 	275
		numArgs: 	0



--- The full stack ---
DIPhpDependencies>>testRun
DITestGroup>>build
[ :testGroup | testGroup build ] in DIDicto>>dictoBuild:
Array(SequenceableCollection)>>do:
DIDicto>>dictoBuild:
DIDicto>>dictoRun:
DIDicto>>dictoAll:
DIPHPTests(DIDSLTests)>>runAndReturnObjWithText:andSuccessResults:onProject:
DIPHPTests>>testPhp
DIPHPTests(TestCase)>>performTest
[ 
self setUp.
self performTest ] in DIPHPTests(TestCase)>>runCase
BlockClosure>>ensure:
DIPHPTests(TestCase)>>runCase
[ 
aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCase.
aTestCase announce: TestCaseEnded withResult: self.
self addPass: aTestCase ] in TestResult>>runCase:
BlockClosure>>on:do:
TestResult>>runCase:
DIPHPTests(TestCase)>>run:
[ self run: result ] in DIPHPTests(TestCase)>>run
BlockClosure>>ensure:
DIPHPTests(TestCase)>>run
DIPHPTests class(TestCase class)>>run:
PackageTreeNautilusUI(NautilusUI)>>runTestForAMethodWithAnHalt:
[ self runTestForAMethodWithAnHalt: aMethod ] in [ :e | 
aBoolean
	ifTrue: [ 
		[ self runTestForAMethodWithAnHalt: aMethod ] fork.
		shouldAnnounce := false.
		TestAsserter classForTestResult new ]
	ifFalse: [ 
		TestAsserter classForTestResult new
			addFailure: (testClass selector: testMethod selector);
			yourself ] ] in [ 
| vScroll testClass testResult |
vScroll := methodWidget vScrollValue.
testClass := testMethod methodClass.
testResult := [ testClass run: testMethod selector ]
	on: Halt
	do: [ :e | 
		aBoolean
			ifTrue: [ 
				[ self runTestForAMethodWithAnHalt: aMethod ] fork.
				shouldAnnounce := false.
				TestAsserter classForTestResult new ]
			ifFalse: [ 
				TestAsserter classForTestResult new
					addFailure: (testClass selector: testMethod selector);
					yourself ] ].
testResult updateResultsInHistory.
testSemaphoreForMethod signal.
(aBoolean and: [ testResult failures isEmpty not or: [ testResult errors isEmpty not ] ])
	ifTrue: [ testClass debug: testMethod selector ].
ClassesIconsCache removeKey: aMethod methodClass ifAbsent: [  ].
UIManager default defer: [ methodWidget vScrollValue: vScroll ] ] in PackageTreeNautilusUI(NautilusUI)>>runTestForAMethod:notifying:priority:
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Halt
24 February 2015 5:49:46.526674 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
NBCogit NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
https://github.com/pharo-project/pharo-vm.git Commit: 4a0d556150d478ff2de3c9624d2f18e6eaa3fa5c Date: 2014-12-18 18:42:53 +0100 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14893

Image: Pharo3.0 [Latest update: #30863]

DIPhpDependencies>>testInput
	Receiver: a DIPhpDependencies
	Arguments and temporary variables: 
		strRules: 	'{ "subject" : "Dicto\\RuleResult",
	   "argument": "Dicto\\DictoTalk...etc...
	Receiver's instance variables: 
		output: 	''
		commandOutput: 	''
		NEWLINE: 	'
'
		rules: 	a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalker m...etc...
		varSynonyms: 	nil
		sessionId: 	'1424796581'
		TIMESTAMP: 	'1424796581'
		TOOLNAME: 	'DIPhpDependencies'
		PROJECTROOT: 	'/home/otruffer/DictoCLI'
		PROJECTSRC: 	'./'
		PROJECTBIN: 	'./'
		RESULTFILE: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/mai/1424796581/D...etc...
		TESTFILE: 	nil
		testInputFileExt: 	'.st'
		SYSTEM: 	SYSTEM


DITestGroup>>build
	Receiver: a DITestGroup
	Arguments and temporary variables: 

	Receiver's instance variables: 
		rules: 	an OrderedCollection(RuleResult cannot depend on DictoTalker DictoTalker...etc...
		adapter: 	a DIPhpDependencies
		runCommandText: 	nil
		testSpecification: 	nil
		adapterID: 	'DIPhpDependencies'
		resultFile: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/mai/1424796581/D...etc...
		specificationFile: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/mai/14247...etc...
		commandFile: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/mai/1424796581/...etc...
		rawOutput: 	nil
		xmlOutput: 	nil


[ :testGroup | testGroup build ] in DIDicto>>dictoBuild:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = ...etc...
		adapterTestGroups: 	a Dictionary(DIGrepFileContent->a DITestGroup DIJMeterLoadTe...etc...
		testGroup: 	a DITestGroup
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424796581'
		singleShotTask: 	false


Array(SequenceableCollection)>>do:
	Receiver: an Array(a DITestGroup a DITestGroup a DITestGroup a DITestGroup a DITestGroup)
	Arguments and temporary variables: 
		aBlock: 	[ :testGroup | testGroup build ]
		index: 	4
	Receiver's instance variables: 
an Array(a DITestGroup a DITestGroup a DITestGroup a DITestGroup a DITestGroup)

DIDicto>>dictoBuild:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = ...etc...
		adapterTestGroups: 	a Dictionary(DIGrepFileContent->a DITestGroup DIJMeterLoadTe...etc...
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424796581'
		singleShotTask: 	false


DIDicto>>dictoRun:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = ...etc...
		adapterTestGroups: 	nil
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424796581'
		singleShotTask: 	false


DIDicto>>dictoAll:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = ...etc...
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424796581'
		singleShotTask: 	false


[ DIDicto new dictoAll: input ] in DIWebServiceAPI>>getRun
	Receiver: a DIWebServiceAPI
	Arguments and temporary variables: 
		in: 	'/home/otruffer/dicto/bin/analysis/mai/dicto.rules'
		input: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = PhpCl...etc...
		rulesFailed: 	nil
		rulesTotal: 	nil
	Receiver's instance variables: 
		request: 	nil
		response: 	nil
		variables: 	nil
		delegate: 	nil
		principal: 	nil
		credentials: 	nil


BlockClosure>>on:do:
	Receiver: [ DIDicto new dictoAll: input ]
	Arguments and temporary variables: 
		exception: 	DIException
		handlerAction: 	[ :ex | ^ self error: ex description ]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	DIWebServiceAPI>>getRun
		startpc: 	138
		numArgs: 	0


DIWebServiceAPI>>getRun
	Receiver: a DIWebServiceAPI
	Arguments and temporary variables: 
		in: 	'/home/otruffer/dicto/bin/analysis/mai/dicto.rules'
		input: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = PhpCl...etc...
		rulesFailed: 	nil
		rulesTotal: 	nil
	Receiver's instance variables: 
		request: 	nil
		response: 	nil
		variables: 	nil
		delegate: 	nil
		principal: 	nil
		credentials: 	nil


DIWebServiceHandler>>post
	Receiver: a DIWebServiceHandler
	Arguments and temporary variables: 
		api: 	a DIWebServiceAPI
	Receiver's instance variables: 
		request: 	a ZnRequest(POST /mai/run)
		response: 	nil
		variables: 	an OrderedCollection('mai' 'run')
		delegate: 	a ZnJSONRestServerDelegate
		principal: 	nil
		credentials: 	nil
		dicto: 	a DIDicto


DIWebServiceHandler(ZnRestCall)>>execute
	Receiver: a DIWebServiceHandler
	Arguments and temporary variables: 

	Receiver's instance variables: 
		request: 	a ZnRequest(POST /mai/run)
		response: 	nil
		variables: 	an OrderedCollection('mai' 'run')
		delegate: 	a ZnJSONRestServerDelegate
		principal: 	nil
		credentials: 	nil
		dicto: 	a DIDicto


[ call execute ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


BlockClosure>>on:do:
	Receiver: [ call execute ]
	Arguments and temporary variables: 
		exception: 	ZnRestCallUnauthorized
		handlerAction: 	[ :exception | self unauthorized: exception request ]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
		startpc: 	38
		numArgs: 	0


ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


[ self execute: call ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /mai/run)
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


BlockClosure>>on:do:
	Receiver: [ self execute: call ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :exception | 
request server debugMode
	ifTrue: [ exception pa...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
		startpc: 	99
		numArgs: 	0


ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /mai/run)
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ :delegate | delegate handleRequest: request ] ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /mai/run)
		delegate: 	a ZnJSONRestServerDelegate
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateRequest:do:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /mai/run)
		block: 	[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ ...etc...
		authenticator: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /mai/run)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


[ self authenticateAndDelegateRequest: request ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /mai/run)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


BlockClosure>>on:do:
	Receiver: [ self authenticateAndDelegateRequest: request ]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :exception | 
self debugMode
	ifTrue: [ exception pass ]
	ifFa...etc...
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequ...etc...
		startpc: 	58
		numArgs: 	0


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /mai/run)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /mai/run)
		response: 	nil
		initialMilliseconds: 	1172487
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeOneRequestResponseOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		stream: 	a ZdcSocketStream
		request: 	a ZnRequest(POST /mai/run)
		response: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


[ self executeOneRequestResponseOn: stream ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		stream: 	a ZdcSocketStream
		request: 	nil
		response: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


[ 
p psValueAt: index put: anObject.
aBlock value ] in ZnCurrentServer(DynamicVariable)>>value:during:
	Receiver: a ZnCurrentServer
	Arguments and temporary variables: 
		anObject: 	a ZnManagingMultiThreadedServer(running 8010)
		aBlock: 	[ self executeOneRequestResponseOn: stream ]
		p: 	a Process in nil
		oldValue: 	nil
	Receiver's instance variables: 
		index: 	5


BlockClosure>>ensure:
	Receiver: [ 
p psValueAt: index put: anObject.
aBlock value ]
	Arguments and temporary variables: 
		aBlock: 	[ p psValueAt: index put: oldValue ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ZnCurrentServer(DynamicVariable)>>value:during:
		startpc: 	62
		numArgs: 	0


ZnCurrentServer(DynamicVariable)>>value:during:
	Receiver: a ZnCurrentServer
	Arguments and temporary variables: 
		anObject: 	a ZnManagingMultiThreadedServer(running 8010)
		aBlock: 	[ self executeOneRequestResponseOn: stream ]
		p: 	a Process in nil
		oldValue: 	nil
	Receiver's instance variables: 
		index: 	5


ZnCurrentServer class(DynamicVariable class)>>value:during:
	Receiver: ZnCurrentServer
	Arguments and temporary variables: 
		anObject: 	a ZnManagingMultiThreadedServer(running 8010)
		aBlock: 	[ self executeOneRequestResponseOn: stream ]
	Receiver's instance variables: 
		superclass: 	DynamicVariable
		methodDict: 	a MethodDictionary()
		format: 	132
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#ZnCurrentServer
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Zinc-HTTP-Variables'
		traitComposition: 	{}
		localSelectors: 	nil
		hash: 	nil
		soleInstance: 	a ZnCurrentServer


ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		stream: 	a ZdcSocketStream
		request: 	nil
		response: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


[ self executeRequestResponseLoopOn: stream ] in [ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ] in [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		listeningSocket: 	a Socket[waitingForConnection]
		stream: 	a ZdcSocketStream
		socket: 	a Socket[connected]
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


BlockClosure>>ensure:
	Receiver: [ self executeRequestResponseLoopOn: stream ]
	Arguments and temporary variables: 
		aBlock: 	[ 
self log debug: 'Closing stream'.
self closeSocketStream: stream ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		se...etc...
		startpc: 	118
		numArgs: 	0


[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ] in [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		listeningSocket: 	a Socket[waitingForConnection]
		stream: 	a ZdcSocketStream
		socket: 	a Socket[connected]
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


BlockClosure>>ifCurtailed:
	Receiver: [ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing st...etc...
	Arguments and temporary variables: 
		aBlock: 	[ 
self log debug: 'Destroying socket'.
socket destroy ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	[ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
	...etc...
		startpc: 	113
		numArgs: 	0


[ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		listeningSocket: 	a Socket[waitingForConnection]
		stream: 	a ZdcSocketStream
		socket: 	a Socket[connected]
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnec...etc...
		startpc: 	108
		numArgs: 	0



--- The full stack ---
DIPhpDependencies>>testInput
DITestGroup>>build
[ :testGroup | testGroup build ] in DIDicto>>dictoBuild:
Array(SequenceableCollection)>>do:
DIDicto>>dictoBuild:
DIDicto>>dictoRun:
DIDicto>>dictoAll:
[ DIDicto new dictoAll: input ] in DIWebServiceAPI>>getRun
BlockClosure>>on:do:
DIWebServiceAPI>>getRun
DIWebServiceHandler>>post
DIWebServiceHandler(ZnRestCall)>>execute
[ call execute ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
BlockClosure>>on:do:
ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
[ self execute: call ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
BlockClosure>>on:do:
ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ :delegate | delegate handleRequest: request ] ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateRequest:do:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
[ self authenticateAndDelegateRequest: request ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
BlockClosure>>on:do:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequest:
ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeOneRequestResponseOn:
[ self executeOneRequestResponseOn: stream ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
[ 
p psValueAt: index put: anObject.
aBlock value ] in ZnCurrentServer(DynamicVariable)>>value:during:
BlockClosure>>ensure:
ZnCurrentServer(DynamicVariable)>>value:during:
ZnCurrentServer class(DynamicVariable class)>>value:during:
ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
[ self executeRequestResponseLoopOn: stream ] in [ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ] in [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
BlockClosure>>ensure:
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ] in [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
BlockClosure>>ifCurtailed:
[ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Halt
24 February 2015 5:49:51.10228 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
NBCogit NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
https://github.com/pharo-project/pharo-vm.git Commit: 4a0d556150d478ff2de3c9624d2f18e6eaa3fa5c Date: 2014-12-18 18:42:53 +0100 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14893

Image: Pharo3.0 [Latest update: #30863]

DIPhpDependencies>>testRun
	Receiver: a DIPhpDependencies
	Arguments and temporary variables: 
		command: 	nil
	Receiver's instance variables: 
		output: 	''
		commandOutput: 	''
		NEWLINE: 	'
'
		rules: 	a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalker m...etc...
		varSynonyms: 	nil
		sessionId: 	'1424796581'
		TIMESTAMP: 	'1424796581'
		TOOLNAME: 	'DIPhpDependencies'
		PROJECTROOT: 	'/home/otruffer/DictoCLI'
		PROJECTSRC: 	'./'
		PROJECTBIN: 	'./'
		RESULTFILE: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/mai/1424796581/D...etc...
		TESTFILE: 	nil
		testInputFileExt: 	'.st'
		SYSTEM: 	SYSTEM


DITestGroup>>build
	Receiver: a DITestGroup
	Arguments and temporary variables: 

	Receiver's instance variables: 
		rules: 	an OrderedCollection(RuleResult cannot depend on DictoTalker DictoTalker...etc...
		adapter: 	a DIPhpDependencies
		runCommandText: 	nil
		testSpecification: 	'[{ "subject" : "Dicto\\RuleResult",
	   "argument": "Dicto\...etc...
		adapterID: 	'DIPhpDependencies'
		resultFile: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/mai/1424796581/D...etc...
		specificationFile: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/mai/14247...etc...
		commandFile: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/mai/1424796581/...etc...
		rawOutput: 	nil
		xmlOutput: 	nil


[ :testGroup | testGroup build ] in DIDicto>>dictoBuild:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = ...etc...
		adapterTestGroups: 	a Dictionary(DIGrepFileContent->a DITestGroup DIJMeterLoadTe...etc...
		testGroup: 	a DITestGroup
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424796581'
		singleShotTask: 	false


Array(SequenceableCollection)>>do:
	Receiver: an Array(a DITestGroup a DITestGroup a DITestGroup a DITestGroup a DITestGroup)
	Arguments and temporary variables: 
		aBlock: 	[ :testGroup | testGroup build ]
		index: 	4
	Receiver's instance variables: 
an Array(a DITestGroup a DITestGroup a DITestGroup a DITestGroup a DITestGroup)

DIDicto>>dictoBuild:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = ...etc...
		adapterTestGroups: 	a Dictionary(DIGrepFileContent->a DITestGroup DIJMeterLoadTe...etc...
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424796581'
		singleShotTask: 	false


DIDicto>>dictoRun:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = ...etc...
		adapterTestGroups: 	nil
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424796581'
		singleShotTask: 	false


DIDicto>>dictoAll:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = ...etc...
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424796581'
		singleShotTask: 	false


[ DIDicto new dictoAll: input ] in DIWebServiceAPI>>getRun
	Receiver: a DIWebServiceAPI
	Arguments and temporary variables: 
		in: 	'/home/otruffer/dicto/bin/analysis/mai/dicto.rules'
		input: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = PhpCl...etc...
		rulesFailed: 	nil
		rulesTotal: 	nil
	Receiver's instance variables: 
		request: 	nil
		response: 	nil
		variables: 	nil
		delegate: 	nil
		principal: 	nil
		credentials: 	nil


BlockClosure>>on:do:
	Receiver: [ DIDicto new dictoAll: input ]
	Arguments and temporary variables: 
		exception: 	DIException
		handlerAction: 	[ :ex | ^ self error: ex description ]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	DIWebServiceAPI>>getRun
		startpc: 	138
		numArgs: 	0


DIWebServiceAPI>>getRun
	Receiver: a DIWebServiceAPI
	Arguments and temporary variables: 
		in: 	'/home/otruffer/dicto/bin/analysis/mai/dicto.rules'
		input: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = PhpCl...etc...
		rulesFailed: 	nil
		rulesTotal: 	nil
	Receiver's instance variables: 
		request: 	nil
		response: 	nil
		variables: 	nil
		delegate: 	nil
		principal: 	nil
		credentials: 	nil


DIWebServiceHandler>>post
	Receiver: a DIWebServiceHandler
	Arguments and temporary variables: 
		api: 	a DIWebServiceAPI
	Receiver's instance variables: 
		request: 	a ZnRequest(POST /mai/run)
		response: 	nil
		variables: 	an OrderedCollection('mai' 'run')
		delegate: 	a ZnJSONRestServerDelegate
		principal: 	nil
		credentials: 	nil
		dicto: 	a DIDicto


DIWebServiceHandler(ZnRestCall)>>execute
	Receiver: a DIWebServiceHandler
	Arguments and temporary variables: 

	Receiver's instance variables: 
		request: 	a ZnRequest(POST /mai/run)
		response: 	nil
		variables: 	an OrderedCollection('mai' 'run')
		delegate: 	a ZnJSONRestServerDelegate
		principal: 	nil
		credentials: 	nil
		dicto: 	a DIDicto


[ call execute ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


BlockClosure>>on:do:
	Receiver: [ call execute ]
	Arguments and temporary variables: 
		exception: 	ZnRestCallUnauthorized
		handlerAction: 	[ :exception | self unauthorized: exception request ]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
		startpc: 	38
		numArgs: 	0


ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


[ self execute: call ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /mai/run)
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


BlockClosure>>on:do:
	Receiver: [ self execute: call ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :exception | 
request server debugMode
	ifTrue: [ exception pa...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
		startpc: 	99
		numArgs: 	0


ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /mai/run)
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ :delegate | delegate handleRequest: request ] ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /mai/run)
		delegate: 	a ZnJSONRestServerDelegate
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateRequest:do:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /mai/run)
		block: 	[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ ...etc...
		authenticator: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /mai/run)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


[ self authenticateAndDelegateRequest: request ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /mai/run)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


BlockClosure>>on:do:
	Receiver: [ self authenticateAndDelegateRequest: request ]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :exception | 
self debugMode
	ifTrue: [ exception pass ]
	ifFa...etc...
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequ...etc...
		startpc: 	58
		numArgs: 	0


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /mai/run)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /mai/run)
		response: 	nil
		initialMilliseconds: 	1172487
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeOneRequestResponseOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		stream: 	a ZdcSocketStream
		request: 	a ZnRequest(POST /mai/run)
		response: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


[ self executeOneRequestResponseOn: stream ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		stream: 	a ZdcSocketStream
		request: 	nil
		response: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


[ 
p psValueAt: index put: anObject.
aBlock value ] in ZnCurrentServer(DynamicVariable)>>value:during:
	Receiver: a ZnCurrentServer
	Arguments and temporary variables: 
		anObject: 	a ZnManagingMultiThreadedServer(running 8010)
		aBlock: 	[ self executeOneRequestResponseOn: stream ]
		p: 	a Process in nil
		oldValue: 	nil
	Receiver's instance variables: 
		index: 	5


BlockClosure>>ensure:
	Receiver: [ 
p psValueAt: index put: anObject.
aBlock value ]
	Arguments and temporary variables: 
		aBlock: 	[ p psValueAt: index put: oldValue ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ZnCurrentServer(DynamicVariable)>>value:during:
		startpc: 	62
		numArgs: 	0


ZnCurrentServer(DynamicVariable)>>value:during:
	Receiver: a ZnCurrentServer
	Arguments and temporary variables: 
		anObject: 	a ZnManagingMultiThreadedServer(running 8010)
		aBlock: 	[ self executeOneRequestResponseOn: stream ]
		p: 	a Process in nil
		oldValue: 	nil
	Receiver's instance variables: 
		index: 	5


ZnCurrentServer class(DynamicVariable class)>>value:during:
	Receiver: ZnCurrentServer
	Arguments and temporary variables: 
		anObject: 	a ZnManagingMultiThreadedServer(running 8010)
		aBlock: 	[ self executeOneRequestResponseOn: stream ]
	Receiver's instance variables: 
		superclass: 	DynamicVariable
		methodDict: 	a MethodDictionary()
		format: 	132
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#ZnCurrentServer
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Zinc-HTTP-Variables'
		traitComposition: 	{}
		localSelectors: 	nil
		hash: 	nil
		soleInstance: 	a ZnCurrentServer


ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		stream: 	a ZdcSocketStream
		request: 	nil
		response: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


[ self executeRequestResponseLoopOn: stream ] in [ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ] in [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		listeningSocket: 	a Socket[waitingForConnection]
		stream: 	a ZdcSocketStream
		socket: 	a Socket[connected]
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


BlockClosure>>ensure:
	Receiver: [ self executeRequestResponseLoopOn: stream ]
	Arguments and temporary variables: 
		aBlock: 	[ 
self log debug: 'Closing stream'.
self closeSocketStream: stream ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		se...etc...
		startpc: 	118
		numArgs: 	0


[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ] in [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		listeningSocket: 	a Socket[waitingForConnection]
		stream: 	a ZdcSocketStream
		socket: 	a Socket[connected]
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


BlockClosure>>ifCurtailed:
	Receiver: [ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing st...etc...
	Arguments and temporary variables: 
		aBlock: 	[ 
self log debug: 'Destroying socket'.
socket destroy ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	[ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
	...etc...
		startpc: 	113
		numArgs: 	0


[ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		listeningSocket: 	a Socket[waitingForConnection]
		stream: 	a ZdcSocketStream
		socket: 	a Socket[connected]
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnec...etc...
		startpc: 	108
		numArgs: 	0



--- The full stack ---
DIPhpDependencies>>testRun
DITestGroup>>build
[ :testGroup | testGroup build ] in DIDicto>>dictoBuild:
Array(SequenceableCollection)>>do:
DIDicto>>dictoBuild:
DIDicto>>dictoRun:
DIDicto>>dictoAll:
[ DIDicto new dictoAll: input ] in DIWebServiceAPI>>getRun
BlockClosure>>on:do:
DIWebServiceAPI>>getRun
DIWebServiceHandler>>post
DIWebServiceHandler(ZnRestCall)>>execute
[ call execute ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
BlockClosure>>on:do:
ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
[ self execute: call ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
BlockClosure>>on:do:
ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ :delegate | delegate handleRequest: request ] ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateRequest:do:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
[ self authenticateAndDelegateRequest: request ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
BlockClosure>>on:do:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequest:
ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeOneRequestResponseOn:
[ self executeOneRequestResponseOn: stream ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
[ 
p psValueAt: index put: anObject.
aBlock value ] in ZnCurrentServer(DynamicVariable)>>value:during:
BlockClosure>>ensure:
ZnCurrentServer(DynamicVariable)>>value:during:
ZnCurrentServer class(DynamicVariable class)>>value:during:
ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
[ self executeRequestResponseLoopOn: stream ] in [ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ] in [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
BlockClosure>>ensure:
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ] in [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
BlockClosure>>ifCurtailed:
[ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Halt
24 February 2015 5:51:11.846876 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
NBCogit NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
https://github.com/pharo-project/pharo-vm.git Commit: 4a0d556150d478ff2de3c9624d2f18e6eaa3fa5c Date: 2014-12-18 18:42:53 +0100 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14893

Image: Pharo3.0 [Latest update: #30863]

DIPhpModel>>_loadPhpModel
	Receiver: a DIPhpModel
	Arguments and temporary variables: 

	Receiver's instance variables: 
		defRules: 	a DICollectionRule()
		defVars: 	a DICollectionVar(SYSTEM)
		analysisID: 	'1424796672'
		additionalProperties: 	a Dictionary()
		ruleCounter: 	0
		varCounter: 	0
		defVarElements: 	a DICollectionVarElements()
		defVarInvertedElements: 	a DICollectionVarElements()
		model: 	nil


DIPhpModel>>model
	Receiver: a DIPhpModel
	Arguments and temporary variables: 

	Receiver's instance variables: 
		defRules: 	a DICollectionRule()
		defVars: 	a DICollectionVar(SYSTEM)
		analysisID: 	'1424796672'
		additionalProperties: 	a Dictionary()
		ruleCounter: 	0
		varCounter: 	0
		defVarElements: 	a DICollectionVarElements()
		defVarInvertedElements: 	a DICollectionVarElements()
		model: 	nil


DIVarPhpClass>>allElements
	Receiver: BibEntry
	Arguments and temporary variables: 

	Receiver's instance variables: 
		isFirst: 	false
		dslText: 	'BibEntry=PhpClass with name:"ilBibliographicEntry"'
		type: 	'PhpClass'
		id: 	1
		entity: 	nil
		name: 	'BibEntry'
		specifiers: 	an OrderedCollection(name=ilBibliographicEntry)
		isInverted: 	false
		elements: 	a DICollectionVarElements()
		invertedElements: 	a DICollectionVarElements()


DIVarPhpClass(DIVar)>>elements
	Receiver: BibEntry
	Arguments and temporary variables: 
		valid: 	nil
	Receiver's instance variables: 
		isFirst: 	false
		dslText: 	'BibEntry=PhpClass with name:"ilBibliographicEntry"'
		type: 	'PhpClass'
		id: 	1
		entity: 	nil
		name: 	'BibEntry'
		specifiers: 	an OrderedCollection(name=ilBibliographicEntry)
		isInverted: 	false
		elements: 	a DICollectionVarElements()
		invertedElements: 	a DICollectionVarElements()


DISimpleRule>>subjectElements
	Receiver: BibEntry cannot depend on BibObj
	Arguments and temporary variables: 
		subjectElements: 	nil
	Receiver's instance variables: 
		isFirst: 	nil
		dslText: 	'BibEntry cannot depend on BibObj'
		type: 	#cannot
		id: 	1001
		entity: 	nil
		subjects: 	an Array(BibEntry)
		predicates: 	an Array(depend on BibObj)
		subRules: 	nil
		candidateAdapters: 	a SortedCollection(DIPhpDependencies)
		chosenAdapter: 	DIPhpDependencies
		hasFailed: 	false
		failureMessage: 	''
		failingPredicates: 	a Set()
		hasSubjectInverted: 	false
		hasPredicateInverted: 	false


printRulesEntityRelationship: someRules
	| res processedPredicates |
	res := ''.
	processedPredicates := Set new.
	someRules
		do: [ :rule | 
			| predicateSelector subjectElements argumentElements data isPredicateInv isSubjectInv |
			predicateSelector := (rule predicate nameNormalized , ':') asSymbol.
			isPredicateInv := rule hasPredicateInverted.
			isSubjectInv := rule hasSubjectInverted.
			subjectElements := rule subjectElements.
			argumentElements := rule argumentElements.
			subjectElements
				do: [ :subject | 
					argumentElements
						do: [ :argument | 
							| relId spec msgPass msgFail |
							relId := subject id , '-' , argument id.
							msgPass := subject id , '.' , rule predicate name , '(' , argument id , ')=True'.
							msgFail := subject id , '.' , rule predicate name , '(' , argument id , ')=False'.
							(processedPredicates includes: relId)
								ifFalse: [ 
									data := {(#subject -> subject value).
									(#argument -> argument value).
									(#ruleId -> rule id).
									(#propertyId -> relId).
									(#msgPass -> msgPass).
									(#msgFail -> msgFail)} asDictionary.
									spec := self perform: predicateSelector withArguments: {data}.
									spec := spec
										dictoReplace:
											{('$subject' -> subject value).
											('$argument' -> argument value).
											('$ruleId' -> rule id).
											('$propertyId' -> relId).
											('$msgPass' -> msgPass).
											('$msgFail' -> msgFail)}.
									res := res , spec ].	"avoid duplicate predicate evaluations"
							processedPredicates add: relId ] ] ].
	^ res in DIPhpDependencies(DIAdapter)>>printRulesEntityRelationship:
	Receiver: a DIPhpDependencies
	Arguments and temporary variables: 
		someRules: 	a DICollectionRule(BibEntry cannot depend on BibObj BibObj must depe...etc...
		processedPredicates: 	a Set()
		data: 	nil
		res: 	''
		rule: 	BibEntry cannot depend on BibObj
		predicateSelector: 	#dependOn:
		subjectElements: 	nil
		argumentElements: 	nil
		isPredicateInv: 	false
		isSubjectInv: 	false
	Receiver's instance variables: 
		output: 	''
		commandOutput: 	''
		NEWLINE: 	'
'
		rules: 	a DICollectionRule(BibEntry cannot depend on BibObj BibObj must depend o...etc...
		varSynonyms: 	nil
		sessionId: 	'1424796672'
		TIMESTAMP: 	'1424796672'
		TOOLNAME: 	'DIPhpDependencies'
		PROJECTROOT: 	'/var/www/ilias_50/'
		PROJECTSRC: 	'./'
		PROJECTBIN: 	'./'
		RESULTFILE: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/ilias-test/14247...etc...
		TESTFILE: 	nil
		testInputFileExt: 	'.st'
		SYSTEM: 	SYSTEM


DICollectionRule(OrderedCollection)>>do:
	Receiver: a DICollectionRule(BibEntry cannot depend on BibObj BibObj must depend on BibEntry BibObj ...etc...
	Arguments and temporary variables: 
		aBlock: 	printRulesEntityRelationship: someRules
	| res processedPredicates |
	r...etc...
		index: 	1
	Receiver's instance variables: 
		array: 	an Array(BibEntry cannot depend on BibObj BibObj must depend on BibEntry...etc...
		firstIndex: 	1
		lastIndex: 	4
		elements: 	nil
		elements: 	nil


DIPhpDependencies(DIAdapter)>>printRulesEntityRelationship:
	Receiver: a DIPhpDependencies
	Arguments and temporary variables: 
		res: 	''
		someRules: 	a DICollectionRule(BibEntry cannot depend on BibObj BibObj must depe...etc...
		processedPredicates: 	a Set()
	Receiver's instance variables: 
		output: 	''
		commandOutput: 	''
		NEWLINE: 	'
'
		rules: 	a DICollectionRule(BibEntry cannot depend on BibObj BibObj must depend o...etc...
		varSynonyms: 	nil
		sessionId: 	'1424796672'
		TIMESTAMP: 	'1424796672'
		TOOLNAME: 	'DIPhpDependencies'
		PROJECTROOT: 	'/var/www/ilias_50/'
		PROJECTSRC: 	'./'
		PROJECTBIN: 	'./'
		RESULTFILE: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/ilias-test/14247...etc...
		TESTFILE: 	nil
		testInputFileExt: 	'.st'
		SYSTEM: 	SYSTEM


DIPhpDependencies(DIAdapter)>>printRules
	Receiver: a DIPhpDependencies
	Arguments and temporary variables: 
		res: 	nil
		allRules: 	a DICollectionRule(BibEntry cannot depend on BibObj BibObj must depen...etc...
	Receiver's instance variables: 
		output: 	''
		commandOutput: 	''
		NEWLINE: 	'
'
		rules: 	a DICollectionRule(BibEntry cannot depend on BibObj BibObj must depend o...etc...
		varSynonyms: 	nil
		sessionId: 	'1424796672'
		TIMESTAMP: 	'1424796672'
		TOOLNAME: 	'DIPhpDependencies'
		PROJECTROOT: 	'/var/www/ilias_50/'
		PROJECTSRC: 	'./'
		PROJECTBIN: 	'./'
		RESULTFILE: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/ilias-test/14247...etc...
		TESTFILE: 	nil
		testInputFileExt: 	'.st'
		SYSTEM: 	SYSTEM


DIPhpDependencies>>testInput
	Receiver: a DIPhpDependencies
	Arguments and temporary variables: 
		strRules: 	nil
	Receiver's instance variables: 
		output: 	''
		commandOutput: 	''
		NEWLINE: 	'
'
		rules: 	a DICollectionRule(BibEntry cannot depend on BibObj BibObj must depend o...etc...
		varSynonyms: 	nil
		sessionId: 	'1424796672'
		TIMESTAMP: 	'1424796672'
		TOOLNAME: 	'DIPhpDependencies'
		PROJECTROOT: 	'/var/www/ilias_50/'
		PROJECTSRC: 	'./'
		PROJECTBIN: 	'./'
		RESULTFILE: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/ilias-test/14247...etc...
		TESTFILE: 	nil
		testInputFileExt: 	'.st'
		SYSTEM: 	SYSTEM


DITestGroup>>build
	Receiver: a DITestGroup
	Arguments and temporary variables: 

	Receiver's instance variables: 
		rules: 	an OrderedCollection(BibEntry cannot depend on BibObj BibObj must depend...etc...
		adapter: 	a DIPhpDependencies
		runCommandText: 	nil
		testSpecification: 	nil
		adapterID: 	'DIPhpDependencies'
		resultFile: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/ilias-test/14247...etc...
		specificationFile: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/ilias-tes...etc...
		commandFile: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/ilias-test/1424...etc...
		rawOutput: 	nil
		xmlOutput: 	nil


[ :testGroup | testGroup build ] in DIDicto>>dictoBuild:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'BibEntry = PhpClass with name:"ilBibliographicEntry"
BibObj = PhpC...etc...
		adapterTestGroups: 	a Dictionary(DIGrepFileContent->a DITestGroup DIJMeterLoadTe...etc...
		testGroup: 	a DITestGroup
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424796672'
		singleShotTask: 	false


Array(SequenceableCollection)>>do:
	Receiver: an Array(a DITestGroup a DITestGroup a DITestGroup a DITestGroup a DITestGroup)
	Arguments and temporary variables: 
		aBlock: 	[ :testGroup | testGroup build ]
		index: 	4
	Receiver's instance variables: 
an Array(a DITestGroup a DITestGroup a DITestGroup a DITestGroup a DITestGroup)

DIDicto>>dictoBuild:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'BibEntry = PhpClass with name:"ilBibliographicEntry"
BibObj = PhpC...etc...
		adapterTestGroups: 	a Dictionary(DIGrepFileContent->a DITestGroup DIJMeterLoadTe...etc...
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424796672'
		singleShotTask: 	false


DIDicto>>dictoRun:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'BibEntry = PhpClass with name:"ilBibliographicEntry"
BibObj = PhpC...etc...
		adapterTestGroups: 	nil
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424796672'
		singleShotTask: 	false


DIDicto>>dictoAll:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'BibEntry = PhpClass with name:"ilBibliographicEntry"
BibObj = PhpC...etc...
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424796672'
		singleShotTask: 	false


[ DIDicto new dictoAll: input ] in DIWebServiceAPI>>getRun
	Receiver: a DIWebServiceAPI
	Arguments and temporary variables: 
		in: 	'/home/otruffer/dicto/bin/analysis/ilias-test/dicto.rules'
		input: 	'BibEntry = PhpClass with name:"ilBibliographicEntry"
BibObj = PhpClass ...etc...
		rulesFailed: 	nil
		rulesTotal: 	nil
	Receiver's instance variables: 
		request: 	nil
		response: 	nil
		variables: 	nil
		delegate: 	nil
		principal: 	nil
		credentials: 	nil


BlockClosure>>on:do:
	Receiver: [ DIDicto new dictoAll: input ]
	Arguments and temporary variables: 
		exception: 	DIException
		handlerAction: 	[ :ex | ^ self error: ex description ]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	DIWebServiceAPI>>getRun
		startpc: 	138
		numArgs: 	0


DIWebServiceAPI>>getRun
	Receiver: a DIWebServiceAPI
	Arguments and temporary variables: 
		in: 	'/home/otruffer/dicto/bin/analysis/ilias-test/dicto.rules'
		input: 	'BibEntry = PhpClass with name:"ilBibliographicEntry"
BibObj = PhpClass ...etc...
		rulesFailed: 	nil
		rulesTotal: 	nil
	Receiver's instance variables: 
		request: 	nil
		response: 	nil
		variables: 	nil
		delegate: 	nil
		principal: 	nil
		credentials: 	nil


DIWebServiceHandler>>post
	Receiver: a DIWebServiceHandler
	Arguments and temporary variables: 
		api: 	a DIWebServiceAPI
	Receiver's instance variables: 
		request: 	a ZnRequest(POST /ilias-test/run)
		response: 	nil
		variables: 	an OrderedCollection('ilias-test' 'run')
		delegate: 	a ZnJSONRestServerDelegate
		principal: 	nil
		credentials: 	nil
		dicto: 	a DIDicto


DIWebServiceHandler(ZnRestCall)>>execute
	Receiver: a DIWebServiceHandler
	Arguments and temporary variables: 

	Receiver's instance variables: 
		request: 	a ZnRequest(POST /ilias-test/run)
		response: 	nil
		variables: 	an OrderedCollection('ilias-test' 'run')
		delegate: 	a ZnJSONRestServerDelegate
		principal: 	nil
		credentials: 	nil
		dicto: 	a DIDicto


[ call execute ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


BlockClosure>>on:do:
	Receiver: [ call execute ]
	Arguments and temporary variables: 
		exception: 	ZnRestCallUnauthorized
		handlerAction: 	[ :exception | self unauthorized: exception request ]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
		startpc: 	38
		numArgs: 	0


ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


[ self execute: call ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /ilias-test/run)
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


BlockClosure>>on:do:
	Receiver: [ self execute: call ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :exception | 
request server debugMode
	ifTrue: [ exception pa...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
		startpc: 	99
		numArgs: 	0


ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /ilias-test/run)
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ :delegate | delegate handleRequest: request ] ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /ilias-test/run)
		delegate: 	a ZnJSONRestServerDelegate
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateRequest:do:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /ilias-test/run)
		block: 	[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ ...etc...
		authenticator: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /ilias-test/run)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


[ self authenticateAndDelegateRequest: request ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /ilias-test/run)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


BlockClosure>>on:do:
	Receiver: [ self authenticateAndDelegateRequest: request ]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :exception | 
self debugMode
	ifTrue: [ exception pass ]
	ifFa...etc...
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequ...etc...
		startpc: 	58
		numArgs: 	0


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /ilias-test/run)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /ilias-test/run)
		response: 	nil
		initialMilliseconds: 	1263387
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeOneRequestResponseOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		stream: 	a ZdcSocketStream
		request: 	a ZnRequest(POST /ilias-test/run)
		response: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


[ self executeOneRequestResponseOn: stream ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		stream: 	a ZdcSocketStream
		request: 	nil
		response: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


[ 
p psValueAt: index put: anObject.
aBlock value ] in ZnCurrentServer(DynamicVariable)>>value:during:
	Receiver: a ZnCurrentServer
	Arguments and temporary variables: 
		anObject: 	a ZnManagingMultiThreadedServer(running 8010)
		aBlock: 	[ self executeOneRequestResponseOn: stream ]
		p: 	a Process in nil
		oldValue: 	nil
	Receiver's instance variables: 
		index: 	5


BlockClosure>>ensure:
	Receiver: [ 
p psValueAt: index put: anObject.
aBlock value ]
	Arguments and temporary variables: 
		aBlock: 	[ p psValueAt: index put: oldValue ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ZnCurrentServer(DynamicVariable)>>value:during:
		startpc: 	62
		numArgs: 	0


ZnCurrentServer(DynamicVariable)>>value:during:
	Receiver: a ZnCurrentServer
	Arguments and temporary variables: 
		anObject: 	a ZnManagingMultiThreadedServer(running 8010)
		aBlock: 	[ self executeOneRequestResponseOn: stream ]
		p: 	a Process in nil
		oldValue: 	nil
	Receiver's instance variables: 
		index: 	5



--- The full stack ---
DIPhpModel>>_loadPhpModel
DIPhpModel>>model
DIVarPhpClass>>allElements
DIVarPhpClass(DIVar)>>elements
DISimpleRule>>subjectElements
printRulesEntityRelationship: someRules
	| res processedPredicates |
	res := ''.
	processedPredicates := Set new.
	someRules
		do: [ :rule | 
			| predicateSelector subjectElements argumentElements data isPredicateInv isSubjectInv |
			predicateSelector := (rule predicate nameNormalized , ':') asSymbol.
			isPredicateInv := rule hasPredicateInverted.
			isSubjectInv := rule hasSubjectInverted.
			subjectElements := rule subjectElements.
			argumentElements := rule argumentElements.
			subjectElements
				do: [ :subject | 
					argumentElements
						do: [ :argument | 
							| relId spec msgPass msgFail |
							relId := subject id , '-' , argument id.
							msgPass := subject id , '.' , rule predicate name , '(' , argument id , ')=True'.
							msgFail := subject id , '.' , rule predicate name , '(' , argument id , ')=False'.
							(processedPredicates includes: relId)
								ifFalse: [ 
									data := {(#subject -> subject value).
									(#argument -> argument value).
									(#ruleId -> rule id).
									(#propertyId -> relId).
									(#msgPass -> msgPass).
									(#msgFail -> msgFail)} asDictionary.
									spec := self perform: predicateSelector withArguments: {data}.
									spec := spec
										dictoReplace:
											{('$subject' -> subject value).
											('$argument' -> argument value).
											('$ruleId' -> rule id).
											('$propertyId' -> relId).
											('$msgPass' -> msgPass).
											('$msgFail' -> msgFail)}.
									res := res , spec ].	"avoid duplicate predicate evaluations"
							processedPredicates add: relId ] ] ].
	^ res in DIPhpDependencies(DIAdapter)>>printRulesEntityRelationship:
DICollectionRule(OrderedCollection)>>do:
DIPhpDependencies(DIAdapter)>>printRulesEntityRelationship:
DIPhpDependencies(DIAdapter)>>printRules
DIPhpDependencies>>testInput
DITestGroup>>build
[ :testGroup | testGroup build ] in DIDicto>>dictoBuild:
Array(SequenceableCollection)>>do:
DIDicto>>dictoBuild:
DIDicto>>dictoRun:
DIDicto>>dictoAll:
[ DIDicto new dictoAll: input ] in DIWebServiceAPI>>getRun
BlockClosure>>on:do:
DIWebServiceAPI>>getRun
DIWebServiceHandler>>post
DIWebServiceHandler(ZnRestCall)>>execute
[ call execute ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
BlockClosure>>on:do:
ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
[ self execute: call ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
BlockClosure>>on:do:
ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ :delegate | delegate handleRequest: request ] ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateRequest:do:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
[ self authenticateAndDelegateRequest: request ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
BlockClosure>>on:do:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequest:
ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeOneRequestResponseOn:
[ self executeOneRequestResponseOn: stream ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
[ 
p psValueAt: index put: anObject.
aBlock value ] in ZnCurrentServer(DynamicVariable)>>value:during:
BlockClosure>>ensure:
ZnCurrentServer(DynamicVariable)>>value:during:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
ZnCurrentServer class(DynamicVariable class)>>value:during:
ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
[ self executeRequestResponseLoopOn: stream ] in [ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ] in [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
BlockClosure>>ensure:
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ] in [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
BlockClosure>>ifCurtailed:
[ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Halt
24 February 2015 5:52:23.345568 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
NBCogit NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
https://github.com/pharo-project/pharo-vm.git Commit: 4a0d556150d478ff2de3c9624d2f18e6eaa3fa5c Date: 2014-12-18 18:42:53 +0100 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14893

Image: Pharo3.0 [Latest update: #30863]

DIPhpModel>>_loadPhpModel
	Receiver: a DIPhpModel
	Arguments and temporary variables: 

	Receiver's instance variables: 
		defRules: 	a DICollectionRule()
		defVars: 	a DICollectionVar(SYSTEM)
		analysisID: 	'1424796672'
		additionalProperties: 	a Dictionary()
		ruleCounter: 	0
		varCounter: 	0
		defVarElements: 	a DICollectionVarElements()
		defVarInvertedElements: 	a DICollectionVarElements()
		model: 	a Dictionary(size 7154)


DIPhpModel>>model
	Receiver: a DIPhpModel
	Arguments and temporary variables: 

	Receiver's instance variables: 
		defRules: 	a DICollectionRule()
		defVars: 	a DICollectionVar(SYSTEM)
		analysisID: 	'1424796672'
		additionalProperties: 	a Dictionary()
		ruleCounter: 	0
		varCounter: 	0
		defVarElements: 	a DICollectionVarElements()
		defVarInvertedElements: 	a DICollectionVarElements()
		model: 	a Dictionary(size 7154)


DIVarPhpClass>>allElements
	Receiver: BibEntry
	Arguments and temporary variables: 

	Receiver's instance variables: 
		isFirst: 	false
		dslText: 	'BibEntry=PhpClass with name:"ilBibliographicEntry"'
		type: 	'PhpClass'
		id: 	1
		entity: 	nil
		name: 	'BibEntry'
		specifiers: 	an OrderedCollection(name=ilBibliographicEntry)
		isInverted: 	false
		elements: 	a DICollectionVarElements()
		invertedElements: 	a DICollectionVarElements()


DIVarPhpClass(DIVar)>>elements
	Receiver: BibEntry
	Arguments and temporary variables: 
		valid: 	nil
	Receiver's instance variables: 
		isFirst: 	false
		dslText: 	'BibEntry=PhpClass with name:"ilBibliographicEntry"'
		type: 	'PhpClass'
		id: 	1
		entity: 	nil
		name: 	'BibEntry'
		specifiers: 	an OrderedCollection(name=ilBibliographicEntry)
		isInverted: 	false
		elements: 	a DICollectionVarElements()
		invertedElements: 	a DICollectionVarElements()


DISimpleRule>>subjectElements
	Receiver: BibEntry cannot depend on BibObj
	Arguments and temporary variables: 
		subjectElements: 	nil
	Receiver's instance variables: 
		isFirst: 	nil
		dslText: 	'BibEntry cannot depend on BibObj'
		type: 	#cannot
		id: 	1001
		entity: 	nil
		subjects: 	an Array(BibEntry)
		predicates: 	an Array(depend on BibObj)
		subRules: 	nil
		candidateAdapters: 	a SortedCollection(DIPhpDependencies)
		chosenAdapter: 	DIPhpDependencies
		hasFailed: 	false
		failureMessage: 	''
		failingPredicates: 	a Set()
		hasSubjectInverted: 	false
		hasPredicateInverted: 	false


printRulesEntityRelationship: someRules
	| res processedPredicates |
	res := ''.
	processedPredicates := Set new.
	someRules
		do: [ :rule | 
			| predicateSelector subjectElements argumentElements data isPredicateInv isSubjectInv |
			predicateSelector := (rule predicate nameNormalized , ':') asSymbol.
			isPredicateInv := rule hasPredicateInverted.
			isSubjectInv := rule hasSubjectInverted.
			subjectElements := rule subjectElements.
			argumentElements := rule argumentElements.
			subjectElements
				do: [ :subject | 
					argumentElements
						do: [ :argument | 
							| relId spec msgPass msgFail |
							relId := subject id , '-' , argument id.
							msgPass := subject id , '.' , rule predicate name , '(' , argument id , ')=True'.
							msgFail := subject id , '.' , rule predicate name , '(' , argument id , ')=False'.
							(processedPredicates includes: relId)
								ifFalse: [ 
									data := {(#subject -> subject value).
									(#argument -> argument value).
									(#ruleId -> rule id).
									(#propertyId -> relId).
									(#msgPass -> msgPass).
									(#msgFail -> msgFail)} asDictionary.
									spec := self perform: predicateSelector withArguments: {data}.
									spec := spec
										dictoReplace:
											{('$subject' -> subject value).
											('$argument' -> argument value).
											('$ruleId' -> rule id).
											('$propertyId' -> relId).
											('$msgPass' -> msgPass).
											('$msgFail' -> msgFail)}.
									res := res , spec ].	"avoid duplicate predicate evaluations"
							processedPredicates add: relId ] ] ].
	^ res in DIPhpDependencies(DIAdapter)>>printRulesEntityRelationship:
	Receiver: a DIPhpDependencies
	Arguments and temporary variables: 
		someRules: 	a DICollectionRule(BibEntry cannot depend on BibObj BibObj must depe...etc...
		processedPredicates: 	a Set()
		data: 	nil
		res: 	''
		rule: 	BibEntry cannot depend on BibObj
		predicateSelector: 	#dependOn:
		subjectElements: 	nil
		argumentElements: 	nil
		isPredicateInv: 	false
		isSubjectInv: 	false
	Receiver's instance variables: 
		output: 	''
		commandOutput: 	''
		NEWLINE: 	'
'
		rules: 	a DICollectionRule(BibEntry cannot depend on BibObj BibObj must depend o...etc...
		varSynonyms: 	nil
		sessionId: 	'1424796672'
		TIMESTAMP: 	'1424796672'
		TOOLNAME: 	'DIPhpDependencies'
		PROJECTROOT: 	'/var/www/ilias_50/'
		PROJECTSRC: 	'./'
		PROJECTBIN: 	'./'
		RESULTFILE: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/ilias-test/14247...etc...
		TESTFILE: 	nil
		testInputFileExt: 	'.st'
		SYSTEM: 	SYSTEM


DICollectionRule(OrderedCollection)>>do:
	Receiver: a DICollectionRule(BibEntry cannot depend on BibObj BibObj must depend on BibEntry BibObj ...etc...
	Arguments and temporary variables: 
		aBlock: 	printRulesEntityRelationship: someRules
	| res processedPredicates |
	r...etc...
		index: 	1
	Receiver's instance variables: 
		array: 	an Array(BibEntry cannot depend on BibObj BibObj must depend on BibEntry...etc...
		firstIndex: 	1
		lastIndex: 	4
		elements: 	nil
		elements: 	nil


DIPhpDependencies(DIAdapter)>>printRulesEntityRelationship:
	Receiver: a DIPhpDependencies
	Arguments and temporary variables: 
		res: 	''
		someRules: 	a DICollectionRule(BibEntry cannot depend on BibObj BibObj must depe...etc...
		processedPredicates: 	a Set()
	Receiver's instance variables: 
		output: 	''
		commandOutput: 	''
		NEWLINE: 	'
'
		rules: 	a DICollectionRule(BibEntry cannot depend on BibObj BibObj must depend o...etc...
		varSynonyms: 	nil
		sessionId: 	'1424796672'
		TIMESTAMP: 	'1424796672'
		TOOLNAME: 	'DIPhpDependencies'
		PROJECTROOT: 	'/var/www/ilias_50/'
		PROJECTSRC: 	'./'
		PROJECTBIN: 	'./'
		RESULTFILE: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/ilias-test/14247...etc...
		TESTFILE: 	nil
		testInputFileExt: 	'.st'
		SYSTEM: 	SYSTEM


DIPhpDependencies(DIAdapter)>>printRules
	Receiver: a DIPhpDependencies
	Arguments and temporary variables: 
		res: 	nil
		allRules: 	a DICollectionRule(BibEntry cannot depend on BibObj BibObj must depen...etc...
	Receiver's instance variables: 
		output: 	''
		commandOutput: 	''
		NEWLINE: 	'
'
		rules: 	a DICollectionRule(BibEntry cannot depend on BibObj BibObj must depend o...etc...
		varSynonyms: 	nil
		sessionId: 	'1424796672'
		TIMESTAMP: 	'1424796672'
		TOOLNAME: 	'DIPhpDependencies'
		PROJECTROOT: 	'/var/www/ilias_50/'
		PROJECTSRC: 	'./'
		PROJECTBIN: 	'./'
		RESULTFILE: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/ilias-test/14247...etc...
		TESTFILE: 	nil
		testInputFileExt: 	'.st'
		SYSTEM: 	SYSTEM


DIPhpDependencies>>testInput
	Receiver: a DIPhpDependencies
	Arguments and temporary variables: 
		strRules: 	nil
	Receiver's instance variables: 
		output: 	''
		commandOutput: 	''
		NEWLINE: 	'
'
		rules: 	a DICollectionRule(BibEntry cannot depend on BibObj BibObj must depend o...etc...
		varSynonyms: 	nil
		sessionId: 	'1424796672'
		TIMESTAMP: 	'1424796672'
		TOOLNAME: 	'DIPhpDependencies'
		PROJECTROOT: 	'/var/www/ilias_50/'
		PROJECTSRC: 	'./'
		PROJECTBIN: 	'./'
		RESULTFILE: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/ilias-test/14247...etc...
		TESTFILE: 	nil
		testInputFileExt: 	'.st'
		SYSTEM: 	SYSTEM


DITestGroup>>build
	Receiver: a DITestGroup
	Arguments and temporary variables: 

	Receiver's instance variables: 
		rules: 	an OrderedCollection(BibEntry cannot depend on BibObj BibObj must depend...etc...
		adapter: 	a DIPhpDependencies
		runCommandText: 	nil
		testSpecification: 	nil
		adapterID: 	'DIPhpDependencies'
		resultFile: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/ilias-test/14247...etc...
		specificationFile: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/ilias-tes...etc...
		commandFile: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/ilias-test/1424...etc...
		rawOutput: 	nil
		xmlOutput: 	nil


[ :testGroup | testGroup build ] in DIDicto>>dictoBuild:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'BibEntry = PhpClass with name:"ilBibliographicEntry"
BibObj = PhpC...etc...
		adapterTestGroups: 	a Dictionary(DIGrepFileContent->a DITestGroup DIJMeterLoadTe...etc...
		testGroup: 	a DITestGroup
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424796672'
		singleShotTask: 	false


Array(SequenceableCollection)>>do:
	Receiver: an Array(a DITestGroup a DITestGroup a DITestGroup a DITestGroup a DITestGroup)
	Arguments and temporary variables: 
		aBlock: 	[ :testGroup | testGroup build ]
		index: 	4
	Receiver's instance variables: 
an Array(a DITestGroup a DITestGroup a DITestGroup a DITestGroup a DITestGroup)

DIDicto>>dictoBuild:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'BibEntry = PhpClass with name:"ilBibliographicEntry"
BibObj = PhpC...etc...
		adapterTestGroups: 	a Dictionary(DIGrepFileContent->a DITestGroup DIJMeterLoadTe...etc...
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424796672'
		singleShotTask: 	false


DIDicto>>dictoRun:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'BibEntry = PhpClass with name:"ilBibliographicEntry"
BibObj = PhpC...etc...
		adapterTestGroups: 	nil
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424796672'
		singleShotTask: 	false


DIDicto>>dictoAll:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'BibEntry = PhpClass with name:"ilBibliographicEntry"
BibObj = PhpC...etc...
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424796672'
		singleShotTask: 	false


[ DIDicto new dictoAll: input ] in DIWebServiceAPI>>getRun
	Receiver: a DIWebServiceAPI
	Arguments and temporary variables: 
		in: 	'/home/otruffer/dicto/bin/analysis/ilias-test/dicto.rules'
		input: 	'BibEntry = PhpClass with name:"ilBibliographicEntry"
BibObj = PhpClass ...etc...
		rulesFailed: 	nil
		rulesTotal: 	nil
	Receiver's instance variables: 
		request: 	nil
		response: 	nil
		variables: 	nil
		delegate: 	nil
		principal: 	nil
		credentials: 	nil


BlockClosure>>on:do:
	Receiver: [ DIDicto new dictoAll: input ]
	Arguments and temporary variables: 
		exception: 	DIException
		handlerAction: 	[ :ex | ^ self error: ex description ]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	DIWebServiceAPI>>getRun
		startpc: 	138
		numArgs: 	0


DIWebServiceAPI>>getRun
	Receiver: a DIWebServiceAPI
	Arguments and temporary variables: 
		in: 	'/home/otruffer/dicto/bin/analysis/ilias-test/dicto.rules'
		input: 	'BibEntry = PhpClass with name:"ilBibliographicEntry"
BibObj = PhpClass ...etc...
		rulesFailed: 	nil
		rulesTotal: 	nil
	Receiver's instance variables: 
		request: 	nil
		response: 	nil
		variables: 	nil
		delegate: 	nil
		principal: 	nil
		credentials: 	nil


DIWebServiceHandler>>post
	Receiver: a DIWebServiceHandler
	Arguments and temporary variables: 
		api: 	a DIWebServiceAPI
	Receiver's instance variables: 
		request: 	a ZnRequest(POST /ilias-test/run)
		response: 	nil
		variables: 	an OrderedCollection('ilias-test' 'run')
		delegate: 	a ZnJSONRestServerDelegate
		principal: 	nil
		credentials: 	nil
		dicto: 	a DIDicto


DIWebServiceHandler(ZnRestCall)>>execute
	Receiver: a DIWebServiceHandler
	Arguments and temporary variables: 

	Receiver's instance variables: 
		request: 	a ZnRequest(POST /ilias-test/run)
		response: 	nil
		variables: 	an OrderedCollection('ilias-test' 'run')
		delegate: 	a ZnJSONRestServerDelegate
		principal: 	nil
		credentials: 	nil
		dicto: 	a DIDicto


[ call execute ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


BlockClosure>>on:do:
	Receiver: [ call execute ]
	Arguments and temporary variables: 
		exception: 	ZnRestCallUnauthorized
		handlerAction: 	[ :exception | self unauthorized: exception request ]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
		startpc: 	38
		numArgs: 	0


ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


[ self execute: call ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /ilias-test/run)
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


BlockClosure>>on:do:
	Receiver: [ self execute: call ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :exception | 
request server debugMode
	ifTrue: [ exception pa...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
		startpc: 	99
		numArgs: 	0


ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /ilias-test/run)
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ :delegate | delegate handleRequest: request ] ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /ilias-test/run)
		delegate: 	a ZnJSONRestServerDelegate
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateRequest:do:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /ilias-test/run)
		block: 	[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ ...etc...
		authenticator: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /ilias-test/run)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


[ self authenticateAndDelegateRequest: request ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /ilias-test/run)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


BlockClosure>>on:do:
	Receiver: [ self authenticateAndDelegateRequest: request ]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :exception | 
self debugMode
	ifTrue: [ exception pass ]
	ifFa...etc...
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequ...etc...
		startpc: 	58
		numArgs: 	0


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /ilias-test/run)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /ilias-test/run)
		response: 	nil
		initialMilliseconds: 	1263387
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeOneRequestResponseOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		stream: 	a ZdcSocketStream
		request: 	a ZnRequest(POST /ilias-test/run)
		response: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


[ self executeOneRequestResponseOn: stream ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		stream: 	a ZdcSocketStream
		request: 	nil
		response: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


[ 
p psValueAt: index put: anObject.
aBlock value ] in ZnCurrentServer(DynamicVariable)>>value:during:
	Receiver: a ZnCurrentServer
	Arguments and temporary variables: 
		anObject: 	a ZnManagingMultiThreadedServer(running 8010)
		aBlock: 	[ self executeOneRequestResponseOn: stream ]
		p: 	a Process in nil
		oldValue: 	nil
	Receiver's instance variables: 
		index: 	5


BlockClosure>>ensure:
	Receiver: [ 
p psValueAt: index put: anObject.
aBlock value ]
	Arguments and temporary variables: 
		aBlock: 	[ p psValueAt: index put: oldValue ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ZnCurrentServer(DynamicVariable)>>value:during:
		startpc: 	62
		numArgs: 	0


ZnCurrentServer(DynamicVariable)>>value:during:
	Receiver: a ZnCurrentServer
	Arguments and temporary variables: 
		anObject: 	a ZnManagingMultiThreadedServer(running 8010)
		aBlock: 	[ self executeOneRequestResponseOn: stream ]
		p: 	a Process in nil
		oldValue: 	nil
	Receiver's instance variables: 
		index: 	5



--- The full stack ---
DIPhpModel>>_loadPhpModel
DIPhpModel>>model
DIVarPhpClass>>allElements
DIVarPhpClass(DIVar)>>elements
DISimpleRule>>subjectElements
printRulesEntityRelationship: someRules
	| res processedPredicates |
	res := ''.
	processedPredicates := Set new.
	someRules
		do: [ :rule | 
			| predicateSelector subjectElements argumentElements data isPredicateInv isSubjectInv |
			predicateSelector := (rule predicate nameNormalized , ':') asSymbol.
			isPredicateInv := rule hasPredicateInverted.
			isSubjectInv := rule hasSubjectInverted.
			subjectElements := rule subjectElements.
			argumentElements := rule argumentElements.
			subjectElements
				do: [ :subject | 
					argumentElements
						do: [ :argument | 
							| relId spec msgPass msgFail |
							relId := subject id , '-' , argument id.
							msgPass := subject id , '.' , rule predicate name , '(' , argument id , ')=True'.
							msgFail := subject id , '.' , rule predicate name , '(' , argument id , ')=False'.
							(processedPredicates includes: relId)
								ifFalse: [ 
									data := {(#subject -> subject value).
									(#argument -> argument value).
									(#ruleId -> rule id).
									(#propertyId -> relId).
									(#msgPass -> msgPass).
									(#msgFail -> msgFail)} asDictionary.
									spec := self perform: predicateSelector withArguments: {data}.
									spec := spec
										dictoReplace:
											{('$subject' -> subject value).
											('$argument' -> argument value).
											('$ruleId' -> rule id).
											('$propertyId' -> relId).
											('$msgPass' -> msgPass).
											('$msgFail' -> msgFail)}.
									res := res , spec ].	"avoid duplicate predicate evaluations"
							processedPredicates add: relId ] ] ].
	^ res in DIPhpDependencies(DIAdapter)>>printRulesEntityRelationship:
DICollectionRule(OrderedCollection)>>do:
DIPhpDependencies(DIAdapter)>>printRulesEntityRelationship:
DIPhpDependencies(DIAdapter)>>printRules
DIPhpDependencies>>testInput
DITestGroup>>build
[ :testGroup | testGroup build ] in DIDicto>>dictoBuild:
Array(SequenceableCollection)>>do:
DIDicto>>dictoBuild:
DIDicto>>dictoRun:
DIDicto>>dictoAll:
[ DIDicto new dictoAll: input ] in DIWebServiceAPI>>getRun
BlockClosure>>on:do:
DIWebServiceAPI>>getRun
DIWebServiceHandler>>post
DIWebServiceHandler(ZnRestCall)>>execute
[ call execute ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
BlockClosure>>on:do:
ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
[ self execute: call ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
BlockClosure>>on:do:
ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ :delegate | delegate handleRequest: request ] ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateRequest:do:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
[ self authenticateAndDelegateRequest: request ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
BlockClosure>>on:do:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequest:
ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeOneRequestResponseOn:
[ self executeOneRequestResponseOn: stream ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
[ 
p psValueAt: index put: anObject.
aBlock value ] in ZnCurrentServer(DynamicVariable)>>value:during:
BlockClosure>>ensure:
ZnCurrentServer(DynamicVariable)>>value:during:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
ZnCurrentServer class(DynamicVariable class)>>value:during:
ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
[ self executeRequestResponseLoopOn: stream ] in [ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ] in [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
BlockClosure>>ensure:
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ] in [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
BlockClosure>>ifCurtailed:
[ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Halt
24 February 2015 6:34:27.299387 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
NBCogit NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
https://github.com/pharo-project/pharo-vm.git Commit: 4a0d556150d478ff2de3c9624d2f18e6eaa3fa5c Date: 2014-12-18 18:42:53 +0100 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14893

Image: Pharo3.0 [Latest update: #30863]

DITestGroup>>build
	Receiver: a DITestGroup
	Arguments and temporary variables: 

	Receiver's instance variables: 
		rules: 	an OrderedCollection(Model cannot depend on Controller arDeleteGUI must ...etc...
		adapter: 	a DIPhpDependencies
		runCommandText: 	nil
		testSpecification: 	nil
		adapterID: 	'DIPhpDependencies'
		resultFile: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/DictoTestSuite/1...etc...
		specificationFile: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/DictoTest...etc...
		commandFile: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/DictoTestSuite/...etc...
		xmlOutput: 	nil
		rawOutput: 	nil


[ :testGroup | testGroup build ] in DIDicto>>dictoBuild:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'
Model = PhpClass with name:"*"
Controller = PhpClass with name:"*...etc...
		adapterTestGroups: 	a Dictionary(DIGrepFileContent->a DITestGroup DIJMeterLoadTe...etc...
		testGroup: 	a DITestGroup
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424799267'
		singleShotTask: 	false


Array(SequenceableCollection)>>do:
	Receiver: an Array(a DITestGroup a DITestGroup a DITestGroup a DITestGroup a DITestGroup)
	Arguments and temporary variables: 
		aBlock: 	[ :testGroup | testGroup build ]
		index: 	4
	Receiver's instance variables: 
an Array(a DITestGroup a DITestGroup a DITestGroup a DITestGroup a DITestGroup)

DIDicto>>dictoBuild:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'
Model = PhpClass with name:"*"
Controller = PhpClass with name:"*...etc...
		adapterTestGroups: 	a Dictionary(DIGrepFileContent->a DITestGroup DIJMeterLoadTe...etc...
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424799267'
		singleShotTask: 	false


DIDicto>>dictoRun:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'
Model = PhpClass with name:"*"
Controller = PhpClass with name:"*...etc...
		adapterTestGroups: 	nil
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424799267'
		singleShotTask: 	false


DIDicto>>dictoAll:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'
Model = PhpClass with name:"*"
Controller = PhpClass with name:"*...etc...
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424799267'
		singleShotTask: 	false


DIPHPTests(DIDSLTests)>>runAndReturnObjWithText:andSuccessResults:onProject:
	Receiver: DIPHPTests
	Arguments and temporary variables: 
		dslText: 	'
Model = PhpClass with name:"*"
Controller = PhpClass with name:"*GUI...etc...
		res: 	#(false true false)
		project: 	'TestProjectPhp'
		dicto: 	a DIDicto
	Receiver's instance variables: 
		testSelector: 	nil
		expectedFails: 	nil


DIPHPTests class>>DoIt
	Receiver: DIPHPTests
	Arguments and temporary variables: 
		dsl: 	'
Model = PhpClass with name:"*"
Controller = PhpClass with name:"*GUI"

a...etc...
		success: 	#(false true false)
		test: 	DIPHPTests
	Receiver's instance variables: 
		superclass: 	DIDSLTests
		methodDict: 	a MethodDictionary(#testPhp->DIPHPTests>>#testPhp )
		format: 	134
		layout: 	a FixedLayout
		instanceVariables: 	#()
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#DIPHPTests
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Dicto-var-tests'
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set(#testP...etc...


CompiledMethod>>valueWithReceiver:arguments:
	Receiver: DIPHPTests class>>#DoIt
	Arguments and temporary variables: 
		aReceiver: 	DIPHPTests
		anArray: 	#()
	Receiver's instance variables: 
DIPHPTests class>>#DoIt

[ v := compiledMethod valueWithReceiver: receiver arguments: #() ] in SmalltalkEditor>>tallySelection
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		receiver: 	DIPHPTests
		context: 	nil
		compiledMethod: 	DIPHPTests class>>#DoIt
		profiler: 	nil
		v: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(509870080)
		selectionShowing: 	true
		model: 	a PackageTreeNautilusUI
		editingState: 	a SmalltalkEditingState


BlockClosure>>ensure:
	Receiver: [ v := compiledMethod valueWithReceiver: receiver arguments: #() ]
	Arguments and temporary variables: 
		aBlock: 	[ 
"cancel the probe and return the value"
"Could have already been ter...etc...
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor>>tallySelection
		startpc: 	105
		numArgs: 	0


MessageTally>>spyEvery:on:
	Receiver: nil(SmalltalkEditor) >> tallySelection
	Arguments and temporary variables: 
		observedProcess: 	a Process in nil
		millisecs: 	1
		aBlock: 	[ v := compiledMethod valueWithReceiver: receiver arguments: #() ]
		myDelay: 	a Delay(1 msecs; 1 msecs remaining)
		time0: 	1623804
	Receiver's instance variables: 
		class: 	SmalltalkEditor
		method: 	SmalltalkEditor>>#tallySelection
		process: 	nil
		tally: 	70
		receivers: 	an Array(nil(CompiledMethod) >> valueWithReceiver:arguments: nil(DID...etc...
		senders: 	nil
		time: 	0
		gcStats: 	#(64315036 64905340 70732756 nil nil 2000 3 264 6012 3070 138 0 0 0 0 ...etc...
		maxClassNameSize: 	1000
		maxClassPlusSelectorSize: 	1000
		maxTabs: 	100
		reportOtherProcesses: 	true


TimeProfiler>>runBlock:pollingEvery:
	Receiver: a TimeProfiler
	Arguments and temporary variables: 
		aBlock: 	[ v := compiledMethod valueWithReceiver: receiver arguments: #() ]
		pollPeriod: 	1
	Receiver's instance variables: 
		dependents: 	nil
		selection: 	nil
		announcer: 	nil
		rootItems: 	nil
		autoMultiSelection: 	nil
		headerLabel: 	nil
		multiSelection: 	nil
		wrapBlockOrSelector: 	nil
		isCheckList: 	nil
		enabled: 	nil
		win: 	nil
		rootMessageTally: 	nil(SmalltalkEditor) >> tallySelection
		threshold: 	nil
		minPercentageToExpand: 	nil
		treeMorph: 	nil
		block: 	[ v := compiledMethod valueWithReceiver: receiver arguments: #() ]
		blockCodePane: 	nil
		withBlockCodePane: 	false
		blockSource: 	nil
		reportOtherProcesses: 	nil
		showLeavesOnly: 	nil
		codeTabPane: 	nil
		resultPane: 	nil
		result: 	nil
		withToolBar: 	false


TimeProfiler>>openOnBlock:
	Receiver: a TimeProfiler
	Arguments and temporary variables: 
		aBlock: 	[ v := compiledMethod valueWithReceiver: receiver arguments: #() ]
	Receiver's instance variables: 
		dependents: 	nil
		selection: 	nil
		announcer: 	nil
		rootItems: 	nil
		autoMultiSelection: 	nil
		headerLabel: 	nil
		multiSelection: 	nil
		wrapBlockOrSelector: 	nil
		isCheckList: 	nil
		enabled: 	nil
		win: 	nil
		rootMessageTally: 	nil(SmalltalkEditor) >> tallySelection
		threshold: 	nil
		minPercentageToExpand: 	nil
		treeMorph: 	nil
		block: 	[ v := compiledMethod valueWithReceiver: receiver arguments: #() ]
		blockCodePane: 	nil
		withBlockCodePane: 	false
		blockSource: 	nil
		reportOtherProcesses: 	nil
		showLeavesOnly: 	nil
		codeTabPane: 	nil
		resultPane: 	nil
		result: 	nil
		withToolBar: 	false


TimeProfiler class>>spyOn:
	Receiver: TimeProfiler
	Arguments and temporary variables: 
		aBlock: 	[ v := compiledMethod valueWithReceiver: receiver arguments: #() ]
	Receiver's instance variables: 
		superclass: 	MorphTreeModel
		methodDict: 	a MethodDictionary(#blockCode->TimeProfiler>>#blockCode #blockCode:...etc...
		format: 	180
		layout: 	a FixedLayout
		instanceVariables: 	#(#win #rootMessageTally #threshold #minPercentageToExpand #...etc...
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#TimeProfiler
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Tools-Profilers'
		traitComposition: 	{}
		localSelectors: 	nil


SmalltalkEditor>>tallySelection
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		v: 	nil
		receiver: 	DIPHPTests
		context: 	nil
		compiledMethod: 	DIPHPTests class>>#DoIt
		profiler: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(509870080)
		selectionShowing: 	true
		model: 	a PackageTreeNautilusUI
		editingState: 	a SmalltalkEditingState


SmalltalkEditor>>tallyIt
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 

	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(509870080)
		selectionShowing: 	true
		model: 	a PackageTreeNautilusUI
		editingState: 	a SmalltalkEditingState


[ textMorph editor tallyIt ] in PluggableTextMorphWithLimits(PluggableTextMorph)>>tallyIt
	Receiver: a PluggableTextMorphWithLimits(303038464)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(30.0@455.0) corner: (876.0@849.0)
		owner: 	a MultipleMethodsEditor(286261248)
		submorphs: 	an Array(an AlphaImageMorph(499908608) a TransformMorph(735313920))
		fullBounds: 	(30@455) corner: (876@849)
		color: 	Color white
		extension: 	a MorphExtension (488636416) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.784 g: 0.784 b: 0.784 alpha: 1.0)
		model: 	a PackageTreeNautilusUI
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(344719360)
		scroller: 	a TransformMorph(735313920)
		getMenuSelector: 	#sourceCodeMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(65273856)
		textMorph: 	a TextMorphForEditView(509870080)
		getTextSelector: 	#sourceCodeFrom:
		setTextSelector: 	#compileSource:notifying:
		getSelectionSelector: 	#contentsSelectionFrom:
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(9 to: 475)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil
		doubleClickSelector: 	nil
		setSelectionSelector: 	nil
		alertLimit: 	700
		locked: 	false
		warningLimit: 	350
		method: 	nil
		lockIcon: 	an AlphaImageMorph(499908608)
		canLockChangeSelector: 	#canChangeLockFor:
		lockSelector: 	#lockTextArea:from:


[ result := editBlock value ] in PluggableTextMorphWithLimits(PluggableTextMorph)>>handleEdit:
	Receiver: a PluggableTextMorphWithLimits(303038464)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph editor tallyIt ]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(30.0@455.0) corner: (876.0@849.0)
		owner: 	a MultipleMethodsEditor(286261248)
		submorphs: 	an Array(an AlphaImageMorph(499908608) a TransformMorph(735313920))
		fullBounds: 	(30@455) corner: (876@849)
		color: 	Color white
		extension: 	a MorphExtension (488636416) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.784 g: 0.784 b: 0.784 alpha: 1.0)
		model: 	a PackageTreeNautilusUI
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(344719360)
		scroller: 	a TransformMorph(735313920)
		getMenuSelector: 	#sourceCodeMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(65273856)
		textMorph: 	a TextMorphForEditView(509870080)
		getTextSelector: 	#sourceCodeFrom:
		setTextSelector: 	#compileSource:notifying:
		getSelectionSelector: 	#contentsSelectionFrom:
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(9 to: 475)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil
		doubleClickSelector: 	nil
		setSelectionSelector: 	nil
		alertLimit: 	700
		locked: 	false
		warningLimit: 	350
		method: 	nil
		lockIcon: 	an AlphaImageMorph(499908608)
		canLockChangeSelector: 	#canChangeLockFor:
		lockSelector: 	#lockTextArea:from:


TextMorphForEditView(TextMorph)>>handleEdit:
	Receiver: a TextMorphForEditView(509870080)
	Arguments and temporary variables: 
		editBlock: 	[ result := editBlock value ]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (838@344)
		owner: 	a TransformMorph(735313920)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (838@344)
		color: 	Color black
		extension: 	a MorphExtension (552599552) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Source Code Pro
		text: 	a Text for 'testPhp
| dsl success test|
	
dsl := ''
Model = PhpClass with...etc...
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		defaultColor: 	Color black
		editView: 	a PluggableTextMorphWithLimits(303038464)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


PluggableTextMorphWithLimits(PluggableTextMorph)>>handleEdit:
	Receiver: a PluggableTextMorphWithLimits(303038464)
	Arguments and temporary variables: 
		result: 	nil
		editBlock: 	[ textMorph editor tallyIt ]
	Receiver's instance variables: 
		bounds: 	(30.0@455.0) corner: (876.0@849.0)
		owner: 	a MultipleMethodsEditor(286261248)
		submorphs: 	an Array(an AlphaImageMorph(499908608) a TransformMorph(735313920))
		fullBounds: 	(30@455) corner: (876@849)
		color: 	Color white
		extension: 	a MorphExtension (488636416) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.784 g: 0.784 b: 0.784 alpha: 1.0)
		model: 	a PackageTreeNautilusUI
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(344719360)
		scroller: 	a TransformMorph(735313920)
		getMenuSelector: 	#sourceCodeMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(65273856)
		textMorph: 	a TextMorphForEditView(509870080)
		getTextSelector: 	#sourceCodeFrom:
		setTextSelector: 	#compileSource:notifying:
		getSelectionSelector: 	#contentsSelectionFrom:
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(9 to: 475)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil
		doubleClickSelector: 	nil
		setSelectionSelector: 	nil
		alertLimit: 	700
		locked: 	false
		warningLimit: 	350
		method: 	nil
		lockIcon: 	an AlphaImageMorph(499908608)
		canLockChangeSelector: 	#canChangeLockFor:
		lockSelector: 	#lockTextArea:from:


PluggableTextMorphWithLimits(PluggableTextMorph)>>tallyIt
	Receiver: a PluggableTextMorphWithLimits(303038464)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(30.0@455.0) corner: (876.0@849.0)
		owner: 	a MultipleMethodsEditor(286261248)
		submorphs: 	an Array(an AlphaImageMorph(499908608) a TransformMorph(735313920))
		fullBounds: 	(30@455) corner: (876@849)
		color: 	Color white
		extension: 	a MorphExtension (488636416) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.784 g: 0.784 b: 0.784 alpha: 1.0)
		model: 	a PackageTreeNautilusUI
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(344719360)
		scroller: 	a TransformMorph(735313920)
		getMenuSelector: 	#sourceCodeMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(65273856)
		textMorph: 	a TextMorphForEditView(509870080)
		getTextSelector: 	#sourceCodeFrom:
		setTextSelector: 	#compileSource:notifying:
		getSelectionSelector: 	#contentsSelectionFrom:
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(9 to: 475)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil
		doubleClickSelector: 	nil
		setSelectionSelector: 	nil
		alertLimit: 	700
		locked: 	false
		warningLimit: 	350
		method: 	nil
		lockIcon: 	an AlphaImageMorph(499908608)
		canLockChangeSelector: 	#canChangeLockFor:
		lockSelector: 	#lockTextArea:from:


PackageTreeNautilusUI(Object)>>perform:orSendTo:
	Receiver: a PackageTreeNautilusUI
	Arguments and temporary variables: 
		selector: 	#tallyIt
		otherTarget: 	a PluggableTextMorphWithLimits(303038464)
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a CategoryWidget a MethodWidget a NautilusWindow(...etc...
		model: 	a PackageTreeNautilus
		window: 	a NautilusWindow(542638080)
		hierarchyClass: 	DITestGroup
		cachedHierarchy: 	a SortHierarchically
		sourceTextArea: 	a PluggableTextMorphWithLimits(303038464)
		groupsSelection: 	a Dictionary()
		packagesSelection: 	a Dictionary(var-tests->true )
		classesSelection: 	a Dictionary(DIPHPTests->true )
		list: 	a MorphTreeMorph(273940480)
		list2: 	a PluggableIconListMorph(454295552)
		sourceCodePanel: 	a PanelMorph(183500800)
		commentTextArea: 	nil
		currentDisplayChoice: 	#SourceCode
		sourceTextAreaLimit: 	350
		sourceCodeContainer: 	a PanelMorph(584843264)
		list2Elements: 	{DIDSLTests. DIJavaTests. DIPHPTests. DISTTests}
		listElements: 	nil
		shouldUpdateTitle: 	true
		testSemaphore: 	a Semaphore()
		sourceTextAreas: 	an OrderedCollection(a PluggableTextMorphWithLimits(303038464)...etc...
		multipleMethodsEditor: 	a MultipleMethodsEditor(286261248)
		contentSelection: 	nil
		acceptor: 	a MethodDefinitionAcceptor
		classifier: 	a MethodClassifier
		categoryWidget: 	a CategoryWidget
		methodWidget: 	a MethodWidget
		packagePattern: 	a RxMatcher
		searchWidget: 	a SearchMorph(866648064)


[ 
| selArgCount |
"show cursor in case item opens a new MVC window"
(selArgCount := selector numArgs) = 0
	ifTrue: [ target perform: selector ]
	ifFalse: [ 
		selArgCount = arguments size
			ifTrue: [ target perform: selector withArguments: arguments ]
			ifFalse: [ target perform: selector withArguments: (arguments copyWith: evt) ] ].
self changed ] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(120324096)'Profile it'
	Arguments and temporary variables: 
		evt: 	[(295@584) mouseUp 1623782 nil]
		w: 	a WorldMorph(511705088) [world]
		selArgCount: 	2
	Receiver's instance variables: 
		bounds: 	(237.0@576.0) corner: (408.0@594.0)
		owner: 	a MenuMorph(306184192)
		submorphs: 	#()
		fullBounds: 	(237.0@576.0) corner: (408.0@594.0)
		color: 	Color black
		extension: 	a MorphExtension (155713536)
		font: 	a LogicalFont
 familyName: Source Sans Pro
 emphasis: nil
 pointSize: 10
...etc...
		emphasis: 	0
		contents: 	'Profile it'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a PackageTreeNautilusUI
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#tallyIt a PluggableTextMorphWithLimits(303038464))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


BlockClosure>>ensure:
	Receiver: [ 
| selArgCount |
"show cursor in case item opens a new MVC window"
(selArgCount := selec...etc...
	Arguments and temporary variables: 
		aBlock: 	[ oldcursor show ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
		startpc: 	134
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r100000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[ 
| selArgCount |
"show cursor in case item opens a new MVC window"
(s...etc...
		oldcursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	(-1@ -1)
		maskForm: 	Form(16x16x1)


ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(120324096)'Profile it'
	Arguments and temporary variables: 
		evt: 	[(295@584) mouseUp 1623782 nil]
		w: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		bounds: 	(237.0@576.0) corner: (408.0@594.0)
		owner: 	a MenuMorph(306184192)
		submorphs: 	#()
		fullBounds: 	(237.0@576.0) corner: (408.0@594.0)
		color: 	Color black
		extension: 	a MorphExtension (155713536)
		font: 	a LogicalFont
 familyName: Source Sans Pro
 emphasis: nil
 pointSize: 10
...etc...
		emphasis: 	0
		contents: 	'Profile it'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a PackageTreeNautilusUI
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#tallyIt a PluggableTextMorphWithLimits(303038464))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
	Receiver: a ToggleMenuItemMorph(120324096)'Profile it'
	Arguments and temporary variables: 
		evt: 	[(295@584) mouseUp 1623782 nil]
	Receiver's instance variables: 
		bounds: 	(237.0@576.0) corner: (408.0@594.0)
		owner: 	a MenuMorph(306184192)
		submorphs: 	#()
		fullBounds: 	(237.0@576.0) corner: (408.0@594.0)
		color: 	Color black
		extension: 	a MorphExtension (155713536)
		font: 	a LogicalFont
 familyName: Source Sans Pro
 emphasis: nil
 pointSize: 10
...etc...
		emphasis: 	0
		contents: 	'Profile it'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a PackageTreeNautilusUI
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#tallyIt a PluggableTextMorphWithLimits(303038464))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
	Receiver: a ToggleMenuItemMorph(120324096)'Profile it'
	Arguments and temporary variables: 
		anEvent: 	[(295@584) mouseUp 1623782 nil]
	Receiver's instance variables: 
		bounds: 	(237.0@576.0) corner: (408.0@594.0)
		owner: 	a MenuMorph(306184192)
		submorphs: 	#()
		fullBounds: 	(237.0@576.0) corner: (408.0@594.0)
		color: 	Color black
		extension: 	a MorphExtension (155713536)
		font: 	a LogicalFont
 familyName: Source Sans Pro
 emphasis: nil
 pointSize: 10
...etc...
		emphasis: 	0
		contents: 	'Profile it'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a PackageTreeNautilusUI
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#tallyIt a PluggableTextMorphWithLimits(303038464))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [(295@584) mouseUp 1623782 nil]
	Arguments and temporary variables: 
		anObject: 	a ToggleMenuItemMorph(120324096)'Profile it'
	Receiver's instance variables: 
		timeStamp: 	1623782
		source: 	a HandMorph(760479744)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(295@584)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


ToggleMenuItemMorph(Morph)>>handleEvent:
	Receiver: a ToggleMenuItemMorph(120324096)'Profile it'
	Arguments and temporary variables: 
		anEvent: 	[(295@584) mouseUp 1623782 nil]
	Receiver's instance variables: 
		bounds: 	(237.0@576.0) corner: (408.0@594.0)
		owner: 	a MenuMorph(306184192)
		submorphs: 	#()
		fullBounds: 	(237.0@576.0) corner: (408.0@594.0)
		color: 	Color black
		extension: 	a MorphExtension (155713536)
		font: 	a LogicalFont
 familyName: Source Sans Pro
 emphasis: nil
 pointSize: 10
...etc...
		emphasis: 	0
		contents: 	'Profile it'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a PackageTreeNautilusUI
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#tallyIt a PluggableTextMorphWithLimits(303038464))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(295@584) mouseUp 1623782 nil]
		aMorph: 	a ToggleMenuItemMorph(120324096)'Profile it'
		localEvt: 	nil
		index: 	1
		child: 	nil
		morphs: 	#()
		inside: 	true
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(295@584) mouseUp 1623782 nil]
		aMorph: 	a ToggleMenuItemMorph(120324096)'Profile it'
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


ToggleMenuItemMorph(Morph)>>processEvent:using:
	Receiver: a ToggleMenuItemMorph(120324096)'Profile it'
	Arguments and temporary variables: 
		anEvent: 	[(295@584) mouseUp 1623782 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	(237.0@576.0) corner: (408.0@594.0)
		owner: 	a MenuMorph(306184192)
		submorphs: 	#()
		fullBounds: 	(237.0@576.0) corner: (408.0@594.0)
		color: 	Color black
		extension: 	a MorphExtension (155713536)
		font: 	a LogicalFont
 familyName: Source Sans Pro
 emphasis: nil
 pointSize: 10
...etc...
		emphasis: 	0
		contents: 	'Profile it'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a PackageTreeNautilusUI
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#tallyIt a PluggableTextMorphWithLimits(303038464))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(295@584) mouseUp 1623782 nil]
		aMorph: 	a MenuMorph(306184192)
		localEvt: 	[(295@584) mouseUp 1623782 nil]
		index: 	11
		child: 	a ToggleMenuItemMorph(120324096)'Profile it'
		morphs: 	an Array(a ToggleMenuItemMorph(894959616)'Suggestions' a MenuLineMorph(...etc...
		inside: 	false
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(295@584) mouseUp 1623782 nil]
		aMorph: 	a MenuMorph(306184192)
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MenuMorph(Morph)>>processEvent:using:
	Receiver: a MenuMorph(306184192)
	Arguments and temporary variables: 
		anEvent: 	[(295@584) mouseUp 1623782 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	(232.0@416.0) corner: (413.0@858.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(894959616)'Suggestions' a MenuLineMor...etc...
		fullBounds: 	(232.0@416.0) corner: (413.0@858.0)
		color: 	(Color r: 0.894 g: 0.894 b: 0.894 alpha: 1.0)
		extension: 	a MorphExtension (347602944) [other:  (basicColor -> (Color r: 0.823...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.674 g: 0.674 b: 0.674 alpha: 1.0)
		defaultTarget: 	a PackageTreeNautilusUI
		selectedItem: 	a ToggleMenuItemMorph(120324096)'Profile it'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(894959616)'Suggestions' a...etc...


MenuMorph(Morph)>>processEvent:
	Receiver: a MenuMorph(306184192)
	Arguments and temporary variables: 
		anEvent: 	[(295@584) mouseUp 1623782 nil]
	Receiver's instance variables: 
		bounds: 	(232.0@416.0) corner: (413.0@858.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(894959616)'Suggestions' a MenuLineMor...etc...
		fullBounds: 	(232.0@416.0) corner: (413.0@858.0)
		color: 	(Color r: 0.894 g: 0.894 b: 0.894 alpha: 1.0)
		extension: 	a MorphExtension (347602944) [other:  (basicColor -> (Color r: 0.823...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.674 g: 0.674 b: 0.674 alpha: 1.0)
		defaultTarget: 	a PackageTreeNautilusUI
		selectedItem: 	a ToggleMenuItemMorph(120324096)'Profile it'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(894959616)'Suggestions' a...etc...


MenuMorph>>handleFocusEvent:
	Receiver: a MenuMorph(306184192)
	Arguments and temporary variables: 
		evt: 	[(295@584) mouseUp 1623782 nil]
	Receiver's instance variables: 
		bounds: 	(232.0@416.0) corner: (413.0@858.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(894959616)'Suggestions' a MenuLineMor...etc...
		fullBounds: 	(232.0@416.0) corner: (413.0@858.0)
		color: 	(Color r: 0.894 g: 0.894 b: 0.894 alpha: 1.0)
		extension: 	a MorphExtension (347602944) [other:  (basicColor -> (Color r: 0.823...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.674 g: 0.674 b: 0.674 alpha: 1.0)
		defaultTarget: 	a PackageTreeNautilusUI
		selectedItem: 	a ToggleMenuItemMorph(120324096)'Profile it'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(894959616)'Suggestions' a...etc...



--- The full stack ---
DITestGroup>>build
[ :testGroup | testGroup build ] in DIDicto>>dictoBuild:
Array(SequenceableCollection)>>do:
DIDicto>>dictoBuild:
DIDicto>>dictoRun:
DIDicto>>dictoAll:
DIPHPTests(DIDSLTests)>>runAndReturnObjWithText:andSuccessResults:onProject:
DIPHPTests class>>DoIt
CompiledMethod>>valueWithReceiver:arguments:
[ v := compiledMethod valueWithReceiver: receiver arguments: #() ] in SmalltalkEditor>>tallySelection
BlockClosure>>ensure:
MessageTally>>spyEvery:on:
TimeProfiler>>runBlock:pollingEvery:
TimeProfiler>>openOnBlock:
TimeProfiler class>>spyOn:
SmalltalkEditor>>tallySelection
SmalltalkEditor>>tallyIt
[ textMorph editor tallyIt ] in PluggableTextMorphWithLimits(PluggableTextMorph)>>tallyIt
[ result := editBlock value ] in PluggableTextMorphWithLimits(PluggableTextMorph)>>handleEdit:
TextMorphForEditView(TextMorph)>>handleEdit:
PluggableTextMorphWithLimits(PluggableTextMorph)>>handleEdit:
PluggableTextMorphWithLimits(PluggableTextMorph)>>tallyIt
PackageTreeNautilusUI(Object)>>perform:orSendTo:
[ 
| selArgCount |
"show cursor in case item opens a new MVC window"
(selArgCount := selector numArgs) = 0
	ifTrue: [ target perform: selector ]
	ifFalse: [ 
		selArgCount = arguments size
			ifTrue: [ target perform: selector withArguments: arguments ]
			ifFalse: [ target perform: selector withArguments: (arguments copyWith: evt) ] ].
self changed ] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
ToggleMenuItemMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
ToggleMenuItemMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
MenuMorph(Morph)>>processEvent:using:
MenuMorph(Morph)>>processEvent:
MenuMorph>>handleFocusEvent:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldState>>doOneSubCycleFor:
WorldMorph>>doOneSubCycle
MenuMorph>>invokeModalAt:in:allowKeyboard:
MenuMorph>>invokeModal:
MenuMorph>>invokeModal
PluggableTextMorphWithLimits(PluggableTextMorph)>>yellowButtonActivity:
SmalltalkEditor(TextEditor)>>mouseUp:
[ editor mouseUp: evt ] in TextMorphForEditView(TextMorph)>>mouseUp:
TextMorphForEditView(TextMorph)>>handleInteraction:
TextMorphForEditView>>handleInteraction:
TextMorphForEditView(TextMorph)>>mouseUp:
TextMorphForEditView>>mouseUp:
TextMorphForEditView(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
TextMorphForEditView(Morph)>>handleEvent:
TextMorphForEditView(Morph)>>handleFocusEvent:
[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ 
World doOneCycle.
Processor yield.
false ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Halt
24 February 2015 6:34:40.730374 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
NBCogit NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
https://github.com/pharo-project/pharo-vm.git Commit: 4a0d556150d478ff2de3c9624d2f18e6eaa3fa5c Date: 2014-12-18 18:42:53 +0100 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14893

Image: Pharo3.0 [Latest update: #30863]

DITestGroup>>build
	Receiver: a DITestGroup
	Arguments and temporary variables: 

	Receiver's instance variables: 
		rules: 	an OrderedCollection(Model cannot depend on Controller arDeleteGUI must ...etc...
		adapter: 	a DIPhpDependencies
		runCommandText: 	nil
		testSpecification: 	'[{ "subject" : "implode",
	   "argument": "ilDateTimeInputG...etc...
		adapterID: 	'DIPhpDependencies'
		resultFile: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/DictoTestSuite/1...etc...
		specificationFile: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/DictoTest...etc...
		commandFile: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/DictoTestSuite/...etc...
		xmlOutput: 	nil
		rawOutput: 	nil


[ :testGroup | testGroup build ] in DIDicto>>dictoBuild:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'
Model = PhpClass with name:"*"
Controller = PhpClass with name:"*...etc...
		adapterTestGroups: 	a Dictionary(DIGrepFileContent->a DITestGroup DIJMeterLoadTe...etc...
		testGroup: 	a DITestGroup
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424799267'
		singleShotTask: 	false


Array(SequenceableCollection)>>do:
	Receiver: an Array(a DITestGroup a DITestGroup a DITestGroup a DITestGroup a DITestGroup)
	Arguments and temporary variables: 
		aBlock: 	[ :testGroup | testGroup build ]
		index: 	4
	Receiver's instance variables: 
an Array(a DITestGroup a DITestGroup a DITestGroup a DITestGroup a DITestGroup)

DIDicto>>dictoBuild:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'
Model = PhpClass with name:"*"
Controller = PhpClass with name:"*...etc...
		adapterTestGroups: 	a Dictionary(DIGrepFileContent->a DITestGroup DIJMeterLoadTe...etc...
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424799267'
		singleShotTask: 	false


DIDicto>>dictoRun:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'
Model = PhpClass with name:"*"
Controller = PhpClass with name:"*...etc...
		adapterTestGroups: 	nil
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424799267'
		singleShotTask: 	false


DIDicto>>dictoAll:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'
Model = PhpClass with name:"*"
Controller = PhpClass with name:"*...etc...
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424799267'
		singleShotTask: 	false


DIPHPTests(DIDSLTests)>>runAndReturnObjWithText:andSuccessResults:onProject:
	Receiver: DIPHPTests
	Arguments and temporary variables: 
		dslText: 	'
Model = PhpClass with name:"*"
Controller = PhpClass with name:"*GUI...etc...
		res: 	#(false true false)
		project: 	'TestProjectPhp'
		dicto: 	a DIDicto
	Receiver's instance variables: 
		testSelector: 	nil
		expectedFails: 	nil


DIPHPTests class>>DoIt
	Receiver: DIPHPTests
	Arguments and temporary variables: 
		dsl: 	'
Model = PhpClass with name:"*"
Controller = PhpClass with name:"*GUI"

a...etc...
		success: 	#(false true false)
		test: 	DIPHPTests
	Receiver's instance variables: 
		superclass: 	DIDSLTests
		methodDict: 	a MethodDictionary(#testPhp->DIPHPTests>>#testPhp )
		format: 	134
		layout: 	a FixedLayout
		instanceVariables: 	#()
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#DIPHPTests
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Dicto-var-tests'
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set(#testP...etc...


CompiledMethod>>valueWithReceiver:arguments:
	Receiver: DIPHPTests class>>#DoIt
	Arguments and temporary variables: 
		aReceiver: 	DIPHPTests
		anArray: 	#()
	Receiver's instance variables: 
DIPHPTests class>>#DoIt

[ v := compiledMethod valueWithReceiver: receiver arguments: #() ] in SmalltalkEditor>>tallySelection
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		receiver: 	DIPHPTests
		context: 	nil
		compiledMethod: 	DIPHPTests class>>#DoIt
		profiler: 	nil
		v: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(509870080)
		selectionShowing: 	true
		model: 	a PackageTreeNautilusUI
		editingState: 	a SmalltalkEditingState


BlockClosure>>ensure:
	Receiver: [ v := compiledMethod valueWithReceiver: receiver arguments: #() ]
	Arguments and temporary variables: 
		aBlock: 	[ 
"cancel the probe and return the value"
"Could have already been ter...etc...
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor>>tallySelection
		startpc: 	105
		numArgs: 	0


MessageTally>>spyEvery:on:
	Receiver: nil(SmalltalkEditor) >> tallySelection
	Arguments and temporary variables: 
		observedProcess: 	a Process in nil
		millisecs: 	1
		aBlock: 	[ v := compiledMethod valueWithReceiver: receiver arguments: #() ]
		myDelay: 	a Delay(1 msecs; 1 msecs remaining)
		time0: 	1623804
	Receiver's instance variables: 
		class: 	SmalltalkEditor
		method: 	SmalltalkEditor>>#tallySelection
		process: 	nil
		tally: 	13495
		receivers: 	an Array(nil(CompiledMethod) >> valueWithReceiver:arguments: nil(DID...etc...
		senders: 	nil
		time: 	0
		gcStats: 	#(64315036 64905340 70732756 nil nil 2000 3 264 6012 3070 138 0 0 0 0 ...etc...
		maxClassNameSize: 	1000
		maxClassPlusSelectorSize: 	1000
		maxTabs: 	100
		reportOtherProcesses: 	true


TimeProfiler>>runBlock:pollingEvery:
	Receiver: a TimeProfiler
	Arguments and temporary variables: 
		aBlock: 	[ v := compiledMethod valueWithReceiver: receiver arguments: #() ]
		pollPeriod: 	1
	Receiver's instance variables: 
		dependents: 	nil
		selection: 	nil
		announcer: 	nil
		rootItems: 	nil
		autoMultiSelection: 	nil
		headerLabel: 	nil
		multiSelection: 	nil
		wrapBlockOrSelector: 	nil
		isCheckList: 	nil
		enabled: 	nil
		win: 	nil
		rootMessageTally: 	nil(SmalltalkEditor) >> tallySelection
		threshold: 	nil
		minPercentageToExpand: 	nil
		treeMorph: 	nil
		block: 	[ v := compiledMethod valueWithReceiver: receiver arguments: #() ]
		blockCodePane: 	nil
		withBlockCodePane: 	false
		blockSource: 	nil
		reportOtherProcesses: 	nil
		showLeavesOnly: 	nil
		codeTabPane: 	nil
		resultPane: 	nil
		result: 	nil
		withToolBar: 	false


TimeProfiler>>openOnBlock:
	Receiver: a TimeProfiler
	Arguments and temporary variables: 
		aBlock: 	[ v := compiledMethod valueWithReceiver: receiver arguments: #() ]
	Receiver's instance variables: 
		dependents: 	nil
		selection: 	nil
		announcer: 	nil
		rootItems: 	nil
		autoMultiSelection: 	nil
		headerLabel: 	nil
		multiSelection: 	nil
		wrapBlockOrSelector: 	nil
		isCheckList: 	nil
		enabled: 	nil
		win: 	nil
		rootMessageTally: 	nil(SmalltalkEditor) >> tallySelection
		threshold: 	nil
		minPercentageToExpand: 	nil
		treeMorph: 	nil
		block: 	[ v := compiledMethod valueWithReceiver: receiver arguments: #() ]
		blockCodePane: 	nil
		withBlockCodePane: 	false
		blockSource: 	nil
		reportOtherProcesses: 	nil
		showLeavesOnly: 	nil
		codeTabPane: 	nil
		resultPane: 	nil
		result: 	nil
		withToolBar: 	false


TimeProfiler class>>spyOn:
	Receiver: TimeProfiler
	Arguments and temporary variables: 
		aBlock: 	[ v := compiledMethod valueWithReceiver: receiver arguments: #() ]
	Receiver's instance variables: 
		superclass: 	MorphTreeModel
		methodDict: 	a MethodDictionary(#blockCode->TimeProfiler>>#blockCode #blockCode:...etc...
		format: 	180
		layout: 	a FixedLayout
		instanceVariables: 	#(#win #rootMessageTally #threshold #minPercentageToExpand #...etc...
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#TimeProfiler
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Tools-Profilers'
		traitComposition: 	{}
		localSelectors: 	nil


SmalltalkEditor>>tallySelection
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		v: 	nil
		receiver: 	DIPHPTests
		context: 	nil
		compiledMethod: 	DIPHPTests class>>#DoIt
		profiler: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(509870080)
		selectionShowing: 	true
		model: 	a PackageTreeNautilusUI
		editingState: 	a SmalltalkEditingState


SmalltalkEditor>>tallyIt
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 

	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(509870080)
		selectionShowing: 	true
		model: 	a PackageTreeNautilusUI
		editingState: 	a SmalltalkEditingState


[ textMorph editor tallyIt ] in PluggableTextMorphWithLimits(PluggableTextMorph)>>tallyIt
	Receiver: a PluggableTextMorphWithLimits(303038464)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(30.0@455.0) corner: (876.0@849.0)
		owner: 	a MultipleMethodsEditor(286261248)
		submorphs: 	an Array(an AlphaImageMorph(499908608) a TransformMorph(735313920))
		fullBounds: 	(30@455) corner: (876@849)
		color: 	Color white
		extension: 	a MorphExtension (488636416) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.784 g: 0.784 b: 0.784 alpha: 1.0)
		model: 	a PackageTreeNautilusUI
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(344719360)
		scroller: 	a TransformMorph(735313920)
		getMenuSelector: 	#sourceCodeMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(65273856)
		textMorph: 	a TextMorphForEditView(509870080)
		getTextSelector: 	#sourceCodeFrom:
		setTextSelector: 	#compileSource:notifying:
		getSelectionSelector: 	#contentsSelectionFrom:
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(9 to: 475)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil
		doubleClickSelector: 	nil
		setSelectionSelector: 	nil
		alertLimit: 	700
		locked: 	false
		warningLimit: 	350
		method: 	nil
		lockIcon: 	an AlphaImageMorph(499908608)
		canLockChangeSelector: 	#canChangeLockFor:
		lockSelector: 	#lockTextArea:from:


[ result := editBlock value ] in PluggableTextMorphWithLimits(PluggableTextMorph)>>handleEdit:
	Receiver: a PluggableTextMorphWithLimits(303038464)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph editor tallyIt ]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(30.0@455.0) corner: (876.0@849.0)
		owner: 	a MultipleMethodsEditor(286261248)
		submorphs: 	an Array(an AlphaImageMorph(499908608) a TransformMorph(735313920))
		fullBounds: 	(30@455) corner: (876@849)
		color: 	Color white
		extension: 	a MorphExtension (488636416) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.784 g: 0.784 b: 0.784 alpha: 1.0)
		model: 	a PackageTreeNautilusUI
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(344719360)
		scroller: 	a TransformMorph(735313920)
		getMenuSelector: 	#sourceCodeMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(65273856)
		textMorph: 	a TextMorphForEditView(509870080)
		getTextSelector: 	#sourceCodeFrom:
		setTextSelector: 	#compileSource:notifying:
		getSelectionSelector: 	#contentsSelectionFrom:
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(9 to: 475)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil
		doubleClickSelector: 	nil
		setSelectionSelector: 	nil
		alertLimit: 	700
		locked: 	false
		warningLimit: 	350
		method: 	nil
		lockIcon: 	an AlphaImageMorph(499908608)
		canLockChangeSelector: 	#canChangeLockFor:
		lockSelector: 	#lockTextArea:from:


TextMorphForEditView(TextMorph)>>handleEdit:
	Receiver: a TextMorphForEditView(509870080)
	Arguments and temporary variables: 
		editBlock: 	[ result := editBlock value ]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (838@344)
		owner: 	a TransformMorph(735313920)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (838@344)
		color: 	Color black
		extension: 	a MorphExtension (552599552) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Source Code Pro
		text: 	a Text for 'testPhp
| dsl success test|
	
dsl := ''
Model = PhpClass with...etc...
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		defaultColor: 	Color black
		editView: 	a PluggableTextMorphWithLimits(303038464)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


PluggableTextMorphWithLimits(PluggableTextMorph)>>handleEdit:
	Receiver: a PluggableTextMorphWithLimits(303038464)
	Arguments and temporary variables: 
		result: 	nil
		editBlock: 	[ textMorph editor tallyIt ]
	Receiver's instance variables: 
		bounds: 	(30.0@455.0) corner: (876.0@849.0)
		owner: 	a MultipleMethodsEditor(286261248)
		submorphs: 	an Array(an AlphaImageMorph(499908608) a TransformMorph(735313920))
		fullBounds: 	(30@455) corner: (876@849)
		color: 	Color white
		extension: 	a MorphExtension (488636416) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.784 g: 0.784 b: 0.784 alpha: 1.0)
		model: 	a PackageTreeNautilusUI
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(344719360)
		scroller: 	a TransformMorph(735313920)
		getMenuSelector: 	#sourceCodeMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(65273856)
		textMorph: 	a TextMorphForEditView(509870080)
		getTextSelector: 	#sourceCodeFrom:
		setTextSelector: 	#compileSource:notifying:
		getSelectionSelector: 	#contentsSelectionFrom:
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(9 to: 475)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil
		doubleClickSelector: 	nil
		setSelectionSelector: 	nil
		alertLimit: 	700
		locked: 	false
		warningLimit: 	350
		method: 	nil
		lockIcon: 	an AlphaImageMorph(499908608)
		canLockChangeSelector: 	#canChangeLockFor:
		lockSelector: 	#lockTextArea:from:


PluggableTextMorphWithLimits(PluggableTextMorph)>>tallyIt
	Receiver: a PluggableTextMorphWithLimits(303038464)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(30.0@455.0) corner: (876.0@849.0)
		owner: 	a MultipleMethodsEditor(286261248)
		submorphs: 	an Array(an AlphaImageMorph(499908608) a TransformMorph(735313920))
		fullBounds: 	(30@455) corner: (876@849)
		color: 	Color white
		extension: 	a MorphExtension (488636416) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.784 g: 0.784 b: 0.784 alpha: 1.0)
		model: 	a PackageTreeNautilusUI
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(344719360)
		scroller: 	a TransformMorph(735313920)
		getMenuSelector: 	#sourceCodeMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(65273856)
		textMorph: 	a TextMorphForEditView(509870080)
		getTextSelector: 	#sourceCodeFrom:
		setTextSelector: 	#compileSource:notifying:
		getSelectionSelector: 	#contentsSelectionFrom:
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(9 to: 475)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil
		doubleClickSelector: 	nil
		setSelectionSelector: 	nil
		alertLimit: 	700
		locked: 	false
		warningLimit: 	350
		method: 	nil
		lockIcon: 	an AlphaImageMorph(499908608)
		canLockChangeSelector: 	#canChangeLockFor:
		lockSelector: 	#lockTextArea:from:


PackageTreeNautilusUI(Object)>>perform:orSendTo:
	Receiver: a PackageTreeNautilusUI
	Arguments and temporary variables: 
		selector: 	#tallyIt
		otherTarget: 	a PluggableTextMorphWithLimits(303038464)
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a CategoryWidget a MethodWidget a NautilusWindow(...etc...
		model: 	a PackageTreeNautilus
		window: 	a NautilusWindow(542638080)
		hierarchyClass: 	DITestGroup
		cachedHierarchy: 	a SortHierarchically
		sourceTextArea: 	a PluggableTextMorphWithLimits(303038464)
		groupsSelection: 	a Dictionary()
		packagesSelection: 	a Dictionary(var-tests->true )
		classesSelection: 	a Dictionary(DIPHPTests->true )
		list: 	a MorphTreeMorph(273940480)
		list2: 	a PluggableIconListMorph(454295552)
		sourceCodePanel: 	a PanelMorph(183500800)
		commentTextArea: 	nil
		currentDisplayChoice: 	#SourceCode
		sourceTextAreaLimit: 	350
		sourceCodeContainer: 	a PanelMorph(584843264)
		list2Elements: 	{DIDSLTests. DIJavaTests. DIPHPTests. DISTTests}
		listElements: 	nil
		shouldUpdateTitle: 	true
		testSemaphore: 	a Semaphore()
		sourceTextAreas: 	an OrderedCollection(a PluggableTextMorphWithLimits(303038464)...etc...
		multipleMethodsEditor: 	a MultipleMethodsEditor(286261248)
		contentSelection: 	nil
		acceptor: 	a MethodDefinitionAcceptor
		classifier: 	a MethodClassifier
		categoryWidget: 	a CategoryWidget
		methodWidget: 	a MethodWidget
		packagePattern: 	a RxMatcher
		searchWidget: 	a SearchMorph(866648064)


[ 
| selArgCount |
"show cursor in case item opens a new MVC window"
(selArgCount := selector numArgs) = 0
	ifTrue: [ target perform: selector ]
	ifFalse: [ 
		selArgCount = arguments size
			ifTrue: [ target perform: selector withArguments: arguments ]
			ifFalse: [ target perform: selector withArguments: (arguments copyWith: evt) ] ].
self changed ] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(120324096)'Profile it'
	Arguments and temporary variables: 
		evt: 	[(295@584) mouseUp 1623782 nil]
		w: 	a WorldMorph(511705088) [world]
		selArgCount: 	2
	Receiver's instance variables: 
		bounds: 	(237.0@576.0) corner: (408.0@594.0)
		owner: 	a MenuMorph(306184192)
		submorphs: 	#()
		fullBounds: 	(237.0@576.0) corner: (408.0@594.0)
		color: 	Color black
		extension: 	a MorphExtension (155713536)
		font: 	a LogicalFont
 familyName: Source Sans Pro
 emphasis: nil
 pointSize: 10
...etc...
		emphasis: 	0
		contents: 	'Profile it'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a PackageTreeNautilusUI
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#tallyIt a PluggableTextMorphWithLimits(303038464))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


BlockClosure>>ensure:
	Receiver: [ 
| selArgCount |
"show cursor in case item opens a new MVC window"
(selArgCount := selec...etc...
	Arguments and temporary variables: 
		aBlock: 	[ oldcursor show ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
		startpc: 	134
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r100000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[ 
| selArgCount |
"show cursor in case item opens a new MVC window"
(s...etc...
		oldcursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	(-1@ -1)
		maskForm: 	Form(16x16x1)


ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(120324096)'Profile it'
	Arguments and temporary variables: 
		evt: 	[(295@584) mouseUp 1623782 nil]
		w: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		bounds: 	(237.0@576.0) corner: (408.0@594.0)
		owner: 	a MenuMorph(306184192)
		submorphs: 	#()
		fullBounds: 	(237.0@576.0) corner: (408.0@594.0)
		color: 	Color black
		extension: 	a MorphExtension (155713536)
		font: 	a LogicalFont
 familyName: Source Sans Pro
 emphasis: nil
 pointSize: 10
...etc...
		emphasis: 	0
		contents: 	'Profile it'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a PackageTreeNautilusUI
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#tallyIt a PluggableTextMorphWithLimits(303038464))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
	Receiver: a ToggleMenuItemMorph(120324096)'Profile it'
	Arguments and temporary variables: 
		evt: 	[(295@584) mouseUp 1623782 nil]
	Receiver's instance variables: 
		bounds: 	(237.0@576.0) corner: (408.0@594.0)
		owner: 	a MenuMorph(306184192)
		submorphs: 	#()
		fullBounds: 	(237.0@576.0) corner: (408.0@594.0)
		color: 	Color black
		extension: 	a MorphExtension (155713536)
		font: 	a LogicalFont
 familyName: Source Sans Pro
 emphasis: nil
 pointSize: 10
...etc...
		emphasis: 	0
		contents: 	'Profile it'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a PackageTreeNautilusUI
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#tallyIt a PluggableTextMorphWithLimits(303038464))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
	Receiver: a ToggleMenuItemMorph(120324096)'Profile it'
	Arguments and temporary variables: 
		anEvent: 	[(295@584) mouseUp 1623782 nil]
	Receiver's instance variables: 
		bounds: 	(237.0@576.0) corner: (408.0@594.0)
		owner: 	a MenuMorph(306184192)
		submorphs: 	#()
		fullBounds: 	(237.0@576.0) corner: (408.0@594.0)
		color: 	Color black
		extension: 	a MorphExtension (155713536)
		font: 	a LogicalFont
 familyName: Source Sans Pro
 emphasis: nil
 pointSize: 10
...etc...
		emphasis: 	0
		contents: 	'Profile it'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a PackageTreeNautilusUI
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#tallyIt a PluggableTextMorphWithLimits(303038464))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [(295@584) mouseUp 1623782 nil]
	Arguments and temporary variables: 
		anObject: 	a ToggleMenuItemMorph(120324096)'Profile it'
	Receiver's instance variables: 
		timeStamp: 	1623782
		source: 	a HandMorph(760479744)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(295@584)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


ToggleMenuItemMorph(Morph)>>handleEvent:
	Receiver: a ToggleMenuItemMorph(120324096)'Profile it'
	Arguments and temporary variables: 
		anEvent: 	[(295@584) mouseUp 1623782 nil]
	Receiver's instance variables: 
		bounds: 	(237.0@576.0) corner: (408.0@594.0)
		owner: 	a MenuMorph(306184192)
		submorphs: 	#()
		fullBounds: 	(237.0@576.0) corner: (408.0@594.0)
		color: 	Color black
		extension: 	a MorphExtension (155713536)
		font: 	a LogicalFont
 familyName: Source Sans Pro
 emphasis: nil
 pointSize: 10
...etc...
		emphasis: 	0
		contents: 	'Profile it'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a PackageTreeNautilusUI
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#tallyIt a PluggableTextMorphWithLimits(303038464))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(295@584) mouseUp 1623782 nil]
		aMorph: 	a ToggleMenuItemMorph(120324096)'Profile it'
		localEvt: 	nil
		index: 	1
		child: 	nil
		morphs: 	#()
		inside: 	true
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(295@584) mouseUp 1623782 nil]
		aMorph: 	a ToggleMenuItemMorph(120324096)'Profile it'
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


ToggleMenuItemMorph(Morph)>>processEvent:using:
	Receiver: a ToggleMenuItemMorph(120324096)'Profile it'
	Arguments and temporary variables: 
		anEvent: 	[(295@584) mouseUp 1623782 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	(237.0@576.0) corner: (408.0@594.0)
		owner: 	a MenuMorph(306184192)
		submorphs: 	#()
		fullBounds: 	(237.0@576.0) corner: (408.0@594.0)
		color: 	Color black
		extension: 	a MorphExtension (155713536)
		font: 	a LogicalFont
 familyName: Source Sans Pro
 emphasis: nil
 pointSize: 10
...etc...
		emphasis: 	0
		contents: 	'Profile it'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a PackageTreeNautilusUI
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#tallyIt a PluggableTextMorphWithLimits(303038464))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(295@584) mouseUp 1623782 nil]
		aMorph: 	a MenuMorph(306184192)
		localEvt: 	[(295@584) mouseUp 1623782 nil]
		index: 	11
		child: 	a ToggleMenuItemMorph(120324096)'Profile it'
		morphs: 	an Array(a ToggleMenuItemMorph(894959616)'Suggestions' a MenuLineMorph(...etc...
		inside: 	false
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(295@584) mouseUp 1623782 nil]
		aMorph: 	a MenuMorph(306184192)
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MenuMorph(Morph)>>processEvent:using:
	Receiver: a MenuMorph(306184192)
	Arguments and temporary variables: 
		anEvent: 	[(295@584) mouseUp 1623782 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	(232.0@416.0) corner: (413.0@858.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(894959616)'Suggestions' a MenuLineMor...etc...
		fullBounds: 	(232.0@416.0) corner: (413.0@858.0)
		color: 	(Color r: 0.894 g: 0.894 b: 0.894 alpha: 1.0)
		extension: 	a MorphExtension (347602944) [other:  (basicColor -> (Color r: 0.823...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.674 g: 0.674 b: 0.674 alpha: 1.0)
		defaultTarget: 	a PackageTreeNautilusUI
		selectedItem: 	a ToggleMenuItemMorph(120324096)'Profile it'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(894959616)'Suggestions' a...etc...


MenuMorph(Morph)>>processEvent:
	Receiver: a MenuMorph(306184192)
	Arguments and temporary variables: 
		anEvent: 	[(295@584) mouseUp 1623782 nil]
	Receiver's instance variables: 
		bounds: 	(232.0@416.0) corner: (413.0@858.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(894959616)'Suggestions' a MenuLineMor...etc...
		fullBounds: 	(232.0@416.0) corner: (413.0@858.0)
		color: 	(Color r: 0.894 g: 0.894 b: 0.894 alpha: 1.0)
		extension: 	a MorphExtension (347602944) [other:  (basicColor -> (Color r: 0.823...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.674 g: 0.674 b: 0.674 alpha: 1.0)
		defaultTarget: 	a PackageTreeNautilusUI
		selectedItem: 	a ToggleMenuItemMorph(120324096)'Profile it'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(894959616)'Suggestions' a...etc...


MenuMorph>>handleFocusEvent:
	Receiver: a MenuMorph(306184192)
	Arguments and temporary variables: 
		evt: 	[(295@584) mouseUp 1623782 nil]
	Receiver's instance variables: 
		bounds: 	(232.0@416.0) corner: (413.0@858.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(894959616)'Suggestions' a MenuLineMor...etc...
		fullBounds: 	(232.0@416.0) corner: (413.0@858.0)
		color: 	(Color r: 0.894 g: 0.894 b: 0.894 alpha: 1.0)
		extension: 	a MorphExtension (347602944) [other:  (basicColor -> (Color r: 0.823...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.674 g: 0.674 b: 0.674 alpha: 1.0)
		defaultTarget: 	a PackageTreeNautilusUI
		selectedItem: 	a ToggleMenuItemMorph(120324096)'Profile it'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(894959616)'Suggestions' a...etc...



--- The full stack ---
DITestGroup>>build
[ :testGroup | testGroup build ] in DIDicto>>dictoBuild:
Array(SequenceableCollection)>>do:
DIDicto>>dictoBuild:
DIDicto>>dictoRun:
DIDicto>>dictoAll:
DIPHPTests(DIDSLTests)>>runAndReturnObjWithText:andSuccessResults:onProject:
DIPHPTests class>>DoIt
CompiledMethod>>valueWithReceiver:arguments:
[ v := compiledMethod valueWithReceiver: receiver arguments: #() ] in SmalltalkEditor>>tallySelection
BlockClosure>>ensure:
MessageTally>>spyEvery:on:
TimeProfiler>>runBlock:pollingEvery:
TimeProfiler>>openOnBlock:
TimeProfiler class>>spyOn:
SmalltalkEditor>>tallySelection
SmalltalkEditor>>tallyIt
[ textMorph editor tallyIt ] in PluggableTextMorphWithLimits(PluggableTextMorph)>>tallyIt
[ result := editBlock value ] in PluggableTextMorphWithLimits(PluggableTextMorph)>>handleEdit:
TextMorphForEditView(TextMorph)>>handleEdit:
PluggableTextMorphWithLimits(PluggableTextMorph)>>handleEdit:
PluggableTextMorphWithLimits(PluggableTextMorph)>>tallyIt
PackageTreeNautilusUI(Object)>>perform:orSendTo:
[ 
| selArgCount |
"show cursor in case item opens a new MVC window"
(selArgCount := selector numArgs) = 0
	ifTrue: [ target perform: selector ]
	ifFalse: [ 
		selArgCount = arguments size
			ifTrue: [ target perform: selector withArguments: arguments ]
			ifFalse: [ target perform: selector withArguments: (arguments copyWith: evt) ] ].
self changed ] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
ToggleMenuItemMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
ToggleMenuItemMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
MenuMorph(Morph)>>processEvent:using:
MenuMorph(Morph)>>processEvent:
MenuMorph>>handleFocusEvent:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldState>>doOneSubCycleFor:
WorldMorph>>doOneSubCycle
MenuMorph>>invokeModalAt:in:allowKeyboard:
MenuMorph>>invokeModal:
MenuMorph>>invokeModal
PluggableTextMorphWithLimits(PluggableTextMorph)>>yellowButtonActivity:
SmalltalkEditor(TextEditor)>>mouseUp:
[ editor mouseUp: evt ] in TextMorphForEditView(TextMorph)>>mouseUp:
TextMorphForEditView(TextMorph)>>handleInteraction:
TextMorphForEditView>>handleInteraction:
TextMorphForEditView(TextMorph)>>mouseUp:
TextMorphForEditView>>mouseUp:
TextMorphForEditView(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
TextMorphForEditView(Morph)>>handleEvent:
TextMorphForEditView(Morph)>>handleFocusEvent:
[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ 
World doOneCycle.
Processor yield.
false ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Halt
24 February 2015 6:34:47.67134 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
NBCogit NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
https://github.com/pharo-project/pharo-vm.git Commit: 4a0d556150d478ff2de3c9624d2f18e6eaa3fa5c Date: 2014-12-18 18:42:53 +0100 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14893

Image: Pharo3.0 [Latest update: #30863]

DITestGroup>>build
	Receiver: a DITestGroup
	Arguments and temporary variables: 

	Receiver's instance variables: 
		rules: 	an OrderedCollection(Model cannot depend on Controller arDeleteGUI must ...etc...
		adapter: 	a DIPhpDependencies
		runCommandText: 	'#!/bin/bash
type -P hhvm &>/dev/null && hhvm $DICTO.TOOLDIR/ph...etc...
		testSpecification: 	'[{ "subject" : "implode",
	   "argument": "ilDateTimeInputG...etc...
		adapterID: 	'DIPhpDependencies'
		resultFile: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/DictoTestSuite/1...etc...
		specificationFile: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/DictoTest...etc...
		commandFile: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/DictoTestSuite/...etc...
		xmlOutput: 	nil
		rawOutput: 	nil


[ :testGroup | testGroup build ] in DIDicto>>dictoBuild:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'
Model = PhpClass with name:"*"
Controller = PhpClass with name:"*...etc...
		adapterTestGroups: 	a Dictionary(DIGrepFileContent->a DITestGroup DIJMeterLoadTe...etc...
		testGroup: 	a DITestGroup
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424799267'
		singleShotTask: 	false


Array(SequenceableCollection)>>do:
	Receiver: an Array(a DITestGroup a DITestGroup a DITestGroup a DITestGroup a DITestGroup)
	Arguments and temporary variables: 
		aBlock: 	[ :testGroup | testGroup build ]
		index: 	4
	Receiver's instance variables: 
an Array(a DITestGroup a DITestGroup a DITestGroup a DITestGroup a DITestGroup)

DIDicto>>dictoBuild:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'
Model = PhpClass with name:"*"
Controller = PhpClass with name:"*...etc...
		adapterTestGroups: 	a Dictionary(DIGrepFileContent->a DITestGroup DIJMeterLoadTe...etc...
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424799267'
		singleShotTask: 	false


DIDicto>>dictoRun:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'
Model = PhpClass with name:"*"
Controller = PhpClass with name:"*...etc...
		adapterTestGroups: 	nil
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424799267'
		singleShotTask: 	false


DIDicto>>dictoAll:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'
Model = PhpClass with name:"*"
Controller = PhpClass with name:"*...etc...
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424799267'
		singleShotTask: 	false


DIPHPTests(DIDSLTests)>>runAndReturnObjWithText:andSuccessResults:onProject:
	Receiver: DIPHPTests
	Arguments and temporary variables: 
		dslText: 	'
Model = PhpClass with name:"*"
Controller = PhpClass with name:"*GUI...etc...
		res: 	#(false true false)
		project: 	'TestProjectPhp'
		dicto: 	a DIDicto
	Receiver's instance variables: 
		testSelector: 	nil
		expectedFails: 	nil


DIPHPTests class>>DoIt
	Receiver: DIPHPTests
	Arguments and temporary variables: 
		dsl: 	'
Model = PhpClass with name:"*"
Controller = PhpClass with name:"*GUI"

a...etc...
		success: 	#(false true false)
		test: 	DIPHPTests
	Receiver's instance variables: 
		superclass: 	DIDSLTests
		methodDict: 	a MethodDictionary(#testPhp->DIPHPTests>>#testPhp )
		format: 	134
		layout: 	a FixedLayout
		instanceVariables: 	#()
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#DIPHPTests
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Dicto-var-tests'
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set(#testP...etc...


CompiledMethod>>valueWithReceiver:arguments:
	Receiver: DIPHPTests class>>#DoIt
	Arguments and temporary variables: 
		aReceiver: 	DIPHPTests
		anArray: 	#()
	Receiver's instance variables: 
DIPHPTests class>>#DoIt

[ v := compiledMethod valueWithReceiver: receiver arguments: #() ] in SmalltalkEditor>>tallySelection
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		receiver: 	DIPHPTests
		context: 	nil
		compiledMethod: 	DIPHPTests class>>#DoIt
		profiler: 	nil
		v: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(509870080)
		selectionShowing: 	true
		model: 	a PackageTreeNautilusUI
		editingState: 	a SmalltalkEditingState


BlockClosure>>ensure:
	Receiver: [ v := compiledMethod valueWithReceiver: receiver arguments: #() ]
	Arguments and temporary variables: 
		aBlock: 	[ 
"cancel the probe and return the value"
"Could have already been ter...etc...
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor>>tallySelection
		startpc: 	105
		numArgs: 	0


MessageTally>>spyEvery:on:
	Receiver: nil(SmalltalkEditor) >> tallySelection
	Arguments and temporary variables: 
		observedProcess: 	a Process in nil
		millisecs: 	1
		aBlock: 	[ v := compiledMethod valueWithReceiver: receiver arguments: #() ]
		myDelay: 	a Delay(1 msecs; 1 msecs remaining)
		time0: 	1623804
	Receiver's instance variables: 
		class: 	SmalltalkEditor
		method: 	SmalltalkEditor>>#tallySelection
		process: 	nil
		tally: 	20427
		receivers: 	an Array(nil(CompiledMethod) >> valueWithReceiver:arguments: nil(DID...etc...
		senders: 	nil
		time: 	0
		gcStats: 	#(64315036 64905340 70732756 nil nil 2000 3 264 6012 3070 138 0 0 0 0 ...etc...
		maxClassNameSize: 	1000
		maxClassPlusSelectorSize: 	1000
		maxTabs: 	100
		reportOtherProcesses: 	true


TimeProfiler>>runBlock:pollingEvery:
	Receiver: a TimeProfiler
	Arguments and temporary variables: 
		aBlock: 	[ v := compiledMethod valueWithReceiver: receiver arguments: #() ]
		pollPeriod: 	1
	Receiver's instance variables: 
		dependents: 	nil
		selection: 	nil
		announcer: 	nil
		rootItems: 	nil
		autoMultiSelection: 	nil
		headerLabel: 	nil
		multiSelection: 	nil
		wrapBlockOrSelector: 	nil
		isCheckList: 	nil
		enabled: 	nil
		win: 	nil
		rootMessageTally: 	nil(SmalltalkEditor) >> tallySelection
		threshold: 	nil
		minPercentageToExpand: 	nil
		treeMorph: 	nil
		block: 	[ v := compiledMethod valueWithReceiver: receiver arguments: #() ]
		blockCodePane: 	nil
		withBlockCodePane: 	false
		blockSource: 	nil
		reportOtherProcesses: 	nil
		showLeavesOnly: 	nil
		codeTabPane: 	nil
		resultPane: 	nil
		result: 	nil
		withToolBar: 	false


TimeProfiler>>openOnBlock:
	Receiver: a TimeProfiler
	Arguments and temporary variables: 
		aBlock: 	[ v := compiledMethod valueWithReceiver: receiver arguments: #() ]
	Receiver's instance variables: 
		dependents: 	nil
		selection: 	nil
		announcer: 	nil
		rootItems: 	nil
		autoMultiSelection: 	nil
		headerLabel: 	nil
		multiSelection: 	nil
		wrapBlockOrSelector: 	nil
		isCheckList: 	nil
		enabled: 	nil
		win: 	nil
		rootMessageTally: 	nil(SmalltalkEditor) >> tallySelection
		threshold: 	nil
		minPercentageToExpand: 	nil
		treeMorph: 	nil
		block: 	[ v := compiledMethod valueWithReceiver: receiver arguments: #() ]
		blockCodePane: 	nil
		withBlockCodePane: 	false
		blockSource: 	nil
		reportOtherProcesses: 	nil
		showLeavesOnly: 	nil
		codeTabPane: 	nil
		resultPane: 	nil
		result: 	nil
		withToolBar: 	false


TimeProfiler class>>spyOn:
	Receiver: TimeProfiler
	Arguments and temporary variables: 
		aBlock: 	[ v := compiledMethod valueWithReceiver: receiver arguments: #() ]
	Receiver's instance variables: 
		superclass: 	MorphTreeModel
		methodDict: 	a MethodDictionary(#blockCode->TimeProfiler>>#blockCode #blockCode:...etc...
		format: 	180
		layout: 	a FixedLayout
		instanceVariables: 	#(#win #rootMessageTally #threshold #minPercentageToExpand #...etc...
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#TimeProfiler
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Tools-Profilers'
		traitComposition: 	{}
		localSelectors: 	nil


SmalltalkEditor>>tallySelection
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		v: 	nil
		receiver: 	DIPHPTests
		context: 	nil
		compiledMethod: 	DIPHPTests class>>#DoIt
		profiler: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(509870080)
		selectionShowing: 	true
		model: 	a PackageTreeNautilusUI
		editingState: 	a SmalltalkEditingState


SmalltalkEditor>>tallyIt
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 

	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(509870080)
		selectionShowing: 	true
		model: 	a PackageTreeNautilusUI
		editingState: 	a SmalltalkEditingState


[ textMorph editor tallyIt ] in PluggableTextMorphWithLimits(PluggableTextMorph)>>tallyIt
	Receiver: a PluggableTextMorphWithLimits(303038464)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(30.0@455.0) corner: (876.0@849.0)
		owner: 	a MultipleMethodsEditor(286261248)
		submorphs: 	an Array(an AlphaImageMorph(499908608) a TransformMorph(735313920))
		fullBounds: 	(30@455) corner: (876@849)
		color: 	Color white
		extension: 	a MorphExtension (488636416) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.784 g: 0.784 b: 0.784 alpha: 1.0)
		model: 	a PackageTreeNautilusUI
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(344719360)
		scroller: 	a TransformMorph(735313920)
		getMenuSelector: 	#sourceCodeMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(65273856)
		textMorph: 	a TextMorphForEditView(509870080)
		getTextSelector: 	#sourceCodeFrom:
		setTextSelector: 	#compileSource:notifying:
		getSelectionSelector: 	#contentsSelectionFrom:
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(9 to: 475)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil
		doubleClickSelector: 	nil
		setSelectionSelector: 	nil
		alertLimit: 	700
		locked: 	false
		warningLimit: 	350
		method: 	nil
		lockIcon: 	an AlphaImageMorph(499908608)
		canLockChangeSelector: 	#canChangeLockFor:
		lockSelector: 	#lockTextArea:from:


[ result := editBlock value ] in PluggableTextMorphWithLimits(PluggableTextMorph)>>handleEdit:
	Receiver: a PluggableTextMorphWithLimits(303038464)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph editor tallyIt ]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(30.0@455.0) corner: (876.0@849.0)
		owner: 	a MultipleMethodsEditor(286261248)
		submorphs: 	an Array(an AlphaImageMorph(499908608) a TransformMorph(735313920))
		fullBounds: 	(30@455) corner: (876@849)
		color: 	Color white
		extension: 	a MorphExtension (488636416) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.784 g: 0.784 b: 0.784 alpha: 1.0)
		model: 	a PackageTreeNautilusUI
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(344719360)
		scroller: 	a TransformMorph(735313920)
		getMenuSelector: 	#sourceCodeMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(65273856)
		textMorph: 	a TextMorphForEditView(509870080)
		getTextSelector: 	#sourceCodeFrom:
		setTextSelector: 	#compileSource:notifying:
		getSelectionSelector: 	#contentsSelectionFrom:
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(9 to: 475)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil
		doubleClickSelector: 	nil
		setSelectionSelector: 	nil
		alertLimit: 	700
		locked: 	false
		warningLimit: 	350
		method: 	nil
		lockIcon: 	an AlphaImageMorph(499908608)
		canLockChangeSelector: 	#canChangeLockFor:
		lockSelector: 	#lockTextArea:from:


TextMorphForEditView(TextMorph)>>handleEdit:
	Receiver: a TextMorphForEditView(509870080)
	Arguments and temporary variables: 
		editBlock: 	[ result := editBlock value ]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (838@344)
		owner: 	a TransformMorph(735313920)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (838@344)
		color: 	Color black
		extension: 	a MorphExtension (552599552) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Source Code Pro
		text: 	a Text for 'testPhp
| dsl success test|
	
dsl := ''
Model = PhpClass with...etc...
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		defaultColor: 	Color black
		editView: 	a PluggableTextMorphWithLimits(303038464)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


PluggableTextMorphWithLimits(PluggableTextMorph)>>handleEdit:
	Receiver: a PluggableTextMorphWithLimits(303038464)
	Arguments and temporary variables: 
		result: 	nil
		editBlock: 	[ textMorph editor tallyIt ]
	Receiver's instance variables: 
		bounds: 	(30.0@455.0) corner: (876.0@849.0)
		owner: 	a MultipleMethodsEditor(286261248)
		submorphs: 	an Array(an AlphaImageMorph(499908608) a TransformMorph(735313920))
		fullBounds: 	(30@455) corner: (876@849)
		color: 	Color white
		extension: 	a MorphExtension (488636416) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.784 g: 0.784 b: 0.784 alpha: 1.0)
		model: 	a PackageTreeNautilusUI
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(344719360)
		scroller: 	a TransformMorph(735313920)
		getMenuSelector: 	#sourceCodeMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(65273856)
		textMorph: 	a TextMorphForEditView(509870080)
		getTextSelector: 	#sourceCodeFrom:
		setTextSelector: 	#compileSource:notifying:
		getSelectionSelector: 	#contentsSelectionFrom:
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(9 to: 475)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil
		doubleClickSelector: 	nil
		setSelectionSelector: 	nil
		alertLimit: 	700
		locked: 	false
		warningLimit: 	350
		method: 	nil
		lockIcon: 	an AlphaImageMorph(499908608)
		canLockChangeSelector: 	#canChangeLockFor:
		lockSelector: 	#lockTextArea:from:


PluggableTextMorphWithLimits(PluggableTextMorph)>>tallyIt
	Receiver: a PluggableTextMorphWithLimits(303038464)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(30.0@455.0) corner: (876.0@849.0)
		owner: 	a MultipleMethodsEditor(286261248)
		submorphs: 	an Array(an AlphaImageMorph(499908608) a TransformMorph(735313920))
		fullBounds: 	(30@455) corner: (876@849)
		color: 	Color white
		extension: 	a MorphExtension (488636416) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.784 g: 0.784 b: 0.784 alpha: 1.0)
		model: 	a PackageTreeNautilusUI
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(344719360)
		scroller: 	a TransformMorph(735313920)
		getMenuSelector: 	#sourceCodeMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(65273856)
		textMorph: 	a TextMorphForEditView(509870080)
		getTextSelector: 	#sourceCodeFrom:
		setTextSelector: 	#compileSource:notifying:
		getSelectionSelector: 	#contentsSelectionFrom:
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(9 to: 475)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil
		doubleClickSelector: 	nil
		setSelectionSelector: 	nil
		alertLimit: 	700
		locked: 	false
		warningLimit: 	350
		method: 	nil
		lockIcon: 	an AlphaImageMorph(499908608)
		canLockChangeSelector: 	#canChangeLockFor:
		lockSelector: 	#lockTextArea:from:


PackageTreeNautilusUI(Object)>>perform:orSendTo:
	Receiver: a PackageTreeNautilusUI
	Arguments and temporary variables: 
		selector: 	#tallyIt
		otherTarget: 	a PluggableTextMorphWithLimits(303038464)
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a CategoryWidget a MethodWidget a NautilusWindow(...etc...
		model: 	a PackageTreeNautilus
		window: 	a NautilusWindow(542638080)
		hierarchyClass: 	DITestGroup
		cachedHierarchy: 	a SortHierarchically
		sourceTextArea: 	a PluggableTextMorphWithLimits(303038464)
		groupsSelection: 	a Dictionary()
		packagesSelection: 	a Dictionary(var-tests->true )
		classesSelection: 	a Dictionary(DIPHPTests->true )
		list: 	a MorphTreeMorph(273940480)
		list2: 	a PluggableIconListMorph(454295552)
		sourceCodePanel: 	a PanelMorph(183500800)
		commentTextArea: 	nil
		currentDisplayChoice: 	#SourceCode
		sourceTextAreaLimit: 	350
		sourceCodeContainer: 	a PanelMorph(584843264)
		list2Elements: 	{DIDSLTests. DIJavaTests. DIPHPTests. DISTTests}
		listElements: 	nil
		shouldUpdateTitle: 	true
		testSemaphore: 	a Semaphore()
		sourceTextAreas: 	an OrderedCollection(a PluggableTextMorphWithLimits(303038464)...etc...
		multipleMethodsEditor: 	a MultipleMethodsEditor(286261248)
		contentSelection: 	nil
		acceptor: 	a MethodDefinitionAcceptor
		classifier: 	a MethodClassifier
		categoryWidget: 	a CategoryWidget
		methodWidget: 	a MethodWidget
		packagePattern: 	a RxMatcher
		searchWidget: 	a SearchMorph(866648064)


[ 
| selArgCount |
"show cursor in case item opens a new MVC window"
(selArgCount := selector numArgs) = 0
	ifTrue: [ target perform: selector ]
	ifFalse: [ 
		selArgCount = arguments size
			ifTrue: [ target perform: selector withArguments: arguments ]
			ifFalse: [ target perform: selector withArguments: (arguments copyWith: evt) ] ].
self changed ] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(120324096)'Profile it'
	Arguments and temporary variables: 
		evt: 	[(295@584) mouseUp 1623782 nil]
		w: 	a WorldMorph(511705088) [world]
		selArgCount: 	2
	Receiver's instance variables: 
		bounds: 	(237.0@576.0) corner: (408.0@594.0)
		owner: 	a MenuMorph(306184192)
		submorphs: 	#()
		fullBounds: 	(237.0@576.0) corner: (408.0@594.0)
		color: 	Color black
		extension: 	a MorphExtension (155713536)
		font: 	a LogicalFont
 familyName: Source Sans Pro
 emphasis: nil
 pointSize: 10
...etc...
		emphasis: 	0
		contents: 	'Profile it'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a PackageTreeNautilusUI
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#tallyIt a PluggableTextMorphWithLimits(303038464))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


BlockClosure>>ensure:
	Receiver: [ 
| selArgCount |
"show cursor in case item opens a new MVC window"
(selArgCount := selec...etc...
	Arguments and temporary variables: 
		aBlock: 	[ oldcursor show ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
		startpc: 	134
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r100000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[ 
| selArgCount |
"show cursor in case item opens a new MVC window"
(s...etc...
		oldcursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	(-1@ -1)
		maskForm: 	Form(16x16x1)


ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(120324096)'Profile it'
	Arguments and temporary variables: 
		evt: 	[(295@584) mouseUp 1623782 nil]
		w: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		bounds: 	(237.0@576.0) corner: (408.0@594.0)
		owner: 	a MenuMorph(306184192)
		submorphs: 	#()
		fullBounds: 	(237.0@576.0) corner: (408.0@594.0)
		color: 	Color black
		extension: 	a MorphExtension (155713536)
		font: 	a LogicalFont
 familyName: Source Sans Pro
 emphasis: nil
 pointSize: 10
...etc...
		emphasis: 	0
		contents: 	'Profile it'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a PackageTreeNautilusUI
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#tallyIt a PluggableTextMorphWithLimits(303038464))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
	Receiver: a ToggleMenuItemMorph(120324096)'Profile it'
	Arguments and temporary variables: 
		evt: 	[(295@584) mouseUp 1623782 nil]
	Receiver's instance variables: 
		bounds: 	(237.0@576.0) corner: (408.0@594.0)
		owner: 	a MenuMorph(306184192)
		submorphs: 	#()
		fullBounds: 	(237.0@576.0) corner: (408.0@594.0)
		color: 	Color black
		extension: 	a MorphExtension (155713536)
		font: 	a LogicalFont
 familyName: Source Sans Pro
 emphasis: nil
 pointSize: 10
...etc...
		emphasis: 	0
		contents: 	'Profile it'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a PackageTreeNautilusUI
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#tallyIt a PluggableTextMorphWithLimits(303038464))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
	Receiver: a ToggleMenuItemMorph(120324096)'Profile it'
	Arguments and temporary variables: 
		anEvent: 	[(295@584) mouseUp 1623782 nil]
	Receiver's instance variables: 
		bounds: 	(237.0@576.0) corner: (408.0@594.0)
		owner: 	a MenuMorph(306184192)
		submorphs: 	#()
		fullBounds: 	(237.0@576.0) corner: (408.0@594.0)
		color: 	Color black
		extension: 	a MorphExtension (155713536)
		font: 	a LogicalFont
 familyName: Source Sans Pro
 emphasis: nil
 pointSize: 10
...etc...
		emphasis: 	0
		contents: 	'Profile it'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a PackageTreeNautilusUI
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#tallyIt a PluggableTextMorphWithLimits(303038464))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [(295@584) mouseUp 1623782 nil]
	Arguments and temporary variables: 
		anObject: 	a ToggleMenuItemMorph(120324096)'Profile it'
	Receiver's instance variables: 
		timeStamp: 	1623782
		source: 	a HandMorph(760479744)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(295@584)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


ToggleMenuItemMorph(Morph)>>handleEvent:
	Receiver: a ToggleMenuItemMorph(120324096)'Profile it'
	Arguments and temporary variables: 
		anEvent: 	[(295@584) mouseUp 1623782 nil]
	Receiver's instance variables: 
		bounds: 	(237.0@576.0) corner: (408.0@594.0)
		owner: 	a MenuMorph(306184192)
		submorphs: 	#()
		fullBounds: 	(237.0@576.0) corner: (408.0@594.0)
		color: 	Color black
		extension: 	a MorphExtension (155713536)
		font: 	a LogicalFont
 familyName: Source Sans Pro
 emphasis: nil
 pointSize: 10
...etc...
		emphasis: 	0
		contents: 	'Profile it'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a PackageTreeNautilusUI
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#tallyIt a PluggableTextMorphWithLimits(303038464))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(295@584) mouseUp 1623782 nil]
		aMorph: 	a ToggleMenuItemMorph(120324096)'Profile it'
		localEvt: 	nil
		index: 	1
		child: 	nil
		morphs: 	#()
		inside: 	true
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(295@584) mouseUp 1623782 nil]
		aMorph: 	a ToggleMenuItemMorph(120324096)'Profile it'
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


ToggleMenuItemMorph(Morph)>>processEvent:using:
	Receiver: a ToggleMenuItemMorph(120324096)'Profile it'
	Arguments and temporary variables: 
		anEvent: 	[(295@584) mouseUp 1623782 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	(237.0@576.0) corner: (408.0@594.0)
		owner: 	a MenuMorph(306184192)
		submorphs: 	#()
		fullBounds: 	(237.0@576.0) corner: (408.0@594.0)
		color: 	Color black
		extension: 	a MorphExtension (155713536)
		font: 	a LogicalFont
 familyName: Source Sans Pro
 emphasis: nil
 pointSize: 10
...etc...
		emphasis: 	0
		contents: 	'Profile it'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a PackageTreeNautilusUI
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#tallyIt a PluggableTextMorphWithLimits(303038464))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(295@584) mouseUp 1623782 nil]
		aMorph: 	a MenuMorph(306184192)
		localEvt: 	[(295@584) mouseUp 1623782 nil]
		index: 	11
		child: 	a ToggleMenuItemMorph(120324096)'Profile it'
		morphs: 	an Array(a ToggleMenuItemMorph(894959616)'Suggestions' a MenuLineMorph(...etc...
		inside: 	false
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(295@584) mouseUp 1623782 nil]
		aMorph: 	a MenuMorph(306184192)
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MenuMorph(Morph)>>processEvent:using:
	Receiver: a MenuMorph(306184192)
	Arguments and temporary variables: 
		anEvent: 	[(295@584) mouseUp 1623782 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	(232.0@416.0) corner: (413.0@858.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(894959616)'Suggestions' a MenuLineMor...etc...
		fullBounds: 	(232.0@416.0) corner: (413.0@858.0)
		color: 	(Color r: 0.894 g: 0.894 b: 0.894 alpha: 1.0)
		extension: 	a MorphExtension (347602944) [other:  (basicColor -> (Color r: 0.823...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.674 g: 0.674 b: 0.674 alpha: 1.0)
		defaultTarget: 	a PackageTreeNautilusUI
		selectedItem: 	a ToggleMenuItemMorph(120324096)'Profile it'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(894959616)'Suggestions' a...etc...


MenuMorph(Morph)>>processEvent:
	Receiver: a MenuMorph(306184192)
	Arguments and temporary variables: 
		anEvent: 	[(295@584) mouseUp 1623782 nil]
	Receiver's instance variables: 
		bounds: 	(232.0@416.0) corner: (413.0@858.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(894959616)'Suggestions' a MenuLineMor...etc...
		fullBounds: 	(232.0@416.0) corner: (413.0@858.0)
		color: 	(Color r: 0.894 g: 0.894 b: 0.894 alpha: 1.0)
		extension: 	a MorphExtension (347602944) [other:  (basicColor -> (Color r: 0.823...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.674 g: 0.674 b: 0.674 alpha: 1.0)
		defaultTarget: 	a PackageTreeNautilusUI
		selectedItem: 	a ToggleMenuItemMorph(120324096)'Profile it'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(894959616)'Suggestions' a...etc...


MenuMorph>>handleFocusEvent:
	Receiver: a MenuMorph(306184192)
	Arguments and temporary variables: 
		evt: 	[(295@584) mouseUp 1623782 nil]
	Receiver's instance variables: 
		bounds: 	(232.0@416.0) corner: (413.0@858.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(894959616)'Suggestions' a MenuLineMor...etc...
		fullBounds: 	(232.0@416.0) corner: (413.0@858.0)
		color: 	(Color r: 0.894 g: 0.894 b: 0.894 alpha: 1.0)
		extension: 	a MorphExtension (347602944) [other:  (basicColor -> (Color r: 0.823...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.674 g: 0.674 b: 0.674 alpha: 1.0)
		defaultTarget: 	a PackageTreeNautilusUI
		selectedItem: 	a ToggleMenuItemMorph(120324096)'Profile it'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(894959616)'Suggestions' a...etc...



--- The full stack ---
DITestGroup>>build
[ :testGroup | testGroup build ] in DIDicto>>dictoBuild:
Array(SequenceableCollection)>>do:
DIDicto>>dictoBuild:
DIDicto>>dictoRun:
DIDicto>>dictoAll:
DIPHPTests(DIDSLTests)>>runAndReturnObjWithText:andSuccessResults:onProject:
DIPHPTests class>>DoIt
CompiledMethod>>valueWithReceiver:arguments:
[ v := compiledMethod valueWithReceiver: receiver arguments: #() ] in SmalltalkEditor>>tallySelection
BlockClosure>>ensure:
MessageTally>>spyEvery:on:
TimeProfiler>>runBlock:pollingEvery:
TimeProfiler>>openOnBlock:
TimeProfiler class>>spyOn:
SmalltalkEditor>>tallySelection
SmalltalkEditor>>tallyIt
[ textMorph editor tallyIt ] in PluggableTextMorphWithLimits(PluggableTextMorph)>>tallyIt
[ result := editBlock value ] in PluggableTextMorphWithLimits(PluggableTextMorph)>>handleEdit:
TextMorphForEditView(TextMorph)>>handleEdit:
PluggableTextMorphWithLimits(PluggableTextMorph)>>handleEdit:
PluggableTextMorphWithLimits(PluggableTextMorph)>>tallyIt
PackageTreeNautilusUI(Object)>>perform:orSendTo:
[ 
| selArgCount |
"show cursor in case item opens a new MVC window"
(selArgCount := selector numArgs) = 0
	ifTrue: [ target perform: selector ]
	ifFalse: [ 
		selArgCount = arguments size
			ifTrue: [ target perform: selector withArguments: arguments ]
			ifFalse: [ target perform: selector withArguments: (arguments copyWith: evt) ] ].
self changed ] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
ToggleMenuItemMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
ToggleMenuItemMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
MenuMorph(Morph)>>processEvent:using:
MenuMorph(Morph)>>processEvent:
MenuMorph>>handleFocusEvent:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldState>>doOneSubCycleFor:
WorldMorph>>doOneSubCycle
MenuMorph>>invokeModalAt:in:allowKeyboard:
MenuMorph>>invokeModal:
MenuMorph>>invokeModal
PluggableTextMorphWithLimits(PluggableTextMorph)>>yellowButtonActivity:
SmalltalkEditor(TextEditor)>>mouseUp:
[ editor mouseUp: evt ] in TextMorphForEditView(TextMorph)>>mouseUp:
TextMorphForEditView(TextMorph)>>handleInteraction:
TextMorphForEditView>>handleInteraction:
TextMorphForEditView(TextMorph)>>mouseUp:
TextMorphForEditView>>mouseUp:
TextMorphForEditView(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
TextMorphForEditView(Morph)>>handleEvent:
TextMorphForEditView(Morph)>>handleFocusEvent:
[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ 
World doOneCycle.
Processor yield.
false ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Halt
24 February 2015 6:39:44.71837 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
NBCogit NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
https://github.com/pharo-project/pharo-vm.git Commit: 4a0d556150d478ff2de3c9624d2f18e6eaa3fa5c Date: 2014-12-18 18:42:53 +0100 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14893

Image: Pharo3.0 [Latest update: #30863]

DITestGroup>>build
	Receiver: a DITestGroup
	Arguments and temporary variables: 

	Receiver's instance variables: 
		rules: 	an OrderedCollection(Model cannot depend on Controller arDeleteGUI must ...etc...
		adapter: 	a DIPhpDependencies
		runCommandText: 	nil
		testSpecification: 	nil
		adapterID: 	'DIPhpDependencies'
		resultFile: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/DictoTestSuite/1...etc...
		specificationFile: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/DictoTest...etc...
		commandFile: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/DictoTestSuite/...etc...
		xmlOutput: 	nil
		rawOutput: 	nil


[ :testGroup | testGroup build ] in DIDicto>>dictoBuild:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'
Model = PhpClass with name:"*"
Controller = PhpClass with name:"*...etc...
		adapterTestGroups: 	a Dictionary(DIGrepFileContent->a DITestGroup DIJMeterLoadTe...etc...
		testGroup: 	a DITestGroup
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424799585'
		singleShotTask: 	false


Array(SequenceableCollection)>>do:
	Receiver: an Array(a DITestGroup a DITestGroup a DITestGroup a DITestGroup a DITestGroup)
	Arguments and temporary variables: 
		aBlock: 	[ :testGroup | testGroup build ]
		index: 	4
	Receiver's instance variables: 
an Array(a DITestGroup a DITestGroup a DITestGroup a DITestGroup a DITestGroup)

DIDicto>>dictoBuild:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'
Model = PhpClass with name:"*"
Controller = PhpClass with name:"*...etc...
		adapterTestGroups: 	a Dictionary(DIGrepFileContent->a DITestGroup DIJMeterLoadTe...etc...
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424799585'
		singleShotTask: 	false


DIDicto>>dictoRun:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'
Model = PhpClass with name:"*"
Controller = PhpClass with name:"*...etc...
		adapterTestGroups: 	nil
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424799585'
		singleShotTask: 	false


DIDicto>>dictoAll:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'
Model = PhpClass with name:"*"
Controller = PhpClass with name:"*...etc...
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424799585'
		singleShotTask: 	false


DIPHPTests(DIDSLTests)>>runAndReturnObjWithText:andSuccessResults:onProject:
	Receiver: DIPHPTests
	Arguments and temporary variables: 
		dslText: 	'
Model = PhpClass with name:"*"
Controller = PhpClass with name:"*GUI...etc...
		res: 	#(false true false)
		project: 	'TestProjectPhp'
		dicto: 	a DIDicto
	Receiver's instance variables: 
		testSelector: 	nil
		expectedFails: 	nil


DIPHPTests class>>DoIt
	Receiver: DIPHPTests
	Arguments and temporary variables: 
		dsl: 	'
Model = PhpClass with name:"*"
Controller = PhpClass with name:"*GUI"

a...etc...
		success: 	#(false true false)
		test: 	DIPHPTests
	Receiver's instance variables: 
		superclass: 	DIDSLTests
		methodDict: 	a MethodDictionary(#testPhp->DIPHPTests>>#testPhp )
		format: 	134
		layout: 	a FixedLayout
		instanceVariables: 	#()
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#DIPHPTests
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Dicto-var-tests'
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set(#testP...etc...


CompiledMethod>>valueWithReceiver:arguments:
	Receiver: DIPHPTests class>>#DoIt
	Arguments and temporary variables: 
		aReceiver: 	DIPHPTests
		anArray: 	#()
	Receiver's instance variables: 
DIPHPTests class>>#DoIt

[ v := compiledMethod valueWithReceiver: receiver arguments: #() ] in SmalltalkEditor>>tallySelection
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		receiver: 	DIPHPTests
		context: 	nil
		compiledMethod: 	DIPHPTests class>>#DoIt
		profiler: 	nil
		v: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(509870080)
		selectionShowing: 	true
		model: 	a PackageTreeNautilusUI
		editingState: 	a SmalltalkEditingState


BlockClosure>>ensure:
	Receiver: [ v := compiledMethod valueWithReceiver: receiver arguments: #() ]
	Arguments and temporary variables: 
		aBlock: 	[ 
"cancel the probe and return the value"
"Could have already been ter...etc...
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor>>tallySelection
		startpc: 	105
		numArgs: 	0


MessageTally>>spyEvery:on:
	Receiver: nil(SmalltalkEditor) >> tallySelection
	Arguments and temporary variables: 
		observedProcess: 	a Process in nil
		millisecs: 	1
		aBlock: 	[ v := compiledMethod valueWithReceiver: receiver arguments: #() ]
		myDelay: 	a Delay(1 msecs; 1 msecs remaining)
		time0: 	1941244
	Receiver's instance variables: 
		class: 	SmalltalkEditor
		method: 	SmalltalkEditor>>#tallySelection
		process: 	nil
		tally: 	48
		receivers: 	an Array(nil(CompiledMethod) >> valueWithReceiver:arguments: nil(DID...etc...
		senders: 	nil
		time: 	0
		gcStats: 	#(69802352 71144768 76160328 nil nil 2000 5 487 10267 4639 282 0 0 0 0...etc...
		maxClassNameSize: 	1000
		maxClassPlusSelectorSize: 	1000
		maxTabs: 	100
		reportOtherProcesses: 	true


TimeProfiler>>runBlock:pollingEvery:
	Receiver: a TimeProfiler
	Arguments and temporary variables: 
		aBlock: 	[ v := compiledMethod valueWithReceiver: receiver arguments: #() ]
		pollPeriod: 	1
	Receiver's instance variables: 
		dependents: 	nil
		selection: 	nil
		announcer: 	nil
		rootItems: 	nil
		autoMultiSelection: 	nil
		headerLabel: 	nil
		multiSelection: 	nil
		wrapBlockOrSelector: 	nil
		isCheckList: 	nil
		enabled: 	nil
		win: 	nil
		rootMessageTally: 	nil(SmalltalkEditor) >> tallySelection
		threshold: 	nil
		minPercentageToExpand: 	nil
		treeMorph: 	nil
		block: 	[ v := compiledMethod valueWithReceiver: receiver arguments: #() ]
		blockCodePane: 	nil
		withBlockCodePane: 	false
		blockSource: 	nil
		reportOtherProcesses: 	nil
		showLeavesOnly: 	nil
		codeTabPane: 	nil
		resultPane: 	nil
		result: 	nil
		withToolBar: 	false


TimeProfiler>>openOnBlock:
	Receiver: a TimeProfiler
	Arguments and temporary variables: 
		aBlock: 	[ v := compiledMethod valueWithReceiver: receiver arguments: #() ]
	Receiver's instance variables: 
		dependents: 	nil
		selection: 	nil
		announcer: 	nil
		rootItems: 	nil
		autoMultiSelection: 	nil
		headerLabel: 	nil
		multiSelection: 	nil
		wrapBlockOrSelector: 	nil
		isCheckList: 	nil
		enabled: 	nil
		win: 	nil
		rootMessageTally: 	nil(SmalltalkEditor) >> tallySelection
		threshold: 	nil
		minPercentageToExpand: 	nil
		treeMorph: 	nil
		block: 	[ v := compiledMethod valueWithReceiver: receiver arguments: #() ]
		blockCodePane: 	nil
		withBlockCodePane: 	false
		blockSource: 	nil
		reportOtherProcesses: 	nil
		showLeavesOnly: 	nil
		codeTabPane: 	nil
		resultPane: 	nil
		result: 	nil
		withToolBar: 	false


TimeProfiler class>>spyOn:
	Receiver: TimeProfiler
	Arguments and temporary variables: 
		aBlock: 	[ v := compiledMethod valueWithReceiver: receiver arguments: #() ]
	Receiver's instance variables: 
		superclass: 	MorphTreeModel
		methodDict: 	a MethodDictionary(#blockCode->TimeProfiler>>#blockCode #blockCode:...etc...
		format: 	180
		layout: 	a FixedLayout
		instanceVariables: 	#(#win #rootMessageTally #threshold #minPercentageToExpand #...etc...
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#TimeProfiler
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Tools-Profilers'
		traitComposition: 	{}
		localSelectors: 	nil


SmalltalkEditor>>tallySelection
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		v: 	nil
		receiver: 	DIPHPTests
		context: 	nil
		compiledMethod: 	DIPHPTests class>>#DoIt
		profiler: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(509870080)
		selectionShowing: 	true
		model: 	a PackageTreeNautilusUI
		editingState: 	a SmalltalkEditingState


SmalltalkEditor>>tallyIt
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 

	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(509870080)
		selectionShowing: 	true
		model: 	a PackageTreeNautilusUI
		editingState: 	a SmalltalkEditingState


[ textMorph editor tallyIt ] in PluggableTextMorphWithLimits(PluggableTextMorph)>>tallyIt
	Receiver: a PluggableTextMorphWithLimits(303038464)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(30.0@455.0) corner: (876.0@849.0)
		owner: 	a MultipleMethodsEditor(286261248)
		submorphs: 	an Array(an AlphaImageMorph(499908608) a TransformMorph(735313920))
		fullBounds: 	(30@455) corner: (876@849)
		color: 	Color white
		extension: 	a MorphExtension (488636416) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.784 g: 0.784 b: 0.784 alpha: 1.0)
		model: 	a PackageTreeNautilusUI
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(344719360)
		scroller: 	a TransformMorph(735313920)
		getMenuSelector: 	#sourceCodeMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(65273856)
		textMorph: 	a TextMorphForEditView(509870080)
		getTextSelector: 	#sourceCodeFrom:
		setTextSelector: 	#compileSource:notifying:
		getSelectionSelector: 	#contentsSelectionFrom:
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(9 to: 475)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil
		doubleClickSelector: 	nil
		setSelectionSelector: 	nil
		alertLimit: 	700
		locked: 	false
		warningLimit: 	350
		method: 	nil
		lockIcon: 	an AlphaImageMorph(499908608)
		canLockChangeSelector: 	#canChangeLockFor:
		lockSelector: 	#lockTextArea:from:


[ result := editBlock value ] in PluggableTextMorphWithLimits(PluggableTextMorph)>>handleEdit:
	Receiver: a PluggableTextMorphWithLimits(303038464)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph editor tallyIt ]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(30.0@455.0) corner: (876.0@849.0)
		owner: 	a MultipleMethodsEditor(286261248)
		submorphs: 	an Array(an AlphaImageMorph(499908608) a TransformMorph(735313920))
		fullBounds: 	(30@455) corner: (876@849)
		color: 	Color white
		extension: 	a MorphExtension (488636416) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.784 g: 0.784 b: 0.784 alpha: 1.0)
		model: 	a PackageTreeNautilusUI
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(344719360)
		scroller: 	a TransformMorph(735313920)
		getMenuSelector: 	#sourceCodeMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(65273856)
		textMorph: 	a TextMorphForEditView(509870080)
		getTextSelector: 	#sourceCodeFrom:
		setTextSelector: 	#compileSource:notifying:
		getSelectionSelector: 	#contentsSelectionFrom:
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(9 to: 475)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil
		doubleClickSelector: 	nil
		setSelectionSelector: 	nil
		alertLimit: 	700
		locked: 	false
		warningLimit: 	350
		method: 	nil
		lockIcon: 	an AlphaImageMorph(499908608)
		canLockChangeSelector: 	#canChangeLockFor:
		lockSelector: 	#lockTextArea:from:


TextMorphForEditView(TextMorph)>>handleEdit:
	Receiver: a TextMorphForEditView(509870080)
	Arguments and temporary variables: 
		editBlock: 	[ result := editBlock value ]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (838@344)
		owner: 	a TransformMorph(735313920)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (838@344)
		color: 	Color black
		extension: 	a MorphExtension (552599552) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Source Code Pro
		text: 	a Text for 'testPhp
| dsl success test|
	
dsl := ''
Model = PhpClass with...etc...
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		defaultColor: 	Color black
		editView: 	a PluggableTextMorphWithLimits(303038464)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


PluggableTextMorphWithLimits(PluggableTextMorph)>>handleEdit:
	Receiver: a PluggableTextMorphWithLimits(303038464)
	Arguments and temporary variables: 
		result: 	nil
		editBlock: 	[ textMorph editor tallyIt ]
	Receiver's instance variables: 
		bounds: 	(30.0@455.0) corner: (876.0@849.0)
		owner: 	a MultipleMethodsEditor(286261248)
		submorphs: 	an Array(an AlphaImageMorph(499908608) a TransformMorph(735313920))
		fullBounds: 	(30@455) corner: (876@849)
		color: 	Color white
		extension: 	a MorphExtension (488636416) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.784 g: 0.784 b: 0.784 alpha: 1.0)
		model: 	a PackageTreeNautilusUI
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(344719360)
		scroller: 	a TransformMorph(735313920)
		getMenuSelector: 	#sourceCodeMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(65273856)
		textMorph: 	a TextMorphForEditView(509870080)
		getTextSelector: 	#sourceCodeFrom:
		setTextSelector: 	#compileSource:notifying:
		getSelectionSelector: 	#contentsSelectionFrom:
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(9 to: 475)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil
		doubleClickSelector: 	nil
		setSelectionSelector: 	nil
		alertLimit: 	700
		locked: 	false
		warningLimit: 	350
		method: 	nil
		lockIcon: 	an AlphaImageMorph(499908608)
		canLockChangeSelector: 	#canChangeLockFor:
		lockSelector: 	#lockTextArea:from:


PluggableTextMorphWithLimits(PluggableTextMorph)>>tallyIt
	Receiver: a PluggableTextMorphWithLimits(303038464)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(30.0@455.0) corner: (876.0@849.0)
		owner: 	a MultipleMethodsEditor(286261248)
		submorphs: 	an Array(an AlphaImageMorph(499908608) a TransformMorph(735313920))
		fullBounds: 	(30@455) corner: (876@849)
		color: 	Color white
		extension: 	a MorphExtension (488636416) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.784 g: 0.784 b: 0.784 alpha: 1.0)
		model: 	a PackageTreeNautilusUI
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(344719360)
		scroller: 	a TransformMorph(735313920)
		getMenuSelector: 	#sourceCodeMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(65273856)
		textMorph: 	a TextMorphForEditView(509870080)
		getTextSelector: 	#sourceCodeFrom:
		setTextSelector: 	#compileSource:notifying:
		getSelectionSelector: 	#contentsSelectionFrom:
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(9 to: 475)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil
		doubleClickSelector: 	nil
		setSelectionSelector: 	nil
		alertLimit: 	700
		locked: 	false
		warningLimit: 	350
		method: 	nil
		lockIcon: 	an AlphaImageMorph(499908608)
		canLockChangeSelector: 	#canChangeLockFor:
		lockSelector: 	#lockTextArea:from:


PackageTreeNautilusUI(Object)>>perform:orSendTo:
	Receiver: a PackageTreeNautilusUI
	Arguments and temporary variables: 
		selector: 	#tallyIt
		otherTarget: 	a PluggableTextMorphWithLimits(303038464)
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a CategoryWidget a MethodWidget a NautilusWindow(...etc...
		model: 	a PackageTreeNautilus
		window: 	a NautilusWindow(542638080)
		hierarchyClass: 	DITestGroup
		cachedHierarchy: 	a SortHierarchically
		sourceTextArea: 	a PluggableTextMorphWithLimits(303038464)
		groupsSelection: 	a Dictionary()
		packagesSelection: 	a Dictionary(var-tests->true )
		classesSelection: 	a Dictionary(DIPHPTests->true )
		list: 	a MorphTreeMorph(273940480)
		list2: 	a PluggableIconListMorph(454295552)
		sourceCodePanel: 	a PanelMorph(183500800)
		commentTextArea: 	nil
		currentDisplayChoice: 	#SourceCode
		sourceTextAreaLimit: 	350
		sourceCodeContainer: 	a PanelMorph(584843264)
		list2Elements: 	{DIDSLTests. DIJavaTests. DIPHPTests. DISTTests}
		listElements: 	nil
		shouldUpdateTitle: 	true
		testSemaphore: 	a Semaphore()
		sourceTextAreas: 	an OrderedCollection(a PluggableTextMorphWithLimits(303038464)...etc...
		multipleMethodsEditor: 	a MultipleMethodsEditor(286261248)
		contentSelection: 	nil
		acceptor: 	a MethodDefinitionAcceptor
		classifier: 	a MethodClassifier
		categoryWidget: 	a CategoryWidget
		methodWidget: 	a MethodWidget
		packagePattern: 	a RxMatcher
		searchWidget: 	a SearchMorph(866648064)


[ 
| selArgCount |
"show cursor in case item opens a new MVC window"
(selArgCount := selector numArgs) = 0
	ifTrue: [ target perform: selector ]
	ifFalse: [ 
		selArgCount = arguments size
			ifTrue: [ target perform: selector withArguments: arguments ]
			ifFalse: [ target perform: selector withArguments: (arguments copyWith: evt) ] ].
self changed ] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(399245312)'Profile it'
	Arguments and temporary variables: 
		evt: 	[(344@583) mouseUp 1941214 nil]
		w: 	a WorldMorph(511705088) [world]
		selArgCount: 	2
	Receiver's instance variables: 
		bounds: 	(245.0@576.0) corner: (416.0@594.0)
		owner: 	a MenuMorph(439615488)
		submorphs: 	#()
		fullBounds: 	(245.0@576.0) corner: (416.0@594.0)
		color: 	Color black
		extension: 	a MorphExtension (422576128)
		font: 	a LogicalFont
 familyName: Source Sans Pro
 emphasis: nil
 pointSize: 10
...etc...
		emphasis: 	0
		contents: 	'Profile it'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a PackageTreeNautilusUI
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#tallyIt a PluggableTextMorphWithLimits(303038464))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


BlockClosure>>ensure:
	Receiver: [ 
| selArgCount |
"show cursor in case item opens a new MVC window"
(selArgCount := selec...etc...
	Arguments and temporary variables: 
		aBlock: 	[ oldcursor show ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
		startpc: 	134
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r100000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[ 
| selArgCount |
"show cursor in case item opens a new MVC window"
(s...etc...
		oldcursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	(-1@ -1)
		maskForm: 	Form(16x16x1)


ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(399245312)'Profile it'
	Arguments and temporary variables: 
		evt: 	[(344@583) mouseUp 1941214 nil]
		w: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		bounds: 	(245.0@576.0) corner: (416.0@594.0)
		owner: 	a MenuMorph(439615488)
		submorphs: 	#()
		fullBounds: 	(245.0@576.0) corner: (416.0@594.0)
		color: 	Color black
		extension: 	a MorphExtension (422576128)
		font: 	a LogicalFont
 familyName: Source Sans Pro
 emphasis: nil
 pointSize: 10
...etc...
		emphasis: 	0
		contents: 	'Profile it'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a PackageTreeNautilusUI
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#tallyIt a PluggableTextMorphWithLimits(303038464))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
	Receiver: a ToggleMenuItemMorph(399245312)'Profile it'
	Arguments and temporary variables: 
		evt: 	[(344@583) mouseUp 1941214 nil]
	Receiver's instance variables: 
		bounds: 	(245.0@576.0) corner: (416.0@594.0)
		owner: 	a MenuMorph(439615488)
		submorphs: 	#()
		fullBounds: 	(245.0@576.0) corner: (416.0@594.0)
		color: 	Color black
		extension: 	a MorphExtension (422576128)
		font: 	a LogicalFont
 familyName: Source Sans Pro
 emphasis: nil
 pointSize: 10
...etc...
		emphasis: 	0
		contents: 	'Profile it'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a PackageTreeNautilusUI
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#tallyIt a PluggableTextMorphWithLimits(303038464))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
	Receiver: a ToggleMenuItemMorph(399245312)'Profile it'
	Arguments and temporary variables: 
		anEvent: 	[(344@583) mouseUp 1941214 nil]
	Receiver's instance variables: 
		bounds: 	(245.0@576.0) corner: (416.0@594.0)
		owner: 	a MenuMorph(439615488)
		submorphs: 	#()
		fullBounds: 	(245.0@576.0) corner: (416.0@594.0)
		color: 	Color black
		extension: 	a MorphExtension (422576128)
		font: 	a LogicalFont
 familyName: Source Sans Pro
 emphasis: nil
 pointSize: 10
...etc...
		emphasis: 	0
		contents: 	'Profile it'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a PackageTreeNautilusUI
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#tallyIt a PluggableTextMorphWithLimits(303038464))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [(344@583) mouseUp 1941214 nil]
	Arguments and temporary variables: 
		anObject: 	a ToggleMenuItemMorph(399245312)'Profile it'
	Receiver's instance variables: 
		timeStamp: 	1941214
		source: 	a HandMorph(760479744)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(344@583)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


ToggleMenuItemMorph(Morph)>>handleEvent:
	Receiver: a ToggleMenuItemMorph(399245312)'Profile it'
	Arguments and temporary variables: 
		anEvent: 	[(344@583) mouseUp 1941214 nil]
	Receiver's instance variables: 
		bounds: 	(245.0@576.0) corner: (416.0@594.0)
		owner: 	a MenuMorph(439615488)
		submorphs: 	#()
		fullBounds: 	(245.0@576.0) corner: (416.0@594.0)
		color: 	Color black
		extension: 	a MorphExtension (422576128)
		font: 	a LogicalFont
 familyName: Source Sans Pro
 emphasis: nil
 pointSize: 10
...etc...
		emphasis: 	0
		contents: 	'Profile it'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a PackageTreeNautilusUI
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#tallyIt a PluggableTextMorphWithLimits(303038464))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(344@583) mouseUp 1941214 nil]
		aMorph: 	a ToggleMenuItemMorph(399245312)'Profile it'
		localEvt: 	nil
		index: 	1
		child: 	nil
		morphs: 	#()
		inside: 	true
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(344@583) mouseUp 1941214 nil]
		aMorph: 	a ToggleMenuItemMorph(399245312)'Profile it'
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


ToggleMenuItemMorph(Morph)>>processEvent:using:
	Receiver: a ToggleMenuItemMorph(399245312)'Profile it'
	Arguments and temporary variables: 
		anEvent: 	[(344@583) mouseUp 1941214 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	(245.0@576.0) corner: (416.0@594.0)
		owner: 	a MenuMorph(439615488)
		submorphs: 	#()
		fullBounds: 	(245.0@576.0) corner: (416.0@594.0)
		color: 	Color black
		extension: 	a MorphExtension (422576128)
		font: 	a LogicalFont
 familyName: Source Sans Pro
 emphasis: nil
 pointSize: 10
...etc...
		emphasis: 	0
		contents: 	'Profile it'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a PackageTreeNautilusUI
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#tallyIt a PluggableTextMorphWithLimits(303038464))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(344@583) mouseUp 1941214 nil]
		aMorph: 	a MenuMorph(439615488)
		localEvt: 	[(344@583) mouseUp 1941214 nil]
		index: 	11
		child: 	a ToggleMenuItemMorph(399245312)'Profile it'
		morphs: 	an Array(a ToggleMenuItemMorph(191627264)'Suggestions' a MenuLineMorph(...etc...
		inside: 	false
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(344@583) mouseUp 1941214 nil]
		aMorph: 	a MenuMorph(439615488)
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MenuMorph(Morph)>>processEvent:using:
	Receiver: a MenuMorph(439615488)
	Arguments and temporary variables: 
		anEvent: 	[(344@583) mouseUp 1941214 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	(240.0@416.0) corner: (421.0@858.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(191627264)'Suggestions' a MenuLineMor...etc...
		fullBounds: 	(240.0@416.0) corner: (421.0@858.0)
		color: 	(Color r: 0.894 g: 0.894 b: 0.894 alpha: 1.0)
		extension: 	a MorphExtension (481034240) [other:  (basicColor -> (Color r: 0.823...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.674 g: 0.674 b: 0.674 alpha: 1.0)
		defaultTarget: 	a PackageTreeNautilusUI
		selectedItem: 	a ToggleMenuItemMorph(399245312)'Profile it'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(191627264)'Suggestions' a...etc...


MenuMorph(Morph)>>processEvent:
	Receiver: a MenuMorph(439615488)
	Arguments and temporary variables: 
		anEvent: 	[(344@583) mouseUp 1941214 nil]
	Receiver's instance variables: 
		bounds: 	(240.0@416.0) corner: (421.0@858.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(191627264)'Suggestions' a MenuLineMor...etc...
		fullBounds: 	(240.0@416.0) corner: (421.0@858.0)
		color: 	(Color r: 0.894 g: 0.894 b: 0.894 alpha: 1.0)
		extension: 	a MorphExtension (481034240) [other:  (basicColor -> (Color r: 0.823...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.674 g: 0.674 b: 0.674 alpha: 1.0)
		defaultTarget: 	a PackageTreeNautilusUI
		selectedItem: 	a ToggleMenuItemMorph(399245312)'Profile it'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(191627264)'Suggestions' a...etc...


MenuMorph>>handleFocusEvent:
	Receiver: a MenuMorph(439615488)
	Arguments and temporary variables: 
		evt: 	[(344@583) mouseUp 1941214 nil]
	Receiver's instance variables: 
		bounds: 	(240.0@416.0) corner: (421.0@858.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(191627264)'Suggestions' a MenuLineMor...etc...
		fullBounds: 	(240.0@416.0) corner: (421.0@858.0)
		color: 	(Color r: 0.894 g: 0.894 b: 0.894 alpha: 1.0)
		extension: 	a MorphExtension (481034240) [other:  (basicColor -> (Color r: 0.823...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.674 g: 0.674 b: 0.674 alpha: 1.0)
		defaultTarget: 	a PackageTreeNautilusUI
		selectedItem: 	a ToggleMenuItemMorph(399245312)'Profile it'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(191627264)'Suggestions' a...etc...



--- The full stack ---
DITestGroup>>build
[ :testGroup | testGroup build ] in DIDicto>>dictoBuild:
Array(SequenceableCollection)>>do:
DIDicto>>dictoBuild:
DIDicto>>dictoRun:
DIDicto>>dictoAll:
DIPHPTests(DIDSLTests)>>runAndReturnObjWithText:andSuccessResults:onProject:
DIPHPTests class>>DoIt
CompiledMethod>>valueWithReceiver:arguments:
[ v := compiledMethod valueWithReceiver: receiver arguments: #() ] in SmalltalkEditor>>tallySelection
BlockClosure>>ensure:
MessageTally>>spyEvery:on:
TimeProfiler>>runBlock:pollingEvery:
TimeProfiler>>openOnBlock:
TimeProfiler class>>spyOn:
SmalltalkEditor>>tallySelection
SmalltalkEditor>>tallyIt
[ textMorph editor tallyIt ] in PluggableTextMorphWithLimits(PluggableTextMorph)>>tallyIt
[ result := editBlock value ] in PluggableTextMorphWithLimits(PluggableTextMorph)>>handleEdit:
TextMorphForEditView(TextMorph)>>handleEdit:
PluggableTextMorphWithLimits(PluggableTextMorph)>>handleEdit:
PluggableTextMorphWithLimits(PluggableTextMorph)>>tallyIt
PackageTreeNautilusUI(Object)>>perform:orSendTo:
[ 
| selArgCount |
"show cursor in case item opens a new MVC window"
(selArgCount := selector numArgs) = 0
	ifTrue: [ target perform: selector ]
	ifFalse: [ 
		selArgCount = arguments size
			ifTrue: [ target perform: selector withArguments: arguments ]
			ifFalse: [ target perform: selector withArguments: (arguments copyWith: evt) ] ].
self changed ] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
ToggleMenuItemMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
ToggleMenuItemMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
MenuMorph(Morph)>>processEvent:using:
MenuMorph(Morph)>>processEvent:
MenuMorph>>handleFocusEvent:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldState>>doOneSubCycleFor:
WorldMorph>>doOneSubCycle
MenuMorph>>invokeModalAt:in:allowKeyboard:
MenuMorph>>invokeModal:
MenuMorph>>invokeModal
PluggableTextMorphWithLimits(PluggableTextMorph)>>yellowButtonActivity:
SmalltalkEditor(TextEditor)>>mouseUp:
[ editor mouseUp: evt ] in TextMorphForEditView(TextMorph)>>mouseUp:
TextMorphForEditView(TextMorph)>>handleInteraction:
TextMorphForEditView>>handleInteraction:
TextMorphForEditView(TextMorph)>>mouseUp:
TextMorphForEditView>>mouseUp:
TextMorphForEditView(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
TextMorphForEditView(Morph)>>handleEvent:
TextMorphForEditView(Morph)>>handleFocusEvent:
[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ 
World doOneCycle.
Processor yield.
false ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Halt
24 February 2015 6:39:50.186246 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
NBCogit NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
https://github.com/pharo-project/pharo-vm.git Commit: 4a0d556150d478ff2de3c9624d2f18e6eaa3fa5c Date: 2014-12-18 18:42:53 +0100 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14893

Image: Pharo3.0 [Latest update: #30863]

DITestGroup>>build
	Receiver: a DITestGroup
	Arguments and temporary variables: 

	Receiver's instance variables: 
		rules: 	an OrderedCollection(Model cannot depend on Controller arDeleteGUI must ...etc...
		adapter: 	a DIPhpDependencies
		runCommandText: 	nil
		testSpecification: 	'[{ "subject" : "implode",
	   "argument": "ilDateTimeInputG...etc...
		adapterID: 	'DIPhpDependencies'
		resultFile: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/DictoTestSuite/1...etc...
		specificationFile: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/DictoTest...etc...
		commandFile: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/DictoTestSuite/...etc...
		xmlOutput: 	nil
		rawOutput: 	nil


[ :testGroup | testGroup build ] in DIDicto>>dictoBuild:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'
Model = PhpClass with name:"*"
Controller = PhpClass with name:"*...etc...
		adapterTestGroups: 	a Dictionary(DIGrepFileContent->a DITestGroup DIJMeterLoadTe...etc...
		testGroup: 	a DITestGroup
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424799585'
		singleShotTask: 	false


Array(SequenceableCollection)>>do:
	Receiver: an Array(a DITestGroup a DITestGroup a DITestGroup a DITestGroup a DITestGroup)
	Arguments and temporary variables: 
		aBlock: 	[ :testGroup | testGroup build ]
		index: 	4
	Receiver's instance variables: 
an Array(a DITestGroup a DITestGroup a DITestGroup a DITestGroup a DITestGroup)

DIDicto>>dictoBuild:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'
Model = PhpClass with name:"*"
Controller = PhpClass with name:"*...etc...
		adapterTestGroups: 	a Dictionary(DIGrepFileContent->a DITestGroup DIJMeterLoadTe...etc...
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424799585'
		singleShotTask: 	false


DIDicto>>dictoRun:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'
Model = PhpClass with name:"*"
Controller = PhpClass with name:"*...etc...
		adapterTestGroups: 	nil
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424799585'
		singleShotTask: 	false


DIDicto>>dictoAll:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'
Model = PhpClass with name:"*"
Controller = PhpClass with name:"*...etc...
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424799585'
		singleShotTask: 	false


DIPHPTests(DIDSLTests)>>runAndReturnObjWithText:andSuccessResults:onProject:
	Receiver: DIPHPTests
	Arguments and temporary variables: 
		dslText: 	'
Model = PhpClass with name:"*"
Controller = PhpClass with name:"*GUI...etc...
		res: 	#(false true false)
		project: 	'TestProjectPhp'
		dicto: 	a DIDicto
	Receiver's instance variables: 
		testSelector: 	nil
		expectedFails: 	nil


DIPHPTests class>>DoIt
	Receiver: DIPHPTests
	Arguments and temporary variables: 
		dsl: 	'
Model = PhpClass with name:"*"
Controller = PhpClass with name:"*GUI"

a...etc...
		success: 	#(false true false)
		test: 	DIPHPTests
	Receiver's instance variables: 
		superclass: 	DIDSLTests
		methodDict: 	a MethodDictionary(#testPhp->DIPHPTests>>#testPhp )
		format: 	134
		layout: 	a FixedLayout
		instanceVariables: 	#()
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#DIPHPTests
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Dicto-var-tests'
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set(#testP...etc...


CompiledMethod>>valueWithReceiver:arguments:
	Receiver: DIPHPTests class>>#DoIt
	Arguments and temporary variables: 
		aReceiver: 	DIPHPTests
		anArray: 	#()
	Receiver's instance variables: 
DIPHPTests class>>#DoIt

[ v := compiledMethod valueWithReceiver: receiver arguments: #() ] in SmalltalkEditor>>tallySelection
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		receiver: 	DIPHPTests
		context: 	nil
		compiledMethod: 	DIPHPTests class>>#DoIt
		profiler: 	nil
		v: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(509870080)
		selectionShowing: 	true
		model: 	a PackageTreeNautilusUI
		editingState: 	a SmalltalkEditingState


BlockClosure>>ensure:
	Receiver: [ v := compiledMethod valueWithReceiver: receiver arguments: #() ]
	Arguments and temporary variables: 
		aBlock: 	[ 
"cancel the probe and return the value"
"Could have already been ter...etc...
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor>>tallySelection
		startpc: 	105
		numArgs: 	0


MessageTally>>spyEvery:on:
	Receiver: nil(SmalltalkEditor) >> tallySelection
	Arguments and temporary variables: 
		observedProcess: 	a Process in nil
		millisecs: 	1
		aBlock: 	[ v := compiledMethod valueWithReceiver: receiver arguments: #() ]
		myDelay: 	a Delay(1 msecs; 1 msecs remaining)
		time0: 	1941244
	Receiver's instance variables: 
		class: 	SmalltalkEditor
		method: 	SmalltalkEditor>>#tallySelection
		process: 	nil
		tally: 	5507
		receivers: 	an Array(nil(CompiledMethod) >> valueWithReceiver:arguments: nil(DID...etc...
		senders: 	nil
		time: 	0
		gcStats: 	#(69802352 71144768 76160328 nil nil 2000 5 487 10267 4639 282 0 0 0 0...etc...
		maxClassNameSize: 	1000
		maxClassPlusSelectorSize: 	1000
		maxTabs: 	100
		reportOtherProcesses: 	true


TimeProfiler>>runBlock:pollingEvery:
	Receiver: a TimeProfiler
	Arguments and temporary variables: 
		aBlock: 	[ v := compiledMethod valueWithReceiver: receiver arguments: #() ]
		pollPeriod: 	1
	Receiver's instance variables: 
		dependents: 	nil
		selection: 	nil
		announcer: 	nil
		rootItems: 	nil
		autoMultiSelection: 	nil
		headerLabel: 	nil
		multiSelection: 	nil
		wrapBlockOrSelector: 	nil
		isCheckList: 	nil
		enabled: 	nil
		win: 	nil
		rootMessageTally: 	nil(SmalltalkEditor) >> tallySelection
		threshold: 	nil
		minPercentageToExpand: 	nil
		treeMorph: 	nil
		block: 	[ v := compiledMethod valueWithReceiver: receiver arguments: #() ]
		blockCodePane: 	nil
		withBlockCodePane: 	false
		blockSource: 	nil
		reportOtherProcesses: 	nil
		showLeavesOnly: 	nil
		codeTabPane: 	nil
		resultPane: 	nil
		result: 	nil
		withToolBar: 	false


TimeProfiler>>openOnBlock:
	Receiver: a TimeProfiler
	Arguments and temporary variables: 
		aBlock: 	[ v := compiledMethod valueWithReceiver: receiver arguments: #() ]
	Receiver's instance variables: 
		dependents: 	nil
		selection: 	nil
		announcer: 	nil
		rootItems: 	nil
		autoMultiSelection: 	nil
		headerLabel: 	nil
		multiSelection: 	nil
		wrapBlockOrSelector: 	nil
		isCheckList: 	nil
		enabled: 	nil
		win: 	nil
		rootMessageTally: 	nil(SmalltalkEditor) >> tallySelection
		threshold: 	nil
		minPercentageToExpand: 	nil
		treeMorph: 	nil
		block: 	[ v := compiledMethod valueWithReceiver: receiver arguments: #() ]
		blockCodePane: 	nil
		withBlockCodePane: 	false
		blockSource: 	nil
		reportOtherProcesses: 	nil
		showLeavesOnly: 	nil
		codeTabPane: 	nil
		resultPane: 	nil
		result: 	nil
		withToolBar: 	false


TimeProfiler class>>spyOn:
	Receiver: TimeProfiler
	Arguments and temporary variables: 
		aBlock: 	[ v := compiledMethod valueWithReceiver: receiver arguments: #() ]
	Receiver's instance variables: 
		superclass: 	MorphTreeModel
		methodDict: 	a MethodDictionary(#blockCode->TimeProfiler>>#blockCode #blockCode:...etc...
		format: 	180
		layout: 	a FixedLayout
		instanceVariables: 	#(#win #rootMessageTally #threshold #minPercentageToExpand #...etc...
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#TimeProfiler
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Tools-Profilers'
		traitComposition: 	{}
		localSelectors: 	nil


SmalltalkEditor>>tallySelection
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		v: 	nil
		receiver: 	DIPHPTests
		context: 	nil
		compiledMethod: 	DIPHPTests class>>#DoIt
		profiler: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(509870080)
		selectionShowing: 	true
		model: 	a PackageTreeNautilusUI
		editingState: 	a SmalltalkEditingState


SmalltalkEditor>>tallyIt
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 

	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(509870080)
		selectionShowing: 	true
		model: 	a PackageTreeNautilusUI
		editingState: 	a SmalltalkEditingState


[ textMorph editor tallyIt ] in PluggableTextMorphWithLimits(PluggableTextMorph)>>tallyIt
	Receiver: a PluggableTextMorphWithLimits(303038464)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(30.0@455.0) corner: (876.0@849.0)
		owner: 	a MultipleMethodsEditor(286261248)
		submorphs: 	an Array(an AlphaImageMorph(499908608) a TransformMorph(735313920))
		fullBounds: 	(30@455) corner: (876@849)
		color: 	Color white
		extension: 	a MorphExtension (488636416) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.784 g: 0.784 b: 0.784 alpha: 1.0)
		model: 	a PackageTreeNautilusUI
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(344719360)
		scroller: 	a TransformMorph(735313920)
		getMenuSelector: 	#sourceCodeMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(65273856)
		textMorph: 	a TextMorphForEditView(509870080)
		getTextSelector: 	#sourceCodeFrom:
		setTextSelector: 	#compileSource:notifying:
		getSelectionSelector: 	#contentsSelectionFrom:
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(9 to: 475)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil
		doubleClickSelector: 	nil
		setSelectionSelector: 	nil
		alertLimit: 	700
		locked: 	false
		warningLimit: 	350
		method: 	nil
		lockIcon: 	an AlphaImageMorph(499908608)
		canLockChangeSelector: 	#canChangeLockFor:
		lockSelector: 	#lockTextArea:from:


[ result := editBlock value ] in PluggableTextMorphWithLimits(PluggableTextMorph)>>handleEdit:
	Receiver: a PluggableTextMorphWithLimits(303038464)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph editor tallyIt ]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(30.0@455.0) corner: (876.0@849.0)
		owner: 	a MultipleMethodsEditor(286261248)
		submorphs: 	an Array(an AlphaImageMorph(499908608) a TransformMorph(735313920))
		fullBounds: 	(30@455) corner: (876@849)
		color: 	Color white
		extension: 	a MorphExtension (488636416) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.784 g: 0.784 b: 0.784 alpha: 1.0)
		model: 	a PackageTreeNautilusUI
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(344719360)
		scroller: 	a TransformMorph(735313920)
		getMenuSelector: 	#sourceCodeMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(65273856)
		textMorph: 	a TextMorphForEditView(509870080)
		getTextSelector: 	#sourceCodeFrom:
		setTextSelector: 	#compileSource:notifying:
		getSelectionSelector: 	#contentsSelectionFrom:
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(9 to: 475)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil
		doubleClickSelector: 	nil
		setSelectionSelector: 	nil
		alertLimit: 	700
		locked: 	false
		warningLimit: 	350
		method: 	nil
		lockIcon: 	an AlphaImageMorph(499908608)
		canLockChangeSelector: 	#canChangeLockFor:
		lockSelector: 	#lockTextArea:from:


TextMorphForEditView(TextMorph)>>handleEdit:
	Receiver: a TextMorphForEditView(509870080)
	Arguments and temporary variables: 
		editBlock: 	[ result := editBlock value ]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (838@344)
		owner: 	a TransformMorph(735313920)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (838@344)
		color: 	Color black
		extension: 	a MorphExtension (552599552) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Source Code Pro
		text: 	a Text for 'testPhp
| dsl success test|
	
dsl := ''
Model = PhpClass with...etc...
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		defaultColor: 	Color black
		editView: 	a PluggableTextMorphWithLimits(303038464)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


PluggableTextMorphWithLimits(PluggableTextMorph)>>handleEdit:
	Receiver: a PluggableTextMorphWithLimits(303038464)
	Arguments and temporary variables: 
		result: 	nil
		editBlock: 	[ textMorph editor tallyIt ]
	Receiver's instance variables: 
		bounds: 	(30.0@455.0) corner: (876.0@849.0)
		owner: 	a MultipleMethodsEditor(286261248)
		submorphs: 	an Array(an AlphaImageMorph(499908608) a TransformMorph(735313920))
		fullBounds: 	(30@455) corner: (876@849)
		color: 	Color white
		extension: 	a MorphExtension (488636416) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.784 g: 0.784 b: 0.784 alpha: 1.0)
		model: 	a PackageTreeNautilusUI
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(344719360)
		scroller: 	a TransformMorph(735313920)
		getMenuSelector: 	#sourceCodeMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(65273856)
		textMorph: 	a TextMorphForEditView(509870080)
		getTextSelector: 	#sourceCodeFrom:
		setTextSelector: 	#compileSource:notifying:
		getSelectionSelector: 	#contentsSelectionFrom:
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(9 to: 475)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil
		doubleClickSelector: 	nil
		setSelectionSelector: 	nil
		alertLimit: 	700
		locked: 	false
		warningLimit: 	350
		method: 	nil
		lockIcon: 	an AlphaImageMorph(499908608)
		canLockChangeSelector: 	#canChangeLockFor:
		lockSelector: 	#lockTextArea:from:


PluggableTextMorphWithLimits(PluggableTextMorph)>>tallyIt
	Receiver: a PluggableTextMorphWithLimits(303038464)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(30.0@455.0) corner: (876.0@849.0)
		owner: 	a MultipleMethodsEditor(286261248)
		submorphs: 	an Array(an AlphaImageMorph(499908608) a TransformMorph(735313920))
		fullBounds: 	(30@455) corner: (876@849)
		color: 	Color white
		extension: 	a MorphExtension (488636416) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.784 g: 0.784 b: 0.784 alpha: 1.0)
		model: 	a PackageTreeNautilusUI
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(344719360)
		scroller: 	a TransformMorph(735313920)
		getMenuSelector: 	#sourceCodeMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(65273856)
		textMorph: 	a TextMorphForEditView(509870080)
		getTextSelector: 	#sourceCodeFrom:
		setTextSelector: 	#compileSource:notifying:
		getSelectionSelector: 	#contentsSelectionFrom:
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(9 to: 475)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil
		doubleClickSelector: 	nil
		setSelectionSelector: 	nil
		alertLimit: 	700
		locked: 	false
		warningLimit: 	350
		method: 	nil
		lockIcon: 	an AlphaImageMorph(499908608)
		canLockChangeSelector: 	#canChangeLockFor:
		lockSelector: 	#lockTextArea:from:


PackageTreeNautilusUI(Object)>>perform:orSendTo:
	Receiver: a PackageTreeNautilusUI
	Arguments and temporary variables: 
		selector: 	#tallyIt
		otherTarget: 	a PluggableTextMorphWithLimits(303038464)
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a CategoryWidget a MethodWidget a NautilusWindow(...etc...
		model: 	a PackageTreeNautilus
		window: 	a NautilusWindow(542638080)
		hierarchyClass: 	DITestGroup
		cachedHierarchy: 	a SortHierarchically
		sourceTextArea: 	a PluggableTextMorphWithLimits(303038464)
		groupsSelection: 	a Dictionary()
		packagesSelection: 	a Dictionary(var-tests->true )
		classesSelection: 	a Dictionary(DIPHPTests->true )
		list: 	a MorphTreeMorph(273940480)
		list2: 	a PluggableIconListMorph(454295552)
		sourceCodePanel: 	a PanelMorph(183500800)
		commentTextArea: 	nil
		currentDisplayChoice: 	#SourceCode
		sourceTextAreaLimit: 	350
		sourceCodeContainer: 	a PanelMorph(584843264)
		list2Elements: 	{DIDSLTests. DIJavaTests. DIPHPTests. DISTTests}
		listElements: 	nil
		shouldUpdateTitle: 	true
		testSemaphore: 	a Semaphore()
		sourceTextAreas: 	an OrderedCollection(a PluggableTextMorphWithLimits(303038464)...etc...
		multipleMethodsEditor: 	a MultipleMethodsEditor(286261248)
		contentSelection: 	nil
		acceptor: 	a MethodDefinitionAcceptor
		classifier: 	a MethodClassifier
		categoryWidget: 	a CategoryWidget
		methodWidget: 	a MethodWidget
		packagePattern: 	a RxMatcher
		searchWidget: 	a SearchMorph(866648064)


[ 
| selArgCount |
"show cursor in case item opens a new MVC window"
(selArgCount := selector numArgs) = 0
	ifTrue: [ target perform: selector ]
	ifFalse: [ 
		selArgCount = arguments size
			ifTrue: [ target perform: selector withArguments: arguments ]
			ifFalse: [ target perform: selector withArguments: (arguments copyWith: evt) ] ].
self changed ] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(399245312)'Profile it'
	Arguments and temporary variables: 
		evt: 	[(344@583) mouseUp 1941214 nil]
		w: 	a WorldMorph(511705088) [world]
		selArgCount: 	2
	Receiver's instance variables: 
		bounds: 	(245.0@576.0) corner: (416.0@594.0)
		owner: 	a MenuMorph(439615488)
		submorphs: 	#()
		fullBounds: 	(245.0@576.0) corner: (416.0@594.0)
		color: 	Color black
		extension: 	a MorphExtension (422576128)
		font: 	a LogicalFont
 familyName: Source Sans Pro
 emphasis: nil
 pointSize: 10
...etc...
		emphasis: 	0
		contents: 	'Profile it'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a PackageTreeNautilusUI
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#tallyIt a PluggableTextMorphWithLimits(303038464))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


BlockClosure>>ensure:
	Receiver: [ 
| selArgCount |
"show cursor in case item opens a new MVC window"
(selArgCount := selec...etc...
	Arguments and temporary variables: 
		aBlock: 	[ oldcursor show ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
		startpc: 	134
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r100000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[ 
| selArgCount |
"show cursor in case item opens a new MVC window"
(s...etc...
		oldcursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	(-1@ -1)
		maskForm: 	Form(16x16x1)


ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(399245312)'Profile it'
	Arguments and temporary variables: 
		evt: 	[(344@583) mouseUp 1941214 nil]
		w: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		bounds: 	(245.0@576.0) corner: (416.0@594.0)
		owner: 	a MenuMorph(439615488)
		submorphs: 	#()
		fullBounds: 	(245.0@576.0) corner: (416.0@594.0)
		color: 	Color black
		extension: 	a MorphExtension (422576128)
		font: 	a LogicalFont
 familyName: Source Sans Pro
 emphasis: nil
 pointSize: 10
...etc...
		emphasis: 	0
		contents: 	'Profile it'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a PackageTreeNautilusUI
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#tallyIt a PluggableTextMorphWithLimits(303038464))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
	Receiver: a ToggleMenuItemMorph(399245312)'Profile it'
	Arguments and temporary variables: 
		evt: 	[(344@583) mouseUp 1941214 nil]
	Receiver's instance variables: 
		bounds: 	(245.0@576.0) corner: (416.0@594.0)
		owner: 	a MenuMorph(439615488)
		submorphs: 	#()
		fullBounds: 	(245.0@576.0) corner: (416.0@594.0)
		color: 	Color black
		extension: 	a MorphExtension (422576128)
		font: 	a LogicalFont
 familyName: Source Sans Pro
 emphasis: nil
 pointSize: 10
...etc...
		emphasis: 	0
		contents: 	'Profile it'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a PackageTreeNautilusUI
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#tallyIt a PluggableTextMorphWithLimits(303038464))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
	Receiver: a ToggleMenuItemMorph(399245312)'Profile it'
	Arguments and temporary variables: 
		anEvent: 	[(344@583) mouseUp 1941214 nil]
	Receiver's instance variables: 
		bounds: 	(245.0@576.0) corner: (416.0@594.0)
		owner: 	a MenuMorph(439615488)
		submorphs: 	#()
		fullBounds: 	(245.0@576.0) corner: (416.0@594.0)
		color: 	Color black
		extension: 	a MorphExtension (422576128)
		font: 	a LogicalFont
 familyName: Source Sans Pro
 emphasis: nil
 pointSize: 10
...etc...
		emphasis: 	0
		contents: 	'Profile it'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a PackageTreeNautilusUI
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#tallyIt a PluggableTextMorphWithLimits(303038464))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [(344@583) mouseUp 1941214 nil]
	Arguments and temporary variables: 
		anObject: 	a ToggleMenuItemMorph(399245312)'Profile it'
	Receiver's instance variables: 
		timeStamp: 	1941214
		source: 	a HandMorph(760479744)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(344@583)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


ToggleMenuItemMorph(Morph)>>handleEvent:
	Receiver: a ToggleMenuItemMorph(399245312)'Profile it'
	Arguments and temporary variables: 
		anEvent: 	[(344@583) mouseUp 1941214 nil]
	Receiver's instance variables: 
		bounds: 	(245.0@576.0) corner: (416.0@594.0)
		owner: 	a MenuMorph(439615488)
		submorphs: 	#()
		fullBounds: 	(245.0@576.0) corner: (416.0@594.0)
		color: 	Color black
		extension: 	a MorphExtension (422576128)
		font: 	a LogicalFont
 familyName: Source Sans Pro
 emphasis: nil
 pointSize: 10
...etc...
		emphasis: 	0
		contents: 	'Profile it'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a PackageTreeNautilusUI
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#tallyIt a PluggableTextMorphWithLimits(303038464))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(344@583) mouseUp 1941214 nil]
		aMorph: 	a ToggleMenuItemMorph(399245312)'Profile it'
		localEvt: 	nil
		index: 	1
		child: 	nil
		morphs: 	#()
		inside: 	true
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(344@583) mouseUp 1941214 nil]
		aMorph: 	a ToggleMenuItemMorph(399245312)'Profile it'
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


ToggleMenuItemMorph(Morph)>>processEvent:using:
	Receiver: a ToggleMenuItemMorph(399245312)'Profile it'
	Arguments and temporary variables: 
		anEvent: 	[(344@583) mouseUp 1941214 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	(245.0@576.0) corner: (416.0@594.0)
		owner: 	a MenuMorph(439615488)
		submorphs: 	#()
		fullBounds: 	(245.0@576.0) corner: (416.0@594.0)
		color: 	Color black
		extension: 	a MorphExtension (422576128)
		font: 	a LogicalFont
 familyName: Source Sans Pro
 emphasis: nil
 pointSize: 10
...etc...
		emphasis: 	0
		contents: 	'Profile it'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a PackageTreeNautilusUI
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#tallyIt a PluggableTextMorphWithLimits(303038464))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(344@583) mouseUp 1941214 nil]
		aMorph: 	a MenuMorph(439615488)
		localEvt: 	[(344@583) mouseUp 1941214 nil]
		index: 	11
		child: 	a ToggleMenuItemMorph(399245312)'Profile it'
		morphs: 	an Array(a ToggleMenuItemMorph(191627264)'Suggestions' a MenuLineMorph(...etc...
		inside: 	false
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(344@583) mouseUp 1941214 nil]
		aMorph: 	a MenuMorph(439615488)
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MenuMorph(Morph)>>processEvent:using:
	Receiver: a MenuMorph(439615488)
	Arguments and temporary variables: 
		anEvent: 	[(344@583) mouseUp 1941214 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	(240.0@416.0) corner: (421.0@858.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(191627264)'Suggestions' a MenuLineMor...etc...
		fullBounds: 	(240.0@416.0) corner: (421.0@858.0)
		color: 	(Color r: 0.894 g: 0.894 b: 0.894 alpha: 1.0)
		extension: 	a MorphExtension (481034240) [other:  (basicColor -> (Color r: 0.823...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.674 g: 0.674 b: 0.674 alpha: 1.0)
		defaultTarget: 	a PackageTreeNautilusUI
		selectedItem: 	a ToggleMenuItemMorph(399245312)'Profile it'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(191627264)'Suggestions' a...etc...


MenuMorph(Morph)>>processEvent:
	Receiver: a MenuMorph(439615488)
	Arguments and temporary variables: 
		anEvent: 	[(344@583) mouseUp 1941214 nil]
	Receiver's instance variables: 
		bounds: 	(240.0@416.0) corner: (421.0@858.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(191627264)'Suggestions' a MenuLineMor...etc...
		fullBounds: 	(240.0@416.0) corner: (421.0@858.0)
		color: 	(Color r: 0.894 g: 0.894 b: 0.894 alpha: 1.0)
		extension: 	a MorphExtension (481034240) [other:  (basicColor -> (Color r: 0.823...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.674 g: 0.674 b: 0.674 alpha: 1.0)
		defaultTarget: 	a PackageTreeNautilusUI
		selectedItem: 	a ToggleMenuItemMorph(399245312)'Profile it'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(191627264)'Suggestions' a...etc...


MenuMorph>>handleFocusEvent:
	Receiver: a MenuMorph(439615488)
	Arguments and temporary variables: 
		evt: 	[(344@583) mouseUp 1941214 nil]
	Receiver's instance variables: 
		bounds: 	(240.0@416.0) corner: (421.0@858.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(191627264)'Suggestions' a MenuLineMor...etc...
		fullBounds: 	(240.0@416.0) corner: (421.0@858.0)
		color: 	(Color r: 0.894 g: 0.894 b: 0.894 alpha: 1.0)
		extension: 	a MorphExtension (481034240) [other:  (basicColor -> (Color r: 0.823...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.674 g: 0.674 b: 0.674 alpha: 1.0)
		defaultTarget: 	a PackageTreeNautilusUI
		selectedItem: 	a ToggleMenuItemMorph(399245312)'Profile it'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(191627264)'Suggestions' a...etc...



--- The full stack ---
DITestGroup>>build
[ :testGroup | testGroup build ] in DIDicto>>dictoBuild:
Array(SequenceableCollection)>>do:
DIDicto>>dictoBuild:
DIDicto>>dictoRun:
DIDicto>>dictoAll:
DIPHPTests(DIDSLTests)>>runAndReturnObjWithText:andSuccessResults:onProject:
DIPHPTests class>>DoIt
CompiledMethod>>valueWithReceiver:arguments:
[ v := compiledMethod valueWithReceiver: receiver arguments: #() ] in SmalltalkEditor>>tallySelection
BlockClosure>>ensure:
MessageTally>>spyEvery:on:
TimeProfiler>>runBlock:pollingEvery:
TimeProfiler>>openOnBlock:
TimeProfiler class>>spyOn:
SmalltalkEditor>>tallySelection
SmalltalkEditor>>tallyIt
[ textMorph editor tallyIt ] in PluggableTextMorphWithLimits(PluggableTextMorph)>>tallyIt
[ result := editBlock value ] in PluggableTextMorphWithLimits(PluggableTextMorph)>>handleEdit:
TextMorphForEditView(TextMorph)>>handleEdit:
PluggableTextMorphWithLimits(PluggableTextMorph)>>handleEdit:
PluggableTextMorphWithLimits(PluggableTextMorph)>>tallyIt
PackageTreeNautilusUI(Object)>>perform:orSendTo:
[ 
| selArgCount |
"show cursor in case item opens a new MVC window"
(selArgCount := selector numArgs) = 0
	ifTrue: [ target perform: selector ]
	ifFalse: [ 
		selArgCount = arguments size
			ifTrue: [ target perform: selector withArguments: arguments ]
			ifFalse: [ target perform: selector withArguments: (arguments copyWith: evt) ] ].
self changed ] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
ToggleMenuItemMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
ToggleMenuItemMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
MenuMorph(Morph)>>processEvent:using:
MenuMorph(Morph)>>processEvent:
MenuMorph>>handleFocusEvent:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldState>>doOneSubCycleFor:
WorldMorph>>doOneSubCycle
MenuMorph>>invokeModalAt:in:allowKeyboard:
MenuMorph>>invokeModal:
MenuMorph>>invokeModal
PluggableTextMorphWithLimits(PluggableTextMorph)>>yellowButtonActivity:
SmalltalkEditor(TextEditor)>>mouseUp:
[ editor mouseUp: evt ] in TextMorphForEditView(TextMorph)>>mouseUp:
TextMorphForEditView(TextMorph)>>handleInteraction:
TextMorphForEditView>>handleInteraction:
TextMorphForEditView(TextMorph)>>mouseUp:
TextMorphForEditView>>mouseUp:
TextMorphForEditView(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
TextMorphForEditView(Morph)>>handleEvent:
TextMorphForEditView(Morph)>>handleFocusEvent:
[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ 
World doOneCycle.
Processor yield.
false ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Halt
24 February 2015 6:39:52.421699 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
NBCogit NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
https://github.com/pharo-project/pharo-vm.git Commit: 4a0d556150d478ff2de3c9624d2f18e6eaa3fa5c Date: 2014-12-18 18:42:53 +0100 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14893

Image: Pharo3.0 [Latest update: #30863]

DITestGroup>>build
	Receiver: a DITestGroup
	Arguments and temporary variables: 

	Receiver's instance variables: 
		rules: 	an OrderedCollection(Model cannot depend on Controller arDeleteGUI must ...etc...
		adapter: 	a DIPhpDependencies
		runCommandText: 	'#!/bin/bash
type -P hhvm &>/dev/null && hhvm $DICTO.TOOLDIR/ph...etc...
		testSpecification: 	'[{ "subject" : "implode",
	   "argument": "ilDateTimeInputG...etc...
		adapterID: 	'DIPhpDependencies'
		resultFile: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/DictoTestSuite/1...etc...
		specificationFile: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/DictoTest...etc...
		commandFile: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/DictoTestSuite/...etc...
		xmlOutput: 	nil
		rawOutput: 	nil


[ :testGroup | testGroup build ] in DIDicto>>dictoBuild:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'
Model = PhpClass with name:"*"
Controller = PhpClass with name:"*...etc...
		adapterTestGroups: 	a Dictionary(DIGrepFileContent->a DITestGroup DIJMeterLoadTe...etc...
		testGroup: 	a DITestGroup
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424799585'
		singleShotTask: 	false


Array(SequenceableCollection)>>do:
	Receiver: an Array(a DITestGroup a DITestGroup a DITestGroup a DITestGroup a DITestGroup)
	Arguments and temporary variables: 
		aBlock: 	[ :testGroup | testGroup build ]
		index: 	4
	Receiver's instance variables: 
an Array(a DITestGroup a DITestGroup a DITestGroup a DITestGroup a DITestGroup)

DIDicto>>dictoBuild:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'
Model = PhpClass with name:"*"
Controller = PhpClass with name:"*...etc...
		adapterTestGroups: 	a Dictionary(DIGrepFileContent->a DITestGroup DIJMeterLoadTe...etc...
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424799585'
		singleShotTask: 	false


DIDicto>>dictoRun:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'
Model = PhpClass with name:"*"
Controller = PhpClass with name:"*...etc...
		adapterTestGroups: 	nil
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424799585'
		singleShotTask: 	false


DIDicto>>dictoAll:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'
Model = PhpClass with name:"*"
Controller = PhpClass with name:"*...etc...
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1424799585'
		singleShotTask: 	false


DIPHPTests(DIDSLTests)>>runAndReturnObjWithText:andSuccessResults:onProject:
	Receiver: DIPHPTests
	Arguments and temporary variables: 
		dslText: 	'
Model = PhpClass with name:"*"
Controller = PhpClass with name:"*GUI...etc...
		res: 	#(false true false)
		project: 	'TestProjectPhp'
		dicto: 	a DIDicto
	Receiver's instance variables: 
		testSelector: 	nil
		expectedFails: 	nil


DIPHPTests class>>DoIt
	Receiver: DIPHPTests
	Arguments and temporary variables: 
		dsl: 	'
Model = PhpClass with name:"*"
Controller = PhpClass with name:"*GUI"

a...etc...
		success: 	#(false true false)
		test: 	DIPHPTests
	Receiver's instance variables: 
		superclass: 	DIDSLTests
		methodDict: 	a MethodDictionary(#testPhp->DIPHPTests>>#testPhp )
		format: 	134
		layout: 	a FixedLayout
		instanceVariables: 	#()
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#DIPHPTests
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Dicto-var-tests'
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set(#testP...etc...


CompiledMethod>>valueWithReceiver:arguments:
	Receiver: DIPHPTests class>>#DoIt
	Arguments and temporary variables: 
		aReceiver: 	DIPHPTests
		anArray: 	#()
	Receiver's instance variables: 
DIPHPTests class>>#DoIt

[ v := compiledMethod valueWithReceiver: receiver arguments: #() ] in SmalltalkEditor>>tallySelection
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		receiver: 	DIPHPTests
		context: 	nil
		compiledMethod: 	DIPHPTests class>>#DoIt
		profiler: 	nil
		v: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(509870080)
		selectionShowing: 	true
		model: 	a PackageTreeNautilusUI
		editingState: 	a SmalltalkEditingState


BlockClosure>>ensure:
	Receiver: [ v := compiledMethod valueWithReceiver: receiver arguments: #() ]
	Arguments and temporary variables: 
		aBlock: 	[ 
"cancel the probe and return the value"
"Could have already been ter...etc...
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor>>tallySelection
		startpc: 	105
		numArgs: 	0


MessageTally>>spyEvery:on:
	Receiver: nil(SmalltalkEditor) >> tallySelection
	Arguments and temporary variables: 
		observedProcess: 	a Process in nil
		millisecs: 	1
		aBlock: 	[ v := compiledMethod valueWithReceiver: receiver arguments: #() ]
		myDelay: 	a Delay(1 msecs; 1 msecs remaining)
		time0: 	1941244
	Receiver's instance variables: 
		class: 	SmalltalkEditor
		method: 	SmalltalkEditor>>#tallySelection
		process: 	nil
		tally: 	7749
		receivers: 	an Array(nil(CompiledMethod) >> valueWithReceiver:arguments: nil(DID...etc...
		senders: 	nil
		time: 	0
		gcStats: 	#(69802352 71144768 76160328 nil nil 2000 5 487 10267 4639 282 0 0 0 0...etc...
		maxClassNameSize: 	1000
		maxClassPlusSelectorSize: 	1000
		maxTabs: 	100
		reportOtherProcesses: 	true


TimeProfiler>>runBlock:pollingEvery:
	Receiver: a TimeProfiler
	Arguments and temporary variables: 
		aBlock: 	[ v := compiledMethod valueWithReceiver: receiver arguments: #() ]
		pollPeriod: 	1
	Receiver's instance variables: 
		dependents: 	nil
		selection: 	nil
		announcer: 	nil
		rootItems: 	nil
		autoMultiSelection: 	nil
		headerLabel: 	nil
		multiSelection: 	nil
		wrapBlockOrSelector: 	nil
		isCheckList: 	nil
		enabled: 	nil
		win: 	nil
		rootMessageTally: 	nil(SmalltalkEditor) >> tallySelection
		threshold: 	nil
		minPercentageToExpand: 	nil
		treeMorph: 	nil
		block: 	[ v := compiledMethod valueWithReceiver: receiver arguments: #() ]
		blockCodePane: 	nil
		withBlockCodePane: 	false
		blockSource: 	nil
		reportOtherProcesses: 	nil
		showLeavesOnly: 	nil
		codeTabPane: 	nil
		resultPane: 	nil
		result: 	nil
		withToolBar: 	false


TimeProfiler>>openOnBlock:
	Receiver: a TimeProfiler
	Arguments and temporary variables: 
		aBlock: 	[ v := compiledMethod valueWithReceiver: receiver arguments: #() ]
	Receiver's instance variables: 
		dependents: 	nil
		selection: 	nil
		announcer: 	nil
		rootItems: 	nil
		autoMultiSelection: 	nil
		headerLabel: 	nil
		multiSelection: 	nil
		wrapBlockOrSelector: 	nil
		isCheckList: 	nil
		enabled: 	nil
		win: 	nil
		rootMessageTally: 	nil(SmalltalkEditor) >> tallySelection
		threshold: 	nil
		minPercentageToExpand: 	nil
		treeMorph: 	nil
		block: 	[ v := compiledMethod valueWithReceiver: receiver arguments: #() ]
		blockCodePane: 	nil
		withBlockCodePane: 	false
		blockSource: 	nil
		reportOtherProcesses: 	nil
		showLeavesOnly: 	nil
		codeTabPane: 	nil
		resultPane: 	nil
		result: 	nil
		withToolBar: 	false


TimeProfiler class>>spyOn:
	Receiver: TimeProfiler
	Arguments and temporary variables: 
		aBlock: 	[ v := compiledMethod valueWithReceiver: receiver arguments: #() ]
	Receiver's instance variables: 
		superclass: 	MorphTreeModel
		methodDict: 	a MethodDictionary(#blockCode->TimeProfiler>>#blockCode #blockCode:...etc...
		format: 	180
		layout: 	a FixedLayout
		instanceVariables: 	#(#win #rootMessageTally #threshold #minPercentageToExpand #...etc...
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#TimeProfiler
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Tools-Profilers'
		traitComposition: 	{}
		localSelectors: 	nil


SmalltalkEditor>>tallySelection
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		v: 	nil
		receiver: 	DIPHPTests
		context: 	nil
		compiledMethod: 	DIPHPTests class>>#DoIt
		profiler: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(509870080)
		selectionShowing: 	true
		model: 	a PackageTreeNautilusUI
		editingState: 	a SmalltalkEditingState


SmalltalkEditor>>tallyIt
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 

	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(509870080)
		selectionShowing: 	true
		model: 	a PackageTreeNautilusUI
		editingState: 	a SmalltalkEditingState


[ textMorph editor tallyIt ] in PluggableTextMorphWithLimits(PluggableTextMorph)>>tallyIt
	Receiver: a PluggableTextMorphWithLimits(303038464)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(30.0@455.0) corner: (876.0@849.0)
		owner: 	a MultipleMethodsEditor(286261248)
		submorphs: 	an Array(an AlphaImageMorph(499908608) a TransformMorph(735313920))
		fullBounds: 	(30@455) corner: (876@849)
		color: 	Color white
		extension: 	a MorphExtension (488636416) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.784 g: 0.784 b: 0.784 alpha: 1.0)
		model: 	a PackageTreeNautilusUI
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(344719360)
		scroller: 	a TransformMorph(735313920)
		getMenuSelector: 	#sourceCodeMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(65273856)
		textMorph: 	a TextMorphForEditView(509870080)
		getTextSelector: 	#sourceCodeFrom:
		setTextSelector: 	#compileSource:notifying:
		getSelectionSelector: 	#contentsSelectionFrom:
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(9 to: 475)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil
		doubleClickSelector: 	nil
		setSelectionSelector: 	nil
		alertLimit: 	700
		locked: 	false
		warningLimit: 	350
		method: 	nil
		lockIcon: 	an AlphaImageMorph(499908608)
		canLockChangeSelector: 	#canChangeLockFor:
		lockSelector: 	#lockTextArea:from:


[ result := editBlock value ] in PluggableTextMorphWithLimits(PluggableTextMorph)>>handleEdit:
	Receiver: a PluggableTextMorphWithLimits(303038464)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph editor tallyIt ]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(30.0@455.0) corner: (876.0@849.0)
		owner: 	a MultipleMethodsEditor(286261248)
		submorphs: 	an Array(an AlphaImageMorph(499908608) a TransformMorph(735313920))
		fullBounds: 	(30@455) corner: (876@849)
		color: 	Color white
		extension: 	a MorphExtension (488636416) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.784 g: 0.784 b: 0.784 alpha: 1.0)
		model: 	a PackageTreeNautilusUI
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(344719360)
		scroller: 	a TransformMorph(735313920)
		getMenuSelector: 	#sourceCodeMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(65273856)
		textMorph: 	a TextMorphForEditView(509870080)
		getTextSelector: 	#sourceCodeFrom:
		setTextSelector: 	#compileSource:notifying:
		getSelectionSelector: 	#contentsSelectionFrom:
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(9 to: 475)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil
		doubleClickSelector: 	nil
		setSelectionSelector: 	nil
		alertLimit: 	700
		locked: 	false
		warningLimit: 	350
		method: 	nil
		lockIcon: 	an AlphaImageMorph(499908608)
		canLockChangeSelector: 	#canChangeLockFor:
		lockSelector: 	#lockTextArea:from:


TextMorphForEditView(TextMorph)>>handleEdit:
	Receiver: a TextMorphForEditView(509870080)
	Arguments and temporary variables: 
		editBlock: 	[ result := editBlock value ]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (838@344)
		owner: 	a TransformMorph(735313920)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (838@344)
		color: 	Color black
		extension: 	a MorphExtension (552599552) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Source Code Pro
		text: 	a Text for 'testPhp
| dsl success test|
	
dsl := ''
Model = PhpClass with...etc...
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		defaultColor: 	Color black
		editView: 	a PluggableTextMorphWithLimits(303038464)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


PluggableTextMorphWithLimits(PluggableTextMorph)>>handleEdit:
	Receiver: a PluggableTextMorphWithLimits(303038464)
	Arguments and temporary variables: 
		result: 	nil
		editBlock: 	[ textMorph editor tallyIt ]
	Receiver's instance variables: 
		bounds: 	(30.0@455.0) corner: (876.0@849.0)
		owner: 	a MultipleMethodsEditor(286261248)
		submorphs: 	an Array(an AlphaImageMorph(499908608) a TransformMorph(735313920))
		fullBounds: 	(30@455) corner: (876@849)
		color: 	Color white
		extension: 	a MorphExtension (488636416) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.784 g: 0.784 b: 0.784 alpha: 1.0)
		model: 	a PackageTreeNautilusUI
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(344719360)
		scroller: 	a TransformMorph(735313920)
		getMenuSelector: 	#sourceCodeMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(65273856)
		textMorph: 	a TextMorphForEditView(509870080)
		getTextSelector: 	#sourceCodeFrom:
		setTextSelector: 	#compileSource:notifying:
		getSelectionSelector: 	#contentsSelectionFrom:
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(9 to: 475)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil
		doubleClickSelector: 	nil
		setSelectionSelector: 	nil
		alertLimit: 	700
		locked: 	false
		warningLimit: 	350
		method: 	nil
		lockIcon: 	an AlphaImageMorph(499908608)
		canLockChangeSelector: 	#canChangeLockFor:
		lockSelector: 	#lockTextArea:from:


PluggableTextMorphWithLimits(PluggableTextMorph)>>tallyIt
	Receiver: a PluggableTextMorphWithLimits(303038464)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(30.0@455.0) corner: (876.0@849.0)
		owner: 	a MultipleMethodsEditor(286261248)
		submorphs: 	an Array(an AlphaImageMorph(499908608) a TransformMorph(735313920))
		fullBounds: 	(30@455) corner: (876@849)
		color: 	Color white
		extension: 	a MorphExtension (488636416) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.784 g: 0.784 b: 0.784 alpha: 1.0)
		model: 	a PackageTreeNautilusUI
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(344719360)
		scroller: 	a TransformMorph(735313920)
		getMenuSelector: 	#sourceCodeMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(65273856)
		textMorph: 	a TextMorphForEditView(509870080)
		getTextSelector: 	#sourceCodeFrom:
		setTextSelector: 	#compileSource:notifying:
		getSelectionSelector: 	#contentsSelectionFrom:
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(9 to: 475)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil
		doubleClickSelector: 	nil
		setSelectionSelector: 	nil
		alertLimit: 	700
		locked: 	false
		warningLimit: 	350
		method: 	nil
		lockIcon: 	an AlphaImageMorph(499908608)
		canLockChangeSelector: 	#canChangeLockFor:
		lockSelector: 	#lockTextArea:from:


PackageTreeNautilusUI(Object)>>perform:orSendTo:
	Receiver: a PackageTreeNautilusUI
	Arguments and temporary variables: 
		selector: 	#tallyIt
		otherTarget: 	a PluggableTextMorphWithLimits(303038464)
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a CategoryWidget a MethodWidget a NautilusWindow(...etc...
		model: 	a PackageTreeNautilus
		window: 	a NautilusWindow(542638080)
		hierarchyClass: 	DITestGroup
		cachedHierarchy: 	a SortHierarchically
		sourceTextArea: 	a PluggableTextMorphWithLimits(303038464)
		groupsSelection: 	a Dictionary()
		packagesSelection: 	a Dictionary(var-tests->true )
		classesSelection: 	a Dictionary(DIPHPTests->true )
		list: 	a MorphTreeMorph(273940480)
		list2: 	a PluggableIconListMorph(454295552)
		sourceCodePanel: 	a PanelMorph(183500800)
		commentTextArea: 	nil
		currentDisplayChoice: 	#SourceCode
		sourceTextAreaLimit: 	350
		sourceCodeContainer: 	a PanelMorph(584843264)
		list2Elements: 	{DIDSLTests. DIJavaTests. DIPHPTests. DISTTests}
		listElements: 	nil
		shouldUpdateTitle: 	true
		testSemaphore: 	a Semaphore()
		sourceTextAreas: 	an OrderedCollection(a PluggableTextMorphWithLimits(303038464)...etc...
		multipleMethodsEditor: 	a MultipleMethodsEditor(286261248)
		contentSelection: 	nil
		acceptor: 	a MethodDefinitionAcceptor
		classifier: 	a MethodClassifier
		categoryWidget: 	a CategoryWidget
		methodWidget: 	a MethodWidget
		packagePattern: 	a RxMatcher
		searchWidget: 	a SearchMorph(866648064)


[ 
| selArgCount |
"show cursor in case item opens a new MVC window"
(selArgCount := selector numArgs) = 0
	ifTrue: [ target perform: selector ]
	ifFalse: [ 
		selArgCount = arguments size
			ifTrue: [ target perform: selector withArguments: arguments ]
			ifFalse: [ target perform: selector withArguments: (arguments copyWith: evt) ] ].
self changed ] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(399245312)'Profile it'
	Arguments and temporary variables: 
		evt: 	[(344@583) mouseUp 1941214 nil]
		w: 	a WorldMorph(511705088) [world]
		selArgCount: 	2
	Receiver's instance variables: 
		bounds: 	(245.0@576.0) corner: (416.0@594.0)
		owner: 	a MenuMorph(439615488)
		submorphs: 	#()
		fullBounds: 	(245.0@576.0) corner: (416.0@594.0)
		color: 	Color black
		extension: 	a MorphExtension (422576128)
		font: 	a LogicalFont
 familyName: Source Sans Pro
 emphasis: nil
 pointSize: 10
...etc...
		emphasis: 	0
		contents: 	'Profile it'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a PackageTreeNautilusUI
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#tallyIt a PluggableTextMorphWithLimits(303038464))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


BlockClosure>>ensure:
	Receiver: [ 
| selArgCount |
"show cursor in case item opens a new MVC window"
(selArgCount := selec...etc...
	Arguments and temporary variables: 
		aBlock: 	[ oldcursor show ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
		startpc: 	134
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r100000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[ 
| selArgCount |
"show cursor in case item opens a new MVC window"
(s...etc...
		oldcursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	(-1@ -1)
		maskForm: 	Form(16x16x1)


ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(399245312)'Profile it'
	Arguments and temporary variables: 
		evt: 	[(344@583) mouseUp 1941214 nil]
		w: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		bounds: 	(245.0@576.0) corner: (416.0@594.0)
		owner: 	a MenuMorph(439615488)
		submorphs: 	#()
		fullBounds: 	(245.0@576.0) corner: (416.0@594.0)
		color: 	Color black
		extension: 	a MorphExtension (422576128)
		font: 	a LogicalFont
 familyName: Source Sans Pro
 emphasis: nil
 pointSize: 10
...etc...
		emphasis: 	0
		contents: 	'Profile it'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a PackageTreeNautilusUI
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#tallyIt a PluggableTextMorphWithLimits(303038464))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
	Receiver: a ToggleMenuItemMorph(399245312)'Profile it'
	Arguments and temporary variables: 
		evt: 	[(344@583) mouseUp 1941214 nil]
	Receiver's instance variables: 
		bounds: 	(245.0@576.0) corner: (416.0@594.0)
		owner: 	a MenuMorph(439615488)
		submorphs: 	#()
		fullBounds: 	(245.0@576.0) corner: (416.0@594.0)
		color: 	Color black
		extension: 	a MorphExtension (422576128)
		font: 	a LogicalFont
 familyName: Source Sans Pro
 emphasis: nil
 pointSize: 10
...etc...
		emphasis: 	0
		contents: 	'Profile it'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a PackageTreeNautilusUI
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#tallyIt a PluggableTextMorphWithLimits(303038464))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
	Receiver: a ToggleMenuItemMorph(399245312)'Profile it'
	Arguments and temporary variables: 
		anEvent: 	[(344@583) mouseUp 1941214 nil]
	Receiver's instance variables: 
		bounds: 	(245.0@576.0) corner: (416.0@594.0)
		owner: 	a MenuMorph(439615488)
		submorphs: 	#()
		fullBounds: 	(245.0@576.0) corner: (416.0@594.0)
		color: 	Color black
		extension: 	a MorphExtension (422576128)
		font: 	a LogicalFont
 familyName: Source Sans Pro
 emphasis: nil
 pointSize: 10
...etc...
		emphasis: 	0
		contents: 	'Profile it'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a PackageTreeNautilusUI
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#tallyIt a PluggableTextMorphWithLimits(303038464))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [(344@583) mouseUp 1941214 nil]
	Arguments and temporary variables: 
		anObject: 	a ToggleMenuItemMorph(399245312)'Profile it'
	Receiver's instance variables: 
		timeStamp: 	1941214
		source: 	a HandMorph(760479744)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(344@583)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


ToggleMenuItemMorph(Morph)>>handleEvent:
	Receiver: a ToggleMenuItemMorph(399245312)'Profile it'
	Arguments and temporary variables: 
		anEvent: 	[(344@583) mouseUp 1941214 nil]
	Receiver's instance variables: 
		bounds: 	(245.0@576.0) corner: (416.0@594.0)
		owner: 	a MenuMorph(439615488)
		submorphs: 	#()
		fullBounds: 	(245.0@576.0) corner: (416.0@594.0)
		color: 	Color black
		extension: 	a MorphExtension (422576128)
		font: 	a LogicalFont
 familyName: Source Sans Pro
 emphasis: nil
 pointSize: 10
...etc...
		emphasis: 	0
		contents: 	'Profile it'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a PackageTreeNautilusUI
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#tallyIt a PluggableTextMorphWithLimits(303038464))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(344@583) mouseUp 1941214 nil]
		aMorph: 	a ToggleMenuItemMorph(399245312)'Profile it'
		localEvt: 	nil
		index: 	1
		child: 	nil
		morphs: 	#()
		inside: 	true
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(344@583) mouseUp 1941214 nil]
		aMorph: 	a ToggleMenuItemMorph(399245312)'Profile it'
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


ToggleMenuItemMorph(Morph)>>processEvent:using:
	Receiver: a ToggleMenuItemMorph(399245312)'Profile it'
	Arguments and temporary variables: 
		anEvent: 	[(344@583) mouseUp 1941214 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	(245.0@576.0) corner: (416.0@594.0)
		owner: 	a MenuMorph(439615488)
		submorphs: 	#()
		fullBounds: 	(245.0@576.0) corner: (416.0@594.0)
		color: 	Color black
		extension: 	a MorphExtension (422576128)
		font: 	a LogicalFont
 familyName: Source Sans Pro
 emphasis: nil
 pointSize: 10
...etc...
		emphasis: 	0
		contents: 	'Profile it'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a PackageTreeNautilusUI
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#tallyIt a PluggableTextMorphWithLimits(303038464))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(344@583) mouseUp 1941214 nil]
		aMorph: 	a MenuMorph(439615488)
		localEvt: 	[(344@583) mouseUp 1941214 nil]
		index: 	11
		child: 	a ToggleMenuItemMorph(399245312)'Profile it'
		morphs: 	an Array(a ToggleMenuItemMorph(191627264)'Suggestions' a MenuLineMorph(...etc...
		inside: 	false
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(344@583) mouseUp 1941214 nil]
		aMorph: 	a MenuMorph(439615488)
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MenuMorph(Morph)>>processEvent:using:
	Receiver: a MenuMorph(439615488)
	Arguments and temporary variables: 
		anEvent: 	[(344@583) mouseUp 1941214 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	(240.0@416.0) corner: (421.0@858.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(191627264)'Suggestions' a MenuLineMor...etc...
		fullBounds: 	(240.0@416.0) corner: (421.0@858.0)
		color: 	(Color r: 0.894 g: 0.894 b: 0.894 alpha: 1.0)
		extension: 	a MorphExtension (481034240) [other:  (basicColor -> (Color r: 0.823...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.674 g: 0.674 b: 0.674 alpha: 1.0)
		defaultTarget: 	a PackageTreeNautilusUI
		selectedItem: 	a ToggleMenuItemMorph(399245312)'Profile it'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(191627264)'Suggestions' a...etc...


MenuMorph(Morph)>>processEvent:
	Receiver: a MenuMorph(439615488)
	Arguments and temporary variables: 
		anEvent: 	[(344@583) mouseUp 1941214 nil]
	Receiver's instance variables: 
		bounds: 	(240.0@416.0) corner: (421.0@858.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(191627264)'Suggestions' a MenuLineMor...etc...
		fullBounds: 	(240.0@416.0) corner: (421.0@858.0)
		color: 	(Color r: 0.894 g: 0.894 b: 0.894 alpha: 1.0)
		extension: 	a MorphExtension (481034240) [other:  (basicColor -> (Color r: 0.823...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.674 g: 0.674 b: 0.674 alpha: 1.0)
		defaultTarget: 	a PackageTreeNautilusUI
		selectedItem: 	a ToggleMenuItemMorph(399245312)'Profile it'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(191627264)'Suggestions' a...etc...


MenuMorph>>handleFocusEvent:
	Receiver: a MenuMorph(439615488)
	Arguments and temporary variables: 
		evt: 	[(344@583) mouseUp 1941214 nil]
	Receiver's instance variables: 
		bounds: 	(240.0@416.0) corner: (421.0@858.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(191627264)'Suggestions' a MenuLineMor...etc...
		fullBounds: 	(240.0@416.0) corner: (421.0@858.0)
		color: 	(Color r: 0.894 g: 0.894 b: 0.894 alpha: 1.0)
		extension: 	a MorphExtension (481034240) [other:  (basicColor -> (Color r: 0.823...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.674 g: 0.674 b: 0.674 alpha: 1.0)
		defaultTarget: 	a PackageTreeNautilusUI
		selectedItem: 	a ToggleMenuItemMorph(399245312)'Profile it'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(191627264)'Suggestions' a...etc...



--- The full stack ---
DITestGroup>>build
[ :testGroup | testGroup build ] in DIDicto>>dictoBuild:
Array(SequenceableCollection)>>do:
DIDicto>>dictoBuild:
DIDicto>>dictoRun:
DIDicto>>dictoAll:
DIPHPTests(DIDSLTests)>>runAndReturnObjWithText:andSuccessResults:onProject:
DIPHPTests class>>DoIt
CompiledMethod>>valueWithReceiver:arguments:
[ v := compiledMethod valueWithReceiver: receiver arguments: #() ] in SmalltalkEditor>>tallySelection
BlockClosure>>ensure:
MessageTally>>spyEvery:on:
TimeProfiler>>runBlock:pollingEvery:
TimeProfiler>>openOnBlock:
TimeProfiler class>>spyOn:
SmalltalkEditor>>tallySelection
SmalltalkEditor>>tallyIt
[ textMorph editor tallyIt ] in PluggableTextMorphWithLimits(PluggableTextMorph)>>tallyIt
[ result := editBlock value ] in PluggableTextMorphWithLimits(PluggableTextMorph)>>handleEdit:
TextMorphForEditView(TextMorph)>>handleEdit:
PluggableTextMorphWithLimits(PluggableTextMorph)>>handleEdit:
PluggableTextMorphWithLimits(PluggableTextMorph)>>tallyIt
PackageTreeNautilusUI(Object)>>perform:orSendTo:
[ 
| selArgCount |
"show cursor in case item opens a new MVC window"
(selArgCount := selector numArgs) = 0
	ifTrue: [ target perform: selector ]
	ifFalse: [ 
		selArgCount = arguments size
			ifTrue: [ target perform: selector withArguments: arguments ]
			ifFalse: [ target perform: selector withArguments: (arguments copyWith: evt) ] ].
self changed ] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
ToggleMenuItemMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
ToggleMenuItemMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
MenuMorph(Morph)>>processEvent:using:
MenuMorph(Morph)>>processEvent:
MenuMorph>>handleFocusEvent:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldState>>doOneSubCycleFor:
WorldMorph>>doOneSubCycle
MenuMorph>>invokeModalAt:in:allowKeyboard:
MenuMorph>>invokeModal:
MenuMorph>>invokeModal
PluggableTextMorphWithLimits(PluggableTextMorph)>>yellowButtonActivity:
SmalltalkEditor(TextEditor)>>mouseUp:
[ editor mouseUp: evt ] in TextMorphForEditView(TextMorph)>>mouseUp:
TextMorphForEditView(TextMorph)>>handleInteraction:
TextMorphForEditView>>handleInteraction:
TextMorphForEditView(TextMorph)>>mouseUp:
TextMorphForEditView>>mouseUp:
TextMorphForEditView(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
TextMorphForEditView(Morph)>>handleEvent:
TextMorphForEditView(Morph)>>handleFocusEvent:
[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ 
World doOneCycle.
Processor yield.
false ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Halt
25 February 2015 11:16:12.715688 am

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
NBCogit NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
https://github.com/pharo-project/pharo-vm.git Commit: 4a0d556150d478ff2de3c9624d2f18e6eaa3fa5c Date: 2014-12-18 18:42:53 +0100 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14893

Image: Pharo3.0 [Latest update: #30863]

DISTTests>>test_AdapterTests
	Receiver: DISTTests>>#test_AdapterTests
	Arguments and temporary variables: 
		dsl: 	nil
		success: 	nil
	Receiver's instance variables: 
		testSelector: 	#test_AdapterTests
		expectedFails: 	nil


DISTTests(TestCase)>>performTest
	Receiver: DISTTests>>#test_AdapterTests
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test_AdapterTests
		expectedFails: 	nil


[ 
self setUp.
self performTest ] in DISTTests(TestCase)>>runCase
	Receiver: DISTTests>>#test_AdapterTests
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test_AdapterTests
		expectedFails: 	nil


BlockClosure>>ensure:
	Receiver: [ 
self setUp.
self performTest ]
	Arguments and temporary variables: 
		aBlock: 	[ 
self tearDown.
self cleanUpInstanceVariables ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	DISTTests(TestCase)>>runCase
		startpc: 	57
		numArgs: 	0


DISTTests(TestCase)>>runCase
	Receiver: DISTTests>>#test_AdapterTests
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test_AdapterTests
		expectedFails: 	nil


[ 
aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCase.
aTestCase announce: TestCaseEnded withResult: self.
self addPass: aTestCase ] in TestResult>>runCase:
	Receiver: 2 run, 1 passes, 0 skipped, 0 expected failures, 1 failures, 0 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	DISTTests>>#test_AdapterTests
	Receiver's instance variables: 
		timeStamp: 	2015-02-25T11:16:12.517469+01:00
		failures: 	a Set(DISTTests>>#test_DeadMethods)
		errors: 	an OrderedCollection()
		passed: 	an OrderedCollection(DISTTests>>#test_AdapterInterface)
		skipped: 	an OrderedCollection()


BlockClosure>>on:do:
	Receiver: [ 
aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCase.
aTestCase anno...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :ex | ex sunitAnnounce: aTestCase toResult: self ]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	TestResult>>runCase:
		startpc: 	70
		numArgs: 	0


TestResult>>runCase:
	Receiver: 2 run, 1 passes, 0 skipped, 0 expected failures, 1 failures, 0 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	DISTTests>>#test_AdapterTests
	Receiver's instance variables: 
		timeStamp: 	2015-02-25T11:16:12.517469+01:00
		failures: 	a Set(DISTTests>>#test_DeadMethods)
		errors: 	an OrderedCollection()
		passed: 	an OrderedCollection(DISTTests>>#test_AdapterInterface)
		skipped: 	an OrderedCollection()


DISTTests(TestCase)>>run:
	Receiver: DISTTests>>#test_AdapterTests
	Arguments and temporary variables: 
		aResult: 	2 run, 1 passes, 0 skipped, 0 expected failures, 1 failures, 0 errors,...etc...
	Receiver's instance variables: 
		testSelector: 	#test_AdapterTests
		expectedFails: 	nil


[ :each | 
each run: aResult.
self announceTest: each.
self changed: each ] in [ 
self tests
	do: [ :each | 
		each run: aResult.
		self announceTest: each.
		self changed: each ] ] in TestSuite>>run:
	Receiver: a TestSuite
	Arguments and temporary variables: 
		aResult: 	2 run, 1 passes, 0 skipped, 0 expected failures, 1 failures, 0 errors,...etc...
		each: 	DISTTests>>#test_AdapterTests
	Receiver's instance variables: 
		dependents: 	nil
		tests: 	an OrderedCollection(DISTTests>>#test_AdapterInterface DISTTests>>#test_...etc...
		resources: 	an OrderedCollection()
		name: 	nil
		announcer: 	an Announcer


OrderedCollection>>do:
	Receiver: an OrderedCollection(DISTTests>>#test_AdapterInterface DISTTests>>#test_DeadMethods DISTTe...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
each run: aResult.
self announceTest: each.
self changed: ea...etc...
		index: 	3
	Receiver's instance variables: 
		array: 	an Array(DISTTests>>#test_AdapterInterface DISTTests>>#test_DeadMethods ...etc...
		firstIndex: 	1
		lastIndex: 	3


[ 
self tests
	do: [ :each | 
		each run: aResult.
		self announceTest: each.
		self changed: each ] ] in TestSuite>>run:
	Receiver: a TestSuite
	Arguments and temporary variables: 
		aResult: 	2 run, 1 passes, 0 skipped, 0 expected failures, 1 failures, 0 errors,...etc...
	Receiver's instance variables: 
		dependents: 	nil
		tests: 	an OrderedCollection(DISTTests>>#test_AdapterInterface DISTTests>>#test_...etc...
		resources: 	an OrderedCollection()
		name: 	nil
		announcer: 	an Announcer


BlockClosure>>ensure:
	Receiver: [ 
self tests
	do: [ :each | 
		each run: aResult.
		self announceTest: each.
		self chang...etc...
	Arguments and temporary variables: 
		aBlock: 	[ self tearDown ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	TestSuite>>run:
		startpc: 	49
		numArgs: 	0


TestSuite>>run:
	Receiver: a TestSuite
	Arguments and temporary variables: 
		aResult: 	2 run, 1 passes, 0 skipped, 0 expected failures, 1 failures, 0 errors,...etc...
	Receiver's instance variables: 
		dependents: 	nil
		tests: 	an OrderedCollection(DISTTests>>#test_AdapterInterface DISTTests>>#test_...etc...
		resources: 	an OrderedCollection()
		name: 	nil
		announcer: 	an Announcer


TestSuite>>run
	Receiver: a TestSuite
	Arguments and temporary variables: 
		result: 	2 run, 1 passes, 0 skipped, 0 expected failures, 1 failures, 0 errors, ...etc...
	Receiver's instance variables: 
		dependents: 	nil
		tests: 	an OrderedCollection(DISTTests>>#test_AdapterInterface DISTTests>>#test_...etc...
		resources: 	an OrderedCollection()
		name: 	nil
		announcer: 	an Announcer


[ 
| result |
aClass resetHistory.
result := (aClass addToSuite: TestSuite new fromMethods: methods) run.
result updateResultsInHistory.
ClassesIconsCache removeKey: aClass ifAbsent: [  ].
testSemaphore signal ] in PackageTreeNautilusUI(AbstractNautilusUI)>>runTestsOfClass:notifying:
	Receiver: a PackageTreeNautilusUI
	Arguments and temporary variables: 
		aClass: 	DISTTests
		aBoolean: 	true
		methods: 	#(#test_AdapterInterface #test_DeadMethods #test_AdapterTests)
		blockToEvaluate: 	[ 
| result |
aClass resetHistory.
result := (aClass addToSuit...etc...
		result: 	nil
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a CategoryWidget a MethodWidget a NautilusWindow(...etc...
		model: 	a PackageTreeNautilus
		window: 	a NautilusWindow(542638080)
		hierarchyClass: 	DITestGroup
		cachedHierarchy: 	a SortHierarchically
		sourceTextArea: 	a PluggableTextMorphWithLimits(303038464)
		groupsSelection: 	a Dictionary()
		packagesSelection: 	a Dictionary(var-tests->true )
		classesSelection: 	a Dictionary(DIPHPTests->false DISTTests->true )
		list: 	a MorphTreeMorph(273940480)
		list2: 	a PluggableIconListMorph(454295552)
		sourceCodePanel: 	a PanelMorph(183500800)
		commentTextArea: 	nil
		currentDisplayChoice: 	#SourceCode
		sourceTextAreaLimit: 	350
		sourceCodeContainer: 	a PanelMorph(584843264)
		list2Elements: 	{DIDSLTests. DIJavaTests. DIPHPTests. DISTTests}
		listElements: 	nil
		shouldUpdateTitle: 	true
		testSemaphore: 	a Semaphore(a Process in PackageTreeNautilusUI(AbstractNautilusU...etc...
		sourceTextAreas: 	an OrderedCollection(a PluggableTextMorphWithLimits(303038464)...etc...
		multipleMethodsEditor: 	a MultipleMethodsEditor(286261248)
		contentSelection: 	nil
		acceptor: 	a ClassOrMethodDefinitionAcceptor
		classifier: 	a MethodClassifier
		categoryWidget: 	a CategoryWidget
		methodWidget: 	a MethodWidget
		packagePattern: 	a RxMatcher
		searchWidget: 	a SearchMorph(866648064)


[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ 
| result |
aClass resetHistory.
result := (aClass addToSuite: TestSuite new fromMethods...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	PackageTreeNautilusUI(AbstractNautilusUI)>>runTestsOfClass:notify...etc...
		startpc: 	157
		numArgs: 	0



--- The full stack ---
DISTTests>>test_AdapterTests
DISTTests(TestCase)>>performTest
[ 
self setUp.
self performTest ] in DISTTests(TestCase)>>runCase
BlockClosure>>ensure:
DISTTests(TestCase)>>runCase
[ 
aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCase.
aTestCase announce: TestCaseEnded withResult: self.
self addPass: aTestCase ] in TestResult>>runCase:
BlockClosure>>on:do:
TestResult>>runCase:
DISTTests(TestCase)>>run:
[ :each | 
each run: aResult.
self announceTest: each.
self changed: each ] in [ 
self tests
	do: [ :each | 
		each run: aResult.
		self announceTest: each.
		self changed: each ] ] in TestSuite>>run:
OrderedCollection>>do:
[ 
self tests
	do: [ :each | 
		each run: aResult.
		self announceTest: each.
		self changed: each ] ] in TestSuite>>run:
BlockClosure>>ensure:
TestSuite>>run:
TestSuite>>run
[ 
| result |
aClass resetHistory.
result := (aClass addToSuite: TestSuite new fromMethods: methods) run.
result updateResultsInHistory.
ClassesIconsCache removeKey: aClass ifAbsent: [  ].
testSemaphore signal ] in PackageTreeNautilusUI(AbstractNautilusUI)>>runTestsOfClass:notifying:
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Halt
25 February 2015 11:45:08.088851 am

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
NBCogit NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
https://github.com/pharo-project/pharo-vm.git Commit: 4a0d556150d478ff2de3c9624d2f18e6eaa3fa5c Date: 2014-12-18 18:42:53 +0100 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14893

Image: Pharo3.0 [Latest update: #30863]

DISTTests>>test_AdapterTests
	Receiver: DISTTests>>#test_AdapterTests
	Arguments and temporary variables: 
		dsl: 	nil
		success: 	nil
	Receiver's instance variables: 
		testSelector: 	#test_AdapterTests
		expectedFails: 	nil


DISTTests(TestCase)>>performTest
	Receiver: DISTTests>>#test_AdapterTests
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test_AdapterTests
		expectedFails: 	nil


[ 
self setUp.
self performTest ] in DISTTests(TestCase)>>runCase
	Receiver: DISTTests>>#test_AdapterTests
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test_AdapterTests
		expectedFails: 	nil


BlockClosure>>ensure:
	Receiver: [ 
self setUp.
self performTest ]
	Arguments and temporary variables: 
		aBlock: 	[ 
self tearDown.
self cleanUpInstanceVariables ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	DISTTests(TestCase)>>runCase
		startpc: 	57
		numArgs: 	0


DISTTests(TestCase)>>runCase
	Receiver: DISTTests>>#test_AdapterTests
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test_AdapterTests
		expectedFails: 	nil


[ 
aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCase.
aTestCase announce: TestCaseEnded withResult: self.
self addPass: aTestCase ] in TestResult>>runCase:
	Receiver: 0 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 0 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	DISTTests>>#test_AdapterTests
	Receiver's instance variables: 
		timeStamp: 	2015-02-25T11:45:08.058465+01:00
		failures: 	a Set()
		errors: 	an OrderedCollection()
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


BlockClosure>>on:do:
	Receiver: [ 
aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCase.
aTestCase anno...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :ex | ex sunitAnnounce: aTestCase toResult: self ]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	TestResult>>runCase:
		startpc: 	70
		numArgs: 	0


TestResult>>runCase:
	Receiver: 0 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 0 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	DISTTests>>#test_AdapterTests
	Receiver's instance variables: 
		timeStamp: 	2015-02-25T11:45:08.058465+01:00
		failures: 	a Set()
		errors: 	an OrderedCollection()
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


DISTTests(TestCase)>>run:
	Receiver: DISTTests>>#test_AdapterTests
	Arguments and temporary variables: 
		aResult: 	0 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 0 errors,...etc...
	Receiver's instance variables: 
		testSelector: 	#test_AdapterTests
		expectedFails: 	nil


[ self run: result ] in DISTTests(TestCase)>>run
	Receiver: DISTTests>>#test_AdapterTests
	Arguments and temporary variables: 
		result: 	0 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 0 errors, ...etc...
	Receiver's instance variables: 
		testSelector: 	#test_AdapterTests
		expectedFails: 	nil


BlockClosure>>ensure:
	Receiver: [ self run: result ]
	Arguments and temporary variables: 
		aBlock: 	[ self classForTestResource resetResources: self resources ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	DISTTests(TestCase)>>run
		startpc: 	46
		numArgs: 	0


DISTTests(TestCase)>>run
	Receiver: DISTTests>>#test_AdapterTests
	Arguments and temporary variables: 
		result: 	0 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 0 errors, ...etc...
	Receiver's instance variables: 
		testSelector: 	#test_AdapterTests
		expectedFails: 	nil


DISTTests class(TestCase class)>>run:
	Receiver: DISTTests
	Arguments and temporary variables: 
		aSymbol: 	#test_AdapterTests
	Receiver's instance variables: 
		superclass: 	DIDSLTests
		methodDict: 	a MethodDictionary(#test_AdapterInterface->DISTTests>>#test_Adapter...etc...
		format: 	134
		layout: 	a FixedLayout
		instanceVariables: 	#()
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#DISTTests
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Dicto-var-tests'
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set(#test_...etc...


PackageTreeNautilusUI(NautilusUI)>>runTestForAMethodWithAnHalt:
	Receiver: a PackageTreeNautilusUI
	Arguments and temporary variables: 
		aMethod: 	DISTTests>>#test_AdapterTests
		testMethod: 	DISTTests>>#test_AdapterTests
		color: 	nil
		vScroll: 	0.0
		testClass: 	DISTTests
		testResult: 	nil
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a CategoryWidget a MethodWidget a NautilusWindow(...etc...
		model: 	a PackageTreeNautilus
		window: 	a NautilusWindow(542638080)
		hierarchyClass: 	DITestGroup
		cachedHierarchy: 	a SortHierarchically
		sourceTextArea: 	a PluggableTextMorphWithLimits(303038464)
		groupsSelection: 	a Dictionary()
		packagesSelection: 	a Dictionary(var-tests->true )
		classesSelection: 	a Dictionary(DIPHPTests->false DISTTests->true )
		list: 	a MorphTreeMorph(273940480)
		list2: 	a PluggableIconListMorph(454295552)
		sourceCodePanel: 	a PanelMorph(183500800)
		commentTextArea: 	nil
		currentDisplayChoice: 	#SourceCode
		sourceTextAreaLimit: 	350
		sourceCodeContainer: 	a PanelMorph(584843264)
		list2Elements: 	{DIDSLTests. DIJavaTests. DIPHPTests. DISTTests}
		listElements: 	nil
		shouldUpdateTitle: 	true
		testSemaphore: 	a Semaphore()
		sourceTextAreas: 	an OrderedCollection(a PluggableTextMorphWithLimits(303038464)...etc...
		multipleMethodsEditor: 	a MultipleMethodsEditor(286261248)
		contentSelection: 	nil
		acceptor: 	a MethodDefinitionAcceptor
		classifier: 	a MethodClassifier
		categoryWidget: 	a CategoryWidget
		methodWidget: 	a MethodWidget
		packagePattern: 	a RxMatcher
		searchWidget: 	a SearchMorph(866648064)


[ self runTestForAMethodWithAnHalt: aMethod ] in [ :e | 
aBoolean
	ifTrue: [ 
		[ self runTestForAMethodWithAnHalt: aMethod ] fork.
		shouldAnnounce := false.
		TestAsserter classForTestResult new ]
	ifFalse: [ 
		TestAsserter classForTestResult new
			addFailure: (testClass selector: testMethod selector);
			yourself ] ] in [ 
| vScroll testClass testResult |
vScroll := methodWidget vScrollValue.
testClass := testMethod methodClass.
testResult := [ testClass run: testMethod selector ]
	on: Halt
	do: [ :e | 
		aBoolean
			ifTrue: [ 
				[ self runTestForAMethodWithAnHalt: aMethod ] fork.
				shouldAnnounce := false.
				TestAsserter classForTestResult new ]
			ifFalse: [ 
				TestAsserter classForTestResult new
					addFailure: (testClass selector: testMethod selector);
					yourself ] ].
testResult updateResultsInHistory.
testSemaphoreForMethod signal.
(aBoolean and: [ testResult failures isEmpty not or: [ testResult errors isEmpty not ] ])
	ifTrue: [ testClass debug: testMethod selector ].
ClassesIconsCache removeKey: aMethod methodClass ifAbsent: [  ].
UIManager default defer: [ methodWidget vScrollValue: vScroll ] ] in PackageTreeNautilusUI(NautilusUI)>>runTestForAMethod:notifying:priority:
	Receiver: a PackageTreeNautilusUI
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a CategoryWidget a MethodWidget a NautilusWindow(...etc...
		model: 	a PackageTreeNautilus
		window: 	a NautilusWindow(542638080)
		hierarchyClass: 	DITestGroup
		cachedHierarchy: 	a SortHierarchically
		sourceTextArea: 	a PluggableTextMorphWithLimits(303038464)
		groupsSelection: 	a Dictionary()
		packagesSelection: 	a Dictionary(var-tests->true )
		classesSelection: 	a Dictionary(DIPHPTests->false DISTTests->true )
		list: 	a MorphTreeMorph(273940480)
		list2: 	a PluggableIconListMorph(454295552)
		sourceCodePanel: 	a PanelMorph(183500800)
		commentTextArea: 	nil
		currentDisplayChoice: 	#SourceCode
		sourceTextAreaLimit: 	350
		sourceCodeContainer: 	a PanelMorph(584843264)
		list2Elements: 	{DIDSLTests. DIJavaTests. DIPHPTests. DISTTests}
		listElements: 	nil
		shouldUpdateTitle: 	true
		testSemaphore: 	a Semaphore()
		sourceTextAreas: 	an OrderedCollection(a PluggableTextMorphWithLimits(303038464)...etc...
		multipleMethodsEditor: 	a MultipleMethodsEditor(286261248)
		contentSelection: 	nil
		acceptor: 	a MethodDefinitionAcceptor
		classifier: 	a MethodClassifier
		categoryWidget: 	a CategoryWidget
		methodWidget: 	a MethodWidget
		packagePattern: 	a RxMatcher
		searchWidget: 	a SearchMorph(866648064)


[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ self runTestForAMethodWithAnHalt: aMethod ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	[ :e | 
aBoolean
	ifTrue: [ 
		[ self runTestForAMethodWithAnHalt...etc...
		startpc: 	275
		numArgs: 	0



--- The full stack ---
DISTTests>>test_AdapterTests
DISTTests(TestCase)>>performTest
[ 
self setUp.
self performTest ] in DISTTests(TestCase)>>runCase
BlockClosure>>ensure:
DISTTests(TestCase)>>runCase
[ 
aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCase.
aTestCase announce: TestCaseEnded withResult: self.
self addPass: aTestCase ] in TestResult>>runCase:
BlockClosure>>on:do:
TestResult>>runCase:
DISTTests(TestCase)>>run:
[ self run: result ] in DISTTests(TestCase)>>run
BlockClosure>>ensure:
DISTTests(TestCase)>>run
DISTTests class(TestCase class)>>run:
PackageTreeNautilusUI(NautilusUI)>>runTestForAMethodWithAnHalt:
[ self runTestForAMethodWithAnHalt: aMethod ] in [ :e | 
aBoolean
	ifTrue: [ 
		[ self runTestForAMethodWithAnHalt: aMethod ] fork.
		shouldAnnounce := false.
		TestAsserter classForTestResult new ]
	ifFalse: [ 
		TestAsserter classForTestResult new
			addFailure: (testClass selector: testMethod selector);
			yourself ] ] in [ 
| vScroll testClass testResult |
vScroll := methodWidget vScrollValue.
testClass := testMethod methodClass.
testResult := [ testClass run: testMethod selector ]
	on: Halt
	do: [ :e | 
		aBoolean
			ifTrue: [ 
				[ self runTestForAMethodWithAnHalt: aMethod ] fork.
				shouldAnnounce := false.
				TestAsserter classForTestResult new ]
			ifFalse: [ 
				TestAsserter classForTestResult new
					addFailure: (testClass selector: testMethod selector);
					yourself ] ].
testResult updateResultsInHistory.
testSemaphoreForMethod signal.
(aBoolean and: [ testResult failures isEmpty not or: [ testResult errors isEmpty not ] ])
	ifTrue: [ testClass debug: testMethod selector ].
ClassesIconsCache removeKey: aMethod methodClass ifAbsent: [  ].
UIManager default defer: [ methodWidget vScrollValue: vScroll ] ] in PackageTreeNautilusUI(NautilusUI)>>runTestForAMethod:notifying:priority:
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Halt
25 February 2015 11:45:20.055324 am

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
NBCogit NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
https://github.com/pharo-project/pharo-vm.git Commit: 4a0d556150d478ff2de3c9624d2f18e6eaa3fa5c Date: 2014-12-18 18:42:53 +0100 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14893

Image: Pharo3.0 [Latest update: #30863]

DISTTests>>test_AdapterTests
	Receiver: DISTTests>>#test_AdapterTests
	Arguments and temporary variables: 
		dsl: 	nil
		success: 	nil
	Receiver's instance variables: 
		testSelector: 	#test_AdapterTests
		expectedFails: 	nil


DISTTests(TestCase)>>performTest
	Receiver: DISTTests>>#test_AdapterTests
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test_AdapterTests
		expectedFails: 	nil


[ 
self setUp.
self performTest ] in DISTTests(TestCase)>>runCase
	Receiver: DISTTests>>#test_AdapterTests
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test_AdapterTests
		expectedFails: 	nil


BlockClosure>>ensure:
	Receiver: [ 
self setUp.
self performTest ]
	Arguments and temporary variables: 
		aBlock: 	[ 
self tearDown.
self cleanUpInstanceVariables ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	DISTTests(TestCase)>>runCase
		startpc: 	57
		numArgs: 	0


DISTTests(TestCase)>>runCase
	Receiver: DISTTests>>#test_AdapterTests
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test_AdapterTests
		expectedFails: 	nil


[ (self class selector: testSelector) runCase ] in DISTTests(TestCase)>>debug
	Receiver: DISTTests>>#test_AdapterTests
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test_AdapterTests
		expectedFails: 	nil


BlockClosure>>ensure:
	Receiver: [ (self class selector: testSelector) runCase ]
	Arguments and temporary variables: 
		aBlock: 	[ self classForTestResource resetResources: self resources ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	DISTTests(TestCase)>>debug
		startpc: 	45
		numArgs: 	0


DISTTests(TestCase)>>debug
	Receiver: DISTTests>>#test_AdapterTests
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test_AdapterTests
		expectedFails: 	nil


DISTTests class(TestCase class)>>debug:
	Receiver: DISTTests
	Arguments and temporary variables: 
		aSymbol: 	#test_AdapterTests
	Receiver's instance variables: 
		superclass: 	DIDSLTests
		methodDict: 	a MethodDictionary(#test_AdapterInterface->DISTTests>>#test_Adapter...etc...
		format: 	134
		layout: 	a FixedLayout
		instanceVariables: 	#()
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#DISTTests
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Dicto-var-tests'
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set(#test_AdapterTests) #pa...etc...


PackageTreeNautilusUI(NautilusUI)>>runTestForAMethodWithAnHalt:
	Receiver: a PackageTreeNautilusUI
	Arguments and temporary variables: 
		aMethod: 	DISTTests>>#test_AdapterTests
		testMethod: 	DISTTests>>#test_AdapterTests
		color: 	nil
		vScroll: 	0.0
		testClass: 	DISTTests
		testResult: 	1 run, 0 passes, 0 skipped, 0 expected failures, 1 failures, 0 erro...etc...
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a CategoryWidget a MethodWidget a NautilusWindow(...etc...
		model: 	a PackageTreeNautilus
		window: 	a NautilusWindow(542638080)
		hierarchyClass: 	DITestGroup
		cachedHierarchy: 	a SortHierarchically
		sourceTextArea: 	a PluggableTextMorphWithLimits(303038464)
		groupsSelection: 	a Dictionary()
		packagesSelection: 	a Dictionary(var-tests->true )
		classesSelection: 	a Dictionary(DIPHPTests->false DISTTests->true )
		list: 	a MorphTreeMorph(273940480)
		list2: 	a PluggableIconListMorph(454295552)
		sourceCodePanel: 	a PanelMorph(183500800)
		commentTextArea: 	nil
		currentDisplayChoice: 	#SourceCode
		sourceTextAreaLimit: 	350
		sourceCodeContainer: 	a PanelMorph(584843264)
		list2Elements: 	{DIDSLTests. DIJavaTests. DIPHPTests. DISTTests}
		listElements: 	nil
		shouldUpdateTitle: 	true
		testSemaphore: 	a Semaphore()
		sourceTextAreas: 	an OrderedCollection(a PluggableTextMorphWithLimits(303038464)...etc...
		multipleMethodsEditor: 	a MultipleMethodsEditor(286261248)
		contentSelection: 	nil
		acceptor: 	a MethodDefinitionAcceptor
		classifier: 	a MethodClassifier
		categoryWidget: 	a CategoryWidget
		methodWidget: 	a MethodWidget
		packagePattern: 	a RxMatcher
		searchWidget: 	a SearchMorph(866648064)


[ self runTestForAMethodWithAnHalt: aMethod ] in [ :e | 
aBoolean
	ifTrue: [ 
		[ self runTestForAMethodWithAnHalt: aMethod ] fork.
		shouldAnnounce := false.
		TestAsserter classForTestResult new ]
	ifFalse: [ 
		TestAsserter classForTestResult new
			addFailure: (testClass selector: testMethod selector);
			yourself ] ] in [ 
| vScroll testClass testResult |
vScroll := methodWidget vScrollValue.
testClass := testMethod methodClass.
testResult := [ testClass run: testMethod selector ]
	on: Halt
	do: [ :e | 
		aBoolean
			ifTrue: [ 
				[ self runTestForAMethodWithAnHalt: aMethod ] fork.
				shouldAnnounce := false.
				TestAsserter classForTestResult new ]
			ifFalse: [ 
				TestAsserter classForTestResult new
					addFailure: (testClass selector: testMethod selector);
					yourself ] ].
testResult updateResultsInHistory.
testSemaphoreForMethod signal.
(aBoolean and: [ testResult failures isEmpty not or: [ testResult errors isEmpty not ] ])
	ifTrue: [ testClass debug: testMethod selector ].
ClassesIconsCache removeKey: aMethod methodClass ifAbsent: [  ].
UIManager default defer: [ methodWidget vScrollValue: vScroll ] ] in PackageTreeNautilusUI(NautilusUI)>>runTestForAMethod:notifying:priority:
	Receiver: a PackageTreeNautilusUI
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a CategoryWidget a MethodWidget a NautilusWindow(...etc...
		model: 	a PackageTreeNautilus
		window: 	a NautilusWindow(542638080)
		hierarchyClass: 	DITestGroup
		cachedHierarchy: 	a SortHierarchically
		sourceTextArea: 	a PluggableTextMorphWithLimits(303038464)
		groupsSelection: 	a Dictionary()
		packagesSelection: 	a Dictionary(var-tests->true )
		classesSelection: 	a Dictionary(DIPHPTests->false DISTTests->true )
		list: 	a MorphTreeMorph(273940480)
		list2: 	a PluggableIconListMorph(454295552)
		sourceCodePanel: 	a PanelMorph(183500800)
		commentTextArea: 	nil
		currentDisplayChoice: 	#SourceCode
		sourceTextAreaLimit: 	350
		sourceCodeContainer: 	a PanelMorph(584843264)
		list2Elements: 	{DIDSLTests. DIJavaTests. DIPHPTests. DISTTests}
		listElements: 	nil
		shouldUpdateTitle: 	true
		testSemaphore: 	a Semaphore()
		sourceTextAreas: 	an OrderedCollection(a PluggableTextMorphWithLimits(303038464)...etc...
		multipleMethodsEditor: 	a MultipleMethodsEditor(286261248)
		contentSelection: 	nil
		acceptor: 	a MethodDefinitionAcceptor
		classifier: 	a MethodClassifier
		categoryWidget: 	a CategoryWidget
		methodWidget: 	a MethodWidget
		packagePattern: 	a RxMatcher
		searchWidget: 	a SearchMorph(866648064)


[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ self runTestForAMethodWithAnHalt: aMethod ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	[ :e | 
aBoolean
	ifTrue: [ 
		[ self runTestForAMethodWithAnHalt...etc...
		startpc: 	275
		numArgs: 	0



--- The full stack ---
DISTTests>>test_AdapterTests
DISTTests(TestCase)>>performTest
[ 
self setUp.
self performTest ] in DISTTests(TestCase)>>runCase
BlockClosure>>ensure:
DISTTests(TestCase)>>runCase
[ (self class selector: testSelector) runCase ] in DISTTests(TestCase)>>debug
BlockClosure>>ensure:
DISTTests(TestCase)>>debug
DISTTests class(TestCase class)>>debug:
PackageTreeNautilusUI(NautilusUI)>>runTestForAMethodWithAnHalt:
[ self runTestForAMethodWithAnHalt: aMethod ] in [ :e | 
aBoolean
	ifTrue: [ 
		[ self runTestForAMethodWithAnHalt: aMethod ] fork.
		shouldAnnounce := false.
		TestAsserter classForTestResult new ]
	ifFalse: [ 
		TestAsserter classForTestResult new
			addFailure: (testClass selector: testMethod selector);
			yourself ] ] in [ 
| vScroll testClass testResult |
vScroll := methodWidget vScrollValue.
testClass := testMethod methodClass.
testResult := [ testClass run: testMethod selector ]
	on: Halt
	do: [ :e | 
		aBoolean
			ifTrue: [ 
				[ self runTestForAMethodWithAnHalt: aMethod ] fork.
				shouldAnnounce := false.
				TestAsserter classForTestResult new ]
			ifFalse: [ 
				TestAsserter classForTestResult new
					addFailure: (testClass selector: testMethod selector);
					yourself ] ].
testResult updateResultsInHistory.
testSemaphoreForMethod signal.
(aBoolean and: [ testResult failures isEmpty not or: [ testResult errors isEmpty not ] ])
	ifTrue: [ testClass debug: testMethod selector ].
ClassesIconsCache removeKey: aMethod methodClass ifAbsent: [  ].
UIManager default defer: [ methodWidget vScrollValue: vScroll ] ] in PackageTreeNautilusUI(NautilusUI)>>runTestForAMethod:notifying:priority:
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
TestFailure: Assertion failed
25 February 2015 11:45:23.098517 am

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
NBCogit NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
https://github.com/pharo-project/pharo-vm.git Commit: 4a0d556150d478ff2de3c9624d2f18e6eaa3fa5c Date: 2014-12-18 18:42:53 +0100 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14893

Image: Pharo3.0 [Latest update: #30863]

DISTTests(TestAsserter)>>assert:
	Receiver: DISTTests>>#test_AdapterTests
	Arguments and temporary variables: 
		aBoolean: 	false
	Receiver's instance variables: 
		testSelector: 	#test_AdapterTests
		expectedFails: 	nil


[ :n | self assert: (DIModel allRules at: n) hasFailed = (res at: n) not ] in DISTTests(DIDSLTests)>>runAndReturnObjWithText:andSuccessResults:onProject:
	Receiver: DISTTests>>#test_AdapterTests
	Arguments and temporary variables: 
		dslText: 	'
JavaAdapters = STClass with superclass:"DIAdapter", package:"Dicto-J...etc...
		res: 	#(false true)
		project: 	'TestProject'
		dicto: 	a DIDicto
		n: 	1
	Receiver's instance variables: 
		testSelector: 	#test_AdapterTests
		expectedFails: 	nil


Interval>>do:
	Receiver: (1 to: 2)
	Arguments and temporary variables: 
		aBlock: 	[ :n | self assert: (DIModel allRules at: n) hasFailed = (res at: n) no...etc...
		aValue: 	1
		index: 	1
		size: 	2
	Receiver's instance variables: 
		start: 	1
		stop: 	2
		step: 	1


DISTTests(DIDSLTests)>>runAndReturnObjWithText:andSuccessResults:onProject:
	Receiver: DISTTests>>#test_AdapterTests
	Arguments and temporary variables: 
		dslText: 	'
JavaAdapters = STClass with superclass:"DIAdapter", package:"Dicto-J...etc...
		res: 	#(false true)
		project: 	'TestProject'
		dicto: 	a DIDicto
	Receiver's instance variables: 
		testSelector: 	#test_AdapterTests
		expectedFails: 	nil


DISTTests(DIDSLTests)>>runAndReturnObjWithText:andSuccessResults:
	Receiver: DISTTests>>#test_AdapterTests
	Arguments and temporary variables: 
		dslText: 	'
JavaAdapters = STClass with superclass:"DIAdapter", package:"Dicto-J...etc...
		res: 	#(false true)
	Receiver's instance variables: 
		testSelector: 	#test_AdapterTests
		expectedFails: 	nil


DISTTests>>test_AdapterTests
	Receiver: DISTTests>>#test_AdapterTests
	Arguments and temporary variables: 
		dsl: 	'
JavaAdapters = STClass with superclass:"DIAdapter", package:"Dicto-Java"...etc...
		success: 	#(false true)
	Receiver's instance variables: 
		testSelector: 	#test_AdapterTests
		expectedFails: 	nil


DISTTests(TestCase)>>performTest
	Receiver: DISTTests>>#test_AdapterTests
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test_AdapterTests
		expectedFails: 	nil


[ 
self setUp.
self performTest ] in DISTTests(TestCase)>>runCase
	Receiver: DISTTests>>#test_AdapterTests
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test_AdapterTests
		expectedFails: 	nil


BlockClosure>>ensure:
	Receiver: [ 
self setUp.
self performTest ]
	Arguments and temporary variables: 
		aBlock: 	[ 
self tearDown.
self cleanUpInstanceVariables ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	DISTTests(TestCase)>>runCase
		startpc: 	57
		numArgs: 	0


DISTTests(TestCase)>>runCase
	Receiver: DISTTests>>#test_AdapterTests
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test_AdapterTests
		expectedFails: 	nil


[ (self class selector: testSelector) runCase ] in DISTTests(TestCase)>>debug
	Receiver: DISTTests>>#test_AdapterTests
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test_AdapterTests
		expectedFails: 	nil


BlockClosure>>ensure:
	Receiver: [ (self class selector: testSelector) runCase ]
	Arguments and temporary variables: 
		aBlock: 	[ self classForTestResource resetResources: self resources ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	DISTTests(TestCase)>>debug
		startpc: 	45
		numArgs: 	0


DISTTests(TestCase)>>debug
	Receiver: DISTTests>>#test_AdapterTests
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test_AdapterTests
		expectedFails: 	nil


DISTTests class(TestCase class)>>debug:
	Receiver: DISTTests
	Arguments and temporary variables: 
		aSymbol: 	#test_AdapterTests
	Receiver's instance variables: 
		superclass: 	DIDSLTests
		methodDict: 	a MethodDictionary(#test_AdapterInterface->DISTTests>>#test_Adapter...etc...
		format: 	134
		layout: 	a FixedLayout
		instanceVariables: 	#()
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#DISTTests
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Dicto-var-tests'
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set(#test_AdapterTests) #pa...etc...


PackageTreeNautilusUI(NautilusUI)>>runTestForAMethodWithAnHalt:
	Receiver: a PackageTreeNautilusUI
	Arguments and temporary variables: 
		aMethod: 	DISTTests>>#test_AdapterTests
		testMethod: 	DISTTests>>#test_AdapterTests
		color: 	nil
		vScroll: 	0.0
		testClass: 	DISTTests
		testResult: 	1 run, 0 passes, 0 skipped, 0 expected failures, 1 failures, 0 erro...etc...
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a CategoryWidget a MethodWidget a NautilusWindow(...etc...
		model: 	a PackageTreeNautilus
		window: 	a NautilusWindow(542638080)
		hierarchyClass: 	DITestGroup
		cachedHierarchy: 	a SortHierarchically
		sourceTextArea: 	a PluggableTextMorphWithLimits(303038464)
		groupsSelection: 	a Dictionary()
		packagesSelection: 	a Dictionary(var-tests->true )
		classesSelection: 	a Dictionary(DIPHPTests->false DISTTests->true )
		list: 	a MorphTreeMorph(273940480)
		list2: 	a PluggableIconListMorph(454295552)
		sourceCodePanel: 	a PanelMorph(183500800)
		commentTextArea: 	nil
		currentDisplayChoice: 	#SourceCode
		sourceTextAreaLimit: 	350
		sourceCodeContainer: 	a PanelMorph(584843264)
		list2Elements: 	{DIDSLTests. DIJavaTests. DIPHPTests. DISTTests}
		listElements: 	nil
		shouldUpdateTitle: 	true
		testSemaphore: 	a Semaphore()
		sourceTextAreas: 	an OrderedCollection(a PluggableTextMorphWithLimits(303038464)...etc...
		multipleMethodsEditor: 	a MultipleMethodsEditor(286261248)
		contentSelection: 	nil
		acceptor: 	a MethodDefinitionAcceptor
		classifier: 	a MethodClassifier
		categoryWidget: 	a CategoryWidget
		methodWidget: 	a MethodWidget
		packagePattern: 	a RxMatcher
		searchWidget: 	a SearchMorph(866648064)


[ self runTestForAMethodWithAnHalt: aMethod ] in [ :e | 
aBoolean
	ifTrue: [ 
		[ self runTestForAMethodWithAnHalt: aMethod ] fork.
		shouldAnnounce := false.
		TestAsserter classForTestResult new ]
	ifFalse: [ 
		TestAsserter classForTestResult new
			addFailure: (testClass selector: testMethod selector);
			yourself ] ] in [ 
| vScroll testClass testResult |
vScroll := methodWidget vScrollValue.
testClass := testMethod methodClass.
testResult := [ testClass run: testMethod selector ]
	on: Halt
	do: [ :e | 
		aBoolean
			ifTrue: [ 
				[ self runTestForAMethodWithAnHalt: aMethod ] fork.
				shouldAnnounce := false.
				TestAsserter classForTestResult new ]
			ifFalse: [ 
				TestAsserter classForTestResult new
					addFailure: (testClass selector: testMethod selector);
					yourself ] ].
testResult updateResultsInHistory.
testSemaphoreForMethod signal.
(aBoolean and: [ testResult failures isEmpty not or: [ testResult errors isEmpty not ] ])
	ifTrue: [ testClass debug: testMethod selector ].
ClassesIconsCache removeKey: aMethod methodClass ifAbsent: [  ].
UIManager default defer: [ methodWidget vScrollValue: vScroll ] ] in PackageTreeNautilusUI(NautilusUI)>>runTestForAMethod:notifying:priority:
	Receiver: a PackageTreeNautilusUI
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a CategoryWidget a MethodWidget a NautilusWindow(...etc...
		model: 	a PackageTreeNautilus
		window: 	a NautilusWindow(542638080)
		hierarchyClass: 	DITestGroup
		cachedHierarchy: 	a SortHierarchically
		sourceTextArea: 	a PluggableTextMorphWithLimits(303038464)
		groupsSelection: 	a Dictionary()
		packagesSelection: 	a Dictionary(var-tests->true )
		classesSelection: 	a Dictionary(DIPHPTests->false DISTTests->true )
		list: 	a MorphTreeMorph(273940480)
		list2: 	a PluggableIconListMorph(454295552)
		sourceCodePanel: 	a PanelMorph(183500800)
		commentTextArea: 	nil
		currentDisplayChoice: 	#SourceCode
		sourceTextAreaLimit: 	350
		sourceCodeContainer: 	a PanelMorph(584843264)
		list2Elements: 	{DIDSLTests. DIJavaTests. DIPHPTests. DISTTests}
		listElements: 	nil
		shouldUpdateTitle: 	true
		testSemaphore: 	a Semaphore()
		sourceTextAreas: 	an OrderedCollection(a PluggableTextMorphWithLimits(303038464)...etc...
		multipleMethodsEditor: 	a MultipleMethodsEditor(286261248)
		contentSelection: 	nil
		acceptor: 	a MethodDefinitionAcceptor
		classifier: 	a MethodClassifier
		categoryWidget: 	a CategoryWidget
		methodWidget: 	a MethodWidget
		packagePattern: 	a RxMatcher
		searchWidget: 	a SearchMorph(866648064)


[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ self runTestForAMethodWithAnHalt: aMethod ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	[ :e | 
aBoolean
	ifTrue: [ 
		[ self runTestForAMethodWithAnHalt...etc...
		startpc: 	275
		numArgs: 	0



--- The full stack ---
DISTTests(TestAsserter)>>assert:
[ :n | self assert: (DIModel allRules at: n) hasFailed = (res at: n) not ] in DISTTests(DIDSLTests)>>runAndReturnObjWithText:andSuccessResults:onProject:
Interval>>do:
DISTTests(DIDSLTests)>>runAndReturnObjWithText:andSuccessResults:onProject:
DISTTests(DIDSLTests)>>runAndReturnObjWithText:andSuccessResults:
DISTTests>>test_AdapterTests
DISTTests(TestCase)>>performTest
[ 
self setUp.
self performTest ] in DISTTests(TestCase)>>runCase
BlockClosure>>ensure:
DISTTests(TestCase)>>runCase
[ (self class selector: testSelector) runCase ] in DISTTests(TestCase)>>debug
BlockClosure>>ensure:
DISTTests(TestCase)>>debug
DISTTests class(TestCase class)>>debug:
PackageTreeNautilusUI(NautilusUI)>>runTestForAMethodWithAnHalt:
[ self runTestForAMethodWithAnHalt: aMethod ] in [ :e | 
aBoolean
	ifTrue: [ 
		[ self runTestForAMethodWithAnHalt: aMethod ] fork.
		shouldAnnounce := false.
		TestAsserter classForTestResult new ]
	ifFalse: [ 
		TestAsserter classForTestResult new
			addFailure: (testClass selector: testMethod selector);
			yourself ] ] in [ 
| vScroll testClass testResult |
vScroll := methodWidget vScrollValue.
testClass := testMethod methodClass.
testResult := [ testClass run: testMethod selector ]
	on: Halt
	do: [ :e | 
		aBoolean
			ifTrue: [ 
				[ self runTestForAMethodWithAnHalt: aMethod ] fork.
				shouldAnnounce := false.
				TestAsserter classForTestResult new ]
			ifFalse: [ 
				TestAsserter classForTestResult new
					addFailure: (testClass selector: testMethod selector);
					yourself ] ].
testResult updateResultsInHistory.
testSemaphoreForMethod signal.
(aBoolean and: [ testResult failures isEmpty not or: [ testResult errors isEmpty not ] ])
	ifTrue: [ testClass debug: testMethod selector ].
ClassesIconsCache removeKey: aMethod methodClass ifAbsent: [  ].
UIManager default defer: [ methodWidget vScrollValue: vScroll ] ] in PackageTreeNautilusUI(NautilusUI)>>runTestForAMethod:notifying:priority:
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
TestFailure: Assertion failed
25 February 2015 11:45:34.43938 am

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
NBCogit NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
https://github.com/pharo-project/pharo-vm.git Commit: 4a0d556150d478ff2de3c9624d2f18e6eaa3fa5c Date: 2014-12-18 18:42:53 +0100 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14893

Image: Pharo3.0 [Latest update: #30863]

DISTTests(TestAsserter)>>assert:
	Receiver: DISTTests>>#test_DeadMethods
	Arguments and temporary variables: 
		aBoolean: 	false
	Receiver's instance variables: 
		testSelector: 	#test_DeadMethods
		expectedFails: 	nil


[ :n | self assert: (DIModel allRules at: n) hasFailed = (res at: n) not ] in DISTTests(DIDSLTests)>>runAndReturnObjWithText:andSuccessResults:onProject:
	Receiver: DISTTests>>#test_DeadMethods
	Arguments and temporary variables: 
		dslText: 	'
AllMethods = STMethod with name:"*"

AllMethods must be invoked
'
		res: 	#(false)
		project: 	'TestProject'
		dicto: 	a DIDicto
		n: 	1
	Receiver's instance variables: 
		testSelector: 	#test_DeadMethods
		expectedFails: 	nil


Interval>>do:
	Receiver: (1 to: 1)
	Arguments and temporary variables: 
		aBlock: 	[ :n | self assert: (DIModel allRules at: n) hasFailed = (res at: n) no...etc...
		aValue: 	1
		index: 	1
		size: 	1
	Receiver's instance variables: 
		start: 	1
		stop: 	1
		step: 	1


DISTTests(DIDSLTests)>>runAndReturnObjWithText:andSuccessResults:onProject:
	Receiver: DISTTests>>#test_DeadMethods
	Arguments and temporary variables: 
		dslText: 	'
AllMethods = STMethod with name:"*"

AllMethods must be invoked
'
		res: 	#(false)
		project: 	'TestProject'
		dicto: 	a DIDicto
	Receiver's instance variables: 
		testSelector: 	#test_DeadMethods
		expectedFails: 	nil


DISTTests(DIDSLTests)>>runAndReturnObjWithText:andSuccessResults:
	Receiver: DISTTests>>#test_DeadMethods
	Arguments and temporary variables: 
		dslText: 	'
AllMethods = STMethod with name:"*"

AllMethods must be invoked
'
		res: 	#(false)
	Receiver's instance variables: 
		testSelector: 	#test_DeadMethods
		expectedFails: 	nil


DISTTests>>test_DeadMethods
	Receiver: DISTTests>>#test_DeadMethods
	Arguments and temporary variables: 
		dsl: 	'
AllMethods = STMethod with name:"*"

AllMethods must be invoked
'
		success: 	#(false)
	Receiver's instance variables: 
		testSelector: 	#test_DeadMethods
		expectedFails: 	nil


DISTTests(TestCase)>>performTest
	Receiver: DISTTests>>#test_DeadMethods
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test_DeadMethods
		expectedFails: 	nil


[ 
self setUp.
self performTest ] in DISTTests(TestCase)>>runCase
	Receiver: DISTTests>>#test_DeadMethods
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test_DeadMethods
		expectedFails: 	nil


BlockClosure>>ensure:
	Receiver: [ 
self setUp.
self performTest ]
	Arguments and temporary variables: 
		aBlock: 	[ 
self tearDown.
self cleanUpInstanceVariables ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	DISTTests(TestCase)>>runCase
		startpc: 	57
		numArgs: 	0


DISTTests(TestCase)>>runCase
	Receiver: DISTTests>>#test_DeadMethods
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test_DeadMethods
		expectedFails: 	nil


[ (self class selector: testSelector) runCase ] in DISTTests(TestCase)>>debug
	Receiver: DISTTests>>#test_DeadMethods
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test_DeadMethods
		expectedFails: 	nil


BlockClosure>>ensure:
	Receiver: [ (self class selector: testSelector) runCase ]
	Arguments and temporary variables: 
		aBlock: 	[ self classForTestResource resetResources: self resources ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	DISTTests(TestCase)>>debug
		startpc: 	45
		numArgs: 	0


DISTTests(TestCase)>>debug
	Receiver: DISTTests>>#test_DeadMethods
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test_DeadMethods
		expectedFails: 	nil


DISTTests class(TestCase class)>>debug:
	Receiver: DISTTests
	Arguments and temporary variables: 
		aSymbol: 	#test_DeadMethods
	Receiver's instance variables: 
		superclass: 	DIDSLTests
		methodDict: 	a MethodDictionary(#test_AdapterInterface->DISTTests>>#test_Adapter...etc...
		format: 	134
		layout: 	a FixedLayout
		instanceVariables: 	#()
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#DISTTests
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Dicto-var-tests'
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set(#test_AdapterTests #tes...etc...


[ 
| vScroll testClass testResult |
vScroll := methodWidget vScrollValue.
testClass := testMethod methodClass.
testResult := [ testClass run: testMethod selector ]
	on: Halt
	do: [ :e | 
		aBoolean
			ifTrue: [ 
				[ self runTestForAMethodWithAnHalt: aMethod ] fork.
				shouldAnnounce := false.
				TestAsserter classForTestResult new ]
			ifFalse: [ 
				TestAsserter classForTestResult new
					addFailure: (testClass selector: testMethod selector);
					yourself ] ].
testResult updateResultsInHistory.
testSemaphoreForMethod signal.
(aBoolean and: [ testResult failures isEmpty not or: [ testResult errors isEmpty not ] ])
	ifTrue: [ testClass debug: testMethod selector ].
ClassesIconsCache removeKey: aMethod methodClass ifAbsent: [  ].
UIManager default defer: [ methodWidget vScrollValue: vScroll ] ] in PackageTreeNautilusUI(NautilusUI)>>runTestForAMethod:notifying:priority:
	Receiver: a PackageTreeNautilusUI
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a CategoryWidget a MethodWidget a NautilusWindow(...etc...
		model: 	a PackageTreeNautilus
		window: 	a NautilusWindow(542638080)
		hierarchyClass: 	DITestGroup
		cachedHierarchy: 	a SortHierarchically
		sourceTextArea: 	a PluggableTextMorphWithLimits(303038464)
		groupsSelection: 	a Dictionary()
		packagesSelection: 	a Dictionary(var-tests->true )
		classesSelection: 	a Dictionary(DIPHPTests->false DISTTests->true )
		list: 	a MorphTreeMorph(273940480)
		list2: 	a PluggableIconListMorph(454295552)
		sourceCodePanel: 	a PanelMorph(183500800)
		commentTextArea: 	nil
		currentDisplayChoice: 	#SourceCode
		sourceTextAreaLimit: 	350
		sourceCodeContainer: 	a PanelMorph(584843264)
		list2Elements: 	{DIDSLTests. DIJavaTests. DIPHPTests. DISTTests}
		listElements: 	nil
		shouldUpdateTitle: 	true
		testSemaphore: 	a Semaphore()
		sourceTextAreas: 	an OrderedCollection(a PluggableTextMorphWithLimits(303038464)...etc...
		multipleMethodsEditor: 	a MultipleMethodsEditor(286261248)
		contentSelection: 	nil
		acceptor: 	a MethodDefinitionAcceptor
		classifier: 	a MethodClassifier
		categoryWidget: 	a CategoryWidget
		methodWidget: 	a MethodWidget
		packagePattern: 	a RxMatcher
		searchWidget: 	a SearchMorph(866648064)


[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ 
| vScroll testClass testResult |
vScroll := methodWidget vScrollValue.
testClass := tes...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	PackageTreeNautilusUI(NautilusUI)>>runTestForAMethod:notifying:pr...etc...
		startpc: 	236
		numArgs: 	0



--- The full stack ---
DISTTests(TestAsserter)>>assert:
[ :n | self assert: (DIModel allRules at: n) hasFailed = (res at: n) not ] in DISTTests(DIDSLTests)>>runAndReturnObjWithText:andSuccessResults:onProject:
Interval>>do:
DISTTests(DIDSLTests)>>runAndReturnObjWithText:andSuccessResults:onProject:
DISTTests(DIDSLTests)>>runAndReturnObjWithText:andSuccessResults:
DISTTests>>test_DeadMethods
DISTTests(TestCase)>>performTest
[ 
self setUp.
self performTest ] in DISTTests(TestCase)>>runCase
BlockClosure>>ensure:
DISTTests(TestCase)>>runCase
[ (self class selector: testSelector) runCase ] in DISTTests(TestCase)>>debug
BlockClosure>>ensure:
DISTTests(TestCase)>>debug
DISTTests class(TestCase class)>>debug:
[ 
| vScroll testClass testResult |
vScroll := methodWidget vScrollValue.
testClass := testMethod methodClass.
testResult := [ testClass run: testMethod selector ]
	on: Halt
	do: [ :e | 
		aBoolean
			ifTrue: [ 
				[ self runTestForAMethodWithAnHalt: aMethod ] fork.
				shouldAnnounce := false.
				TestAsserter classForTestResult new ]
			ifFalse: [ 
				TestAsserter classForTestResult new
					addFailure: (testClass selector: testMethod selector);
					yourself ] ].
testResult updateResultsInHistory.
testSemaphoreForMethod signal.
(aBoolean and: [ testResult failures isEmpty not or: [ testResult errors isEmpty not ] ])
	ifTrue: [ testClass debug: testMethod selector ].
ClassesIconsCache removeKey: aMethod methodClass ifAbsent: [  ].
UIManager default defer: [ methodWidget vScrollValue: vScroll ] ] in PackageTreeNautilusUI(NautilusUI)>>runTestForAMethod:notifying:priority:
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
TestFailure: Assertion failed
25 February 2015 11:45:41.476123 am

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
NBCogit NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
https://github.com/pharo-project/pharo-vm.git Commit: 4a0d556150d478ff2de3c9624d2f18e6eaa3fa5c Date: 2014-12-18 18:42:53 +0100 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14893

Image: Pharo3.0 [Latest update: #30863]

DIJavaTests(TestAsserter)>>assert:
	Receiver: DIJavaTests>>#testCodeClones
	Arguments and temporary variables: 
		aBoolean: 	false
	Receiver's instance variables: 
		testSelector: 	#testCodeClones
		expectedFails: 	nil


[ :n | self assert: (DIModel allRules at: n) hasFailed = (res at: n) not ] in DIJavaTests(DIDSLTests)>>runAndReturnObjWithText:andSuccessResults:onProject:
	Receiver: DIJavaTests>>#testCodeClones
	Arguments and temporary variables: 
		dslText: 	'
MyPack1 = Package with name:"org.jhotdraw.applet"
MyPack2 = Package ...etc...
		res: 	#(false true false)
		project: 	'TestProject'
		dicto: 	a DIDicto
		n: 	1
	Receiver's instance variables: 
		testSelector: 	#testCodeClones
		expectedFails: 	nil


Interval>>do:
	Receiver: (1 to: 3)
	Arguments and temporary variables: 
		aBlock: 	[ :n | self assert: (DIModel allRules at: n) hasFailed = (res at: n) no...etc...
		aValue: 	1
		index: 	1
		size: 	3
	Receiver's instance variables: 
		start: 	1
		stop: 	3
		step: 	1


DIJavaTests(DIDSLTests)>>runAndReturnObjWithText:andSuccessResults:onProject:
	Receiver: DIJavaTests>>#testCodeClones
	Arguments and temporary variables: 
		dslText: 	'
MyPack1 = Package with name:"org.jhotdraw.applet"
MyPack2 = Package ...etc...
		res: 	#(false true false)
		project: 	'TestProject'
		dicto: 	a DIDicto
	Receiver's instance variables: 
		testSelector: 	#testCodeClones
		expectedFails: 	nil


DIJavaTests(DIDSLTests)>>runAndReturnObjWithText:andSuccessResults:
	Receiver: DIJavaTests>>#testCodeClones
	Arguments and temporary variables: 
		dslText: 	'
MyPack1 = Package with name:"org.jhotdraw.applet"
MyPack2 = Package ...etc...
		res: 	#(false true false)
	Receiver's instance variables: 
		testSelector: 	#testCodeClones
		expectedFails: 	nil


DIJavaTests>>testCodeClones
	Receiver: DIJavaTests>>#testCodeClones
	Arguments and temporary variables: 
		dsl: 	'
MyPack1 = Package with name:"org.jhotdraw.applet"
MyPack2 = Package with...etc...
		success: 	#(false true false)
	Receiver's instance variables: 
		testSelector: 	#testCodeClones
		expectedFails: 	nil


DIJavaTests(TestCase)>>performTest
	Receiver: DIJavaTests>>#testCodeClones
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testCodeClones
		expectedFails: 	nil


[ 
self setUp.
self performTest ] in DIJavaTests(TestCase)>>runCase
	Receiver: DIJavaTests>>#testCodeClones
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testCodeClones
		expectedFails: 	nil


BlockClosure>>ensure:
	Receiver: [ 
self setUp.
self performTest ]
	Arguments and temporary variables: 
		aBlock: 	[ 
self tearDown.
self cleanUpInstanceVariables ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	DIJavaTests(TestCase)>>runCase
		startpc: 	57
		numArgs: 	0


DIJavaTests(TestCase)>>runCase
	Receiver: DIJavaTests>>#testCodeClones
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testCodeClones
		expectedFails: 	nil


[ (self class selector: testSelector) runCase ] in DIJavaTests(TestCase)>>debug
	Receiver: DIJavaTests>>#testCodeClones
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testCodeClones
		expectedFails: 	nil


BlockClosure>>ensure:
	Receiver: [ (self class selector: testSelector) runCase ]
	Arguments and temporary variables: 
		aBlock: 	[ self classForTestResource resetResources: self resources ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	DIJavaTests(TestCase)>>debug
		startpc: 	45
		numArgs: 	0


DIJavaTests(TestCase)>>debug
	Receiver: DIJavaTests>>#testCodeClones
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testCodeClones
		expectedFails: 	nil


DIJavaTests class(TestCase class)>>debug:
	Receiver: DIJavaTests
	Arguments and temporary variables: 
		aSymbol: 	#testCodeClones
	Receiver's instance variables: 
		superclass: 	DIDSLTests
		methodDict: 	a MethodDictionary(#testCodeClones->DIJavaTests>>#testCodeClones #t...etc...
		format: 	134
		layout: 	a FixedLayout
		instanceVariables: 	#()
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#DIJavaTests
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Dicto-var-tests'
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set(#testCodeClones) #passe...etc...


[ 
| vScroll testClass testResult |
vScroll := methodWidget vScrollValue.
testClass := testMethod methodClass.
testResult := [ testClass run: testMethod selector ]
	on: Halt
	do: [ :e | 
		aBoolean
			ifTrue: [ 
				[ self runTestForAMethodWithAnHalt: aMethod ] fork.
				shouldAnnounce := false.
				TestAsserter classForTestResult new ]
			ifFalse: [ 
				TestAsserter classForTestResult new
					addFailure: (testClass selector: testMethod selector);
					yourself ] ].
testResult updateResultsInHistory.
testSemaphoreForMethod signal.
(aBoolean and: [ testResult failures isEmpty not or: [ testResult errors isEmpty not ] ])
	ifTrue: [ testClass debug: testMethod selector ].
ClassesIconsCache removeKey: aMethod methodClass ifAbsent: [  ].
UIManager default defer: [ methodWidget vScrollValue: vScroll ] ] in PackageTreeNautilusUI(NautilusUI)>>runTestForAMethod:notifying:priority:
	Receiver: a PackageTreeNautilusUI
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a CategoryWidget a MethodWidget a NautilusWindow(...etc...
		model: 	a PackageTreeNautilus
		window: 	a NautilusWindow(542638080)
		hierarchyClass: 	DITestGroup
		cachedHierarchy: 	a SortHierarchically
		sourceTextArea: 	a PluggableTextMorphWithLimits(303038464)
		groupsSelection: 	a Dictionary()
		packagesSelection: 	a Dictionary(var-tests->true )
		classesSelection: 	a Dictionary(DIJavaTests->true DISTTests->false )
		list: 	a MorphTreeMorph(273940480)
		list2: 	a PluggableIconListMorph(454295552)
		sourceCodePanel: 	a PanelMorph(183500800)
		commentTextArea: 	nil
		currentDisplayChoice: 	#SourceCode
		sourceTextAreaLimit: 	350
		sourceCodeContainer: 	a PanelMorph(584843264)
		list2Elements: 	{DIDSLTests. DIJavaTests. DIPHPTests. DISTTests}
		listElements: 	nil
		shouldUpdateTitle: 	true
		testSemaphore: 	a Semaphore()
		sourceTextAreas: 	an OrderedCollection(a PluggableTextMorphWithLimits(303038464)...etc...
		multipleMethodsEditor: 	a MultipleMethodsEditor(286261248)
		contentSelection: 	nil
		acceptor: 	a ClassOrMethodDefinitionAcceptor
		classifier: 	a MethodClassifier
		categoryWidget: 	a CategoryWidget
		methodWidget: 	a MethodWidget
		packagePattern: 	a RxMatcher
		searchWidget: 	a SearchMorph(866648064)


[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ 
| vScroll testClass testResult |
vScroll := methodWidget vScrollValue.
testClass := tes...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	PackageTreeNautilusUI(NautilusUI)>>runTestForAMethod:notifying:pr...etc...
		startpc: 	236
		numArgs: 	0



--- The full stack ---
DIJavaTests(TestAsserter)>>assert:
[ :n | self assert: (DIModel allRules at: n) hasFailed = (res at: n) not ] in DIJavaTests(DIDSLTests)>>runAndReturnObjWithText:andSuccessResults:onProject:
Interval>>do:
DIJavaTests(DIDSLTests)>>runAndReturnObjWithText:andSuccessResults:onProject:
DIJavaTests(DIDSLTests)>>runAndReturnObjWithText:andSuccessResults:
DIJavaTests>>testCodeClones
DIJavaTests(TestCase)>>performTest
[ 
self setUp.
self performTest ] in DIJavaTests(TestCase)>>runCase
BlockClosure>>ensure:
DIJavaTests(TestCase)>>runCase
[ (self class selector: testSelector) runCase ] in DIJavaTests(TestCase)>>debug
BlockClosure>>ensure:
DIJavaTests(TestCase)>>debug
DIJavaTests class(TestCase class)>>debug:
[ 
| vScroll testClass testResult |
vScroll := methodWidget vScrollValue.
testClass := testMethod methodClass.
testResult := [ testClass run: testMethod selector ]
	on: Halt
	do: [ :e | 
		aBoolean
			ifTrue: [ 
				[ self runTestForAMethodWithAnHalt: aMethod ] fork.
				shouldAnnounce := false.
				TestAsserter classForTestResult new ]
			ifFalse: [ 
				TestAsserter classForTestResult new
					addFailure: (testClass selector: testMethod selector);
					yourself ] ].
testResult updateResultsInHistory.
testSemaphoreForMethod signal.
(aBoolean and: [ testResult failures isEmpty not or: [ testResult errors isEmpty not ] ])
	ifTrue: [ testClass debug: testMethod selector ].
ClassesIconsCache removeKey: aMethod methodClass ifAbsent: [  ].
UIManager default defer: [ methodWidget vScrollValue: vScroll ] ] in PackageTreeNautilusUI(NautilusUI)>>runTestForAMethod:notifying:priority:
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
TestFailure: Assertion failed
25 February 2015 11:45:46.80737 am

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
NBCogit NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
https://github.com/pharo-project/pharo-vm.git Commit: 4a0d556150d478ff2de3c9624d2f18e6eaa3fa5c Date: 2014-12-18 18:42:53 +0100 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14893

Image: Pharo3.0 [Latest update: #30863]

DIJavaTests(TestAsserter)>>assert:
	Receiver: DIJavaTests>>#testCycle
	Arguments and temporary variables: 
		aBoolean: 	false
	Receiver's instance variables: 
		testSelector: 	#testCycle
		expectedFails: 	nil


[ :n | self assert: (DIModel allRules at: n) hasFailed = (res at: n) not ] in DIJavaTests(DIDSLTests)>>runAndReturnObjWithText:andSuccessResults:onProject:
	Receiver: DIJavaTests>>#testCycle
	Arguments and temporary variables: 
		dslText: 	'
Test = Package with name:"org.jhotdraw.test"
Util = Package with nam...etc...
		res: 	#(false false true)
		project: 	'TestProject'
		dicto: 	a DIDicto
		n: 	1
	Receiver's instance variables: 
		testSelector: 	#testCycle
		expectedFails: 	nil


Interval>>do:
	Receiver: (1 to: 3)
	Arguments and temporary variables: 
		aBlock: 	[ :n | self assert: (DIModel allRules at: n) hasFailed = (res at: n) no...etc...
		aValue: 	1
		index: 	1
		size: 	3
	Receiver's instance variables: 
		start: 	1
		stop: 	3
		step: 	1


DIJavaTests(DIDSLTests)>>runAndReturnObjWithText:andSuccessResults:onProject:
	Receiver: DIJavaTests>>#testCycle
	Arguments and temporary variables: 
		dslText: 	'
Test = Package with name:"org.jhotdraw.test"
Util = Package with nam...etc...
		res: 	#(false false true)
		project: 	'TestProject'
		dicto: 	a DIDicto
	Receiver's instance variables: 
		testSelector: 	#testCycle
		expectedFails: 	nil


DIJavaTests(DIDSLTests)>>runAndReturnObjWithText:andSuccessResults:
	Receiver: DIJavaTests>>#testCycle
	Arguments and temporary variables: 
		dslText: 	'
Test = Package with name:"org.jhotdraw.test"
Util = Package with nam...etc...
		res: 	#(false false true)
	Receiver's instance variables: 
		testSelector: 	#testCycle
		expectedFails: 	nil


DIJavaTests>>testCycle
	Receiver: DIJavaTests>>#testCycle
	Arguments and temporary variables: 
		dsl: 	'
Test = Package with name:"org.jhotdraw.test"
Util = Package with name:"o...etc...
		success: 	#(false false true)
	Receiver's instance variables: 
		testSelector: 	#testCycle
		expectedFails: 	nil


DIJavaTests(TestCase)>>performTest
	Receiver: DIJavaTests>>#testCycle
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testCycle
		expectedFails: 	nil


[ 
self setUp.
self performTest ] in DIJavaTests(TestCase)>>runCase
	Receiver: DIJavaTests>>#testCycle
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testCycle
		expectedFails: 	nil


BlockClosure>>ensure:
	Receiver: [ 
self setUp.
self performTest ]
	Arguments and temporary variables: 
		aBlock: 	[ 
self tearDown.
self cleanUpInstanceVariables ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	DIJavaTests(TestCase)>>runCase
		startpc: 	57
		numArgs: 	0


DIJavaTests(TestCase)>>runCase
	Receiver: DIJavaTests>>#testCycle
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testCycle
		expectedFails: 	nil


[ (self class selector: testSelector) runCase ] in DIJavaTests(TestCase)>>debug
	Receiver: DIJavaTests>>#testCycle
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testCycle
		expectedFails: 	nil


BlockClosure>>ensure:
	Receiver: [ (self class selector: testSelector) runCase ]
	Arguments and temporary variables: 
		aBlock: 	[ self classForTestResource resetResources: self resources ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	DIJavaTests(TestCase)>>debug
		startpc: 	45
		numArgs: 	0


DIJavaTests(TestCase)>>debug
	Receiver: DIJavaTests>>#testCycle
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testCycle
		expectedFails: 	nil


DIJavaTests class(TestCase class)>>debug:
	Receiver: DIJavaTests
	Arguments and temporary variables: 
		aSymbol: 	#testCycle
	Receiver's instance variables: 
		superclass: 	DIDSLTests
		methodDict: 	a MethodDictionary(#testCodeClones->DIJavaTests>>#testCodeClones #t...etc...
		format: 	134
		layout: 	a FixedLayout
		instanceVariables: 	#()
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#DIJavaTests
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Dicto-var-tests'
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set(#testCodeClones #testCy...etc...


[ 
| vScroll testClass testResult |
vScroll := methodWidget vScrollValue.
testClass := testMethod methodClass.
testResult := [ testClass run: testMethod selector ]
	on: Halt
	do: [ :e | 
		aBoolean
			ifTrue: [ 
				[ self runTestForAMethodWithAnHalt: aMethod ] fork.
				shouldAnnounce := false.
				TestAsserter classForTestResult new ]
			ifFalse: [ 
				TestAsserter classForTestResult new
					addFailure: (testClass selector: testMethod selector);
					yourself ] ].
testResult updateResultsInHistory.
testSemaphoreForMethod signal.
(aBoolean and: [ testResult failures isEmpty not or: [ testResult errors isEmpty not ] ])
	ifTrue: [ testClass debug: testMethod selector ].
ClassesIconsCache removeKey: aMethod methodClass ifAbsent: [  ].
UIManager default defer: [ methodWidget vScrollValue: vScroll ] ] in PackageTreeNautilusUI(NautilusUI)>>runTestForAMethod:notifying:priority:
	Receiver: a PackageTreeNautilusUI
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a CategoryWidget a MethodWidget a NautilusWindow(...etc...
		model: 	a PackageTreeNautilus
		window: 	a NautilusWindow(542638080)
		hierarchyClass: 	DITestGroup
		cachedHierarchy: 	a SortHierarchically
		sourceTextArea: 	a PluggableTextMorphWithLimits(303038464)
		groupsSelection: 	a Dictionary()
		packagesSelection: 	a Dictionary(var-tests->true )
		classesSelection: 	a Dictionary(DIJavaTests->true DISTTests->false )
		list: 	a MorphTreeMorph(273940480)
		list2: 	a PluggableIconListMorph(454295552)
		sourceCodePanel: 	a PanelMorph(183500800)
		commentTextArea: 	nil
		currentDisplayChoice: 	#SourceCode
		sourceTextAreaLimit: 	350
		sourceCodeContainer: 	a PanelMorph(584843264)
		list2Elements: 	{DIDSLTests. DIJavaTests. DIPHPTests. DISTTests}
		listElements: 	nil
		shouldUpdateTitle: 	true
		testSemaphore: 	a Semaphore()
		sourceTextAreas: 	an OrderedCollection(a PluggableTextMorphWithLimits(303038464)...etc...
		multipleMethodsEditor: 	a MultipleMethodsEditor(286261248)
		contentSelection: 	nil
		acceptor: 	a MethodDefinitionAcceptor
		classifier: 	a MethodClassifier
		categoryWidget: 	a CategoryWidget
		methodWidget: 	a MethodWidget
		packagePattern: 	a RxMatcher
		searchWidget: 	a SearchMorph(866648064)


[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ 
| vScroll testClass testResult |
vScroll := methodWidget vScrollValue.
testClass := tes...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	PackageTreeNautilusUI(NautilusUI)>>runTestForAMethod:notifying:pr...etc...
		startpc: 	236
		numArgs: 	0



--- The full stack ---
DIJavaTests(TestAsserter)>>assert:
[ :n | self assert: (DIModel allRules at: n) hasFailed = (res at: n) not ] in DIJavaTests(DIDSLTests)>>runAndReturnObjWithText:andSuccessResults:onProject:
Interval>>do:
DIJavaTests(DIDSLTests)>>runAndReturnObjWithText:andSuccessResults:onProject:
DIJavaTests(DIDSLTests)>>runAndReturnObjWithText:andSuccessResults:
DIJavaTests>>testCycle
DIJavaTests(TestCase)>>performTest
[ 
self setUp.
self performTest ] in DIJavaTests(TestCase)>>runCase
BlockClosure>>ensure:
DIJavaTests(TestCase)>>runCase
[ (self class selector: testSelector) runCase ] in DIJavaTests(TestCase)>>debug
BlockClosure>>ensure:
DIJavaTests(TestCase)>>debug
DIJavaTests class(TestCase class)>>debug:
[ 
| vScroll testClass testResult |
vScroll := methodWidget vScrollValue.
testClass := testMethod methodClass.
testResult := [ testClass run: testMethod selector ]
	on: Halt
	do: [ :e | 
		aBoolean
			ifTrue: [ 
				[ self runTestForAMethodWithAnHalt: aMethod ] fork.
				shouldAnnounce := false.
				TestAsserter classForTestResult new ]
			ifFalse: [ 
				TestAsserter classForTestResult new
					addFailure: (testClass selector: testMethod selector);
					yourself ] ].
testResult updateResultsInHistory.
testSemaphoreForMethod signal.
(aBoolean and: [ testResult failures isEmpty not or: [ testResult errors isEmpty not ] ])
	ifTrue: [ testClass debug: testMethod selector ].
ClassesIconsCache removeKey: aMethod methodClass ifAbsent: [  ].
UIManager default defer: [ methodWidget vScrollValue: vScroll ] ] in PackageTreeNautilusUI(NautilusUI)>>runTestForAMethod:notifying:priority:
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
TestFailure: Assertion failed
25 February 2015 11:46:16.914815 am

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
NBCogit NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
https://github.com/pharo-project/pharo-vm.git Commit: 4a0d556150d478ff2de3c9624d2f18e6eaa3fa5c Date: 2014-12-18 18:42:53 +0100 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14893

Image: Pharo3.0 [Latest update: #30863]

DIJavaTests(TestAsserter)>>assert:
	Receiver: DIJavaTests>>#testFileContent
	Arguments and temporary variables: 
		aBoolean: 	false
	Receiver's instance variables: 
		testSelector: 	#testFileContent
		expectedFails: 	nil


[ :n | self assert: (DIModel allRules at: n) hasFailed = (res at: n) not ] in DIJavaTests(DIDSLTests)>>runAndReturnObjWithText:andSuccessResults:onProject:
	Receiver: DIJavaTests>>#testFileContent
	Arguments and temporary variables: 
		dslText: 	'
BuildFile = File with path:"*/build/BUILD.XML"

BuildFile must conta...etc...
		res: 	#(false true false false)
		project: 	'TestProject'
		dicto: 	a DIDicto
		n: 	1
	Receiver's instance variables: 
		testSelector: 	#testFileContent
		expectedFails: 	nil


Interval>>do:
	Receiver: (1 to: 4)
	Arguments and temporary variables: 
		aBlock: 	[ :n | self assert: (DIModel allRules at: n) hasFailed = (res at: n) no...etc...
		aValue: 	1
		index: 	1
		size: 	4
	Receiver's instance variables: 
		start: 	1
		stop: 	4
		step: 	1


DIJavaTests(DIDSLTests)>>runAndReturnObjWithText:andSuccessResults:onProject:
	Receiver: DIJavaTests>>#testFileContent
	Arguments and temporary variables: 
		dslText: 	'
BuildFile = File with path:"*/build/BUILD.XML"

BuildFile must conta...etc...
		res: 	#(false true false false)
		project: 	'TestProject'
		dicto: 	a DIDicto
	Receiver's instance variables: 
		testSelector: 	#testFileContent
		expectedFails: 	nil


DIJavaTests(DIDSLTests)>>runAndReturnObjWithText:andSuccessResults:
	Receiver: DIJavaTests>>#testFileContent
	Arguments and temporary variables: 
		dslText: 	'
BuildFile = File with path:"*/build/BUILD.XML"

BuildFile must conta...etc...
		res: 	#(false true false false)
	Receiver's instance variables: 
		testSelector: 	#testFileContent
		expectedFails: 	nil


DIJavaTests>>testFileContent
	Receiver: DIJavaTests>>#testFileContent
	Arguments and temporary variables: 
		dsl: 	'
BuildFile = File with path:"*/build/BUILD.XML"

BuildFile must contain t...etc...
		success: 	#(false true false false)
	Receiver's instance variables: 
		testSelector: 	#testFileContent
		expectedFails: 	nil


DIJavaTests(TestCase)>>performTest
	Receiver: DIJavaTests>>#testFileContent
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testFileContent
		expectedFails: 	nil


[ 
self setUp.
self performTest ] in DIJavaTests(TestCase)>>runCase
	Receiver: DIJavaTests>>#testFileContent
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testFileContent
		expectedFails: 	nil


BlockClosure>>ensure:
	Receiver: [ 
self setUp.
self performTest ]
	Arguments and temporary variables: 
		aBlock: 	[ 
self tearDown.
self cleanUpInstanceVariables ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	DIJavaTests(TestCase)>>runCase
		startpc: 	57
		numArgs: 	0


DIJavaTests(TestCase)>>runCase
	Receiver: DIJavaTests>>#testFileContent
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testFileContent
		expectedFails: 	nil


[ (self class selector: testSelector) runCase ] in DIJavaTests(TestCase)>>debug
	Receiver: DIJavaTests>>#testFileContent
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testFileContent
		expectedFails: 	nil


BlockClosure>>ensure:
	Receiver: [ (self class selector: testSelector) runCase ]
	Arguments and temporary variables: 
		aBlock: 	[ self classForTestResource resetResources: self resources ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	DIJavaTests(TestCase)>>debug
		startpc: 	45
		numArgs: 	0


DIJavaTests(TestCase)>>debug
	Receiver: DIJavaTests>>#testFileContent
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testFileContent
		expectedFails: 	nil


DIJavaTests class(TestCase class)>>debug:
	Receiver: DIJavaTests
	Arguments and temporary variables: 
		aSymbol: 	#testFileContent
	Receiver's instance variables: 
		superclass: 	DIDSLTests
		methodDict: 	a MethodDictionary(#testCodeClones->DIJavaTests>>#testCodeClones #t...etc...
		format: 	134
		layout: 	a FixedLayout
		instanceVariables: 	#()
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#DIJavaTests
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Dicto-var-tests'
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set(#testCodeClones #testFi...etc...


[ 
| vScroll testClass testResult |
vScroll := methodWidget vScrollValue.
testClass := testMethod methodClass.
testResult := [ testClass run: testMethod selector ]
	on: Halt
	do: [ :e | 
		aBoolean
			ifTrue: [ 
				[ self runTestForAMethodWithAnHalt: aMethod ] fork.
				shouldAnnounce := false.
				TestAsserter classForTestResult new ]
			ifFalse: [ 
				TestAsserter classForTestResult new
					addFailure: (testClass selector: testMethod selector);
					yourself ] ].
testResult updateResultsInHistory.
testSemaphoreForMethod signal.
(aBoolean and: [ testResult failures isEmpty not or: [ testResult errors isEmpty not ] ])
	ifTrue: [ testClass debug: testMethod selector ].
ClassesIconsCache removeKey: aMethod methodClass ifAbsent: [  ].
UIManager default defer: [ methodWidget vScrollValue: vScroll ] ] in PackageTreeNautilusUI(NautilusUI)>>runTestForAMethod:notifying:priority:
	Receiver: a PackageTreeNautilusUI
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a CategoryWidget a MethodWidget a NautilusWindow(...etc...
		model: 	a PackageTreeNautilus
		window: 	a NautilusWindow(542638080)
		hierarchyClass: 	DITestGroup
		cachedHierarchy: 	a SortHierarchically
		sourceTextArea: 	a PluggableTextMorphWithLimits(303038464)
		groupsSelection: 	a Dictionary()
		packagesSelection: 	a Dictionary(var-tests->true )
		classesSelection: 	a Dictionary(DIDSLTests->false DIJavaTests->true )
		list: 	a MorphTreeMorph(273940480)
		list2: 	a PluggableIconListMorph(454295552)
		sourceCodePanel: 	a PanelMorph(183500800)
		commentTextArea: 	nil
		currentDisplayChoice: 	#SourceCode
		sourceTextAreaLimit: 	350
		sourceCodeContainer: 	a PanelMorph(584843264)
		list2Elements: 	{DIDSLTests. DIJavaTests. DIPHPTests. DISTTests}
		listElements: 	nil
		shouldUpdateTitle: 	true
		testSemaphore: 	a Semaphore()
		sourceTextAreas: 	an OrderedCollection(a PluggableTextMorphWithLimits(303038464)...etc...
		multipleMethodsEditor: 	a MultipleMethodsEditor(286261248)
		contentSelection: 	nil
		acceptor: 	a MethodDefinitionAcceptor
		classifier: 	a MethodClassifier
		categoryWidget: 	a CategoryWidget
		methodWidget: 	a MethodWidget
		packagePattern: 	a RxMatcher
		searchWidget: 	a SearchMorph(866648064)


[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ 
| vScroll testClass testResult |
vScroll := methodWidget vScrollValue.
testClass := tes...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	PackageTreeNautilusUI(NautilusUI)>>runTestForAMethod:notifying:pr...etc...
		startpc: 	236
		numArgs: 	0



--- The full stack ---
DIJavaTests(TestAsserter)>>assert:
[ :n | self assert: (DIModel allRules at: n) hasFailed = (res at: n) not ] in DIJavaTests(DIDSLTests)>>runAndReturnObjWithText:andSuccessResults:onProject:
Interval>>do:
DIJavaTests(DIDSLTests)>>runAndReturnObjWithText:andSuccessResults:onProject:
DIJavaTests(DIDSLTests)>>runAndReturnObjWithText:andSuccessResults:
DIJavaTests>>testFileContent
DIJavaTests(TestCase)>>performTest
[ 
self setUp.
self performTest ] in DIJavaTests(TestCase)>>runCase
BlockClosure>>ensure:
DIJavaTests(TestCase)>>runCase
[ (self class selector: testSelector) runCase ] in DIJavaTests(TestCase)>>debug
BlockClosure>>ensure:
DIJavaTests(TestCase)>>debug
DIJavaTests class(TestCase class)>>debug:
[ 
| vScroll testClass testResult |
vScroll := methodWidget vScrollValue.
testClass := testMethod methodClass.
testResult := [ testClass run: testMethod selector ]
	on: Halt
	do: [ :e | 
		aBoolean
			ifTrue: [ 
				[ self runTestForAMethodWithAnHalt: aMethod ] fork.
				shouldAnnounce := false.
				TestAsserter classForTestResult new ]
			ifFalse: [ 
				TestAsserter classForTestResult new
					addFailure: (testClass selector: testMethod selector);
					yourself ] ].
testResult updateResultsInHistory.
testSemaphoreForMethod signal.
(aBoolean and: [ testResult failures isEmpty not or: [ testResult errors isEmpty not ] ])
	ifTrue: [ testClass debug: testMethod selector ].
ClassesIconsCache removeKey: aMethod methodClass ifAbsent: [  ].
UIManager default defer: [ methodWidget vScrollValue: vScroll ] ] in PackageTreeNautilusUI(NautilusUI)>>runTestForAMethod:notifying:priority:
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
TestFailure: Assertion failed
25 February 2015 11:46:31.932755 am

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
NBCogit NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
https://github.com/pharo-project/pharo-vm.git Commit: 4a0d556150d478ff2de3c9624d2f18e6eaa3fa5c Date: 2014-12-18 18:42:53 +0100 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14893

Image: Pharo3.0 [Latest update: #30863]

DIJavaTests(TestAsserter)>>assert:
	Receiver: DIJavaTests>>#testDependencies
	Arguments and temporary variables: 
		aBoolean: 	false
	Receiver's instance variables: 
		testSelector: 	#testDependencies
		expectedFails: 	nil


[ :n | self assert: (DIModel allRules at: n) hasFailed = (res at: n) not ] in DIJavaTests(DIDSLTests)>>runAndReturnObjWithText:andSuccessResults:onProject:
	Receiver: DIJavaTests>>#testDependencies
	Arguments and temporary variables: 
		dslText: 	'
Application = Package with name:"org.jhotdraw.application"
Contrib =...etc...
		res: 	#(true false false false false)
		project: 	'TestProject'
		dicto: 	a DIDicto
		n: 	2
	Receiver's instance variables: 
		testSelector: 	#testDependencies
		expectedFails: 	nil


Interval>>do:
	Receiver: (1 to: 5)
	Arguments and temporary variables: 
		aBlock: 	[ :n | self assert: (DIModel allRules at: n) hasFailed = (res at: n) no...etc...
		aValue: 	2
		index: 	2
		size: 	5
	Receiver's instance variables: 
		start: 	1
		stop: 	5
		step: 	1


DIJavaTests(DIDSLTests)>>runAndReturnObjWithText:andSuccessResults:onProject:
	Receiver: DIJavaTests>>#testDependencies
	Arguments and temporary variables: 
		dslText: 	'
Application = Package with name:"org.jhotdraw.application"
Contrib =...etc...
		res: 	#(true false false false false)
		project: 	'TestProject'
		dicto: 	a DIDicto
	Receiver's instance variables: 
		testSelector: 	#testDependencies
		expectedFails: 	nil


DIJavaTests(DIDSLTests)>>runAndReturnObjWithText:andSuccessResults:
	Receiver: DIJavaTests>>#testDependencies
	Arguments and temporary variables: 
		dslText: 	'
Application = Package with name:"org.jhotdraw.application"
Contrib =...etc...
		res: 	#(true false false false false)
	Receiver's instance variables: 
		testSelector: 	#testDependencies
		expectedFails: 	nil


DIJavaTests>>testDependencies
	Receiver: DIJavaTests>>#testDependencies
	Arguments and temporary variables: 
		dsl: 	'
Application = Package with name:"org.jhotdraw.application"
Contrib = Pac...etc...
		success: 	#(true false false false false)
	Receiver's instance variables: 
		testSelector: 	#testDependencies
		expectedFails: 	nil


DIJavaTests(TestCase)>>performTest
	Receiver: DIJavaTests>>#testDependencies
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testDependencies
		expectedFails: 	nil


[ 
self setUp.
self performTest ] in DIJavaTests(TestCase)>>runCase
	Receiver: DIJavaTests>>#testDependencies
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testDependencies
		expectedFails: 	nil


BlockClosure>>ensure:
	Receiver: [ 
self setUp.
self performTest ]
	Arguments and temporary variables: 
		aBlock: 	[ 
self tearDown.
self cleanUpInstanceVariables ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	DIJavaTests(TestCase)>>runCase
		startpc: 	57
		numArgs: 	0


DIJavaTests(TestCase)>>runCase
	Receiver: DIJavaTests>>#testDependencies
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testDependencies
		expectedFails: 	nil


[ (self class selector: testSelector) runCase ] in DIJavaTests(TestCase)>>debug
	Receiver: DIJavaTests>>#testDependencies
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testDependencies
		expectedFails: 	nil


BlockClosure>>ensure:
	Receiver: [ (self class selector: testSelector) runCase ]
	Arguments and temporary variables: 
		aBlock: 	[ self classForTestResource resetResources: self resources ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	DIJavaTests(TestCase)>>debug
		startpc: 	45
		numArgs: 	0


DIJavaTests(TestCase)>>debug
	Receiver: DIJavaTests>>#testDependencies
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testDependencies
		expectedFails: 	nil


DIJavaTests class(TestCase class)>>debug:
	Receiver: DIJavaTests
	Arguments and temporary variables: 
		aSymbol: 	#testDependencies
	Receiver's instance variables: 
		superclass: 	DIDSLTests
		methodDict: 	a MethodDictionary(#testCodeClones->DIJavaTests>>#testCodeClones #t...etc...
		format: 	134
		layout: 	a FixedLayout
		instanceVariables: 	#()
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#DIJavaTests
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Dicto-var-tests'
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set(#testCodeClones #testFi...etc...


[ 
| vScroll testClass testResult |
vScroll := methodWidget vScrollValue.
testClass := testMethod methodClass.
testResult := [ testClass run: testMethod selector ]
	on: Halt
	do: [ :e | 
		aBoolean
			ifTrue: [ 
				[ self runTestForAMethodWithAnHalt: aMethod ] fork.
				shouldAnnounce := false.
				TestAsserter classForTestResult new ]
			ifFalse: [ 
				TestAsserter classForTestResult new
					addFailure: (testClass selector: testMethod selector);
					yourself ] ].
testResult updateResultsInHistory.
testSemaphoreForMethod signal.
(aBoolean and: [ testResult failures isEmpty not or: [ testResult errors isEmpty not ] ])
	ifTrue: [ testClass debug: testMethod selector ].
ClassesIconsCache removeKey: aMethod methodClass ifAbsent: [  ].
UIManager default defer: [ methodWidget vScrollValue: vScroll ] ] in PackageTreeNautilusUI(NautilusUI)>>runTestForAMethod:notifying:priority:
	Receiver: a PackageTreeNautilusUI
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a CategoryWidget a MethodWidget a NautilusWindow(...etc...
		model: 	a PackageTreeNautilus
		window: 	a NautilusWindow(542638080)
		hierarchyClass: 	DITestGroup
		cachedHierarchy: 	a SortHierarchically
		sourceTextArea: 	a PluggableTextMorphWithLimits(303038464)
		groupsSelection: 	a Dictionary()
		packagesSelection: 	a Dictionary(var-tests->true )
		classesSelection: 	a Dictionary(DIDSLTests->false DIJavaTests->true )
		list: 	a MorphTreeMorph(273940480)
		list2: 	a PluggableIconListMorph(454295552)
		sourceCodePanel: 	a PanelMorph(183500800)
		commentTextArea: 	nil
		currentDisplayChoice: 	#SourceCode
		sourceTextAreaLimit: 	350
		sourceCodeContainer: 	a PanelMorph(584843264)
		list2Elements: 	{DIDSLTests. DIJavaTests. DIPHPTests. DISTTests}
		listElements: 	nil
		shouldUpdateTitle: 	true
		testSemaphore: 	a Semaphore()
		sourceTextAreas: 	an OrderedCollection(a PluggableTextMorphWithLimits(303038464)...etc...
		multipleMethodsEditor: 	a MultipleMethodsEditor(286261248)
		contentSelection: 	nil
		acceptor: 	a MethodDefinitionAcceptor
		classifier: 	a MethodClassifier
		categoryWidget: 	a CategoryWidget
		methodWidget: 	a MethodWidget
		packagePattern: 	a RxMatcher
		searchWidget: 	a SearchMorph(866648064)


[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ 
| vScroll testClass testResult |
vScroll := methodWidget vScrollValue.
testClass := tes...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	PackageTreeNautilusUI(NautilusUI)>>runTestForAMethod:notifying:pr...etc...
		startpc: 	236
		numArgs: 	0



--- The full stack ---
DIJavaTests(TestAsserter)>>assert:
[ :n | self assert: (DIModel allRules at: n) hasFailed = (res at: n) not ] in DIJavaTests(DIDSLTests)>>runAndReturnObjWithText:andSuccessResults:onProject:
Interval>>do:
DIJavaTests(DIDSLTests)>>runAndReturnObjWithText:andSuccessResults:onProject:
DIJavaTests(DIDSLTests)>>runAndReturnObjWithText:andSuccessResults:
DIJavaTests>>testDependencies
DIJavaTests(TestCase)>>performTest
[ 
self setUp.
self performTest ] in DIJavaTests(TestCase)>>runCase
BlockClosure>>ensure:
DIJavaTests(TestCase)>>runCase
[ (self class selector: testSelector) runCase ] in DIJavaTests(TestCase)>>debug
BlockClosure>>ensure:
DIJavaTests(TestCase)>>debug
DIJavaTests class(TestCase class)>>debug:
[ 
| vScroll testClass testResult |
vScroll := methodWidget vScrollValue.
testClass := testMethod methodClass.
testResult := [ testClass run: testMethod selector ]
	on: Halt
	do: [ :e | 
		aBoolean
			ifTrue: [ 
				[ self runTestForAMethodWithAnHalt: aMethod ] fork.
				shouldAnnounce := false.
				TestAsserter classForTestResult new ]
			ifFalse: [ 
				TestAsserter classForTestResult new
					addFailure: (testClass selector: testMethod selector);
					yourself ] ].
testResult updateResultsInHistory.
testSemaphoreForMethod signal.
(aBoolean and: [ testResult failures isEmpty not or: [ testResult errors isEmpty not ] ])
	ifTrue: [ testClass debug: testMethod selector ].
ClassesIconsCache removeKey: aMethod methodClass ifAbsent: [  ].
UIManager default defer: [ methodWidget vScrollValue: vScroll ] ] in PackageTreeNautilusUI(NautilusUI)>>runTestForAMethod:notifying:priority:
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
TestFailure: Assertion failed
25 February 2015 11:46:35.061645 am

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
NBCogit NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
https://github.com/pharo-project/pharo-vm.git Commit: 4a0d556150d478ff2de3c9624d2f18e6eaa3fa5c Date: 2014-12-18 18:42:53 +0100 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14893

Image: Pharo3.0 [Latest update: #30863]

DIJavaTests(TestAsserter)>>assert:
	Receiver: DIJavaTests>>#testDeadlock
	Arguments and temporary variables: 
		aBoolean: 	false
	Receiver's instance variables: 
		testSelector: 	#testDeadlock
		expectedFails: 	nil


[ :n | self assert: (DIModel allRules at: n) hasFailed = (res at: n) not ] in DIJavaTests(DIDSLTests)>>runAndReturnObjWithText:andSuccessResults:onProject:
	Receiver: DIJavaTests>>#testDeadlock
	Arguments and temporary variables: 
		dslText: 	'
WithDeadlock =  Class with name:"DiningPhilosophers"		 // <-- must c...etc...
		res: 	#(false true)
		project: 	'TestProject'
		dicto: 	a DIDicto
		n: 	1
	Receiver's instance variables: 
		testSelector: 	#testDeadlock
		expectedFails: 	nil


Interval>>do:
	Receiver: (1 to: 2)
	Arguments and temporary variables: 
		aBlock: 	[ :n | self assert: (DIModel allRules at: n) hasFailed = (res at: n) no...etc...
		aValue: 	1
		index: 	1
		size: 	2
	Receiver's instance variables: 
		start: 	1
		stop: 	2
		step: 	1


DIJavaTests(DIDSLTests)>>runAndReturnObjWithText:andSuccessResults:onProject:
	Receiver: DIJavaTests>>#testDeadlock
	Arguments and temporary variables: 
		dslText: 	'
WithDeadlock =  Class with name:"DiningPhilosophers"		 // <-- must c...etc...
		res: 	#(false true)
		project: 	'TestProject'
		dicto: 	a DIDicto
	Receiver's instance variables: 
		testSelector: 	#testDeadlock
		expectedFails: 	nil


DIJavaTests(DIDSLTests)>>runAndReturnObjWithText:andSuccessResults:
	Receiver: DIJavaTests>>#testDeadlock
	Arguments and temporary variables: 
		dslText: 	'
WithDeadlock =  Class with name:"DiningPhilosophers"		 // <-- must c...etc...
		res: 	#(false true)
	Receiver's instance variables: 
		testSelector: 	#testDeadlock
		expectedFails: 	nil


DIJavaTests>>testDeadlock
	Receiver: DIJavaTests>>#testDeadlock
	Arguments and temporary variables: 
		dsl: 	'
WithDeadlock =  Class with name:"DiningPhilosophers"		 // <-- must conta...etc...
		success: 	#(false true)
	Receiver's instance variables: 
		testSelector: 	#testDeadlock
		expectedFails: 	nil


DIJavaTests(TestCase)>>performTest
	Receiver: DIJavaTests>>#testDeadlock
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testDeadlock
		expectedFails: 	nil


[ 
self setUp.
self performTest ] in DIJavaTests(TestCase)>>runCase
	Receiver: DIJavaTests>>#testDeadlock
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testDeadlock
		expectedFails: 	nil


BlockClosure>>ensure:
	Receiver: [ 
self setUp.
self performTest ]
	Arguments and temporary variables: 
		aBlock: 	[ 
self tearDown.
self cleanUpInstanceVariables ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	DIJavaTests(TestCase)>>runCase
		startpc: 	57
		numArgs: 	0


DIJavaTests(TestCase)>>runCase
	Receiver: DIJavaTests>>#testDeadlock
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testDeadlock
		expectedFails: 	nil


[ (self class selector: testSelector) runCase ] in DIJavaTests(TestCase)>>debug
	Receiver: DIJavaTests>>#testDeadlock
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testDeadlock
		expectedFails: 	nil


BlockClosure>>ensure:
	Receiver: [ (self class selector: testSelector) runCase ]
	Arguments and temporary variables: 
		aBlock: 	[ self classForTestResource resetResources: self resources ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	DIJavaTests(TestCase)>>debug
		startpc: 	45
		numArgs: 	0


DIJavaTests(TestCase)>>debug
	Receiver: DIJavaTests>>#testDeadlock
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testDeadlock
		expectedFails: 	nil


DIJavaTests class(TestCase class)>>debug:
	Receiver: DIJavaTests
	Arguments and temporary variables: 
		aSymbol: 	#testDeadlock
	Receiver's instance variables: 
		superclass: 	DIDSLTests
		methodDict: 	a MethodDictionary(#testCodeClones->DIJavaTests>>#testCodeClones #t...etc...
		format: 	134
		layout: 	a FixedLayout
		instanceVariables: 	#()
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#DIJavaTests
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Dicto-var-tests'
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set(#testCodeClones #testFi...etc...


[ 
| vScroll testClass testResult |
vScroll := methodWidget vScrollValue.
testClass := testMethod methodClass.
testResult := [ testClass run: testMethod selector ]
	on: Halt
	do: [ :e | 
		aBoolean
			ifTrue: [ 
				[ self runTestForAMethodWithAnHalt: aMethod ] fork.
				shouldAnnounce := false.
				TestAsserter classForTestResult new ]
			ifFalse: [ 
				TestAsserter classForTestResult new
					addFailure: (testClass selector: testMethod selector);
					yourself ] ].
testResult updateResultsInHistory.
testSemaphoreForMethod signal.
(aBoolean and: [ testResult failures isEmpty not or: [ testResult errors isEmpty not ] ])
	ifTrue: [ testClass debug: testMethod selector ].
ClassesIconsCache removeKey: aMethod methodClass ifAbsent: [  ].
UIManager default defer: [ methodWidget vScrollValue: vScroll ] ] in PackageTreeNautilusUI(NautilusUI)>>runTestForAMethod:notifying:priority:
	Receiver: a PackageTreeNautilusUI
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a CategoryWidget a MethodWidget a NautilusWindow(...etc...
		model: 	a PackageTreeNautilus
		window: 	a NautilusWindow(542638080)
		hierarchyClass: 	DITestGroup
		cachedHierarchy: 	a SortHierarchically
		sourceTextArea: 	a PluggableTextMorphWithLimits(303038464)
		groupsSelection: 	a Dictionary()
		packagesSelection: 	a Dictionary(var-tests->true )
		classesSelection: 	a Dictionary(DIDSLTests->false DIJavaTests->true )
		list: 	a MorphTreeMorph(273940480)
		list2: 	a PluggableIconListMorph(454295552)
		sourceCodePanel: 	a PanelMorph(183500800)
		commentTextArea: 	nil
		currentDisplayChoice: 	#SourceCode
		sourceTextAreaLimit: 	350
		sourceCodeContainer: 	a PanelMorph(584843264)
		list2Elements: 	{DIDSLTests. DIJavaTests. DIPHPTests. DISTTests}
		listElements: 	nil
		shouldUpdateTitle: 	true
		testSemaphore: 	a Semaphore()
		sourceTextAreas: 	an OrderedCollection(a PluggableTextMorphWithLimits(303038464)...etc...
		multipleMethodsEditor: 	a MultipleMethodsEditor(286261248)
		contentSelection: 	nil
		acceptor: 	a MethodDefinitionAcceptor
		classifier: 	a MethodClassifier
		categoryWidget: 	a CategoryWidget
		methodWidget: 	a MethodWidget
		packagePattern: 	a RxMatcher
		searchWidget: 	a SearchMorph(866648064)


[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ 
| vScroll testClass testResult |
vScroll := methodWidget vScrollValue.
testClass := tes...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	PackageTreeNautilusUI(NautilusUI)>>runTestForAMethod:notifying:pr...etc...
		startpc: 	236
		numArgs: 	0



--- The full stack ---
DIJavaTests(TestAsserter)>>assert:
[ :n | self assert: (DIModel allRules at: n) hasFailed = (res at: n) not ] in DIJavaTests(DIDSLTests)>>runAndReturnObjWithText:andSuccessResults:onProject:
Interval>>do:
DIJavaTests(DIDSLTests)>>runAndReturnObjWithText:andSuccessResults:onProject:
DIJavaTests(DIDSLTests)>>runAndReturnObjWithText:andSuccessResults:
DIJavaTests>>testDeadlock
DIJavaTests(TestCase)>>performTest
[ 
self setUp.
self performTest ] in DIJavaTests(TestCase)>>runCase
BlockClosure>>ensure:
DIJavaTests(TestCase)>>runCase
[ (self class selector: testSelector) runCase ] in DIJavaTests(TestCase)>>debug
BlockClosure>>ensure:
DIJavaTests(TestCase)>>debug
DIJavaTests class(TestCase class)>>debug:
[ 
| vScroll testClass testResult |
vScroll := methodWidget vScrollValue.
testClass := testMethod methodClass.
testResult := [ testClass run: testMethod selector ]
	on: Halt
	do: [ :e | 
		aBoolean
			ifTrue: [ 
				[ self runTestForAMethodWithAnHalt: aMethod ] fork.
				shouldAnnounce := false.
				TestAsserter classForTestResult new ]
			ifFalse: [ 
				TestAsserter classForTestResult new
					addFailure: (testClass selector: testMethod selector);
					yourself ] ].
testResult updateResultsInHistory.
testSemaphoreForMethod signal.
(aBoolean and: [ testResult failures isEmpty not or: [ testResult errors isEmpty not ] ])
	ifTrue: [ testClass debug: testMethod selector ].
ClassesIconsCache removeKey: aMethod methodClass ifAbsent: [  ].
UIManager default defer: [ methodWidget vScrollValue: vScroll ] ] in PackageTreeNautilusUI(NautilusUI)>>runTestForAMethod:notifying:priority:
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
TestFailure: Assertion failed
25 February 2015 11:47:15.381902 am

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
NBCogit NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
https://github.com/pharo-project/pharo-vm.git Commit: 4a0d556150d478ff2de3c9624d2f18e6eaa3fa5c Date: 2014-12-18 18:42:53 +0100 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14893

Image: Pharo3.0 [Latest update: #30863]

DISTTests(TestAsserter)>>assert:
	Receiver: DISTTests>>#test_DeadMethods
	Arguments and temporary variables: 
		aBoolean: 	false
	Receiver's instance variables: 
		testSelector: 	#test_DeadMethods
		expectedFails: 	nil


[ :n | self assert: (DIModel allRules at: n) hasFailed = (res at: n) not ] in DISTTests(DIDSLTests)>>runAndReturnObjWithText:andSuccessResults:onProject:
	Receiver: DISTTests>>#test_DeadMethods
	Arguments and temporary variables: 
		dslText: 	'
AllMethods = STMethod with name:"*"

AllMethods must be invoked
'
		res: 	#(false)
		project: 	'TestProject'
		dicto: 	a DIDicto
		n: 	1
	Receiver's instance variables: 
		testSelector: 	#test_DeadMethods
		expectedFails: 	nil


Interval>>do:
	Receiver: (1 to: 1)
	Arguments and temporary variables: 
		aBlock: 	[ :n | self assert: (DIModel allRules at: n) hasFailed = (res at: n) no...etc...
		aValue: 	1
		index: 	1
		size: 	1
	Receiver's instance variables: 
		start: 	1
		stop: 	1
		step: 	1


DISTTests(DIDSLTests)>>runAndReturnObjWithText:andSuccessResults:onProject:
	Receiver: DISTTests>>#test_DeadMethods
	Arguments and temporary variables: 
		dslText: 	'
AllMethods = STMethod with name:"*"

AllMethods must be invoked
'
		res: 	#(false)
		project: 	'TestProject'
		dicto: 	a DIDicto
	Receiver's instance variables: 
		testSelector: 	#test_DeadMethods
		expectedFails: 	nil


DISTTests(DIDSLTests)>>runAndReturnObjWithText:andSuccessResults:
	Receiver: DISTTests>>#test_DeadMethods
	Arguments and temporary variables: 
		dslText: 	'
AllMethods = STMethod with name:"*"

AllMethods must be invoked
'
		res: 	#(false)
	Receiver's instance variables: 
		testSelector: 	#test_DeadMethods
		expectedFails: 	nil


DISTTests>>test_DeadMethods
	Receiver: DISTTests>>#test_DeadMethods
	Arguments and temporary variables: 
		dsl: 	'
AllMethods = STMethod with name:"*"

AllMethods must be invoked
'
		success: 	#(false)
	Receiver's instance variables: 
		testSelector: 	#test_DeadMethods
		expectedFails: 	nil


DISTTests(TestCase)>>performTest
	Receiver: DISTTests>>#test_DeadMethods
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test_DeadMethods
		expectedFails: 	nil


[ 
self setUp.
self performTest ] in DISTTests(TestCase)>>runCase
	Receiver: DISTTests>>#test_DeadMethods
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test_DeadMethods
		expectedFails: 	nil


BlockClosure>>ensure:
	Receiver: [ 
self setUp.
self performTest ]
	Arguments and temporary variables: 
		aBlock: 	[ 
self tearDown.
self cleanUpInstanceVariables ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	DISTTests(TestCase)>>runCase
		startpc: 	57
		numArgs: 	0


DISTTests(TestCase)>>runCase
	Receiver: DISTTests>>#test_DeadMethods
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test_DeadMethods
		expectedFails: 	nil


[ (self class selector: testSelector) runCase ] in DISTTests(TestCase)>>debug
	Receiver: DISTTests>>#test_DeadMethods
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test_DeadMethods
		expectedFails: 	nil


BlockClosure>>ensure:
	Receiver: [ (self class selector: testSelector) runCase ]
	Arguments and temporary variables: 
		aBlock: 	[ self classForTestResource resetResources: self resources ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	DISTTests(TestCase)>>debug
		startpc: 	45
		numArgs: 	0


DISTTests(TestCase)>>debug
	Receiver: DISTTests>>#test_DeadMethods
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test_DeadMethods
		expectedFails: 	nil


DISTTests class(TestCase class)>>debug:
	Receiver: DISTTests
	Arguments and temporary variables: 
		aSymbol: 	#test_DeadMethods
	Receiver's instance variables: 
		superclass: 	DIDSLTests
		methodDict: 	a MethodDictionary(#test_AdapterInterface->DISTTests>>#test_Adapter...etc...
		format: 	134
		layout: 	a FixedLayout
		instanceVariables: 	#()
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#DISTTests
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Dicto-var-tests'
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set(#test_AdapterTests #tes...etc...


[ 
| vScroll testClass testResult |
vScroll := methodWidget vScrollValue.
testClass := testMethod methodClass.
testResult := [ testClass run: testMethod selector ]
	on: Halt
	do: [ :e | 
		aBoolean
			ifTrue: [ 
				[ self runTestForAMethodWithAnHalt: aMethod ] fork.
				shouldAnnounce := false.
				TestAsserter classForTestResult new ]
			ifFalse: [ 
				TestAsserter classForTestResult new
					addFailure: (testClass selector: testMethod selector);
					yourself ] ].
testResult updateResultsInHistory.
testSemaphoreForMethod signal.
(aBoolean and: [ testResult failures isEmpty not or: [ testResult errors isEmpty not ] ])
	ifTrue: [ testClass debug: testMethod selector ].
ClassesIconsCache removeKey: aMethod methodClass ifAbsent: [  ].
UIManager default defer: [ methodWidget vScrollValue: vScroll ] ] in PackageTreeNautilusUI(NautilusUI)>>runTestForAMethod:notifying:priority:
	Receiver: a PackageTreeNautilusUI
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a CategoryWidget a MethodWidget a NautilusWindow(...etc...
		model: 	a PackageTreeNautilus
		window: 	a NautilusWindow(542638080)
		hierarchyClass: 	DITestGroup
		cachedHierarchy: 	a SortHierarchically
		sourceTextArea: 	a PluggableTextMorphWithLimits(303038464)
		groupsSelection: 	a Dictionary()
		packagesSelection: 	a Dictionary(var-tests->true )
		classesSelection: 	a Dictionary(DISTTests->true )
		list: 	a MorphTreeMorph(273940480)
		list2: 	a PluggableIconListMorph(454295552)
		sourceCodePanel: 	a PanelMorph(183500800)
		commentTextArea: 	nil
		currentDisplayChoice: 	#SourceCode
		sourceTextAreaLimit: 	350
		sourceCodeContainer: 	a PanelMorph(584843264)
		list2Elements: 	{DIDSLTests. DIJavaTests. DIPHPTests. DISTTests}
		listElements: 	nil
		shouldUpdateTitle: 	true
		testSemaphore: 	a Semaphore()
		sourceTextAreas: 	an OrderedCollection(a PluggableTextMorphWithLimits(303038464)...etc...
		multipleMethodsEditor: 	a MultipleMethodsEditor(286261248)
		contentSelection: 	nil
		acceptor: 	a ClassOrMethodDefinitionAcceptor
		classifier: 	a MethodClassifier
		categoryWidget: 	a CategoryWidget
		methodWidget: 	a MethodWidget
		packagePattern: 	a RxMatcher
		searchWidget: 	a SearchMorph(866648064)


[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ 
| vScroll testClass testResult |
vScroll := methodWidget vScrollValue.
testClass := tes...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	PackageTreeNautilusUI(NautilusUI)>>runTestForAMethod:notifying:pr...etc...
		startpc: 	236
		numArgs: 	0



--- The full stack ---
DISTTests(TestAsserter)>>assert:
[ :n | self assert: (DIModel allRules at: n) hasFailed = (res at: n) not ] in DISTTests(DIDSLTests)>>runAndReturnObjWithText:andSuccessResults:onProject:
Interval>>do:
DISTTests(DIDSLTests)>>runAndReturnObjWithText:andSuccessResults:onProject:
DISTTests(DIDSLTests)>>runAndReturnObjWithText:andSuccessResults:
DISTTests>>test_DeadMethods
DISTTests(TestCase)>>performTest
[ 
self setUp.
self performTest ] in DISTTests(TestCase)>>runCase
BlockClosure>>ensure:
DISTTests(TestCase)>>runCase
[ (self class selector: testSelector) runCase ] in DISTTests(TestCase)>>debug
BlockClosure>>ensure:
DISTTests(TestCase)>>debug
DISTTests class(TestCase class)>>debug:
[ 
| vScroll testClass testResult |
vScroll := methodWidget vScrollValue.
testClass := testMethod methodClass.
testResult := [ testClass run: testMethod selector ]
	on: Halt
	do: [ :e | 
		aBoolean
			ifTrue: [ 
				[ self runTestForAMethodWithAnHalt: aMethod ] fork.
				shouldAnnounce := false.
				TestAsserter classForTestResult new ]
			ifFalse: [ 
				TestAsserter classForTestResult new
					addFailure: (testClass selector: testMethod selector);
					yourself ] ].
testResult updateResultsInHistory.
testSemaphoreForMethod signal.
(aBoolean and: [ testResult failures isEmpty not or: [ testResult errors isEmpty not ] ])
	ifTrue: [ testClass debug: testMethod selector ].
ClassesIconsCache removeKey: aMethod methodClass ifAbsent: [  ].
UIManager default defer: [ methodWidget vScrollValue: vScroll ] ] in PackageTreeNautilusUI(NautilusUI)>>runTestForAMethod:notifying:priority:
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
TestFailure: Assertion failed
25 February 2015 11:48:48.541327 am

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
NBCogit NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
https://github.com/pharo-project/pharo-vm.git Commit: 4a0d556150d478ff2de3c9624d2f18e6eaa3fa5c Date: 2014-12-18 18:42:53 +0100 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14893

Image: Pharo3.0 [Latest update: #30863]

DIJavaTests(TestAsserter)>>assert:
	Receiver: DIJavaTests>>#testDependencies
	Arguments and temporary variables: 
		aBoolean: 	false
	Receiver's instance variables: 
		testSelector: 	#testDependencies
		expectedFails: 	nil


[ :n | self assert: (DIModel allRules at: n) hasFailed = (res at: n) not ] in DIJavaTests(DIDSLTests)>>runAndReturnObjWithText:andSuccessResults:onProject:
	Receiver: DIJavaTests>>#testDependencies
	Arguments and temporary variables: 
		dslText: 	'
Application = Package with name:"org.jhotdraw.application"
Contrib =...etc...
		res: 	#(true false false false false)
		project: 	'TestProject'
		dicto: 	a DIDicto
		n: 	2
	Receiver's instance variables: 
		testSelector: 	#testDependencies
		expectedFails: 	nil


Interval>>do:
	Receiver: (1 to: 5)
	Arguments and temporary variables: 
		aBlock: 	[ :n | self assert: (DIModel allRules at: n) hasFailed = (res at: n) no...etc...
		aValue: 	2
		index: 	2
		size: 	5
	Receiver's instance variables: 
		start: 	1
		stop: 	5
		step: 	1


DIJavaTests(DIDSLTests)>>runAndReturnObjWithText:andSuccessResults:onProject:
	Receiver: DIJavaTests>>#testDependencies
	Arguments and temporary variables: 
		dslText: 	'
Application = Package with name:"org.jhotdraw.application"
Contrib =...etc...
		res: 	#(true false false false false)
		project: 	'TestProject'
		dicto: 	a DIDicto
	Receiver's instance variables: 
		testSelector: 	#testDependencies
		expectedFails: 	nil


DIJavaTests(DIDSLTests)>>runAndReturnObjWithText:andSuccessResults:
	Receiver: DIJavaTests>>#testDependencies
	Arguments and temporary variables: 
		dslText: 	'
Application = Package with name:"org.jhotdraw.application"
Contrib =...etc...
		res: 	#(true false false false false)
	Receiver's instance variables: 
		testSelector: 	#testDependencies
		expectedFails: 	nil


DIJavaTests>>testDependencies
	Receiver: DIJavaTests>>#testDependencies
	Arguments and temporary variables: 
		dsl: 	'
Application = Package with name:"org.jhotdraw.application"
Contrib = Pac...etc...
		success: 	#(true false false false false)
	Receiver's instance variables: 
		testSelector: 	#testDependencies
		expectedFails: 	nil


DIJavaTests(TestCase)>>performTest
	Receiver: DIJavaTests>>#testDependencies
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testDependencies
		expectedFails: 	nil


[ 
self setUp.
self performTest ] in DIJavaTests(TestCase)>>runCase
	Receiver: DIJavaTests>>#testDependencies
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testDependencies
		expectedFails: 	nil


BlockClosure>>ensure:
	Receiver: [ 
self setUp.
self performTest ]
	Arguments and temporary variables: 
		aBlock: 	[ 
self tearDown.
self cleanUpInstanceVariables ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	DIJavaTests(TestCase)>>runCase
		startpc: 	57
		numArgs: 	0


DIJavaTests(TestCase)>>runCase
	Receiver: DIJavaTests>>#testDependencies
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testDependencies
		expectedFails: 	nil


[ (self class selector: testSelector) runCase ] in DIJavaTests(TestCase)>>debug
	Receiver: DIJavaTests>>#testDependencies
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testDependencies
		expectedFails: 	nil


BlockClosure>>ensure:
	Receiver: [ (self class selector: testSelector) runCase ]
	Arguments and temporary variables: 
		aBlock: 	[ self classForTestResource resetResources: self resources ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	DIJavaTests(TestCase)>>debug
		startpc: 	45
		numArgs: 	0


DIJavaTests(TestCase)>>debug
	Receiver: DIJavaTests>>#testDependencies
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testDependencies
		expectedFails: 	nil


DIJavaTests class(TestCase class)>>debug:
	Receiver: DIJavaTests
	Arguments and temporary variables: 
		aSymbol: 	#testDependencies
	Receiver's instance variables: 
		superclass: 	DIDSLTests
		methodDict: 	a MethodDictionary(#testCodeClones->DIJavaTests>>#testCodeClones #t...etc...
		format: 	134
		layout: 	a FixedLayout
		instanceVariables: 	#()
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#DIJavaTests
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Dicto-var-tests'
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set(#testCodeClones #testCy...etc...


[ 
| vScroll testClass testResult |
vScroll := methodWidget vScrollValue.
testClass := testMethod methodClass.
testResult := [ testClass run: testMethod selector ]
	on: Halt
	do: [ :e | 
		aBoolean
			ifTrue: [ 
				[ self runTestForAMethodWithAnHalt: aMethod ] fork.
				shouldAnnounce := false.
				TestAsserter classForTestResult new ]
			ifFalse: [ 
				TestAsserter classForTestResult new
					addFailure: (testClass selector: testMethod selector);
					yourself ] ].
testResult updateResultsInHistory.
testSemaphoreForMethod signal.
(aBoolean and: [ testResult failures isEmpty not or: [ testResult errors isEmpty not ] ])
	ifTrue: [ testClass debug: testMethod selector ].
ClassesIconsCache removeKey: aMethod methodClass ifAbsent: [  ].
UIManager default defer: [ methodWidget vScrollValue: vScroll ] ] in PackageTreeNautilusUI(NautilusUI)>>runTestForAMethod:notifying:priority:
	Receiver: a PackageTreeNautilusUI
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a CategoryWidget a MethodWidget a NautilusWindow(...etc...
		model: 	a PackageTreeNautilus
		window: 	a NautilusWindow(542638080)
		hierarchyClass: 	DITestGroup
		cachedHierarchy: 	a SortHierarchically
		sourceTextArea: 	a PluggableTextMorphWithLimits(303038464)
		groupsSelection: 	a Dictionary()
		packagesSelection: 	a Dictionary(var-tests->true )
		classesSelection: 	a Dictionary(DIDSLTests->false DIJavaTests->true )
		list: 	a MorphTreeMorph(273940480)
		list2: 	a PluggableIconListMorph(454295552)
		sourceCodePanel: 	a PanelMorph(183500800)
		commentTextArea: 	nil
		currentDisplayChoice: 	#SourceCode
		sourceTextAreaLimit: 	350
		sourceCodeContainer: 	a PanelMorph(584843264)
		list2Elements: 	{DIDSLTests. DIJavaTests. DIPHPTests. DISTTests}
		listElements: 	nil
		shouldUpdateTitle: 	true
		testSemaphore: 	a Semaphore()
		sourceTextAreas: 	an OrderedCollection(a PluggableTextMorphWithLimits(303038464)...etc...
		multipleMethodsEditor: 	a MultipleMethodsEditor(286261248)
		contentSelection: 	nil
		acceptor: 	a MethodDefinitionAcceptor
		classifier: 	a MethodClassifier
		categoryWidget: 	a CategoryWidget
		methodWidget: 	a MethodWidget
		packagePattern: 	a RxMatcher
		searchWidget: 	a SearchMorph(866648064)


[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ 
| vScroll testClass testResult |
vScroll := methodWidget vScrollValue.
testClass := tes...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	PackageTreeNautilusUI(NautilusUI)>>runTestForAMethod:notifying:pr...etc...
		startpc: 	236
		numArgs: 	0



--- The full stack ---
DIJavaTests(TestAsserter)>>assert:
[ :n | self assert: (DIModel allRules at: n) hasFailed = (res at: n) not ] in DIJavaTests(DIDSLTests)>>runAndReturnObjWithText:andSuccessResults:onProject:
Interval>>do:
DIJavaTests(DIDSLTests)>>runAndReturnObjWithText:andSuccessResults:onProject:
DIJavaTests(DIDSLTests)>>runAndReturnObjWithText:andSuccessResults:
DIJavaTests>>testDependencies
DIJavaTests(TestCase)>>performTest
[ 
self setUp.
self performTest ] in DIJavaTests(TestCase)>>runCase
BlockClosure>>ensure:
DIJavaTests(TestCase)>>runCase
[ (self class selector: testSelector) runCase ] in DIJavaTests(TestCase)>>debug
BlockClosure>>ensure:
DIJavaTests(TestCase)>>debug
DIJavaTests class(TestCase class)>>debug:
[ 
| vScroll testClass testResult |
vScroll := methodWidget vScrollValue.
testClass := testMethod methodClass.
testResult := [ testClass run: testMethod selector ]
	on: Halt
	do: [ :e | 
		aBoolean
			ifTrue: [ 
				[ self runTestForAMethodWithAnHalt: aMethod ] fork.
				shouldAnnounce := false.
				TestAsserter classForTestResult new ]
			ifFalse: [ 
				TestAsserter classForTestResult new
					addFailure: (testClass selector: testMethod selector);
					yourself ] ].
testResult updateResultsInHistory.
testSemaphoreForMethod signal.
(aBoolean and: [ testResult failures isEmpty not or: [ testResult errors isEmpty not ] ])
	ifTrue: [ testClass debug: testMethod selector ].
ClassesIconsCache removeKey: aMethod methodClass ifAbsent: [  ].
UIManager default defer: [ methodWidget vScrollValue: vScroll ] ] in PackageTreeNautilusUI(NautilusUI)>>runTestForAMethod:notifying:priority:
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
TestFailure: Assertion failed
25 February 2015 11:48:59.729244 am

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
NBCogit NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
https://github.com/pharo-project/pharo-vm.git Commit: 4a0d556150d478ff2de3c9624d2f18e6eaa3fa5c Date: 2014-12-18 18:42:53 +0100 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14893

Image: Pharo3.0 [Latest update: #30863]

DIJavaTests(TestAsserter)>>assert:
	Receiver: DIJavaTests>>#testDependencies
	Arguments and temporary variables: 
		aBoolean: 	false
	Receiver's instance variables: 
		testSelector: 	#testDependencies
		expectedFails: 	nil


[ :n | self assert: (DIModel allRules at: n) hasFailed = (res at: n) not ] in DIJavaTests(DIDSLTests)>>runAndReturnObjWithText:andSuccessResults:onProject:
	Receiver: DIJavaTests>>#testDependencies
	Arguments and temporary variables: 
		dslText: 	'
Application = Package with name:"org.jhotdraw.application"
Contrib =...etc...
		res: 	#(true false false false false)
		project: 	'TestProject'
		dicto: 	a DIDicto
		n: 	2
	Receiver's instance variables: 
		testSelector: 	#testDependencies
		expectedFails: 	nil


Interval>>do:
	Receiver: (1 to: 5)
	Arguments and temporary variables: 
		aBlock: 	[ :n | self assert: (DIModel allRules at: n) hasFailed = (res at: n) no...etc...
		aValue: 	2
		index: 	2
		size: 	5
	Receiver's instance variables: 
		start: 	1
		stop: 	5
		step: 	1


DIJavaTests(DIDSLTests)>>runAndReturnObjWithText:andSuccessResults:onProject:
	Receiver: DIJavaTests>>#testDependencies
	Arguments and temporary variables: 
		dslText: 	'
Application = Package with name:"org.jhotdraw.application"
Contrib =...etc...
		res: 	#(true false false false false)
		project: 	'TestProject'
		dicto: 	a DIDicto
	Receiver's instance variables: 
		testSelector: 	#testDependencies
		expectedFails: 	nil


DIJavaTests(DIDSLTests)>>runAndReturnObjWithText:andSuccessResults:
	Receiver: DIJavaTests>>#testDependencies
	Arguments and temporary variables: 
		dslText: 	'
Application = Package with name:"org.jhotdraw.application"
Contrib =...etc...
		res: 	#(true false false false false)
	Receiver's instance variables: 
		testSelector: 	#testDependencies
		expectedFails: 	nil


DIJavaTests>>testDependencies
	Receiver: DIJavaTests>>#testDependencies
	Arguments and temporary variables: 
		dsl: 	'
Application = Package with name:"org.jhotdraw.application"
Contrib = Pac...etc...
		success: 	#(true false false false false)
	Receiver's instance variables: 
		testSelector: 	#testDependencies
		expectedFails: 	nil


DIJavaTests(TestCase)>>performTest
	Receiver: DIJavaTests>>#testDependencies
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testDependencies
		expectedFails: 	nil


[ 
self setUp.
self performTest ] in DIJavaTests(TestCase)>>runCase
	Receiver: DIJavaTests>>#testDependencies
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testDependencies
		expectedFails: 	nil


BlockClosure>>ensure:
	Receiver: [ 
self setUp.
self performTest ]
	Arguments and temporary variables: 
		aBlock: 	[ 
self tearDown.
self cleanUpInstanceVariables ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	DIJavaTests(TestCase)>>runCase
		startpc: 	57
		numArgs: 	0


DIJavaTests(TestCase)>>runCase
	Receiver: DIJavaTests>>#testDependencies
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testDependencies
		expectedFails: 	nil


[ (self class selector: testSelector) runCase ] in DIJavaTests(TestCase)>>debug
	Receiver: DIJavaTests>>#testDependencies
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testDependencies
		expectedFails: 	nil


BlockClosure>>ensure:
	Receiver: [ (self class selector: testSelector) runCase ]
	Arguments and temporary variables: 
		aBlock: 	[ self classForTestResource resetResources: self resources ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	DIJavaTests(TestCase)>>debug
		startpc: 	45
		numArgs: 	0


DIJavaTests(TestCase)>>debug
	Receiver: DIJavaTests>>#testDependencies
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testDependencies
		expectedFails: 	nil


DIJavaTests class(TestCase class)>>debug:
	Receiver: DIJavaTests
	Arguments and temporary variables: 
		aSymbol: 	#testDependencies
	Receiver's instance variables: 
		superclass: 	DIDSLTests
		methodDict: 	a MethodDictionary(#testCodeClones->DIJavaTests>>#testCodeClones #t...etc...
		format: 	134
		layout: 	a FixedLayout
		instanceVariables: 	#()
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#DIJavaTests
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Dicto-var-tests'
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set(#testCodeClones #testCy...etc...


[ 
| vScroll testClass testResult |
vScroll := methodWidget vScrollValue.
testClass := testMethod methodClass.
testResult := [ testClass run: testMethod selector ]
	on: Halt
	do: [ :e | 
		aBoolean
			ifTrue: [ 
				[ self runTestForAMethodWithAnHalt: aMethod ] fork.
				shouldAnnounce := false.
				TestAsserter classForTestResult new ]
			ifFalse: [ 
				TestAsserter classForTestResult new
					addFailure: (testClass selector: testMethod selector);
					yourself ] ].
testResult updateResultsInHistory.
testSemaphoreForMethod signal.
(aBoolean and: [ testResult failures isEmpty not or: [ testResult errors isEmpty not ] ])
	ifTrue: [ testClass debug: testMethod selector ].
ClassesIconsCache removeKey: aMethod methodClass ifAbsent: [  ].
UIManager default defer: [ methodWidget vScrollValue: vScroll ] ] in PackageTreeNautilusUI(NautilusUI)>>runTestForAMethod:notifying:priority:
	Receiver: a PackageTreeNautilusUI
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a CategoryWidget a MethodWidget a NautilusWindow(...etc...
		model: 	a PackageTreeNautilus
		window: 	a NautilusWindow(542638080)
		hierarchyClass: 	DITestGroup
		cachedHierarchy: 	a SortHierarchically
		sourceTextArea: 	a PluggableTextMorphWithLimits(303038464)
		groupsSelection: 	a Dictionary()
		packagesSelection: 	a Dictionary(var-tests->true )
		classesSelection: 	a Dictionary(DIDSLTests->false DIJavaTests->true )
		list: 	a MorphTreeMorph(273940480)
		list2: 	a PluggableIconListMorph(454295552)
		sourceCodePanel: 	a PanelMorph(183500800)
		commentTextArea: 	nil
		currentDisplayChoice: 	#SourceCode
		sourceTextAreaLimit: 	350
		sourceCodeContainer: 	a PanelMorph(584843264)
		list2Elements: 	{DIDSLTests. DIJavaTests. DIPHPTests. DISTTests}
		listElements: 	nil
		shouldUpdateTitle: 	true
		testSemaphore: 	a Semaphore()
		sourceTextAreas: 	an OrderedCollection(a PluggableTextMorphWithLimits(303038464)...etc...
		multipleMethodsEditor: 	a MultipleMethodsEditor(286261248)
		contentSelection: 	nil
		acceptor: 	a MethodDefinitionAcceptor
		classifier: 	a MethodClassifier
		categoryWidget: 	a CategoryWidget
		methodWidget: 	a MethodWidget
		packagePattern: 	a RxMatcher
		searchWidget: 	a SearchMorph(866648064)


[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ 
| vScroll testClass testResult |
vScroll := methodWidget vScrollValue.
testClass := tes...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	PackageTreeNautilusUI(NautilusUI)>>runTestForAMethod:notifying:pr...etc...
		startpc: 	236
		numArgs: 	0



--- The full stack ---
DIJavaTests(TestAsserter)>>assert:
[ :n | self assert: (DIModel allRules at: n) hasFailed = (res at: n) not ] in DIJavaTests(DIDSLTests)>>runAndReturnObjWithText:andSuccessResults:onProject:
Interval>>do:
DIJavaTests(DIDSLTests)>>runAndReturnObjWithText:andSuccessResults:onProject:
DIJavaTests(DIDSLTests)>>runAndReturnObjWithText:andSuccessResults:
DIJavaTests>>testDependencies
DIJavaTests(TestCase)>>performTest
[ 
self setUp.
self performTest ] in DIJavaTests(TestCase)>>runCase
BlockClosure>>ensure:
DIJavaTests(TestCase)>>runCase
[ (self class selector: testSelector) runCase ] in DIJavaTests(TestCase)>>debug
BlockClosure>>ensure:
DIJavaTests(TestCase)>>debug
DIJavaTests class(TestCase class)>>debug:
[ 
| vScroll testClass testResult |
vScroll := methodWidget vScrollValue.
testClass := testMethod methodClass.
testResult := [ testClass run: testMethod selector ]
	on: Halt
	do: [ :e | 
		aBoolean
			ifTrue: [ 
				[ self runTestForAMethodWithAnHalt: aMethod ] fork.
				shouldAnnounce := false.
				TestAsserter classForTestResult new ]
			ifFalse: [ 
				TestAsserter classForTestResult new
					addFailure: (testClass selector: testMethod selector);
					yourself ] ].
testResult updateResultsInHistory.
testSemaphoreForMethod signal.
(aBoolean and: [ testResult failures isEmpty not or: [ testResult errors isEmpty not ] ])
	ifTrue: [ testClass debug: testMethod selector ].
ClassesIconsCache removeKey: aMethod methodClass ifAbsent: [  ].
UIManager default defer: [ methodWidget vScrollValue: vScroll ] ] in PackageTreeNautilusUI(NautilusUI)>>runTestForAMethod:notifying:priority:
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
TestFailure: Assertion failed
25 February 2015 11:49:01.694346 am

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
NBCogit NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
https://github.com/pharo-project/pharo-vm.git Commit: 4a0d556150d478ff2de3c9624d2f18e6eaa3fa5c Date: 2014-12-18 18:42:53 +0100 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14893

Image: Pharo3.0 [Latest update: #30863]

DIJavaTests(TestAsserter)>>assert:
	Receiver: DIJavaTests>>#testDependencies
	Arguments and temporary variables: 
		aBoolean: 	false
	Receiver's instance variables: 
		testSelector: 	#testDependencies
		expectedFails: 	nil


[ :n | self assert: (DIModel allRules at: n) hasFailed = (res at: n) not ] in DIJavaTests(DIDSLTests)>>runAndReturnObjWithText:andSuccessResults:onProject:
	Receiver: DIJavaTests>>#testDependencies
	Arguments and temporary variables: 
		dslText: 	'
Application = Package with name:"org.jhotdraw.application"
Contrib =...etc...
		res: 	#(true false false false false)
		project: 	'TestProject'
		dicto: 	a DIDicto
		n: 	3
	Receiver's instance variables: 
		testSelector: 	#testDependencies
		expectedFails: 	nil


Interval>>do:
	Receiver: (1 to: 5)
	Arguments and temporary variables: 
		aBlock: 	[ :n | self assert: (DIModel allRules at: n) hasFailed = (res at: n) no...etc...
		aValue: 	3
		index: 	3
		size: 	5
	Receiver's instance variables: 
		start: 	1
		stop: 	5
		step: 	1


DIJavaTests(DIDSLTests)>>runAndReturnObjWithText:andSuccessResults:onProject:
	Receiver: DIJavaTests>>#testDependencies
	Arguments and temporary variables: 
		dslText: 	'
Application = Package with name:"org.jhotdraw.application"
Contrib =...etc...
		res: 	#(true false false false false)
		project: 	'TestProject'
		dicto: 	a DIDicto
	Receiver's instance variables: 
		testSelector: 	#testDependencies
		expectedFails: 	nil


DIJavaTests(DIDSLTests)>>runAndReturnObjWithText:andSuccessResults:
	Receiver: DIJavaTests>>#testDependencies
	Arguments and temporary variables: 
		dslText: 	'
Application = Package with name:"org.jhotdraw.application"
Contrib =...etc...
		res: 	#(true false false false false)
	Receiver's instance variables: 
		testSelector: 	#testDependencies
		expectedFails: 	nil


DIJavaTests>>testDependencies
	Receiver: DIJavaTests>>#testDependencies
	Arguments and temporary variables: 
		dsl: 	'
Application = Package with name:"org.jhotdraw.application"
Contrib = Pac...etc...
		success: 	#(true false false false false)
	Receiver's instance variables: 
		testSelector: 	#testDependencies
		expectedFails: 	nil


DIJavaTests(TestCase)>>performTest
	Receiver: DIJavaTests>>#testDependencies
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testDependencies
		expectedFails: 	nil


[ 
self setUp.
self performTest ] in DIJavaTests(TestCase)>>runCase
	Receiver: DIJavaTests>>#testDependencies
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testDependencies
		expectedFails: 	nil


BlockClosure>>ensure:
	Receiver: [ 
self setUp.
self performTest ]
	Arguments and temporary variables: 
		aBlock: 	[ 
self tearDown.
self cleanUpInstanceVariables ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	DIJavaTests(TestCase)>>runCase
		startpc: 	57
		numArgs: 	0


DIJavaTests(TestCase)>>runCase
	Receiver: DIJavaTests>>#testDependencies
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testDependencies
		expectedFails: 	nil


[ (self class selector: testSelector) runCase ] in DIJavaTests(TestCase)>>debug
	Receiver: DIJavaTests>>#testDependencies
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testDependencies
		expectedFails: 	nil


BlockClosure>>ensure:
	Receiver: [ (self class selector: testSelector) runCase ]
	Arguments and temporary variables: 
		aBlock: 	[ self classForTestResource resetResources: self resources ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	DIJavaTests(TestCase)>>debug
		startpc: 	45
		numArgs: 	0


DIJavaTests(TestCase)>>debug
	Receiver: DIJavaTests>>#testDependencies
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testDependencies
		expectedFails: 	nil


DIJavaTests class(TestCase class)>>debug:
	Receiver: DIJavaTests
	Arguments and temporary variables: 
		aSymbol: 	#testDependencies
	Receiver's instance variables: 
		superclass: 	DIDSLTests
		methodDict: 	a MethodDictionary(#testCodeClones->DIJavaTests>>#testCodeClones #t...etc...
		format: 	134
		layout: 	a FixedLayout
		instanceVariables: 	#()
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#DIJavaTests
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Dicto-var-tests'
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set(#testCodeClones #testCy...etc...


[ 
| vScroll testClass testResult |
vScroll := methodWidget vScrollValue.
testClass := testMethod methodClass.
testResult := [ testClass run: testMethod selector ]
	on: Halt
	do: [ :e | 
		aBoolean
			ifTrue: [ 
				[ self runTestForAMethodWithAnHalt: aMethod ] fork.
				shouldAnnounce := false.
				TestAsserter classForTestResult new ]
			ifFalse: [ 
				TestAsserter classForTestResult new
					addFailure: (testClass selector: testMethod selector);
					yourself ] ].
testResult updateResultsInHistory.
testSemaphoreForMethod signal.
(aBoolean and: [ testResult failures isEmpty not or: [ testResult errors isEmpty not ] ])
	ifTrue: [ testClass debug: testMethod selector ].
ClassesIconsCache removeKey: aMethod methodClass ifAbsent: [  ].
UIManager default defer: [ methodWidget vScrollValue: vScroll ] ] in PackageTreeNautilusUI(NautilusUI)>>runTestForAMethod:notifying:priority:
	Receiver: a PackageTreeNautilusUI
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a CategoryWidget a MethodWidget a NautilusWindow(...etc...
		model: 	a PackageTreeNautilus
		window: 	a NautilusWindow(542638080)
		hierarchyClass: 	DITestGroup
		cachedHierarchy: 	a SortHierarchically
		sourceTextArea: 	a PluggableTextMorphWithLimits(303038464)
		groupsSelection: 	a Dictionary()
		packagesSelection: 	a Dictionary(var-tests->true )
		classesSelection: 	a Dictionary(DIDSLTests->false DIJavaTests->true )
		list: 	a MorphTreeMorph(273940480)
		list2: 	a PluggableIconListMorph(454295552)
		sourceCodePanel: 	a PanelMorph(183500800)
		commentTextArea: 	nil
		currentDisplayChoice: 	#SourceCode
		sourceTextAreaLimit: 	350
		sourceCodeContainer: 	a PanelMorph(584843264)
		list2Elements: 	{DIDSLTests. DIJavaTests. DIPHPTests. DISTTests}
		listElements: 	nil
		shouldUpdateTitle: 	true
		testSemaphore: 	a Semaphore()
		sourceTextAreas: 	an OrderedCollection(a PluggableTextMorphWithLimits(303038464)...etc...
		multipleMethodsEditor: 	a MultipleMethodsEditor(286261248)
		contentSelection: 	nil
		acceptor: 	a MethodDefinitionAcceptor
		classifier: 	a MethodClassifier
		categoryWidget: 	a CategoryWidget
		methodWidget: 	a MethodWidget
		packagePattern: 	a RxMatcher
		searchWidget: 	a SearchMorph(866648064)


[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ 
| vScroll testClass testResult |
vScroll := methodWidget vScrollValue.
testClass := tes...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	PackageTreeNautilusUI(NautilusUI)>>runTestForAMethod:notifying:pr...etc...
		startpc: 	236
		numArgs: 	0



--- The full stack ---
DIJavaTests(TestAsserter)>>assert:
[ :n | self assert: (DIModel allRules at: n) hasFailed = (res at: n) not ] in DIJavaTests(DIDSLTests)>>runAndReturnObjWithText:andSuccessResults:onProject:
Interval>>do:
DIJavaTests(DIDSLTests)>>runAndReturnObjWithText:andSuccessResults:onProject:
DIJavaTests(DIDSLTests)>>runAndReturnObjWithText:andSuccessResults:
DIJavaTests>>testDependencies
DIJavaTests(TestCase)>>performTest
[ 
self setUp.
self performTest ] in DIJavaTests(TestCase)>>runCase
BlockClosure>>ensure:
DIJavaTests(TestCase)>>runCase
[ (self class selector: testSelector) runCase ] in DIJavaTests(TestCase)>>debug
BlockClosure>>ensure:
DIJavaTests(TestCase)>>debug
DIJavaTests class(TestCase class)>>debug:
[ 
| vScroll testClass testResult |
vScroll := methodWidget vScrollValue.
testClass := testMethod methodClass.
testResult := [ testClass run: testMethod selector ]
	on: Halt
	do: [ :e | 
		aBoolean
			ifTrue: [ 
				[ self runTestForAMethodWithAnHalt: aMethod ] fork.
				shouldAnnounce := false.
				TestAsserter classForTestResult new ]
			ifFalse: [ 
				TestAsserter classForTestResult new
					addFailure: (testClass selector: testMethod selector);
					yourself ] ].
testResult updateResultsInHistory.
testSemaphoreForMethod signal.
(aBoolean and: [ testResult failures isEmpty not or: [ testResult errors isEmpty not ] ])
	ifTrue: [ testClass debug: testMethod selector ].
ClassesIconsCache removeKey: aMethod methodClass ifAbsent: [  ].
UIManager default defer: [ methodWidget vScrollValue: vScroll ] ] in PackageTreeNautilusUI(NautilusUI)>>runTestForAMethod:notifying:priority:
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
TestFailure: Assertion failed
25 February 2015 11:49:03.518198 am

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
NBCogit NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
https://github.com/pharo-project/pharo-vm.git Commit: 4a0d556150d478ff2de3c9624d2f18e6eaa3fa5c Date: 2014-12-18 18:42:53 +0100 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14893

Image: Pharo3.0 [Latest update: #30863]

DIJavaTests(TestAsserter)>>assert:
	Receiver: DIJavaTests>>#testDependencies
	Arguments and temporary variables: 
		aBoolean: 	false
	Receiver's instance variables: 
		testSelector: 	#testDependencies
		expectedFails: 	nil


[ :n | self assert: (DIModel allRules at: n) hasFailed = (res at: n) not ] in DIJavaTests(DIDSLTests)>>runAndReturnObjWithText:andSuccessResults:onProject:
	Receiver: DIJavaTests>>#testDependencies
	Arguments and temporary variables: 
		dslText: 	'
Application = Package with name:"org.jhotdraw.application"
Contrib =...etc...
		res: 	#(true false false false false)
		project: 	'TestProject'
		dicto: 	a DIDicto
		n: 	4
	Receiver's instance variables: 
		testSelector: 	#testDependencies
		expectedFails: 	nil


Interval>>do:
	Receiver: (1 to: 5)
	Arguments and temporary variables: 
		aBlock: 	[ :n | self assert: (DIModel allRules at: n) hasFailed = (res at: n) no...etc...
		aValue: 	4
		index: 	4
		size: 	5
	Receiver's instance variables: 
		start: 	1
		stop: 	5
		step: 	1


DIJavaTests(DIDSLTests)>>runAndReturnObjWithText:andSuccessResults:onProject:
	Receiver: DIJavaTests>>#testDependencies
	Arguments and temporary variables: 
		dslText: 	'
Application = Package with name:"org.jhotdraw.application"
Contrib =...etc...
		res: 	#(true false false false false)
		project: 	'TestProject'
		dicto: 	a DIDicto
	Receiver's instance variables: 
		testSelector: 	#testDependencies
		expectedFails: 	nil


DIJavaTests(DIDSLTests)>>runAndReturnObjWithText:andSuccessResults:
	Receiver: DIJavaTests>>#testDependencies
	Arguments and temporary variables: 
		dslText: 	'
Application = Package with name:"org.jhotdraw.application"
Contrib =...etc...
		res: 	#(true false false false false)
	Receiver's instance variables: 
		testSelector: 	#testDependencies
		expectedFails: 	nil


DIJavaTests>>testDependencies
	Receiver: DIJavaTests>>#testDependencies
	Arguments and temporary variables: 
		dsl: 	'
Application = Package with name:"org.jhotdraw.application"
Contrib = Pac...etc...
		success: 	#(true false false false false)
	Receiver's instance variables: 
		testSelector: 	#testDependencies
		expectedFails: 	nil


DIJavaTests(TestCase)>>performTest
	Receiver: DIJavaTests>>#testDependencies
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testDependencies
		expectedFails: 	nil


[ 
self setUp.
self performTest ] in DIJavaTests(TestCase)>>runCase
	Receiver: DIJavaTests>>#testDependencies
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testDependencies
		expectedFails: 	nil


BlockClosure>>ensure:
	Receiver: [ 
self setUp.
self performTest ]
	Arguments and temporary variables: 
		aBlock: 	[ 
self tearDown.
self cleanUpInstanceVariables ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	DIJavaTests(TestCase)>>runCase
		startpc: 	57
		numArgs: 	0


DIJavaTests(TestCase)>>runCase
	Receiver: DIJavaTests>>#testDependencies
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testDependencies
		expectedFails: 	nil


[ (self class selector: testSelector) runCase ] in DIJavaTests(TestCase)>>debug
	Receiver: DIJavaTests>>#testDependencies
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testDependencies
		expectedFails: 	nil


BlockClosure>>ensure:
	Receiver: [ (self class selector: testSelector) runCase ]
	Arguments and temporary variables: 
		aBlock: 	[ self classForTestResource resetResources: self resources ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	DIJavaTests(TestCase)>>debug
		startpc: 	45
		numArgs: 	0


DIJavaTests(TestCase)>>debug
	Receiver: DIJavaTests>>#testDependencies
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testDependencies
		expectedFails: 	nil


DIJavaTests class(TestCase class)>>debug:
	Receiver: DIJavaTests
	Arguments and temporary variables: 
		aSymbol: 	#testDependencies
	Receiver's instance variables: 
		superclass: 	DIDSLTests
		methodDict: 	a MethodDictionary(#testCodeClones->DIJavaTests>>#testCodeClones #t...etc...
		format: 	134
		layout: 	a FixedLayout
		instanceVariables: 	#()
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#DIJavaTests
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Dicto-var-tests'
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set(#testCodeClones #testCy...etc...


[ 
| vScroll testClass testResult |
vScroll := methodWidget vScrollValue.
testClass := testMethod methodClass.
testResult := [ testClass run: testMethod selector ]
	on: Halt
	do: [ :e | 
		aBoolean
			ifTrue: [ 
				[ self runTestForAMethodWithAnHalt: aMethod ] fork.
				shouldAnnounce := false.
				TestAsserter classForTestResult new ]
			ifFalse: [ 
				TestAsserter classForTestResult new
					addFailure: (testClass selector: testMethod selector);
					yourself ] ].
testResult updateResultsInHistory.
testSemaphoreForMethod signal.
(aBoolean and: [ testResult failures isEmpty not or: [ testResult errors isEmpty not ] ])
	ifTrue: [ testClass debug: testMethod selector ].
ClassesIconsCache removeKey: aMethod methodClass ifAbsent: [  ].
UIManager default defer: [ methodWidget vScrollValue: vScroll ] ] in PackageTreeNautilusUI(NautilusUI)>>runTestForAMethod:notifying:priority:
	Receiver: a PackageTreeNautilusUI
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a CategoryWidget a MethodWidget a NautilusWindow(...etc...
		model: 	a PackageTreeNautilus
		window: 	a NautilusWindow(542638080)
		hierarchyClass: 	DITestGroup
		cachedHierarchy: 	a SortHierarchically
		sourceTextArea: 	a PluggableTextMorphWithLimits(303038464)
		groupsSelection: 	a Dictionary()
		packagesSelection: 	a Dictionary(var-tests->true )
		classesSelection: 	a Dictionary(DIDSLTests->false DIJavaTests->true )
		list: 	a MorphTreeMorph(273940480)
		list2: 	a PluggableIconListMorph(454295552)
		sourceCodePanel: 	a PanelMorph(183500800)
		commentTextArea: 	nil
		currentDisplayChoice: 	#SourceCode
		sourceTextAreaLimit: 	350
		sourceCodeContainer: 	a PanelMorph(584843264)
		list2Elements: 	{DIDSLTests. DIJavaTests. DIPHPTests. DISTTests}
		listElements: 	nil
		shouldUpdateTitle: 	true
		testSemaphore: 	a Semaphore()
		sourceTextAreas: 	an OrderedCollection(a PluggableTextMorphWithLimits(303038464)...etc...
		multipleMethodsEditor: 	a MultipleMethodsEditor(286261248)
		contentSelection: 	nil
		acceptor: 	a MethodDefinitionAcceptor
		classifier: 	a MethodClassifier
		categoryWidget: 	a CategoryWidget
		methodWidget: 	a MethodWidget
		packagePattern: 	a RxMatcher
		searchWidget: 	a SearchMorph(866648064)


[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ 
| vScroll testClass testResult |
vScroll := methodWidget vScrollValue.
testClass := tes...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	PackageTreeNautilusUI(NautilusUI)>>runTestForAMethod:notifying:pr...etc...
		startpc: 	236
		numArgs: 	0



--- The full stack ---
DIJavaTests(TestAsserter)>>assert:
[ :n | self assert: (DIModel allRules at: n) hasFailed = (res at: n) not ] in DIJavaTests(DIDSLTests)>>runAndReturnObjWithText:andSuccessResults:onProject:
Interval>>do:
DIJavaTests(DIDSLTests)>>runAndReturnObjWithText:andSuccessResults:onProject:
DIJavaTests(DIDSLTests)>>runAndReturnObjWithText:andSuccessResults:
DIJavaTests>>testDependencies
DIJavaTests(TestCase)>>performTest
[ 
self setUp.
self performTest ] in DIJavaTests(TestCase)>>runCase
BlockClosure>>ensure:
DIJavaTests(TestCase)>>runCase
[ (self class selector: testSelector) runCase ] in DIJavaTests(TestCase)>>debug
BlockClosure>>ensure:
DIJavaTests(TestCase)>>debug
DIJavaTests class(TestCase class)>>debug:
[ 
| vScroll testClass testResult |
vScroll := methodWidget vScrollValue.
testClass := testMethod methodClass.
testResult := [ testClass run: testMethod selector ]
	on: Halt
	do: [ :e | 
		aBoolean
			ifTrue: [ 
				[ self runTestForAMethodWithAnHalt: aMethod ] fork.
				shouldAnnounce := false.
				TestAsserter classForTestResult new ]
			ifFalse: [ 
				TestAsserter classForTestResult new
					addFailure: (testClass selector: testMethod selector);
					yourself ] ].
testResult updateResultsInHistory.
testSemaphoreForMethod signal.
(aBoolean and: [ testResult failures isEmpty not or: [ testResult errors isEmpty not ] ])
	ifTrue: [ testClass debug: testMethod selector ].
ClassesIconsCache removeKey: aMethod methodClass ifAbsent: [  ].
UIManager default defer: [ methodWidget vScrollValue: vScroll ] ] in PackageTreeNautilusUI(NautilusUI)>>runTestForAMethod:notifying:priority:
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
TestFailure: Assertion failed
25 February 2015 11:49:04.469559 am

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
NBCogit NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
https://github.com/pharo-project/pharo-vm.git Commit: 4a0d556150d478ff2de3c9624d2f18e6eaa3fa5c Date: 2014-12-18 18:42:53 +0100 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14893

Image: Pharo3.0 [Latest update: #30863]

DIJavaTests(TestAsserter)>>assert:
	Receiver: DIJavaTests>>#testDependencies
	Arguments and temporary variables: 
		aBoolean: 	false
	Receiver's instance variables: 
		testSelector: 	#testDependencies
		expectedFails: 	nil


[ :n | self assert: (DIModel allRules at: n) hasFailed = (res at: n) not ] in DIJavaTests(DIDSLTests)>>runAndReturnObjWithText:andSuccessResults:onProject:
	Receiver: DIJavaTests>>#testDependencies
	Arguments and temporary variables: 
		dslText: 	'
Application = Package with name:"org.jhotdraw.application"
Contrib =...etc...
		res: 	#(true false false false false)
		project: 	'TestProject'
		dicto: 	a DIDicto
		n: 	5
	Receiver's instance variables: 
		testSelector: 	#testDependencies
		expectedFails: 	nil


Interval>>do:
	Receiver: (1 to: 5)
	Arguments and temporary variables: 
		aBlock: 	[ :n | self assert: (DIModel allRules at: n) hasFailed = (res at: n) no...etc...
		aValue: 	5
		index: 	5
		size: 	5
	Receiver's instance variables: 
		start: 	1
		stop: 	5
		step: 	1


DIJavaTests(DIDSLTests)>>runAndReturnObjWithText:andSuccessResults:onProject:
	Receiver: DIJavaTests>>#testDependencies
	Arguments and temporary variables: 
		dslText: 	'
Application = Package with name:"org.jhotdraw.application"
Contrib =...etc...
		res: 	#(true false false false false)
		project: 	'TestProject'
		dicto: 	a DIDicto
	Receiver's instance variables: 
		testSelector: 	#testDependencies
		expectedFails: 	nil


DIJavaTests(DIDSLTests)>>runAndReturnObjWithText:andSuccessResults:
	Receiver: DIJavaTests>>#testDependencies
	Arguments and temporary variables: 
		dslText: 	'
Application = Package with name:"org.jhotdraw.application"
Contrib =...etc...
		res: 	#(true false false false false)
	Receiver's instance variables: 
		testSelector: 	#testDependencies
		expectedFails: 	nil


DIJavaTests>>testDependencies
	Receiver: DIJavaTests>>#testDependencies
	Arguments and temporary variables: 
		dsl: 	'
Application = Package with name:"org.jhotdraw.application"
Contrib = Pac...etc...
		success: 	#(true false false false false)
	Receiver's instance variables: 
		testSelector: 	#testDependencies
		expectedFails: 	nil


DIJavaTests(TestCase)>>performTest
	Receiver: DIJavaTests>>#testDependencies
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testDependencies
		expectedFails: 	nil


[ 
self setUp.
self performTest ] in DIJavaTests(TestCase)>>runCase
	Receiver: DIJavaTests>>#testDependencies
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testDependencies
		expectedFails: 	nil


BlockClosure>>ensure:
	Receiver: [ 
self setUp.
self performTest ]
	Arguments and temporary variables: 
		aBlock: 	[ 
self tearDown.
self cleanUpInstanceVariables ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	DIJavaTests(TestCase)>>runCase
		startpc: 	57
		numArgs: 	0


DIJavaTests(TestCase)>>runCase
	Receiver: DIJavaTests>>#testDependencies
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testDependencies
		expectedFails: 	nil


[ (self class selector: testSelector) runCase ] in DIJavaTests(TestCase)>>debug
	Receiver: DIJavaTests>>#testDependencies
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testDependencies
		expectedFails: 	nil


BlockClosure>>ensure:
	Receiver: [ (self class selector: testSelector) runCase ]
	Arguments and temporary variables: 
		aBlock: 	[ self classForTestResource resetResources: self resources ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	DIJavaTests(TestCase)>>debug
		startpc: 	45
		numArgs: 	0


DIJavaTests(TestCase)>>debug
	Receiver: DIJavaTests>>#testDependencies
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testDependencies
		expectedFails: 	nil


DIJavaTests class(TestCase class)>>debug:
	Receiver: DIJavaTests
	Arguments and temporary variables: 
		aSymbol: 	#testDependencies
	Receiver's instance variables: 
		superclass: 	DIDSLTests
		methodDict: 	a MethodDictionary(#testCodeClones->DIJavaTests>>#testCodeClones #t...etc...
		format: 	134
		layout: 	a FixedLayout
		instanceVariables: 	#()
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#DIJavaTests
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Dicto-var-tests'
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set(#testCodeClones #testCy...etc...


[ 
| vScroll testClass testResult |
vScroll := methodWidget vScrollValue.
testClass := testMethod methodClass.
testResult := [ testClass run: testMethod selector ]
	on: Halt
	do: [ :e | 
		aBoolean
			ifTrue: [ 
				[ self runTestForAMethodWithAnHalt: aMethod ] fork.
				shouldAnnounce := false.
				TestAsserter classForTestResult new ]
			ifFalse: [ 
				TestAsserter classForTestResult new
					addFailure: (testClass selector: testMethod selector);
					yourself ] ].
testResult updateResultsInHistory.
testSemaphoreForMethod signal.
(aBoolean and: [ testResult failures isEmpty not or: [ testResult errors isEmpty not ] ])
	ifTrue: [ testClass debug: testMethod selector ].
ClassesIconsCache removeKey: aMethod methodClass ifAbsent: [  ].
UIManager default defer: [ methodWidget vScrollValue: vScroll ] ] in PackageTreeNautilusUI(NautilusUI)>>runTestForAMethod:notifying:priority:
	Receiver: a PackageTreeNautilusUI
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a CategoryWidget a MethodWidget a NautilusWindow(...etc...
		model: 	a PackageTreeNautilus
		window: 	a NautilusWindow(542638080)
		hierarchyClass: 	DITestGroup
		cachedHierarchy: 	a SortHierarchically
		sourceTextArea: 	a PluggableTextMorphWithLimits(303038464)
		groupsSelection: 	a Dictionary()
		packagesSelection: 	a Dictionary(var-tests->true )
		classesSelection: 	a Dictionary(DIDSLTests->false DIJavaTests->true )
		list: 	a MorphTreeMorph(273940480)
		list2: 	a PluggableIconListMorph(454295552)
		sourceCodePanel: 	a PanelMorph(183500800)
		commentTextArea: 	nil
		currentDisplayChoice: 	#SourceCode
		sourceTextAreaLimit: 	350
		sourceCodeContainer: 	a PanelMorph(584843264)
		list2Elements: 	{DIDSLTests. DIJavaTests. DIPHPTests. DISTTests}
		listElements: 	nil
		shouldUpdateTitle: 	true
		testSemaphore: 	a Semaphore()
		sourceTextAreas: 	an OrderedCollection(a PluggableTextMorphWithLimits(303038464)...etc...
		multipleMethodsEditor: 	a MultipleMethodsEditor(286261248)
		contentSelection: 	nil
		acceptor: 	a MethodDefinitionAcceptor
		classifier: 	a MethodClassifier
		categoryWidget: 	a CategoryWidget
		methodWidget: 	a MethodWidget
		packagePattern: 	a RxMatcher
		searchWidget: 	a SearchMorph(866648064)


[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ 
| vScroll testClass testResult |
vScroll := methodWidget vScrollValue.
testClass := tes...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	PackageTreeNautilusUI(NautilusUI)>>runTestForAMethod:notifying:pr...etc...
		startpc: 	236
		numArgs: 	0



--- The full stack ---
DIJavaTests(TestAsserter)>>assert:
[ :n | self assert: (DIModel allRules at: n) hasFailed = (res at: n) not ] in DIJavaTests(DIDSLTests)>>runAndReturnObjWithText:andSuccessResults:onProject:
Interval>>do:
DIJavaTests(DIDSLTests)>>runAndReturnObjWithText:andSuccessResults:onProject:
DIJavaTests(DIDSLTests)>>runAndReturnObjWithText:andSuccessResults:
DIJavaTests>>testDependencies
DIJavaTests(TestCase)>>performTest
[ 
self setUp.
self performTest ] in DIJavaTests(TestCase)>>runCase
BlockClosure>>ensure:
DIJavaTests(TestCase)>>runCase
[ (self class selector: testSelector) runCase ] in DIJavaTests(TestCase)>>debug
BlockClosure>>ensure:
DIJavaTests(TestCase)>>debug
DIJavaTests class(TestCase class)>>debug:
[ 
| vScroll testClass testResult |
vScroll := methodWidget vScrollValue.
testClass := testMethod methodClass.
testResult := [ testClass run: testMethod selector ]
	on: Halt
	do: [ :e | 
		aBoolean
			ifTrue: [ 
				[ self runTestForAMethodWithAnHalt: aMethod ] fork.
				shouldAnnounce := false.
				TestAsserter classForTestResult new ]
			ifFalse: [ 
				TestAsserter classForTestResult new
					addFailure: (testClass selector: testMethod selector);
					yourself ] ].
testResult updateResultsInHistory.
testSemaphoreForMethod signal.
(aBoolean and: [ testResult failures isEmpty not or: [ testResult errors isEmpty not ] ])
	ifTrue: [ testClass debug: testMethod selector ].
ClassesIconsCache removeKey: aMethod methodClass ifAbsent: [  ].
UIManager default defer: [ methodWidget vScrollValue: vScroll ] ] in PackageTreeNautilusUI(NautilusUI)>>runTestForAMethod:notifying:priority:
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
TestFailure: Assertion failed
25 February 2015 11:49:23.782838 am

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
NBCogit NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
https://github.com/pharo-project/pharo-vm.git Commit: 4a0d556150d478ff2de3c9624d2f18e6eaa3fa5c Date: 2014-12-18 18:42:53 +0100 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14893

Image: Pharo3.0 [Latest update: #30863]

DIJavaTests(TestAsserter)>>assert:
	Receiver: DIJavaTests>>#testDependencies
	Arguments and temporary variables: 
		aBoolean: 	false
	Receiver's instance variables: 
		testSelector: 	#testDependencies
		expectedFails: 	nil


[ :n | self assert: (DIModel allRules at: n) hasFailed = (res at: n) not ] in DIJavaTests(DIDSLTests)>>runAndReturnObjWithText:andSuccessResults:onProject:
	Receiver: DIJavaTests>>#testDependencies
	Arguments and temporary variables: 
		dslText: 	'
Application = Package with name:"org.jhotdraw.application"
Contrib =...etc...
		res: 	#(true false false false false)
		project: 	'TestProject'
		dicto: 	a DIDicto
		n: 	2
	Receiver's instance variables: 
		testSelector: 	#testDependencies
		expectedFails: 	nil


Interval>>do:
	Receiver: (1 to: 5)
	Arguments and temporary variables: 
		aBlock: 	[ :n | self assert: (DIModel allRules at: n) hasFailed = (res at: n) no...etc...
		aValue: 	2
		index: 	2
		size: 	5
	Receiver's instance variables: 
		start: 	1
		stop: 	5
		step: 	1


DIJavaTests(DIDSLTests)>>runAndReturnObjWithText:andSuccessResults:onProject:
	Receiver: DIJavaTests>>#testDependencies
	Arguments and temporary variables: 
		dslText: 	'
Application = Package with name:"org.jhotdraw.application"
Contrib =...etc...
		res: 	#(true false false false false)
		project: 	'TestProject'
		dicto: 	a DIDicto
	Receiver's instance variables: 
		testSelector: 	#testDependencies
		expectedFails: 	nil


DIJavaTests(DIDSLTests)>>runAndReturnObjWithText:andSuccessResults:
	Receiver: DIJavaTests>>#testDependencies
	Arguments and temporary variables: 
		dslText: 	'
Application = Package with name:"org.jhotdraw.application"
Contrib =...etc...
		res: 	#(true false false false false)
	Receiver's instance variables: 
		testSelector: 	#testDependencies
		expectedFails: 	nil


DIJavaTests>>testDependencies
	Receiver: DIJavaTests>>#testDependencies
	Arguments and temporary variables: 
		dsl: 	'
Application = Package with name:"org.jhotdraw.application"
Contrib = Pac...etc...
		success: 	#(true false false false false)
	Receiver's instance variables: 
		testSelector: 	#testDependencies
		expectedFails: 	nil


DIJavaTests(TestCase)>>performTest
	Receiver: DIJavaTests>>#testDependencies
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testDependencies
		expectedFails: 	nil


[ 
self setUp.
self performTest ] in DIJavaTests(TestCase)>>runCase
	Receiver: DIJavaTests>>#testDependencies
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testDependencies
		expectedFails: 	nil


BlockClosure>>ensure:
	Receiver: [ 
self setUp.
self performTest ]
	Arguments and temporary variables: 
		aBlock: 	[ 
self tearDown.
self cleanUpInstanceVariables ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	DIJavaTests(TestCase)>>runCase
		startpc: 	57
		numArgs: 	0


DIJavaTests(TestCase)>>runCase
	Receiver: DIJavaTests>>#testDependencies
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testDependencies
		expectedFails: 	nil


[ (self class selector: testSelector) runCase ] in DIJavaTests(TestCase)>>debug
	Receiver: DIJavaTests>>#testDependencies
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testDependencies
		expectedFails: 	nil


BlockClosure>>ensure:
	Receiver: [ (self class selector: testSelector) runCase ]
	Arguments and temporary variables: 
		aBlock: 	[ self classForTestResource resetResources: self resources ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	DIJavaTests(TestCase)>>debug
		startpc: 	45
		numArgs: 	0


DIJavaTests(TestCase)>>debug
	Receiver: DIJavaTests>>#testDependencies
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testDependencies
		expectedFails: 	nil


DIJavaTests class(TestCase class)>>debug:
	Receiver: DIJavaTests
	Arguments and temporary variables: 
		aSymbol: 	#testDependencies
	Receiver's instance variables: 
		superclass: 	DIDSLTests
		methodDict: 	a MethodDictionary(#testCodeClones->DIJavaTests>>#testCodeClones #t...etc...
		format: 	134
		layout: 	a FixedLayout
		instanceVariables: 	#()
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#DIJavaTests
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Dicto-var-tests'
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set(#testCodeClones #testCy...etc...


[ 
| vScroll testClass testResult |
vScroll := methodWidget vScrollValue.
testClass := testMethod methodClass.
testResult := [ testClass run: testMethod selector ]
	on: Halt
	do: [ :e | 
		aBoolean
			ifTrue: [ 
				[ self runTestForAMethodWithAnHalt: aMethod ] fork.
				shouldAnnounce := false.
				TestAsserter classForTestResult new ]
			ifFalse: [ 
				TestAsserter classForTestResult new
					addFailure: (testClass selector: testMethod selector);
					yourself ] ].
testResult updateResultsInHistory.
testSemaphoreForMethod signal.
(aBoolean and: [ testResult failures isEmpty not or: [ testResult errors isEmpty not ] ])
	ifTrue: [ testClass debug: testMethod selector ].
ClassesIconsCache removeKey: aMethod methodClass ifAbsent: [  ].
UIManager default defer: [ methodWidget vScrollValue: vScroll ] ] in PackageTreeNautilusUI(NautilusUI)>>runTestForAMethod:notifying:priority:
	Receiver: a PackageTreeNautilusUI
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a CategoryWidget a MethodWidget a NautilusWindow(...etc...
		model: 	a PackageTreeNautilus
		window: 	a NautilusWindow(542638080)
		hierarchyClass: 	DITestGroup
		cachedHierarchy: 	a SortHierarchically
		sourceTextArea: 	a PluggableTextMorphWithLimits(303038464)
		groupsSelection: 	a Dictionary()
		packagesSelection: 	a Dictionary(var-tests->true )
		classesSelection: 	a Dictionary(DIDSLTests->false DIJavaTests->true )
		list: 	a MorphTreeMorph(273940480)
		list2: 	a PluggableIconListMorph(454295552)
		sourceCodePanel: 	a PanelMorph(183500800)
		commentTextArea: 	nil
		currentDisplayChoice: 	#SourceCode
		sourceTextAreaLimit: 	350
		sourceCodeContainer: 	a PanelMorph(584843264)
		list2Elements: 	{DIDSLTests. DIJavaTests. DIPHPTests. DISTTests}
		listElements: 	nil
		shouldUpdateTitle: 	true
		testSemaphore: 	a Semaphore()
		sourceTextAreas: 	an OrderedCollection(a PluggableTextMorphWithLimits(303038464)...etc...
		multipleMethodsEditor: 	a MultipleMethodsEditor(286261248)
		contentSelection: 	nil
		acceptor: 	a MethodDefinitionAcceptor
		classifier: 	a MethodClassifier
		categoryWidget: 	a CategoryWidget
		methodWidget: 	a MethodWidget
		packagePattern: 	a RxMatcher
		searchWidget: 	a SearchMorph(866648064)


[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ 
| vScroll testClass testResult |
vScroll := methodWidget vScrollValue.
testClass := tes...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	PackageTreeNautilusUI(NautilusUI)>>runTestForAMethod:notifying:pr...etc...
		startpc: 	236
		numArgs: 	0



--- The full stack ---
DIJavaTests(TestAsserter)>>assert:
[ :n | self assert: (DIModel allRules at: n) hasFailed = (res at: n) not ] in DIJavaTests(DIDSLTests)>>runAndReturnObjWithText:andSuccessResults:onProject:
Interval>>do:
DIJavaTests(DIDSLTests)>>runAndReturnObjWithText:andSuccessResults:onProject:
DIJavaTests(DIDSLTests)>>runAndReturnObjWithText:andSuccessResults:
DIJavaTests>>testDependencies
DIJavaTests(TestCase)>>performTest
[ 
self setUp.
self performTest ] in DIJavaTests(TestCase)>>runCase
BlockClosure>>ensure:
DIJavaTests(TestCase)>>runCase
[ (self class selector: testSelector) runCase ] in DIJavaTests(TestCase)>>debug
BlockClosure>>ensure:
DIJavaTests(TestCase)>>debug
DIJavaTests class(TestCase class)>>debug:
[ 
| vScroll testClass testResult |
vScroll := methodWidget vScrollValue.
testClass := testMethod methodClass.
testResult := [ testClass run: testMethod selector ]
	on: Halt
	do: [ :e | 
		aBoolean
			ifTrue: [ 
				[ self runTestForAMethodWithAnHalt: aMethod ] fork.
				shouldAnnounce := false.
				TestAsserter classForTestResult new ]
			ifFalse: [ 
				TestAsserter classForTestResult new
					addFailure: (testClass selector: testMethod selector);
					yourself ] ].
testResult updateResultsInHistory.
testSemaphoreForMethod signal.
(aBoolean and: [ testResult failures isEmpty not or: [ testResult errors isEmpty not ] ])
	ifTrue: [ testClass debug: testMethod selector ].
ClassesIconsCache removeKey: aMethod methodClass ifAbsent: [  ].
UIManager default defer: [ methodWidget vScrollValue: vScroll ] ] in PackageTreeNautilusUI(NautilusUI)>>runTestForAMethod:notifying:priority:
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
TestFailure: Assertion failed
25 February 2015 11:50:12.679237 am

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
NBCogit NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
https://github.com/pharo-project/pharo-vm.git Commit: 4a0d556150d478ff2de3c9624d2f18e6eaa3fa5c Date: 2014-12-18 18:42:53 +0100 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14893

Image: Pharo3.0 [Latest update: #30863]

DIJavaTests(TestAsserter)>>assert:
	Receiver: DIJavaTests>>#testDependencies
	Arguments and temporary variables: 
		aBoolean: 	false
	Receiver's instance variables: 
		testSelector: 	#testDependencies
		expectedFails: 	nil


[ :n | self assert: (DIModel allRules at: n) hasFailed = (res at: n) not ] in DIJavaTests(DIDSLTests)>>runAndReturnObjWithText:andSuccessResults:onProject:
	Receiver: DIJavaTests>>#testDependencies
	Arguments and temporary variables: 
		dslText: 	'
Application = Package with name:"org.jhotdraw.application"
Contrib =...etc...
		res: 	#(true false false false false)
		project: 	'TestProject'
		dicto: 	a DIDicto
		n: 	2
	Receiver's instance variables: 
		testSelector: 	#testDependencies
		expectedFails: 	nil


Interval>>do:
	Receiver: (1 to: 5)
	Arguments and temporary variables: 
		aBlock: 	[ :n | self assert: (DIModel allRules at: n) hasFailed = (res at: n) no...etc...
		aValue: 	2
		index: 	2
		size: 	5
	Receiver's instance variables: 
		start: 	1
		stop: 	5
		step: 	1


DIJavaTests(DIDSLTests)>>runAndReturnObjWithText:andSuccessResults:onProject:
	Receiver: DIJavaTests>>#testDependencies
	Arguments and temporary variables: 
		dslText: 	'
Application = Package with name:"org.jhotdraw.application"
Contrib =...etc...
		res: 	#(true false false false false)
		project: 	'TestProject'
		dicto: 	a DIDicto
	Receiver's instance variables: 
		testSelector: 	#testDependencies
		expectedFails: 	nil


DIJavaTests(DIDSLTests)>>runAndReturnObjWithText:andSuccessResults:
	Receiver: DIJavaTests>>#testDependencies
	Arguments and temporary variables: 
		dslText: 	'
Application = Package with name:"org.jhotdraw.application"
Contrib =...etc...
		res: 	#(true false false false false)
	Receiver's instance variables: 
		testSelector: 	#testDependencies
		expectedFails: 	nil


DIJavaTests>>testDependencies
	Receiver: DIJavaTests>>#testDependencies
	Arguments and temporary variables: 
		dsl: 	'
Application = Package with name:"org.jhotdraw.application"
Contrib = Pac...etc...
		success: 	#(true false false false false)
	Receiver's instance variables: 
		testSelector: 	#testDependencies
		expectedFails: 	nil


DIJavaTests(TestCase)>>performTest
	Receiver: DIJavaTests>>#testDependencies
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testDependencies
		expectedFails: 	nil


[ 
self setUp.
self performTest ] in DIJavaTests(TestCase)>>runCase
	Receiver: DIJavaTests>>#testDependencies
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testDependencies
		expectedFails: 	nil


BlockClosure>>ensure:
	Receiver: [ 
self setUp.
self performTest ]
	Arguments and temporary variables: 
		aBlock: 	[ 
self tearDown.
self cleanUpInstanceVariables ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	DIJavaTests(TestCase)>>runCase
		startpc: 	57
		numArgs: 	0


DIJavaTests(TestCase)>>runCase
	Receiver: DIJavaTests>>#testDependencies
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testDependencies
		expectedFails: 	nil


[ (self class selector: testSelector) runCase ] in DIJavaTests(TestCase)>>debug
	Receiver: DIJavaTests>>#testDependencies
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testDependencies
		expectedFails: 	nil


BlockClosure>>ensure:
	Receiver: [ (self class selector: testSelector) runCase ]
	Arguments and temporary variables: 
		aBlock: 	[ self classForTestResource resetResources: self resources ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	DIJavaTests(TestCase)>>debug
		startpc: 	45
		numArgs: 	0


DIJavaTests(TestCase)>>debug
	Receiver: DIJavaTests>>#testDependencies
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testDependencies
		expectedFails: 	nil


DIJavaTests class(TestCase class)>>debug:
	Receiver: DIJavaTests
	Arguments and temporary variables: 
		aSymbol: 	#testDependencies
	Receiver's instance variables: 
		superclass: 	DIDSLTests
		methodDict: 	a MethodDictionary(#testCodeClones->DIJavaTests>>#testCodeClones #t...etc...
		format: 	134
		layout: 	a FixedLayout
		instanceVariables: 	#()
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#DIJavaTests
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Dicto-var-tests'
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set(#testCodeClones #testCy...etc...


[ 
| vScroll testClass testResult |
vScroll := methodWidget vScrollValue.
testClass := testMethod methodClass.
testResult := [ testClass run: testMethod selector ]
	on: Halt
	do: [ :e | 
		aBoolean
			ifTrue: [ 
				[ self runTestForAMethodWithAnHalt: aMethod ] fork.
				shouldAnnounce := false.
				TestAsserter classForTestResult new ]
			ifFalse: [ 
				TestAsserter classForTestResult new
					addFailure: (testClass selector: testMethod selector);
					yourself ] ].
testResult updateResultsInHistory.
testSemaphoreForMethod signal.
(aBoolean and: [ testResult failures isEmpty not or: [ testResult errors isEmpty not ] ])
	ifTrue: [ testClass debug: testMethod selector ].
ClassesIconsCache removeKey: aMethod methodClass ifAbsent: [  ].
UIManager default defer: [ methodWidget vScrollValue: vScroll ] ] in PackageTreeNautilusUI(NautilusUI)>>runTestForAMethod:notifying:priority:
	Receiver: a PackageTreeNautilusUI
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a CategoryWidget a MethodWidget a NautilusWindow(...etc...
		model: 	a PackageTreeNautilus
		window: 	a NautilusWindow(542638080)
		hierarchyClass: 	DITestGroup
		cachedHierarchy: 	a SortHierarchically
		sourceTextArea: 	a PluggableTextMorphWithLimits(303038464)
		groupsSelection: 	a Dictionary()
		packagesSelection: 	a Dictionary(var-tests->true )
		classesSelection: 	a Dictionary(DIJavaTests->true DISTTests->false )
		list: 	a MorphTreeMorph(273940480)
		list2: 	a PluggableIconListMorph(454295552)
		sourceCodePanel: 	a PanelMorph(183500800)
		commentTextArea: 	nil
		currentDisplayChoice: 	#SourceCode
		sourceTextAreaLimit: 	350
		sourceCodeContainer: 	a PanelMorph(584843264)
		list2Elements: 	{DIDSLTests. DIJavaTests. DIPHPTests. DISTTests}
		listElements: 	nil
		shouldUpdateTitle: 	true
		testSemaphore: 	a Semaphore()
		sourceTextAreas: 	an OrderedCollection(a PluggableTextMorphWithLimits(303038464)...etc...
		multipleMethodsEditor: 	a MultipleMethodsEditor(286261248)
		contentSelection: 	nil
		acceptor: 	a ClassOrMethodDefinitionAcceptor
		classifier: 	a MethodClassifier
		categoryWidget: 	a CategoryWidget
		methodWidget: 	a MethodWidget
		packagePattern: 	a RxMatcher
		searchWidget: 	a SearchMorph(866648064)


[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ 
| vScroll testClass testResult |
vScroll := methodWidget vScrollValue.
testClass := tes...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	PackageTreeNautilusUI(NautilusUI)>>runTestForAMethod:notifying:pr...etc...
		startpc: 	236
		numArgs: 	0



--- The full stack ---
DIJavaTests(TestAsserter)>>assert:
[ :n | self assert: (DIModel allRules at: n) hasFailed = (res at: n) not ] in DIJavaTests(DIDSLTests)>>runAndReturnObjWithText:andSuccessResults:onProject:
Interval>>do:
DIJavaTests(DIDSLTests)>>runAndReturnObjWithText:andSuccessResults:onProject:
DIJavaTests(DIDSLTests)>>runAndReturnObjWithText:andSuccessResults:
DIJavaTests>>testDependencies
DIJavaTests(TestCase)>>performTest
[ 
self setUp.
self performTest ] in DIJavaTests(TestCase)>>runCase
BlockClosure>>ensure:
DIJavaTests(TestCase)>>runCase
[ (self class selector: testSelector) runCase ] in DIJavaTests(TestCase)>>debug
BlockClosure>>ensure:
DIJavaTests(TestCase)>>debug
DIJavaTests class(TestCase class)>>debug:
[ 
| vScroll testClass testResult |
vScroll := methodWidget vScrollValue.
testClass := testMethod methodClass.
testResult := [ testClass run: testMethod selector ]
	on: Halt
	do: [ :e | 
		aBoolean
			ifTrue: [ 
				[ self runTestForAMethodWithAnHalt: aMethod ] fork.
				shouldAnnounce := false.
				TestAsserter classForTestResult new ]
			ifFalse: [ 
				TestAsserter classForTestResult new
					addFailure: (testClass selector: testMethod selector);
					yourself ] ].
testResult updateResultsInHistory.
testSemaphoreForMethod signal.
(aBoolean and: [ testResult failures isEmpty not or: [ testResult errors isEmpty not ] ])
	ifTrue: [ testClass debug: testMethod selector ].
ClassesIconsCache removeKey: aMethod methodClass ifAbsent: [  ].
UIManager default defer: [ methodWidget vScrollValue: vScroll ] ] in PackageTreeNautilusUI(NautilusUI)>>runTestForAMethod:notifying:priority:
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Halt
3 March 2015 11:33:55.390762 am

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
NBCogit NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
https://github.com/pharo-project/pharo-vm.git Commit: 4a0d556150d478ff2de3c9624d2f18e6eaa3fa5c Date: 2014-12-18 18:42:53 +0100 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14893

Image: Pharo3.0 [Latest update: #30863]

DISTTests>>test_AdapterTests
	Receiver: DISTTests>>#test_AdapterTests
	Arguments and temporary variables: 
		dsl: 	nil
		success: 	nil
	Receiver's instance variables: 
		testSelector: 	#test_AdapterTests
		expectedFails: 	nil


DISTTests(TestCase)>>performTest
	Receiver: DISTTests>>#test_AdapterTests
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test_AdapterTests
		expectedFails: 	nil


[ 
self setUp.
self performTest ] in DISTTests(TestCase)>>runCase
	Receiver: DISTTests>>#test_AdapterTests
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test_AdapterTests
		expectedFails: 	nil


BlockClosure>>ensure:
	Receiver: [ 
self setUp.
self performTest ]
	Arguments and temporary variables: 
		aBlock: 	[ 
self tearDown.
self cleanUpInstanceVariables ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	DISTTests(TestCase)>>runCase
		startpc: 	57
		numArgs: 	0


DISTTests(TestCase)>>runCase
	Receiver: DISTTests>>#test_AdapterTests
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test_AdapterTests
		expectedFails: 	nil


[ 
aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCase.
aTestCase announce: TestCaseEnded withResult: self.
self addPass: aTestCase ] in TestResult>>runCase:
	Receiver: 0 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 0 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	DISTTests>>#test_AdapterTests
	Receiver's instance variables: 
		timeStamp: 	2015-03-03T11:33:55.270284+01:00
		failures: 	a Set()
		errors: 	an OrderedCollection()
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


BlockClosure>>on:do:
	Receiver: [ 
aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCase.
aTestCase anno...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :ex | ex sunitAnnounce: aTestCase toResult: self ]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	TestResult>>runCase:
		startpc: 	70
		numArgs: 	0


TestResult>>runCase:
	Receiver: 0 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 0 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	DISTTests>>#test_AdapterTests
	Receiver's instance variables: 
		timeStamp: 	2015-03-03T11:33:55.270284+01:00
		failures: 	a Set()
		errors: 	an OrderedCollection()
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


DISTTests(TestCase)>>run:
	Receiver: DISTTests>>#test_AdapterTests
	Arguments and temporary variables: 
		aResult: 	0 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 0 errors,...etc...
	Receiver's instance variables: 
		testSelector: 	#test_AdapterTests
		expectedFails: 	nil


[ self run: result ] in DISTTests(TestCase)>>run
	Receiver: DISTTests>>#test_AdapterTests
	Arguments and temporary variables: 
		result: 	0 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 0 errors, ...etc...
	Receiver's instance variables: 
		testSelector: 	#test_AdapterTests
		expectedFails: 	nil


BlockClosure>>ensure:
	Receiver: [ self run: result ]
	Arguments and temporary variables: 
		aBlock: 	[ self classForTestResource resetResources: self resources ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	DISTTests(TestCase)>>run
		startpc: 	46
		numArgs: 	0


DISTTests(TestCase)>>run
	Receiver: DISTTests>>#test_AdapterTests
	Arguments and temporary variables: 
		result: 	0 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 0 errors, ...etc...
	Receiver's instance variables: 
		testSelector: 	#test_AdapterTests
		expectedFails: 	nil


DISTTests class(TestCase class)>>run:
	Receiver: DISTTests
	Arguments and temporary variables: 
		aSymbol: 	#test_AdapterTests
	Receiver's instance variables: 
		superclass: 	DIDSLTests
		methodDict: 	a MethodDictionary(#test_AdapterInterface->DISTTests>>#test_Adapter...etc...
		format: 	134
		layout: 	a FixedLayout
		instanceVariables: 	#()
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#DISTTests
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Dicto-var-tests'
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set(#test_AdapterTests #tes...etc...


PackageTreeNautilusUI(NautilusUI)>>runTestForAMethodWithAnHalt:
	Receiver: a PackageTreeNautilusUI
	Arguments and temporary variables: 
		aMethod: 	DISTTests>>#test_AdapterTests
		testMethod: 	DISTTests>>#test_AdapterTests
		color: 	nil
		vScroll: 	0.0
		testClass: 	DISTTests
		testResult: 	nil
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a CategoryWidget a MethodWidget a NautilusWindow(...etc...
		model: 	a PackageTreeNautilus
		window: 	a NautilusWindow(542638080)
		hierarchyClass: 	DITestGroup
		cachedHierarchy: 	a SortHierarchically
		sourceTextArea: 	a PluggableTextMorphWithLimits(303038464)
		groupsSelection: 	a Dictionary()
		packagesSelection: 	a Dictionary(var-tests->true )
		classesSelection: 	a Dictionary(DISTTests->true )
		list: 	a MorphTreeMorph(273940480)
		list2: 	a PluggableIconListMorph(454295552)
		sourceCodePanel: 	a PanelMorph(183500800)
		commentTextArea: 	nil
		currentDisplayChoice: 	#SourceCode
		sourceTextAreaLimit: 	350
		sourceCodeContainer: 	a PanelMorph(584843264)
		list2Elements: 	{DIDSLTests. DIJavaTests. DIPHPTests. DISTTests}
		listElements: 	nil
		shouldUpdateTitle: 	true
		testSemaphore: 	a Semaphore()
		sourceTextAreas: 	an OrderedCollection(a PluggableTextMorphWithLimits(303038464)...etc...
		multipleMethodsEditor: 	a MultipleMethodsEditor(286261248)
		contentSelection: 	nil
		acceptor: 	a ClassOrMethodDefinitionAcceptor
		classifier: 	a MethodClassifier
		categoryWidget: 	a CategoryWidget
		methodWidget: 	a MethodWidget
		packagePattern: 	a RxMatcher
		searchWidget: 	a SearchMorph(866648064)


[ self runTestForAMethodWithAnHalt: aMethod ] in [ :e | 
aBoolean
	ifTrue: [ 
		[ self runTestForAMethodWithAnHalt: aMethod ] fork.
		shouldAnnounce := false.
		TestAsserter classForTestResult new ]
	ifFalse: [ 
		TestAsserter classForTestResult new
			addFailure: (testClass selector: testMethod selector);
			yourself ] ] in [ 
| vScroll testClass testResult |
vScroll := methodWidget vScrollValue.
testClass := testMethod methodClass.
testResult := [ testClass run: testMethod selector ]
	on: Halt
	do: [ :e | 
		aBoolean
			ifTrue: [ 
				[ self runTestForAMethodWithAnHalt: aMethod ] fork.
				shouldAnnounce := false.
				TestAsserter classForTestResult new ]
			ifFalse: [ 
				TestAsserter classForTestResult new
					addFailure: (testClass selector: testMethod selector);
					yourself ] ].
testResult updateResultsInHistory.
testSemaphoreForMethod signal.
(aBoolean and: [ testResult failures isEmpty not or: [ testResult errors isEmpty not ] ])
	ifTrue: [ testClass debug: testMethod selector ].
ClassesIconsCache removeKey: aMethod methodClass ifAbsent: [  ].
UIManager default defer: [ methodWidget vScrollValue: vScroll ] ] in PackageTreeNautilusUI(NautilusUI)>>runTestForAMethod:notifying:priority:
	Receiver: a PackageTreeNautilusUI
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a CategoryWidget a MethodWidget a NautilusWindow(...etc...
		model: 	a PackageTreeNautilus
		window: 	a NautilusWindow(542638080)
		hierarchyClass: 	DITestGroup
		cachedHierarchy: 	a SortHierarchically
		sourceTextArea: 	a PluggableTextMorphWithLimits(303038464)
		groupsSelection: 	a Dictionary()
		packagesSelection: 	a Dictionary(var-tests->true )
		classesSelection: 	a Dictionary(DISTTests->true )
		list: 	a MorphTreeMorph(273940480)
		list2: 	a PluggableIconListMorph(454295552)
		sourceCodePanel: 	a PanelMorph(183500800)
		commentTextArea: 	nil
		currentDisplayChoice: 	#SourceCode
		sourceTextAreaLimit: 	350
		sourceCodeContainer: 	a PanelMorph(584843264)
		list2Elements: 	{DIDSLTests. DIJavaTests. DIPHPTests. DISTTests}
		listElements: 	nil
		shouldUpdateTitle: 	true
		testSemaphore: 	a Semaphore()
		sourceTextAreas: 	an OrderedCollection(a PluggableTextMorphWithLimits(303038464)...etc...
		multipleMethodsEditor: 	a MultipleMethodsEditor(286261248)
		contentSelection: 	nil
		acceptor: 	a ClassOrMethodDefinitionAcceptor
		classifier: 	a MethodClassifier
		categoryWidget: 	a CategoryWidget
		methodWidget: 	a MethodWidget
		packagePattern: 	a RxMatcher
		searchWidget: 	a SearchMorph(866648064)


[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ self runTestForAMethodWithAnHalt: aMethod ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	[ :e | 
aBoolean
	ifTrue: [ 
		[ self runTestForAMethodWithAnHalt...etc...
		startpc: 	275
		numArgs: 	0



--- The full stack ---
DISTTests>>test_AdapterTests
DISTTests(TestCase)>>performTest
[ 
self setUp.
self performTest ] in DISTTests(TestCase)>>runCase
BlockClosure>>ensure:
DISTTests(TestCase)>>runCase
[ 
aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCase.
aTestCase announce: TestCaseEnded withResult: self.
self addPass: aTestCase ] in TestResult>>runCase:
BlockClosure>>on:do:
TestResult>>runCase:
DISTTests(TestCase)>>run:
[ self run: result ] in DISTTests(TestCase)>>run
BlockClosure>>ensure:
DISTTests(TestCase)>>run
DISTTests class(TestCase class)>>run:
PackageTreeNautilusUI(NautilusUI)>>runTestForAMethodWithAnHalt:
[ self runTestForAMethodWithAnHalt: aMethod ] in [ :e | 
aBoolean
	ifTrue: [ 
		[ self runTestForAMethodWithAnHalt: aMethod ] fork.
		shouldAnnounce := false.
		TestAsserter classForTestResult new ]
	ifFalse: [ 
		TestAsserter classForTestResult new
			addFailure: (testClass selector: testMethod selector);
			yourself ] ] in [ 
| vScroll testClass testResult |
vScroll := methodWidget vScrollValue.
testClass := testMethod methodClass.
testResult := [ testClass run: testMethod selector ]
	on: Halt
	do: [ :e | 
		aBoolean
			ifTrue: [ 
				[ self runTestForAMethodWithAnHalt: aMethod ] fork.
				shouldAnnounce := false.
				TestAsserter classForTestResult new ]
			ifFalse: [ 
				TestAsserter classForTestResult new
					addFailure: (testClass selector: testMethod selector);
					yourself ] ].
testResult updateResultsInHistory.
testSemaphoreForMethod signal.
(aBoolean and: [ testResult failures isEmpty not or: [ testResult errors isEmpty not ] ])
	ifTrue: [ testClass debug: testMethod selector ].
ClassesIconsCache removeKey: aMethod methodClass ifAbsent: [  ].
UIManager default defer: [ methodWidget vScrollValue: vScroll ] ] in PackageTreeNautilusUI(NautilusUI)>>runTestForAMethod:notifying:priority:
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Halt
3 March 2015 11:33:59.94902 am

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
NBCogit NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
https://github.com/pharo-project/pharo-vm.git Commit: 4a0d556150d478ff2de3c9624d2f18e6eaa3fa5c Date: 2014-12-18 18:42:53 +0100 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14893

Image: Pharo3.0 [Latest update: #30863]

DISTTests>>test_AdapterTests
	Receiver: DISTTests>>#test_AdapterTests
	Arguments and temporary variables: 
		dsl: 	nil
		success: 	nil
	Receiver's instance variables: 
		testSelector: 	#test_AdapterTests
		expectedFails: 	nil


DISTTests(TestCase)>>performTest
	Receiver: DISTTests>>#test_AdapterTests
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test_AdapterTests
		expectedFails: 	nil


[ 
self setUp.
self performTest ] in DISTTests(TestCase)>>runCase
	Receiver: DISTTests>>#test_AdapterTests
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test_AdapterTests
		expectedFails: 	nil


BlockClosure>>ensure:
	Receiver: [ 
self setUp.
self performTest ]
	Arguments and temporary variables: 
		aBlock: 	[ 
self tearDown.
self cleanUpInstanceVariables ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	DISTTests(TestCase)>>runCase
		startpc: 	57
		numArgs: 	0


DISTTests(TestCase)>>runCase
	Receiver: DISTTests>>#test_AdapterTests
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test_AdapterTests
		expectedFails: 	nil


[ (self class selector: testSelector) runCase ] in DISTTests(TestCase)>>debug
	Receiver: DISTTests>>#test_AdapterTests
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test_AdapterTests
		expectedFails: 	nil


BlockClosure>>ensure:
	Receiver: [ (self class selector: testSelector) runCase ]
	Arguments and temporary variables: 
		aBlock: 	[ self classForTestResource resetResources: self resources ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	DISTTests(TestCase)>>debug
		startpc: 	45
		numArgs: 	0


DISTTests(TestCase)>>debug
	Receiver: DISTTests>>#test_AdapterTests
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test_AdapterTests
		expectedFails: 	nil


DISTTests class(TestCase class)>>debug:
	Receiver: DISTTests
	Arguments and temporary variables: 
		aSymbol: 	#test_AdapterTests
	Receiver's instance variables: 
		superclass: 	DIDSLTests
		methodDict: 	a MethodDictionary(#test_AdapterInterface->DISTTests>>#test_Adapter...etc...
		format: 	134
		layout: 	a FixedLayout
		instanceVariables: 	#()
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#DISTTests
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Dicto-var-tests'
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set(#test_AdapterTests #tes...etc...


PackageTreeNautilusUI(NautilusUI)>>runTestForAMethodWithAnHalt:
	Receiver: a PackageTreeNautilusUI
	Arguments and temporary variables: 
		aMethod: 	DISTTests>>#test_AdapterTests
		testMethod: 	DISTTests>>#test_AdapterTests
		color: 	nil
		vScroll: 	0.0
		testClass: 	DISTTests
		testResult: 	1 run, 0 passes, 0 skipped, 0 expected failures, 1 failures, 0 erro...etc...
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a CategoryWidget a MethodWidget a NautilusWindow(...etc...
		model: 	a PackageTreeNautilus
		window: 	a NautilusWindow(542638080)
		hierarchyClass: 	DITestGroup
		cachedHierarchy: 	a SortHierarchically
		sourceTextArea: 	a PluggableTextMorphWithLimits(303038464)
		groupsSelection: 	a Dictionary()
		packagesSelection: 	a Dictionary(var-tests->true )
		classesSelection: 	a Dictionary(DISTTests->true )
		list: 	a MorphTreeMorph(273940480)
		list2: 	a PluggableIconListMorph(454295552)
		sourceCodePanel: 	a PanelMorph(183500800)
		commentTextArea: 	nil
		currentDisplayChoice: 	#SourceCode
		sourceTextAreaLimit: 	350
		sourceCodeContainer: 	a PanelMorph(584843264)
		list2Elements: 	{DIDSLTests. DIJavaTests. DIPHPTests. DISTTests}
		listElements: 	nil
		shouldUpdateTitle: 	true
		testSemaphore: 	a Semaphore()
		sourceTextAreas: 	an OrderedCollection(a PluggableTextMorphWithLimits(303038464)...etc...
		multipleMethodsEditor: 	a MultipleMethodsEditor(286261248)
		contentSelection: 	nil
		acceptor: 	a ClassOrMethodDefinitionAcceptor
		classifier: 	a MethodClassifier
		categoryWidget: 	a CategoryWidget
		methodWidget: 	a MethodWidget
		packagePattern: 	a RxMatcher
		searchWidget: 	a SearchMorph(866648064)


[ self runTestForAMethodWithAnHalt: aMethod ] in [ :e | 
aBoolean
	ifTrue: [ 
		[ self runTestForAMethodWithAnHalt: aMethod ] fork.
		shouldAnnounce := false.
		TestAsserter classForTestResult new ]
	ifFalse: [ 
		TestAsserter classForTestResult new
			addFailure: (testClass selector: testMethod selector);
			yourself ] ] in [ 
| vScroll testClass testResult |
vScroll := methodWidget vScrollValue.
testClass := testMethod methodClass.
testResult := [ testClass run: testMethod selector ]
	on: Halt
	do: [ :e | 
		aBoolean
			ifTrue: [ 
				[ self runTestForAMethodWithAnHalt: aMethod ] fork.
				shouldAnnounce := false.
				TestAsserter classForTestResult new ]
			ifFalse: [ 
				TestAsserter classForTestResult new
					addFailure: (testClass selector: testMethod selector);
					yourself ] ].
testResult updateResultsInHistory.
testSemaphoreForMethod signal.
(aBoolean and: [ testResult failures isEmpty not or: [ testResult errors isEmpty not ] ])
	ifTrue: [ testClass debug: testMethod selector ].
ClassesIconsCache removeKey: aMethod methodClass ifAbsent: [  ].
UIManager default defer: [ methodWidget vScrollValue: vScroll ] ] in PackageTreeNautilusUI(NautilusUI)>>runTestForAMethod:notifying:priority:
	Receiver: a PackageTreeNautilusUI
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a CategoryWidget a MethodWidget a NautilusWindow(...etc...
		model: 	a PackageTreeNautilus
		window: 	a NautilusWindow(542638080)
		hierarchyClass: 	DITestGroup
		cachedHierarchy: 	a SortHierarchically
		sourceTextArea: 	a PluggableTextMorphWithLimits(303038464)
		groupsSelection: 	a Dictionary()
		packagesSelection: 	a Dictionary(var-tests->true )
		classesSelection: 	a Dictionary(DISTTests->true )
		list: 	a MorphTreeMorph(273940480)
		list2: 	a PluggableIconListMorph(454295552)
		sourceCodePanel: 	a PanelMorph(183500800)
		commentTextArea: 	nil
		currentDisplayChoice: 	#SourceCode
		sourceTextAreaLimit: 	350
		sourceCodeContainer: 	a PanelMorph(584843264)
		list2Elements: 	{DIDSLTests. DIJavaTests. DIPHPTests. DISTTests}
		listElements: 	nil
		shouldUpdateTitle: 	true
		testSemaphore: 	a Semaphore()
		sourceTextAreas: 	an OrderedCollection(a PluggableTextMorphWithLimits(303038464)...etc...
		multipleMethodsEditor: 	a MultipleMethodsEditor(286261248)
		contentSelection: 	nil
		acceptor: 	a ClassOrMethodDefinitionAcceptor
		classifier: 	a MethodClassifier
		categoryWidget: 	a CategoryWidget
		methodWidget: 	a MethodWidget
		packagePattern: 	a RxMatcher
		searchWidget: 	a SearchMorph(866648064)


[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ self runTestForAMethodWithAnHalt: aMethod ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	[ :e | 
aBoolean
	ifTrue: [ 
		[ self runTestForAMethodWithAnHalt...etc...
		startpc: 	275
		numArgs: 	0



--- The full stack ---
DISTTests>>test_AdapterTests
DISTTests(TestCase)>>performTest
[ 
self setUp.
self performTest ] in DISTTests(TestCase)>>runCase
BlockClosure>>ensure:
DISTTests(TestCase)>>runCase
[ (self class selector: testSelector) runCase ] in DISTTests(TestCase)>>debug
BlockClosure>>ensure:
DISTTests(TestCase)>>debug
DISTTests class(TestCase class)>>debug:
PackageTreeNautilusUI(NautilusUI)>>runTestForAMethodWithAnHalt:
[ self runTestForAMethodWithAnHalt: aMethod ] in [ :e | 
aBoolean
	ifTrue: [ 
		[ self runTestForAMethodWithAnHalt: aMethod ] fork.
		shouldAnnounce := false.
		TestAsserter classForTestResult new ]
	ifFalse: [ 
		TestAsserter classForTestResult new
			addFailure: (testClass selector: testMethod selector);
			yourself ] ] in [ 
| vScroll testClass testResult |
vScroll := methodWidget vScrollValue.
testClass := testMethod methodClass.
testResult := [ testClass run: testMethod selector ]
	on: Halt
	do: [ :e | 
		aBoolean
			ifTrue: [ 
				[ self runTestForAMethodWithAnHalt: aMethod ] fork.
				shouldAnnounce := false.
				TestAsserter classForTestResult new ]
			ifFalse: [ 
				TestAsserter classForTestResult new
					addFailure: (testClass selector: testMethod selector);
					yourself ] ].
testResult updateResultsInHistory.
testSemaphoreForMethod signal.
(aBoolean and: [ testResult failures isEmpty not or: [ testResult errors isEmpty not ] ])
	ifTrue: [ testClass debug: testMethod selector ].
ClassesIconsCache removeKey: aMethod methodClass ifAbsent: [  ].
UIManager default defer: [ methodWidget vScrollValue: vScroll ] ] in PackageTreeNautilusUI(NautilusUI)>>runTestForAMethod:notifying:priority:
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
TestFailure: Assertion failed
3 March 2015 11:34:03.741183 am

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
NBCogit NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
https://github.com/pharo-project/pharo-vm.git Commit: 4a0d556150d478ff2de3c9624d2f18e6eaa3fa5c Date: 2014-12-18 18:42:53 +0100 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14893

Image: Pharo3.0 [Latest update: #30863]

DISTTests(TestAsserter)>>assert:
	Receiver: DISTTests>>#test_AdapterTests
	Arguments and temporary variables: 
		aBoolean: 	false
	Receiver's instance variables: 
		testSelector: 	#test_AdapterTests
		expectedFails: 	nil


[ :n | self assert: (DIModel allRules at: n) hasFailed = (res at: n) not ] in DISTTests(DIDSLTests)>>runAndReturnObjWithText:andSuccessResults:onProject:
	Receiver: DISTTests>>#test_AdapterTests
	Arguments and temporary variables: 
		dslText: 	'
JavaAdapters = STClass with superclass:"DIAdapter", package:"Dicto-J...etc...
		res: 	#(false true)
		project: 	'TestProject'
		dicto: 	a DIDicto
		n: 	1
	Receiver's instance variables: 
		testSelector: 	#test_AdapterTests
		expectedFails: 	nil


Interval>>do:
	Receiver: (1 to: 2)
	Arguments and temporary variables: 
		aBlock: 	[ :n | self assert: (DIModel allRules at: n) hasFailed = (res at: n) no...etc...
		aValue: 	1
		index: 	1
		size: 	2
	Receiver's instance variables: 
		start: 	1
		stop: 	2
		step: 	1


DISTTests(DIDSLTests)>>runAndReturnObjWithText:andSuccessResults:onProject:
	Receiver: DISTTests>>#test_AdapterTests
	Arguments and temporary variables: 
		dslText: 	'
JavaAdapters = STClass with superclass:"DIAdapter", package:"Dicto-J...etc...
		res: 	#(false true)
		project: 	'TestProject'
		dicto: 	a DIDicto
	Receiver's instance variables: 
		testSelector: 	#test_AdapterTests
		expectedFails: 	nil


DISTTests(DIDSLTests)>>runAndReturnObjWithText:andSuccessResults:
	Receiver: DISTTests>>#test_AdapterTests
	Arguments and temporary variables: 
		dslText: 	'
JavaAdapters = STClass with superclass:"DIAdapter", package:"Dicto-J...etc...
		res: 	#(false true)
	Receiver's instance variables: 
		testSelector: 	#test_AdapterTests
		expectedFails: 	nil


DISTTests>>test_AdapterTests
	Receiver: DISTTests>>#test_AdapterTests
	Arguments and temporary variables: 
		dsl: 	'
JavaAdapters = STClass with superclass:"DIAdapter", package:"Dicto-Java"...etc...
		success: 	#(false true)
	Receiver's instance variables: 
		testSelector: 	#test_AdapterTests
		expectedFails: 	nil


DISTTests(TestCase)>>performTest
	Receiver: DISTTests>>#test_AdapterTests
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test_AdapterTests
		expectedFails: 	nil


[ 
self setUp.
self performTest ] in DISTTests(TestCase)>>runCase
	Receiver: DISTTests>>#test_AdapterTests
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test_AdapterTests
		expectedFails: 	nil


BlockClosure>>ensure:
	Receiver: [ 
self setUp.
self performTest ]
	Arguments and temporary variables: 
		aBlock: 	[ 
self tearDown.
self cleanUpInstanceVariables ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	DISTTests(TestCase)>>runCase
		startpc: 	57
		numArgs: 	0


DISTTests(TestCase)>>runCase
	Receiver: DISTTests>>#test_AdapterTests
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test_AdapterTests
		expectedFails: 	nil


[ (self class selector: testSelector) runCase ] in DISTTests(TestCase)>>debug
	Receiver: DISTTests>>#test_AdapterTests
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test_AdapterTests
		expectedFails: 	nil


BlockClosure>>ensure:
	Receiver: [ (self class selector: testSelector) runCase ]
	Arguments and temporary variables: 
		aBlock: 	[ self classForTestResource resetResources: self resources ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	DISTTests(TestCase)>>debug
		startpc: 	45
		numArgs: 	0


DISTTests(TestCase)>>debug
	Receiver: DISTTests>>#test_AdapterTests
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test_AdapterTests
		expectedFails: 	nil


DISTTests class(TestCase class)>>debug:
	Receiver: DISTTests
	Arguments and temporary variables: 
		aSymbol: 	#test_AdapterTests
	Receiver's instance variables: 
		superclass: 	DIDSLTests
		methodDict: 	a MethodDictionary(#test_AdapterInterface->DISTTests>>#test_Adapter...etc...
		format: 	134
		layout: 	a FixedLayout
		instanceVariables: 	#()
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#DISTTests
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Dicto-var-tests'
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set(#test_AdapterTests #tes...etc...


PackageTreeNautilusUI(NautilusUI)>>runTestForAMethodWithAnHalt:
	Receiver: a PackageTreeNautilusUI
	Arguments and temporary variables: 
		aMethod: 	DISTTests>>#test_AdapterTests
		testMethod: 	DISTTests>>#test_AdapterTests
		color: 	nil
		vScroll: 	0.0
		testClass: 	DISTTests
		testResult: 	1 run, 0 passes, 0 skipped, 0 expected failures, 1 failures, 0 erro...etc...
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a CategoryWidget a MethodWidget a NautilusWindow(...etc...
		model: 	a PackageTreeNautilus
		window: 	a NautilusWindow(542638080)
		hierarchyClass: 	DITestGroup
		cachedHierarchy: 	a SortHierarchically
		sourceTextArea: 	a PluggableTextMorphWithLimits(303038464)
		groupsSelection: 	a Dictionary()
		packagesSelection: 	a Dictionary(var-tests->true )
		classesSelection: 	a Dictionary(DISTTests->true )
		list: 	a MorphTreeMorph(273940480)
		list2: 	a PluggableIconListMorph(454295552)
		sourceCodePanel: 	a PanelMorph(183500800)
		commentTextArea: 	nil
		currentDisplayChoice: 	#SourceCode
		sourceTextAreaLimit: 	350
		sourceCodeContainer: 	a PanelMorph(584843264)
		list2Elements: 	{DIDSLTests. DIJavaTests. DIPHPTests. DISTTests}
		listElements: 	nil
		shouldUpdateTitle: 	true
		testSemaphore: 	a Semaphore()
		sourceTextAreas: 	an OrderedCollection(a PluggableTextMorphWithLimits(303038464)...etc...
		multipleMethodsEditor: 	a MultipleMethodsEditor(286261248)
		contentSelection: 	nil
		acceptor: 	a ClassOrMethodDefinitionAcceptor
		classifier: 	a MethodClassifier
		categoryWidget: 	a CategoryWidget
		methodWidget: 	a MethodWidget
		packagePattern: 	a RxMatcher
		searchWidget: 	a SearchMorph(866648064)


[ self runTestForAMethodWithAnHalt: aMethod ] in [ :e | 
aBoolean
	ifTrue: [ 
		[ self runTestForAMethodWithAnHalt: aMethod ] fork.
		shouldAnnounce := false.
		TestAsserter classForTestResult new ]
	ifFalse: [ 
		TestAsserter classForTestResult new
			addFailure: (testClass selector: testMethod selector);
			yourself ] ] in [ 
| vScroll testClass testResult |
vScroll := methodWidget vScrollValue.
testClass := testMethod methodClass.
testResult := [ testClass run: testMethod selector ]
	on: Halt
	do: [ :e | 
		aBoolean
			ifTrue: [ 
				[ self runTestForAMethodWithAnHalt: aMethod ] fork.
				shouldAnnounce := false.
				TestAsserter classForTestResult new ]
			ifFalse: [ 
				TestAsserter classForTestResult new
					addFailure: (testClass selector: testMethod selector);
					yourself ] ].
testResult updateResultsInHistory.
testSemaphoreForMethod signal.
(aBoolean and: [ testResult failures isEmpty not or: [ testResult errors isEmpty not ] ])
	ifTrue: [ testClass debug: testMethod selector ].
ClassesIconsCache removeKey: aMethod methodClass ifAbsent: [  ].
UIManager default defer: [ methodWidget vScrollValue: vScroll ] ] in PackageTreeNautilusUI(NautilusUI)>>runTestForAMethod:notifying:priority:
	Receiver: a PackageTreeNautilusUI
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a CategoryWidget a MethodWidget a NautilusWindow(...etc...
		model: 	a PackageTreeNautilus
		window: 	a NautilusWindow(542638080)
		hierarchyClass: 	DITestGroup
		cachedHierarchy: 	a SortHierarchically
		sourceTextArea: 	a PluggableTextMorphWithLimits(303038464)
		groupsSelection: 	a Dictionary()
		packagesSelection: 	a Dictionary(var-tests->true )
		classesSelection: 	a Dictionary(DISTTests->true )
		list: 	a MorphTreeMorph(273940480)
		list2: 	a PluggableIconListMorph(454295552)
		sourceCodePanel: 	a PanelMorph(183500800)
		commentTextArea: 	nil
		currentDisplayChoice: 	#SourceCode
		sourceTextAreaLimit: 	350
		sourceCodeContainer: 	a PanelMorph(584843264)
		list2Elements: 	{DIDSLTests. DIJavaTests. DIPHPTests. DISTTests}
		listElements: 	nil
		shouldUpdateTitle: 	true
		testSemaphore: 	a Semaphore()
		sourceTextAreas: 	an OrderedCollection(a PluggableTextMorphWithLimits(303038464)...etc...
		multipleMethodsEditor: 	a MultipleMethodsEditor(286261248)
		contentSelection: 	nil
		acceptor: 	a ClassOrMethodDefinitionAcceptor
		classifier: 	a MethodClassifier
		categoryWidget: 	a CategoryWidget
		methodWidget: 	a MethodWidget
		packagePattern: 	a RxMatcher
		searchWidget: 	a SearchMorph(866648064)


[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ self runTestForAMethodWithAnHalt: aMethod ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	[ :e | 
aBoolean
	ifTrue: [ 
		[ self runTestForAMethodWithAnHalt...etc...
		startpc: 	275
		numArgs: 	0



--- The full stack ---
DISTTests(TestAsserter)>>assert:
[ :n | self assert: (DIModel allRules at: n) hasFailed = (res at: n) not ] in DISTTests(DIDSLTests)>>runAndReturnObjWithText:andSuccessResults:onProject:
Interval>>do:
DISTTests(DIDSLTests)>>runAndReturnObjWithText:andSuccessResults:onProject:
DISTTests(DIDSLTests)>>runAndReturnObjWithText:andSuccessResults:
DISTTests>>test_AdapterTests
DISTTests(TestCase)>>performTest
[ 
self setUp.
self performTest ] in DISTTests(TestCase)>>runCase
BlockClosure>>ensure:
DISTTests(TestCase)>>runCase
[ (self class selector: testSelector) runCase ] in DISTTests(TestCase)>>debug
BlockClosure>>ensure:
DISTTests(TestCase)>>debug
DISTTests class(TestCase class)>>debug:
PackageTreeNautilusUI(NautilusUI)>>runTestForAMethodWithAnHalt:
[ self runTestForAMethodWithAnHalt: aMethod ] in [ :e | 
aBoolean
	ifTrue: [ 
		[ self runTestForAMethodWithAnHalt: aMethod ] fork.
		shouldAnnounce := false.
		TestAsserter classForTestResult new ]
	ifFalse: [ 
		TestAsserter classForTestResult new
			addFailure: (testClass selector: testMethod selector);
			yourself ] ] in [ 
| vScroll testClass testResult |
vScroll := methodWidget vScrollValue.
testClass := testMethod methodClass.
testResult := [ testClass run: testMethod selector ]
	on: Halt
	do: [ :e | 
		aBoolean
			ifTrue: [ 
				[ self runTestForAMethodWithAnHalt: aMethod ] fork.
				shouldAnnounce := false.
				TestAsserter classForTestResult new ]
			ifFalse: [ 
				TestAsserter classForTestResult new
					addFailure: (testClass selector: testMethod selector);
					yourself ] ].
testResult updateResultsInHistory.
testSemaphoreForMethod signal.
(aBoolean and: [ testResult failures isEmpty not or: [ testResult errors isEmpty not ] ])
	ifTrue: [ testClass debug: testMethod selector ].
ClassesIconsCache removeKey: aMethod methodClass ifAbsent: [  ].
UIManager default defer: [ methodWidget vScrollValue: vScroll ] ] in PackageTreeNautilusUI(NautilusUI)>>runTestForAMethod:notifying:priority:
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
TestFailure: Assertion failed
3 March 2015 11:34:09.882169 am

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
NBCogit NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
https://github.com/pharo-project/pharo-vm.git Commit: 4a0d556150d478ff2de3c9624d2f18e6eaa3fa5c Date: 2014-12-18 18:42:53 +0100 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14893

Image: Pharo3.0 [Latest update: #30863]

DISTTests(TestAsserter)>>assert:
	Receiver: DISTTests>>#test_DeadMethods
	Arguments and temporary variables: 
		aBoolean: 	false
	Receiver's instance variables: 
		testSelector: 	#test_DeadMethods
		expectedFails: 	nil


[ :n | self assert: (DIModel allRules at: n) hasFailed = (res at: n) not ] in DISTTests(DIDSLTests)>>runAndReturnObjWithText:andSuccessResults:onProject:
	Receiver: DISTTests>>#test_DeadMethods
	Arguments and temporary variables: 
		dslText: 	'
AllMethods = STMethod with name:"*"

AllMethods must be invoked
'
		res: 	#(false)
		project: 	'TestProject'
		dicto: 	a DIDicto
		n: 	1
	Receiver's instance variables: 
		testSelector: 	#test_DeadMethods
		expectedFails: 	nil


Interval>>do:
	Receiver: (1 to: 1)
	Arguments and temporary variables: 
		aBlock: 	[ :n | self assert: (DIModel allRules at: n) hasFailed = (res at: n) no...etc...
		aValue: 	1
		index: 	1
		size: 	1
	Receiver's instance variables: 
		start: 	1
		stop: 	1
		step: 	1


DISTTests(DIDSLTests)>>runAndReturnObjWithText:andSuccessResults:onProject:
	Receiver: DISTTests>>#test_DeadMethods
	Arguments and temporary variables: 
		dslText: 	'
AllMethods = STMethod with name:"*"

AllMethods must be invoked
'
		res: 	#(false)
		project: 	'TestProject'
		dicto: 	a DIDicto
	Receiver's instance variables: 
		testSelector: 	#test_DeadMethods
		expectedFails: 	nil


DISTTests(DIDSLTests)>>runAndReturnObjWithText:andSuccessResults:
	Receiver: DISTTests>>#test_DeadMethods
	Arguments and temporary variables: 
		dslText: 	'
AllMethods = STMethod with name:"*"

AllMethods must be invoked
'
		res: 	#(false)
	Receiver's instance variables: 
		testSelector: 	#test_DeadMethods
		expectedFails: 	nil


DISTTests>>test_DeadMethods
	Receiver: DISTTests>>#test_DeadMethods
	Arguments and temporary variables: 
		dsl: 	'
AllMethods = STMethod with name:"*"

AllMethods must be invoked
'
		success: 	#(false)
	Receiver's instance variables: 
		testSelector: 	#test_DeadMethods
		expectedFails: 	nil


DISTTests(TestCase)>>performTest
	Receiver: DISTTests>>#test_DeadMethods
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test_DeadMethods
		expectedFails: 	nil


[ 
self setUp.
self performTest ] in DISTTests(TestCase)>>runCase
	Receiver: DISTTests>>#test_DeadMethods
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test_DeadMethods
		expectedFails: 	nil


BlockClosure>>ensure:
	Receiver: [ 
self setUp.
self performTest ]
	Arguments and temporary variables: 
		aBlock: 	[ 
self tearDown.
self cleanUpInstanceVariables ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	DISTTests(TestCase)>>runCase
		startpc: 	57
		numArgs: 	0


DISTTests(TestCase)>>runCase
	Receiver: DISTTests>>#test_DeadMethods
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test_DeadMethods
		expectedFails: 	nil


[ (self class selector: testSelector) runCase ] in DISTTests(TestCase)>>debug
	Receiver: DISTTests>>#test_DeadMethods
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test_DeadMethods
		expectedFails: 	nil


BlockClosure>>ensure:
	Receiver: [ (self class selector: testSelector) runCase ]
	Arguments and temporary variables: 
		aBlock: 	[ self classForTestResource resetResources: self resources ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	DISTTests(TestCase)>>debug
		startpc: 	45
		numArgs: 	0


DISTTests(TestCase)>>debug
	Receiver: DISTTests>>#test_DeadMethods
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test_DeadMethods
		expectedFails: 	nil


DISTTests class(TestCase class)>>debug:
	Receiver: DISTTests
	Arguments and temporary variables: 
		aSymbol: 	#test_DeadMethods
	Receiver's instance variables: 
		superclass: 	DIDSLTests
		methodDict: 	a MethodDictionary(#test_AdapterInterface->DISTTests>>#test_Adapter...etc...
		format: 	134
		layout: 	a FixedLayout
		instanceVariables: 	#()
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#DISTTests
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Dicto-var-tests'
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set(#test_AdapterTests #tes...etc...


[ 
| vScroll testClass testResult |
vScroll := methodWidget vScrollValue.
testClass := testMethod methodClass.
testResult := [ testClass run: testMethod selector ]
	on: Halt
	do: [ :e | 
		aBoolean
			ifTrue: [ 
				[ self runTestForAMethodWithAnHalt: aMethod ] fork.
				shouldAnnounce := false.
				TestAsserter classForTestResult new ]
			ifFalse: [ 
				TestAsserter classForTestResult new
					addFailure: (testClass selector: testMethod selector);
					yourself ] ].
testResult updateResultsInHistory.
testSemaphoreForMethod signal.
(aBoolean and: [ testResult failures isEmpty not or: [ testResult errors isEmpty not ] ])
	ifTrue: [ testClass debug: testMethod selector ].
ClassesIconsCache removeKey: aMethod methodClass ifAbsent: [  ].
UIManager default defer: [ methodWidget vScrollValue: vScroll ] ] in PackageTreeNautilusUI(NautilusUI)>>runTestForAMethod:notifying:priority:
	Receiver: a PackageTreeNautilusUI
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a CategoryWidget a MethodWidget a NautilusWindow(...etc...
		model: 	a PackageTreeNautilus
		window: 	a NautilusWindow(184549376)
		hierarchyClass: 	nil
		cachedHierarchy: 	a SortHierarchically
		sourceTextArea: 	a PluggableTextMorphWithLimits(749993984)
		groupsSelection: 	a Dictionary()
		packagesSelection: 	a Dictionary(var-tests->true )
		classesSelection: 	a Dictionary(DISTTests->true )
		list: 	a MorphTreeMorph(1051459584)
		list2: 	a PluggableIconListMorph(116129792)
		sourceCodePanel: 	a PanelMorph(594280448)
		commentTextArea: 	nil
		currentDisplayChoice: 	#SourceCode
		sourceTextAreaLimit: 	350
		sourceCodeContainer: 	a PanelMorph(112984064)
		list2Elements: 	{DIDSLTests. DIJavaTests. DIPHPTests. DISTTests}
		listElements: 	nil
		shouldUpdateTitle: 	true
		testSemaphore: 	a Semaphore()
		sourceTextAreas: 	an OrderedCollection(a PluggableTextMorphWithLimits(749993984)...etc...
		multipleMethodsEditor: 	a MultipleMethodsEditor(870055936)
		contentSelection: 	nil
		acceptor: 	a MethodDefinitionAcceptor
		classifier: 	a MethodClassifier
		categoryWidget: 	a CategoryWidget
		methodWidget: 	a MethodWidget
		packagePattern: 	a RxMatcher
		searchWidget: 	a SearchMorph(206045184)


[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ 
| vScroll testClass testResult |
vScroll := methodWidget vScrollValue.
testClass := tes...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	PackageTreeNautilusUI(NautilusUI)>>runTestForAMethod:notifying:pr...etc...
		startpc: 	236
		numArgs: 	0



--- The full stack ---
DISTTests(TestAsserter)>>assert:
[ :n | self assert: (DIModel allRules at: n) hasFailed = (res at: n) not ] in DISTTests(DIDSLTests)>>runAndReturnObjWithText:andSuccessResults:onProject:
Interval>>do:
DISTTests(DIDSLTests)>>runAndReturnObjWithText:andSuccessResults:onProject:
DISTTests(DIDSLTests)>>runAndReturnObjWithText:andSuccessResults:
DISTTests>>test_DeadMethods
DISTTests(TestCase)>>performTest
[ 
self setUp.
self performTest ] in DISTTests(TestCase)>>runCase
BlockClosure>>ensure:
DISTTests(TestCase)>>runCase
[ (self class selector: testSelector) runCase ] in DISTTests(TestCase)>>debug
BlockClosure>>ensure:
DISTTests(TestCase)>>debug
DISTTests class(TestCase class)>>debug:
[ 
| vScroll testClass testResult |
vScroll := methodWidget vScrollValue.
testClass := testMethod methodClass.
testResult := [ testClass run: testMethod selector ]
	on: Halt
	do: [ :e | 
		aBoolean
			ifTrue: [ 
				[ self runTestForAMethodWithAnHalt: aMethod ] fork.
				shouldAnnounce := false.
				TestAsserter classForTestResult new ]
			ifFalse: [ 
				TestAsserter classForTestResult new
					addFailure: (testClass selector: testMethod selector);
					yourself ] ].
testResult updateResultsInHistory.
testSemaphoreForMethod signal.
(aBoolean and: [ testResult failures isEmpty not or: [ testResult errors isEmpty not ] ])
	ifTrue: [ testClass debug: testMethod selector ].
ClassesIconsCache removeKey: aMethod methodClass ifAbsent: [  ].
UIManager default defer: [ methodWidget vScrollValue: vScroll ] ] in PackageTreeNautilusUI(NautilusUI)>>runTestForAMethod:notifying:priority:
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: DIMooseDependencies>>internalRun
3 March 2015 11:34:16.533165 am

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
NBCogit NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
https://github.com/pharo-project/pharo-vm.git Commit: 4a0d556150d478ff2de3c9624d2f18e6eaa3fa5c Date: 2014-12-18 18:42:53 +0100 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14893

Image: Pharo3.0 [Latest update: #30863]

DIMooseDependencies(Object)>>doesNotUnderstand: #internalRun
	Receiver: a DIMooseDependencies
	Arguments and temporary variables: 
		aMessage: 	internalRun
		exception: 	MessageNotUnderstood: DIMooseDependencies>>internalRun
		resumeValue: 	nil
	Receiver's instance variables: 
		output: 	''
		commandOutput: 	''
		NEWLINE: 	'
'
		rules: 	a DICollectionRule(Application must depend on Util Application must depe...etc...
		varSynonyms: 	nil
		sessionId: 	'1425378856'
		TIMESTAMP: 	'1425378857'
		TOOLNAME: 	'DIMooseDependencies'
		PROJECTROOT: 	'/home/otruffer/dicto/TestProject'
		PROJECTSRC: 	'src/'
		PROJECTBIN: 	'bin/'
		RESULTFILE: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/DictoTestSuite/1...etc...
		TESTFILE: 	nil
		testInputFileExt: 	'.txt'
		SYSTEM: 	SYSTEM


DIMooseDependencies>>testRun
	Receiver: a DIMooseDependencies
	Arguments and temporary variables: 

	Receiver's instance variables: 
		output: 	''
		commandOutput: 	''
		NEWLINE: 	'
'
		rules: 	a DICollectionRule(Application must depend on Util Application must depe...etc...
		varSynonyms: 	nil
		sessionId: 	'1425378856'
		TIMESTAMP: 	'1425378857'
		TOOLNAME: 	'DIMooseDependencies'
		PROJECTROOT: 	'/home/otruffer/dicto/TestProject'
		PROJECTSRC: 	'src/'
		PROJECTBIN: 	'bin/'
		RESULTFILE: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/DictoTestSuite/1...etc...
		TESTFILE: 	nil
		testInputFileExt: 	'.txt'
		SYSTEM: 	SYSTEM


DITestGroup>>build
	Receiver: a DITestGroup
	Arguments and temporary variables: 

	Receiver's instance variables: 
		rules: 	an OrderedCollection(Application must depend on Util Application must de...etc...
		adapter: 	a DIMooseDependencies
		runCommandText: 	nil
		testSpecification: 	''
		adapterID: 	'DIMooseDependencies'
		resultFile: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/DictoTestSuite/1...etc...
		specificationFile: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/DictoTest...etc...
		commandFile: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/DictoTestSuite/...etc...
		xmlOutput: 	nil
		rawOutput: 	nil


[ :testGroup | testGroup build ] in DIDicto>>dictoBuild:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'
Application = Package with name:"org.jhotdraw.application"
Contri...etc...
		adapterTestGroups: 	a Dictionary(DIGrepFileContent->a DITestGroup DIJMeterLoadTe...etc...
		testGroup: 	a DITestGroup
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1425378856'
		singleShotTask: 	false


Array(SequenceableCollection)>>do:
	Receiver: an Array(a DITestGroup a DITestGroup a DITestGroup a DITestGroup a DITestGroup a DITestGro...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :testGroup | testGroup build ]
		index: 	9
	Receiver's instance variables: 
an Array(a DITestGroup a DITestGroup a DITestGroup a DITestGroup a DITestGroup a DITestGro...etc...

DIDicto>>dictoBuild:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'
Application = Package with name:"org.jhotdraw.application"
Contri...etc...
		adapterTestGroups: 	a Dictionary(DIGrepFileContent->a DITestGroup DIJMeterLoadTe...etc...
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1425378856'
		singleShotTask: 	false


DIDicto>>dictoRun:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'
Application = Package with name:"org.jhotdraw.application"
Contri...etc...
		adapterTestGroups: 	nil
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1425378856'
		singleShotTask: 	false


DIDicto>>dictoAll:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'
Application = Package with name:"org.jhotdraw.application"
Contri...etc...
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1425378856'
		singleShotTask: 	false


DIJavaTests(DIDSLTests)>>runAndReturnObjWithText:andSuccessResults:onProject:
	Receiver: DIJavaTests>>#testDependencies
	Arguments and temporary variables: 
		dslText: 	'
Application = Package with name:"org.jhotdraw.application"
Contrib =...etc...
		res: 	#(true false false false false)
		project: 	'TestProject'
		dicto: 	a DIDicto
	Receiver's instance variables: 
		testSelector: 	#testDependencies
		expectedFails: 	nil


DIJavaTests(DIDSLTests)>>runAndReturnObjWithText:andSuccessResults:
	Receiver: DIJavaTests>>#testDependencies
	Arguments and temporary variables: 
		dslText: 	'
Application = Package with name:"org.jhotdraw.application"
Contrib =...etc...
		res: 	#(true false false false false)
	Receiver's instance variables: 
		testSelector: 	#testDependencies
		expectedFails: 	nil


DIJavaTests>>testDependencies
	Receiver: DIJavaTests>>#testDependencies
	Arguments and temporary variables: 
		dsl: 	'
Application = Package with name:"org.jhotdraw.application"
Contrib = Pac...etc...
		success: 	#(true false false false false)
	Receiver's instance variables: 
		testSelector: 	#testDependencies
		expectedFails: 	nil


DIJavaTests(TestCase)>>performTest
	Receiver: DIJavaTests>>#testDependencies
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testDependencies
		expectedFails: 	nil


[ 
self setUp.
self performTest ] in DIJavaTests(TestCase)>>runCase
	Receiver: DIJavaTests>>#testDependencies
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testDependencies
		expectedFails: 	nil


BlockClosure>>ensure:
	Receiver: [ 
self setUp.
self performTest ]
	Arguments and temporary variables: 
		aBlock: 	[ 
self tearDown.
self cleanUpInstanceVariables ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	DIJavaTests(TestCase)>>runCase
		startpc: 	57
		numArgs: 	0


DIJavaTests(TestCase)>>runCase
	Receiver: DIJavaTests>>#testDependencies
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testDependencies
		expectedFails: 	nil


[ (self class selector: testSelector) runCase ] in DIJavaTests(TestCase)>>debug
	Receiver: DIJavaTests>>#testDependencies
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testDependencies
		expectedFails: 	nil


BlockClosure>>ensure:
	Receiver: [ (self class selector: testSelector) runCase ]
	Arguments and temporary variables: 
		aBlock: 	[ self classForTestResource resetResources: self resources ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	DIJavaTests(TestCase)>>debug
		startpc: 	45
		numArgs: 	0


DIJavaTests(TestCase)>>debug
	Receiver: DIJavaTests>>#testDependencies
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testDependencies
		expectedFails: 	nil


DIJavaTests class(TestCase class)>>debug:
	Receiver: DIJavaTests
	Arguments and temporary variables: 
		aSymbol: 	#testDependencies
	Receiver's instance variables: 
		superclass: 	DIDSLTests
		methodDict: 	a MethodDictionary(#testCodeClones->DIJavaTests>>#testCodeClones #t...etc...
		format: 	134
		layout: 	a FixedLayout
		instanceVariables: 	#()
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#DIJavaTests
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Dicto-var-tests'
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set(#testDependencies) #failures->a Set(#testC...etc...


[ 
| vScroll testClass testResult |
vScroll := methodWidget vScrollValue.
testClass := testMethod methodClass.
testResult := [ testClass run: testMethod selector ]
	on: Halt
	do: [ :e | 
		aBoolean
			ifTrue: [ 
				[ self runTestForAMethodWithAnHalt: aMethod ] fork.
				shouldAnnounce := false.
				TestAsserter classForTestResult new ]
			ifFalse: [ 
				TestAsserter classForTestResult new
					addFailure: (testClass selector: testMethod selector);
					yourself ] ].
testResult updateResultsInHistory.
testSemaphoreForMethod signal.
(aBoolean and: [ testResult failures isEmpty not or: [ testResult errors isEmpty not ] ])
	ifTrue: [ testClass debug: testMethod selector ].
ClassesIconsCache removeKey: aMethod methodClass ifAbsent: [  ].
UIManager default defer: [ methodWidget vScrollValue: vScroll ] ] in PackageTreeNautilusUI(NautilusUI)>>runTestForAMethod:notifying:priority:
	Receiver: a PackageTreeNautilusUI
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a CategoryWidget a MethodWidget a NautilusWindow(...etc...
		model: 	a PackageTreeNautilus
		window: 	a NautilusWindow(184549376)
		hierarchyClass: 	nil
		cachedHierarchy: 	a SortHierarchically
		sourceTextArea: 	a PluggableTextMorphWithLimits(749993984)
		groupsSelection: 	a Dictionary()
		packagesSelection: 	a Dictionary(var-tests->true )
		classesSelection: 	a Dictionary(DIJavaTests->true DISTTests->false )
		list: 	a MorphTreeMorph(1051459584)
		list2: 	a PluggableIconListMorph(116129792)
		sourceCodePanel: 	a PanelMorph(594280448)
		commentTextArea: 	nil
		currentDisplayChoice: 	#SourceCode
		sourceTextAreaLimit: 	350
		sourceCodeContainer: 	a PanelMorph(112984064)
		list2Elements: 	{DIDSLTests. DIJavaTests. DIPHPTests. DISTTests}
		listElements: 	nil
		shouldUpdateTitle: 	true
		testSemaphore: 	a Semaphore()
		sourceTextAreas: 	an OrderedCollection(a PluggableTextMorphWithLimits(749993984)...etc...
		multipleMethodsEditor: 	a MultipleMethodsEditor(870055936)
		contentSelection: 	nil
		acceptor: 	a ClassOrMethodDefinitionAcceptor
		classifier: 	a MethodClassifier
		categoryWidget: 	a CategoryWidget
		methodWidget: 	a MethodWidget
		packagePattern: 	a RxMatcher
		searchWidget: 	a SearchMorph(206045184)


[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ 
| vScroll testClass testResult |
vScroll := methodWidget vScrollValue.
testClass := tes...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	PackageTreeNautilusUI(NautilusUI)>>runTestForAMethod:notifying:pr...etc...
		startpc: 	236
		numArgs: 	0



--- The full stack ---
DIMooseDependencies(Object)>>doesNotUnderstand: #internalRun
DIMooseDependencies>>testRun
DITestGroup>>build
[ :testGroup | testGroup build ] in DIDicto>>dictoBuild:
Array(SequenceableCollection)>>do:
DIDicto>>dictoBuild:
DIDicto>>dictoRun:
DIDicto>>dictoAll:
DIJavaTests(DIDSLTests)>>runAndReturnObjWithText:andSuccessResults:onProject:
DIJavaTests(DIDSLTests)>>runAndReturnObjWithText:andSuccessResults:
DIJavaTests>>testDependencies
DIJavaTests(TestCase)>>performTest
[ 
self setUp.
self performTest ] in DIJavaTests(TestCase)>>runCase
BlockClosure>>ensure:
DIJavaTests(TestCase)>>runCase
[ (self class selector: testSelector) runCase ] in DIJavaTests(TestCase)>>debug
BlockClosure>>ensure:
DIJavaTests(TestCase)>>debug
DIJavaTests class(TestCase class)>>debug:
[ 
| vScroll testClass testResult |
vScroll := methodWidget vScrollValue.
testClass := testMethod methodClass.
testResult := [ testClass run: testMethod selector ]
	on: Halt
	do: [ :e | 
		aBoolean
			ifTrue: [ 
				[ self runTestForAMethodWithAnHalt: aMethod ] fork.
				shouldAnnounce := false.
				TestAsserter classForTestResult new ]
			ifFalse: [ 
				TestAsserter classForTestResult new
					addFailure: (testClass selector: testMethod selector);
					yourself ] ].
testResult updateResultsInHistory.
testSemaphoreForMethod signal.
(aBoolean and: [ testResult failures isEmpty not or: [ testResult errors isEmpty not ] ])
	ifTrue: [ testClass debug: testMethod selector ].
ClassesIconsCache removeKey: aMethod methodClass ifAbsent: [  ].
UIManager default defer: [ methodWidget vScrollValue: vScroll ] ] in PackageTreeNautilusUI(NautilusUI)>>runTestForAMethod:notifying:priority:
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
TestFailure: Assertion failed
3 March 2015 11:41:20.716148 am

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
NBCogit NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
https://github.com/pharo-project/pharo-vm.git Commit: 4a0d556150d478ff2de3c9624d2f18e6eaa3fa5c Date: 2014-12-18 18:42:53 +0100 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14893

Image: Pharo3.0 [Latest update: #30863]

DISTTests(TestAsserter)>>assert:
	Receiver: DISTTests>>#test_DeadMethods
	Arguments and temporary variables: 
		aBoolean: 	false
	Receiver's instance variables: 
		testSelector: 	#test_DeadMethods
		expectedFails: 	nil


[ :n | self assert: (DIModel allRules at: n) hasFailed = (res at: n) not ] in DISTTests(DIDSLTests)>>runAndReturnObjWithText:andSuccessResults:onProject:
	Receiver: DISTTests>>#test_DeadMethods
	Arguments and temporary variables: 
		dslText: 	'
AllMethods = STMethod with name:"*"

AllMethods must be invoked
'
		res: 	#(false)
		project: 	'TestProject'
		dicto: 	a DIDicto
		n: 	1
	Receiver's instance variables: 
		testSelector: 	#test_DeadMethods
		expectedFails: 	nil


Interval>>do:
	Receiver: (1 to: 1)
	Arguments and temporary variables: 
		aBlock: 	[ :n | self assert: (DIModel allRules at: n) hasFailed = (res at: n) no...etc...
		aValue: 	1
		index: 	1
		size: 	1
	Receiver's instance variables: 
		start: 	1
		stop: 	1
		step: 	1


DISTTests(DIDSLTests)>>runAndReturnObjWithText:andSuccessResults:onProject:
	Receiver: DISTTests>>#test_DeadMethods
	Arguments and temporary variables: 
		dslText: 	'
AllMethods = STMethod with name:"*"

AllMethods must be invoked
'
		res: 	#(false)
		project: 	'TestProject'
		dicto: 	a DIDicto
	Receiver's instance variables: 
		testSelector: 	#test_DeadMethods
		expectedFails: 	nil


DISTTests(DIDSLTests)>>runAndReturnObjWithText:andSuccessResults:
	Receiver: DISTTests>>#test_DeadMethods
	Arguments and temporary variables: 
		dslText: 	'
AllMethods = STMethod with name:"*"

AllMethods must be invoked
'
		res: 	#(false)
	Receiver's instance variables: 
		testSelector: 	#test_DeadMethods
		expectedFails: 	nil


DISTTests>>test_DeadMethods
	Receiver: DISTTests>>#test_DeadMethods
	Arguments and temporary variables: 
		dsl: 	'
AllMethods = STMethod with name:"*"

AllMethods must be invoked
'
		success: 	#(false)
	Receiver's instance variables: 
		testSelector: 	#test_DeadMethods
		expectedFails: 	nil


DISTTests(TestCase)>>performTest
	Receiver: DISTTests>>#test_DeadMethods
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test_DeadMethods
		expectedFails: 	nil


[ 
self setUp.
self performTest ] in DISTTests(TestCase)>>runCase
	Receiver: DISTTests>>#test_DeadMethods
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test_DeadMethods
		expectedFails: 	nil


BlockClosure>>ensure:
	Receiver: [ 
self setUp.
self performTest ]
	Arguments and temporary variables: 
		aBlock: 	[ 
self tearDown.
self cleanUpInstanceVariables ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	DISTTests(TestCase)>>runCase
		startpc: 	57
		numArgs: 	0


DISTTests(TestCase)>>runCase
	Receiver: DISTTests>>#test_DeadMethods
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test_DeadMethods
		expectedFails: 	nil


[ (self class selector: testSelector) runCase ] in DISTTests(TestCase)>>debug
	Receiver: DISTTests>>#test_DeadMethods
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test_DeadMethods
		expectedFails: 	nil


BlockClosure>>ensure:
	Receiver: [ (self class selector: testSelector) runCase ]
	Arguments and temporary variables: 
		aBlock: 	[ self classForTestResource resetResources: self resources ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	DISTTests(TestCase)>>debug
		startpc: 	45
		numArgs: 	0


DISTTests(TestCase)>>debug
	Receiver: DISTTests>>#test_DeadMethods
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test_DeadMethods
		expectedFails: 	nil


DISTTests class(TestCase class)>>debug:
	Receiver: DISTTests
	Arguments and temporary variables: 
		aSymbol: 	#test_DeadMethods
	Receiver's instance variables: 
		superclass: 	DIDSLTests
		methodDict: 	a MethodDictionary(#test_AdapterInterface->DISTTests>>#test_Adapter...etc...
		format: 	134
		layout: 	a FixedLayout
		instanceVariables: 	#()
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#DISTTests
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Dicto-var-tests'
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set(#test_AdapterTests #tes...etc...


[ 
| vScroll testClass testResult |
vScroll := methodWidget vScrollValue.
testClass := testMethod methodClass.
testResult := [ testClass run: testMethod selector ]
	on: Halt
	do: [ :e | 
		aBoolean
			ifTrue: [ 
				[ self runTestForAMethodWithAnHalt: aMethod ] fork.
				shouldAnnounce := false.
				TestAsserter classForTestResult new ]
			ifFalse: [ 
				TestAsserter classForTestResult new
					addFailure: (testClass selector: testMethod selector);
					yourself ] ].
testResult updateResultsInHistory.
testSemaphoreForMethod signal.
(aBoolean and: [ testResult failures isEmpty not or: [ testResult errors isEmpty not ] ])
	ifTrue: [ testClass debug: testMethod selector ].
ClassesIconsCache removeKey: aMethod methodClass ifAbsent: [  ].
UIManager default defer: [ methodWidget vScrollValue: vScroll ] ] in PackageTreeNautilusUI(NautilusUI)>>runTestForAMethod:notifying:priority:
	Receiver: a PackageTreeNautilusUI
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a CategoryWidget a MethodWidget a NautilusWindow(...etc...
		model: 	a PackageTreeNautilus
		window: 	a NautilusWindow(542638080)
		hierarchyClass: 	DITestGroup
		cachedHierarchy: 	a SortHierarchically
		sourceTextArea: 	a PluggableTextMorphWithLimits(303038464)
		groupsSelection: 	a Dictionary()
		packagesSelection: 	a Dictionary(var-tests->true )
		classesSelection: 	a Dictionary(DISTTests->true )
		list: 	a MorphTreeMorph(273940480)
		list2: 	a PluggableIconListMorph(454295552)
		sourceCodePanel: 	a PanelMorph(183500800)
		commentTextArea: 	nil
		currentDisplayChoice: 	#SourceCode
		sourceTextAreaLimit: 	350
		sourceCodeContainer: 	a PanelMorph(584843264)
		list2Elements: 	{DIDSLTests. DIJavaTests. DIPHPTests. DISTTests}
		listElements: 	nil
		shouldUpdateTitle: 	true
		testSemaphore: 	a Semaphore()
		sourceTextAreas: 	an OrderedCollection(a PluggableTextMorphWithLimits(303038464)...etc...
		multipleMethodsEditor: 	a MultipleMethodsEditor(286261248)
		contentSelection: 	nil
		acceptor: 	a ClassOrMethodDefinitionAcceptor
		classifier: 	a MethodClassifier
		categoryWidget: 	a CategoryWidget
		methodWidget: 	a MethodWidget
		packagePattern: 	a RxMatcher
		searchWidget: 	a SearchMorph(866648064)


[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ 
| vScroll testClass testResult |
vScroll := methodWidget vScrollValue.
testClass := tes...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	PackageTreeNautilusUI(NautilusUI)>>runTestForAMethod:notifying:pr...etc...
		startpc: 	236
		numArgs: 	0



--- The full stack ---
DISTTests(TestAsserter)>>assert:
[ :n | self assert: (DIModel allRules at: n) hasFailed = (res at: n) not ] in DISTTests(DIDSLTests)>>runAndReturnObjWithText:andSuccessResults:onProject:
Interval>>do:
DISTTests(DIDSLTests)>>runAndReturnObjWithText:andSuccessResults:onProject:
DISTTests(DIDSLTests)>>runAndReturnObjWithText:andSuccessResults:
DISTTests>>test_DeadMethods
DISTTests(TestCase)>>performTest
[ 
self setUp.
self performTest ] in DISTTests(TestCase)>>runCase
BlockClosure>>ensure:
DISTTests(TestCase)>>runCase
[ (self class selector: testSelector) runCase ] in DISTTests(TestCase)>>debug
BlockClosure>>ensure:
DISTTests(TestCase)>>debug
DISTTests class(TestCase class)>>debug:
[ 
| vScroll testClass testResult |
vScroll := methodWidget vScrollValue.
testClass := testMethod methodClass.
testResult := [ testClass run: testMethod selector ]
	on: Halt
	do: [ :e | 
		aBoolean
			ifTrue: [ 
				[ self runTestForAMethodWithAnHalt: aMethod ] fork.
				shouldAnnounce := false.
				TestAsserter classForTestResult new ]
			ifFalse: [ 
				TestAsserter classForTestResult new
					addFailure: (testClass selector: testMethod selector);
					yourself ] ].
testResult updateResultsInHistory.
testSemaphoreForMethod signal.
(aBoolean and: [ testResult failures isEmpty not or: [ testResult errors isEmpty not ] ])
	ifTrue: [ testClass debug: testMethod selector ].
ClassesIconsCache removeKey: aMethod methodClass ifAbsent: [  ].
UIManager default defer: [ methodWidget vScrollValue: vScroll ] ] in PackageTreeNautilusUI(NautilusUI)>>runTestForAMethod:notifying:priority:
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
User Interrupt
3 March 2015 11:55:23.263654 am

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
NBCogit NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
https://github.com/pharo-project/pharo-vm.git Commit: 4a0d556150d478ff2de3c9624d2f18e6eaa3fa5c Date: 2014-12-18 18:42:53 +0100 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14893

Image: Pharo3.0 [Latest update: #30863]

Dictionary>>scanFor:
	Receiver: a Dictionary('<'->'/' '>'->'/' )
	Arguments and temporary variables: 
		anObject: 	'<'
		element: 	nil
		start: 	nil
		finish: 	nil
	Receiver's instance variables: 
		tally: 	2
		array: 	{nil. nil. '>'->'/'. '<'->'/'. nil}



--- The full stack ---
Dictionary>>scanFor:
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
User Interrupt
3 March 2015 11:55:24.156699 am

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
NBCogit NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
https://github.com/pharo-project/pharo-vm.git Commit: 4a0d556150d478ff2de3c9624d2f18e6eaa3fa5c Date: 2014-12-18 18:42:53 +0100 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14893

Image: Pharo3.0 [Latest update: #30863]

LogicalFont>>widthAndKernedWidthOfLeft:right:into:
	Receiver: a LogicalFont
 familyName: Source Sans Pro
 emphasis: nil
 pointSize: 10
 realFont: FreeTy...etc...
	Arguments and temporary variables: 
		leftCharacter: 	Character space
		rightCharacterOrNil: 	$'
		aTwoElementArray: 	#(nil nil)
	Receiver's instance variables: 
		realFont: 	FreeTypeFont('Source Sans Pro' 'Regular' 10)
		emphasis: 	nil
		familyName: 	'Source Sans Pro'
		fallbackFamilyNames: 	nil
		pointSize: 	10
		stretchValue: 	5
		weightValue: 	400
		slantValue: 	0
		derivatives: 	nil
		boldDerivative: 	a LogicalFont
 familyName: Source Sans Pro
 emphasis: nil
 poin...etc...
		italicDerivative: 	a LogicalFont
 familyName: Source Sans Pro
 emphasis: nil
 po...etc...
		boldItalicDerivative: 	nil


BitBltDisplayScanner(CharacterScanner)>>scanKernableByteCharactersFrom:to:in:rightX:
	Receiver: a BitBltDisplayScanner
	Arguments and temporary variables: 
		startIndex: 	101
		stopIndex: 	101
		sourceString: 	'"protocol: as yet unclassified"
_printError: subrule
|out elemen...etc...
		rightX: 	10000455
		ascii: 	33
		nextDestX: 	nil
		char: 	Character space
		floatDestX: 	617.2132263183594
		widthAndKernedWidth: 	#(nil nil)
		nextCharOrNil: 	$'
		atEndOfRun: 	true
	Receiver's instance variables: 
		destX: 	617.2132263183594
		lastIndex: 	101
		xTable: 	nil
		map: 	nil
		destY: 	188
		stopConditions: 	#(nil #embeddedObject nil nil nil nil nil nil nil #tab #cr nil ...etc...
		text: 	a Text for '"protocol: as yet unclassified"
_printError: subrule
|out ele...etc...
		textStyle: 	a TextStyle Source Sans Pro
		alignment: 	0
		leftMargin: 	456
		rightMargin: 	10000455
		font: 	a LogicalFont
 familyName: Source Sans Pro
 emphasis: nil
 pointSize: 10
...etc...
		line: 	a TextLine 69 to: 107
		runStopIndex: 	101
		spaceCount: 	0
		spaceWidth: 	2.626007080078125
		emphasisCode: 	0
		kern: 	0
		indentationLevel: 	0
		wantsColumnBreaks: 	nil
		pendingKernX: 	0
		lineY: 	186
		foregroundColor: 	Color black
		backgroundColor: 	Color transparent
		defaultTextColor: 	Color black
		paragraphColor: 	nil
		morphicOffset: 	(456@129)
		ignoreColorChanges: 	false
		lastDisplayableIndex: 	100
		stopConditionsMustBeReset: 	false
		bitBlt: 	a GrafPort
		fillBlt: 	nil


FreeTypeFont>>scanByteCharactersFrom:to:in:with:rightX:
	Receiver: FreeTypeFont('Source Sans Pro' 'Regular' 10)
	Arguments and temporary variables: 
		startIndex: 	101
		stopIndex: 	101
		aByteString: 	'"protocol: as yet unclassified"
_printError: subrule
|out element...etc...
		aCharacterScanner: 	a BitBltDisplayScanner
		rightX: 	10000455
	Receiver's instance variables: 
		face: 	a FreeTypeFace<0x85964E8>[Source Sans Pro Regular]
		pointSize: 	10
		simulatedEmphasis: 	nil
		pixelSize: 	13
		widthAndKernedWidthCache: 	a Dictionary($"->a Dictionary($G->#(5.525009155273437...etc...
		cachedHeight: 	17
		cachedAscent: 	13
		cachedDescent: 	4
		subPixelPositioned: 	true
		symbolFont: 	false


LogicalFont>>scanByteCharactersFrom:to:in:with:rightX:
	Receiver: a LogicalFont
 familyName: Source Sans Pro
 emphasis: nil
 pointSize: 10
 realFont: FreeTy...etc...
	Arguments and temporary variables: 
		startIndex: 	101
		stopIndex: 	101
		aByteString: 	'"protocol: as yet unclassified"
_printError: subrule
|out element...etc...
		aCharacterScanner: 	a BitBltDisplayScanner
		rightX: 	10000455
	Receiver's instance variables: 
		realFont: 	FreeTypeFont('Source Sans Pro' 'Regular' 10)
		emphasis: 	nil
		familyName: 	'Source Sans Pro'
		fallbackFamilyNames: 	nil
		pointSize: 	10
		stretchValue: 	5
		weightValue: 	400
		slantValue: 	0
		derivatives: 	nil
		boldDerivative: 	a LogicalFont
 familyName: Source Sans Pro
 emphasis: nil
 poin...etc...
		italicDerivative: 	a LogicalFont
 familyName: Source Sans Pro
 emphasis: nil
 po...etc...
		boldItalicDerivative: 	nil


ByteString>>scanCharactersFrom:to:with:rightX:font:
	Receiver: '"protocol: as yet unclassified"
_printError: subrule
|out elements|
(subrule hasFailed) i...etc...
	Arguments and temporary variables: 
		startIndex: 	101
		stopIndex: 	101
		aCharacterScanner: 	a BitBltDisplayScanner
		rightX: 	10000455
		aFont: 	a LogicalFont
 familyName: Source Sans Pro
 emphasis: nil
 pointSize: 10...etc...
	Receiver's instance variables: 
'"protocol: as yet unclassified"
_printError: subrule
|out elements|
(subrule hasFailed) i...etc...

BitBltDisplayScanner(CharacterScanner)>>scanCharactersFrom:to:in:rightX:
	Receiver: a BitBltDisplayScanner
	Arguments and temporary variables: 
		startIndex: 	101
		stopIndex: 	101
		sourceString: 	'"protocol: as yet unclassified"
_printError: subrule
|out elemen...etc...
		rightX: 	10000455
	Receiver's instance variables: 
		destX: 	617.2132263183594
		lastIndex: 	101
		xTable: 	nil
		map: 	nil
		destY: 	188
		stopConditions: 	#(nil #embeddedObject nil nil nil nil nil nil nil #tab #cr nil ...etc...
		text: 	a Text for '"protocol: as yet unclassified"
_printError: subrule
|out ele...etc...
		textStyle: 	a TextStyle Source Sans Pro
		alignment: 	0
		leftMargin: 	456
		rightMargin: 	10000455
		font: 	a LogicalFont
 familyName: Source Sans Pro
 emphasis: nil
 pointSize: 10
...etc...
		line: 	a TextLine 69 to: 107
		runStopIndex: 	101
		spaceCount: 	0
		spaceWidth: 	2.626007080078125
		emphasisCode: 	0
		kern: 	0
		indentationLevel: 	0
		wantsColumnBreaks: 	nil
		pendingKernX: 	0
		lineY: 	186
		foregroundColor: 	Color black
		backgroundColor: 	Color transparent
		defaultTextColor: 	Color black
		paragraphColor: 	nil
		morphicOffset: 	(456@129)
		ignoreColorChanges: 	false
		lastDisplayableIndex: 	100
		stopConditionsMustBeReset: 	false
		bitBlt: 	a GrafPort
		fillBlt: 	nil


BitBltDisplayScanner(DisplayScanner)>>displayLine:offset:leftInRun:
	Receiver: a BitBltDisplayScanner
	Arguments and temporary variables: 
		textLine: 	a TextLine 69 to: 107
		offset: 	(456@129)
		leftInRun: 	0
		stopCondition: 	#endOfRun
		nowLeftInRun: 	1
		startIndex: 	101
		string: 	'"protocol: as yet unclassified"
_printError: subrule
|out elements|
(s...etc...
		lastPos: 	(617.2132263183594@188)
		lineHeight: 	19
		stop: 	false
	Receiver's instance variables: 
		destX: 	617.2132263183594
		lastIndex: 	101
		xTable: 	nil
		map: 	nil
		destY: 	188
		stopConditions: 	#(nil #embeddedObject nil nil nil nil nil nil nil #tab #cr nil ...etc...
		text: 	a Text for '"protocol: as yet unclassified"
_printError: subrule
|out ele...etc...
		textStyle: 	a TextStyle Source Sans Pro
		alignment: 	0
		leftMargin: 	456
		rightMargin: 	10000455
		font: 	a LogicalFont
 familyName: Source Sans Pro
 emphasis: nil
 pointSize: 10
...etc...
		line: 	a TextLine 69 to: 107
		runStopIndex: 	101
		spaceCount: 	0
		spaceWidth: 	2.626007080078125
		emphasisCode: 	0
		kern: 	0
		indentationLevel: 	0
		wantsColumnBreaks: 	nil
		pendingKernX: 	0
		lineY: 	186
		foregroundColor: 	Color black
		backgroundColor: 	Color transparent
		defaultTextColor: 	Color black
		paragraphColor: 	nil
		morphicOffset: 	(456@129)
		ignoreColorChanges: 	false
		lastDisplayableIndex: 	100
		stopConditionsMustBeReset: 	false
		bitBlt: 	a GrafPort
		fillBlt: 	nil


Paragraph>>displayOn:using:at:
	Receiver: a Paragraph
	Arguments and temporary variables: 
		aCanvas: 	a FormCanvas on: DisplayScreen(1535x876x32)
		displayScanner: 	a BitBltDisplayScanner
		somePosition: 	(456@129)
		visibleRectangle: 	(0@0) corner: (336@420)
		offset: 	(456@129)
		leftInRun: 	0
		line: 	a TextLine 69 to: 107
		i: 	4
	Receiver's instance variables: 
		text: 	a Text for '"protocol: as yet unclassified"
_printError: subrule
|out ele...etc...
		textStyle: 	a TextStyle Source Sans Pro
		firstCharacterIndex: 	1
		container: 	(0@0) corner: (336@9999999)
		lines: 	an Array(a TextLine 1 to: 32 a TextLine 33 to: 53 a TextLine 54 to: 68 a...etc...
		positionWhenComposed: 	(0@0)
		offsetToEnd: 	415
		maxRightX: 	336
		selectionStart: 	a CharacterBlock with index 108 and character Character cr and ...etc...
		selectionStop: 	a CharacterBlock with index 108 and character Character cr and r...etc...
		wantsColumnBreaks: 	false
		focused: 	true
		caretRect: 	(0.0@0) corner: (1.0@19)
		showCaret: 	true
		findReplaceSelectionRegex: 	nil
		secondarySelection: 	nil
		extraSelectionBlocks: 	an Array(a ParagraphSelectionBlock)
		refreshExtraSelection: 	false
		composer: 	a TextComposer


FormCanvas>>paragraph:bounds:color:
	Receiver: a FormCanvas on: DisplayScreen(1535x876x32)
	Arguments and temporary variables: 
		para: 	a Paragraph
		bounds: 	(0@0) corner: (336@420)
		c: 	Color black
		scanner: 	a BitBltDisplayScanner
	Receiver's instance variables: 
		origin: 	(456@129)
		clipRect: 	(453@129) corner: (951@815)
		form: 	DisplayScreen(1535x876x32)
		port: 	a GrafPort


TextMorphForEditView(TextMorph)>>drawOn:
	Receiver: a TextMorphForEditView(517996544)
	Arguments and temporary variables: 
		aCanvas: 	a FormCanvas on: DisplayScreen(1535x876x32)
		fauxBounds: 	(0@0) corner: (336@420)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (336@420)
		owner: 	a TransformMorph(462159872)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (336@420)
		color: 	Color black
		extension: 	a MorphExtension (554696704) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Source Sans Pro
		text: 	a Text for '"protocol: as yet unclassified"
_printError: subrule
|out ele...etc...
		wrapFlag: 	false
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		defaultColor: 	Color black
		editView: 	a PluggableTextMorph(457441280)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	(Color r: 0.686 g: 0.835 b: 0.979 alpha: 0.498)


TextMorphForEditView>>drawOn:
	Receiver: a TextMorphForEditView(517996544)
	Arguments and temporary variables: 
		aCanvas: 	a FormCanvas on: DisplayScreen(1535x876x32)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (336@420)
		owner: 	a TransformMorph(462159872)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (336@420)
		color: 	Color black
		extension: 	a MorphExtension (554696704) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Source Sans Pro
		text: 	a Text for '"protocol: as yet unclassified"
_printError: subrule
|out ele...etc...
		wrapFlag: 	false
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		defaultColor: 	Color black
		editView: 	a PluggableTextMorph(457441280)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	(Color r: 0.686 g: 0.835 b: 0.979 alpha: 0.498)


FormCanvas(Canvas)>>draw:
	Receiver: a FormCanvas on: DisplayScreen(1535x876x32)
	Arguments and temporary variables: 
		anObject: 	a TextMorphForEditView(517996544)
	Receiver's instance variables: 
		origin: 	(456@129)
		clipRect: 	(453@129) corner: (951@815)
		form: 	DisplayScreen(1535x876x32)
		port: 	a GrafPort


FormCanvas(Canvas)>>drawMorph:
	Receiver: a FormCanvas on: DisplayScreen(1535x876x32)
	Arguments and temporary variables: 
		aMorph: 	a TextMorphForEditView(517996544)
	Receiver's instance variables: 
		origin: 	(456@129)
		clipRect: 	(453@129) corner: (951@815)
		form: 	DisplayScreen(1535x876x32)
		port: 	a GrafPort


[ 
(aCanvas isVisible: self bounds)
	ifTrue: [ aCanvas drawMorph: self ].
self drawSubmorphsOn: aCanvas.
self drawDropHighlightOn: aCanvas.
self drawMouseDownHighlightOn: aCanvas ] in [ 
"Note: At some point we should generalize this into some sort of 
		multi-canvas so that we can cross-optimize some drawing operations."
"Pass 1: Draw eventual drop-shadow"
self hasDropShadow
	ifTrue: [ self drawDropShadowOn: aCanvas ].
(self hasRolloverBorder and: [ (aCanvas seesNothingOutside: self bounds) not ])
	ifTrue: [ self drawRolloverBorderOn: aCanvas ].	"Pass 2: Draw receiver itself"
aCanvas
	roundCornersOf: self
	during: [ 
		(aCanvas isVisible: self bounds)
			ifTrue: [ aCanvas drawMorph: self ].
		self drawSubmorphsOn: aCanvas.
		self drawDropHighlightOn: aCanvas.
		self drawMouseDownHighlightOn: aCanvas ] ] in TextMorphForEditView(Morph)>>fullDrawOn:
	Receiver: a TextMorphForEditView(517996544)
	Arguments and temporary variables: 
		aCanvas: 	a FormCanvas on: DisplayScreen(1535x876x32)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (336@420)
		owner: 	a TransformMorph(462159872)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (336@420)
		color: 	Color black
		extension: 	a MorphExtension (554696704) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Source Sans Pro
		text: 	a Text for '"protocol: as yet unclassified"
_printError: subrule
|out ele...etc...
		wrapFlag: 	false
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		defaultColor: 	Color black
		editView: 	a PluggableTextMorph(457441280)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	(Color r: 0.686 g: 0.835 b: 0.979 alpha: 0.498)


FormCanvas>>roundCornersOf:in:during:
	Receiver: a FormCanvas on: DisplayScreen(1535x876x32)
	Arguments and temporary variables: 
		aMorph: 	a TextMorphForEditView(517996544)
		bounds: 	(0@0) corner: (336@420)
		aBlock: 	[ 
(aCanvas isVisible: self bounds)
	ifTrue: [ aCanvas drawMorph: self ...etc...
	Receiver's instance variables: 
		origin: 	(456@129)
		clipRect: 	(453@129) corner: (951@815)
		form: 	DisplayScreen(1535x876x32)
		port: 	a GrafPort


FormCanvas(Canvas)>>roundCornersOf:during:
	Receiver: a FormCanvas on: DisplayScreen(1535x876x32)
	Arguments and temporary variables: 
		aMorph: 	a TextMorphForEditView(517996544)
		aBlock: 	[ 
(aCanvas isVisible: self bounds)
	ifTrue: [ aCanvas drawMorph: self ...etc...
	Receiver's instance variables: 
		origin: 	(456@129)
		clipRect: 	(453@129) corner: (951@815)
		form: 	DisplayScreen(1535x876x32)
		port: 	a GrafPort


[ 
"Note: At some point we should generalize this into some sort of 
		multi-canvas so that we can cross-optimize some drawing operations."
"Pass 1: Draw eventual drop-shadow"
self hasDropShadow
	ifTrue: [ self drawDropShadowOn: aCanvas ].
(self hasRolloverBorder and: [ (aCanvas seesNothingOutside: self bounds) not ])
	ifTrue: [ self drawRolloverBorderOn: aCanvas ].	"Pass 2: Draw receiver itself"
aCanvas
	roundCornersOf: self
	during: [ 
		(aCanvas isVisible: self bounds)
			ifTrue: [ aCanvas drawMorph: self ].
		self drawSubmorphsOn: aCanvas.
		self drawDropHighlightOn: aCanvas.
		self drawMouseDownHighlightOn: aCanvas ] ] in TextMorphForEditView(Morph)>>fullDrawOn:
	Receiver: a TextMorphForEditView(517996544)
	Arguments and temporary variables: 
		aCanvas: 	a FormCanvas on: DisplayScreen(1535x876x32)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (336@420)
		owner: 	a TransformMorph(462159872)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (336@420)
		color: 	Color black
		extension: 	a MorphExtension (554696704) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Source Sans Pro
		text: 	a Text for '"protocol: as yet unclassified"
_printError: subrule
|out ele...etc...
		wrapFlag: 	false
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		defaultColor: 	Color black
		editView: 	a PluggableTextMorph(457441280)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	(Color r: 0.686 g: 0.835 b: 0.979 alpha: 0.498)


BlockClosure>>on:do:
	Receiver: [ 
"Note: At some point we should generalize this into some sort of 
		multi-canvas so tha...etc...
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :err | 
self setProperty: #errorOnDraw toValue: true.
self set...etc...
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	TextMorphForEditView(Morph)>>fullDrawOn:
		startpc: 	142
		numArgs: 	0


TextMorphForEditView(Morph)>>fullDrawOn:
	Receiver: a TextMorphForEditView(517996544)
	Arguments and temporary variables: 
		aCanvas: 	a FormCanvas on: DisplayScreen(1535x876x32)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (336@420)
		owner: 	a TransformMorph(462159872)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (336@420)
		color: 	Color black
		extension: 	a MorphExtension (554696704) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Source Sans Pro
		text: 	a Text for '"protocol: as yet unclassified"
_printError: subrule
|out ele...etc...
		wrapFlag: 	false
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		defaultColor: 	Color black
		editView: 	a PluggableTextMorph(457441280)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	(Color r: 0.686 g: 0.835 b: 0.979 alpha: 0.498)


FormCanvas(Canvas)>>fullDraw:
	Receiver: a FormCanvas on: DisplayScreen(1535x876x32)
	Arguments and temporary variables: 
		anObject: 	a TextMorphForEditView(517996544)
	Receiver's instance variables: 
		origin: 	(456@129)
		clipRect: 	(453@129) corner: (951@815)
		form: 	DisplayScreen(1535x876x32)
		port: 	a GrafPort


FormCanvas(Canvas)>>fullDrawMorph:
	Receiver: a FormCanvas on: DisplayScreen(1535x876x32)
	Arguments and temporary variables: 
		aMorph: 	a TextMorphForEditView(517996544)
	Receiver's instance variables: 
		origin: 	(456@129)
		clipRect: 	(453@129) corner: (951@815)
		form: 	DisplayScreen(1535x876x32)
		port: 	a GrafPort


[ :m | myCanvas fullDrawMorph: m ] in [ :myCanvas | 
(self angle ~= 0.0 or: [ self scale ~= 1.0 ])
	ifTrue: [ FreeTypeSettings current forceNonSubPixelDuring: [ submorphs reverseDo: [ :m | myCanvas fullDrawMorph: m ] ] ]
	ifFalse: [ submorphs reverseDo: [ :m | myCanvas fullDrawMorph: m ] ] ] in TransformMorph>>drawSubmorphsOn:
	Receiver: a TransformMorph(462159872)
	Arguments and temporary variables: 
		aCanvas: 	a FormCanvas on: DisplayScreen(1535x876x32)
		myCanvas: 	a FormCanvas on: DisplayScreen(1535x876x32)
		m: 	a TextMorphForEditView(517996544)
	Receiver's instance variables: 
		bounds: 	(453@129) corner: (951@816)
		owner: 	a PluggableTextMorph(457441280)
		submorphs: 	an Array(a TextMorphForEditView(517996544))
		fullBounds: 	(453@129) corner: (951@816)
		color: 	Color transparent
		extension: 	a MorphExtension (496238592)
		transform: 	a MorphicTransform(angle = 0.0; scale = 1.0; offset = (-456@ -129))
		smoothing: 	1
		localBounds: 	(0@0) corner: (336@420)


Array(SequenceableCollection)>>reverseDo:
	Receiver: an Array(a TextMorphForEditView(517996544))
	Arguments and temporary variables: 
		aBlock: 	[ :m | myCanvas fullDrawMorph: m ]
		index: 	1
	Receiver's instance variables: 
an Array(a TextMorphForEditView(517996544))

[ :myCanvas | 
(self angle ~= 0.0 or: [ self scale ~= 1.0 ])
	ifTrue: [ FreeTypeSettings current forceNonSubPixelDuring: [ submorphs reverseDo: [ :m | myCanvas fullDrawMorph: m ] ] ]
	ifFalse: [ submorphs reverseDo: [ :m | myCanvas fullDrawMorph: m ] ] ] in TransformMorph>>drawSubmorphsOn:
	Receiver: a TransformMorph(462159872)
	Arguments and temporary variables: 
		aCanvas: 	a FormCanvas on: DisplayScreen(1535x876x32)
		myCanvas: 	a FormCanvas on: DisplayScreen(1535x876x32)
	Receiver's instance variables: 
		bounds: 	(453@129) corner: (951@816)
		owner: 	a PluggableTextMorph(457441280)
		submorphs: 	an Array(a TextMorphForEditView(517996544))
		fullBounds: 	(453@129) corner: (951@816)
		color: 	Color transparent
		extension: 	a MorphExtension (496238592)
		transform: 	a MorphicTransform(angle = 0.0; scale = 1.0; offset = (-456@ -129))
		smoothing: 	1
		localBounds: 	(0@0) corner: (336@420)


FormCanvas>>transformBy:clippingTo:during:smoothing:
	Receiver: a FormCanvas on: DisplayScreen(1535x876x32)
	Arguments and temporary variables: 
		aDisplayTransform: 	a MorphicTransform(angle = 0.0; scale = 1.0; offset = (-456@...etc...
		aClipRect: 	(453@129) corner: (951@815)
		aBlock: 	[ :myCanvas | 
(self angle ~= 0.0 or: [ self scale ~= 1.0 ])
	ifTrue: [...etc...
		cellSize: 	1
		innerRect: 	nil
		patchRect: 	nil
		sourceQuad: 	nil
		warp: 	nil
		start: 	nil
		subCanvas: 	nil
		rule: 	nil
	Receiver's instance variables: 
		origin: 	(0@0)
		clipRect: 	(453@128) corner: (951@815)
		form: 	DisplayScreen(1535x876x32)
		port: 	a GrafPort


TransformMorph>>drawSubmorphsOn:
	Receiver: a TransformMorph(462159872)
	Arguments and temporary variables: 
		aCanvas: 	a FormCanvas on: DisplayScreen(1535x876x32)
	Receiver's instance variables: 
		bounds: 	(453@129) corner: (951@816)
		owner: 	a PluggableTextMorph(457441280)
		submorphs: 	an Array(a TextMorphForEditView(517996544))
		fullBounds: 	(453@129) corner: (951@816)
		color: 	Color transparent
		extension: 	a MorphExtension (496238592)
		transform: 	a MorphicTransform(angle = 0.0; scale = 1.0; offset = (-456@ -129))
		smoothing: 	1
		localBounds: 	(0@0) corner: (336@420)


[ 
(aCanvas isVisible: self bounds)
	ifTrue: [ aCanvas drawMorph: self ].
self drawSubmorphsOn: aCanvas.
self drawDropHighlightOn: aCanvas.
self drawMouseDownHighlightOn: aCanvas ] in [ 
"Note: At some point we should generalize this into some sort of 
		multi-canvas so that we can cross-optimize some drawing operations."
"Pass 1: Draw eventual drop-shadow"
self hasDropShadow
	ifTrue: [ self drawDropShadowOn: aCanvas ].
(self hasRolloverBorder and: [ (aCanvas seesNothingOutside: self bounds) not ])
	ifTrue: [ self drawRolloverBorderOn: aCanvas ].	"Pass 2: Draw receiver itself"
aCanvas
	roundCornersOf: self
	during: [ 
		(aCanvas isVisible: self bounds)
			ifTrue: [ aCanvas drawMorph: self ].
		self drawSubmorphsOn: aCanvas.
		self drawDropHighlightOn: aCanvas.
		self drawMouseDownHighlightOn: aCanvas ] ] in TransformMorph(Morph)>>fullDrawOn:
	Receiver: a TransformMorph(462159872)
	Arguments and temporary variables: 
		aCanvas: 	a FormCanvas on: DisplayScreen(1535x876x32)
	Receiver's instance variables: 
		bounds: 	(453@129) corner: (951@816)
		owner: 	a PluggableTextMorph(457441280)
		submorphs: 	an Array(a TextMorphForEditView(517996544))
		fullBounds: 	(453@129) corner: (951@816)
		color: 	Color transparent
		extension: 	a MorphExtension (496238592)
		transform: 	a MorphicTransform(angle = 0.0; scale = 1.0; offset = (-456@ -129))
		smoothing: 	1
		localBounds: 	(0@0) corner: (336@420)


FormCanvas>>roundCornersOf:in:during:
	Receiver: a FormCanvas on: DisplayScreen(1535x876x32)
	Arguments and temporary variables: 
		aMorph: 	a TransformMorph(462159872)
		bounds: 	(453@129) corner: (951@816)
		aBlock: 	[ 
(aCanvas isVisible: self bounds)
	ifTrue: [ aCanvas drawMorph: self ...etc...
	Receiver's instance variables: 
		origin: 	(0@0)
		clipRect: 	(453@128) corner: (951@815)
		form: 	DisplayScreen(1535x876x32)
		port: 	a GrafPort


FormCanvas(Canvas)>>roundCornersOf:during:
	Receiver: a FormCanvas on: DisplayScreen(1535x876x32)
	Arguments and temporary variables: 
		aMorph: 	a TransformMorph(462159872)
		aBlock: 	[ 
(aCanvas isVisible: self bounds)
	ifTrue: [ aCanvas drawMorph: self ...etc...
	Receiver's instance variables: 
		origin: 	(0@0)
		clipRect: 	(453@128) corner: (951@815)
		form: 	DisplayScreen(1535x876x32)
		port: 	a GrafPort


[ 
"Note: At some point we should generalize this into some sort of 
		multi-canvas so that we can cross-optimize some drawing operations."
"Pass 1: Draw eventual drop-shadow"
self hasDropShadow
	ifTrue: [ self drawDropShadowOn: aCanvas ].
(self hasRolloverBorder and: [ (aCanvas seesNothingOutside: self bounds) not ])
	ifTrue: [ self drawRolloverBorderOn: aCanvas ].	"Pass 2: Draw receiver itself"
aCanvas
	roundCornersOf: self
	during: [ 
		(aCanvas isVisible: self bounds)
			ifTrue: [ aCanvas drawMorph: self ].
		self drawSubmorphsOn: aCanvas.
		self drawDropHighlightOn: aCanvas.
		self drawMouseDownHighlightOn: aCanvas ] ] in TransformMorph(Morph)>>fullDrawOn:
	Receiver: a TransformMorph(462159872)
	Arguments and temporary variables: 
		aCanvas: 	a FormCanvas on: DisplayScreen(1535x876x32)
	Receiver's instance variables: 
		bounds: 	(453@129) corner: (951@816)
		owner: 	a PluggableTextMorph(457441280)
		submorphs: 	an Array(a TextMorphForEditView(517996544))
		fullBounds: 	(453@129) corner: (951@816)
		color: 	Color transparent
		extension: 	a MorphExtension (496238592)
		transform: 	a MorphicTransform(angle = 0.0; scale = 1.0; offset = (-456@ -129))
		smoothing: 	1
		localBounds: 	(0@0) corner: (336@420)


BlockClosure>>on:do:
	Receiver: [ 
"Note: At some point we should generalize this into some sort of 
		multi-canvas so tha...etc...
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :err | 
self setProperty: #errorOnDraw toValue: true.
self set...etc...
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	TransformMorph(Morph)>>fullDrawOn:
		startpc: 	142
		numArgs: 	0


TransformMorph(Morph)>>fullDrawOn:
	Receiver: a TransformMorph(462159872)
	Arguments and temporary variables: 
		aCanvas: 	a FormCanvas on: DisplayScreen(1535x876x32)
	Receiver's instance variables: 
		bounds: 	(453@129) corner: (951@816)
		owner: 	a PluggableTextMorph(457441280)
		submorphs: 	an Array(a TextMorphForEditView(517996544))
		fullBounds: 	(453@129) corner: (951@816)
		color: 	Color transparent
		extension: 	a MorphExtension (496238592)
		transform: 	a MorphicTransform(angle = 0.0; scale = 1.0; offset = (-456@ -129))
		smoothing: 	1
		localBounds: 	(0@0) corner: (336@420)


FormCanvas(Canvas)>>fullDraw:
	Receiver: a FormCanvas on: DisplayScreen(1535x876x32)
	Arguments and temporary variables: 
		anObject: 	a TransformMorph(462159872)
	Receiver's instance variables: 
		origin: 	(0@0)
		clipRect: 	(453@128) corner: (951@815)
		form: 	DisplayScreen(1535x876x32)
		port: 	a GrafPort


FormCanvas(Canvas)>>fullDrawMorph:
	Receiver: a FormCanvas on: DisplayScreen(1535x876x32)
	Arguments and temporary variables: 
		aMorph: 	a TransformMorph(462159872)
	Receiver's instance variables: 
		origin: 	(0@0)
		clipRect: 	(453@128) corner: (951@815)
		form: 	DisplayScreen(1535x876x32)
		port: 	a GrafPort


[ :m | canvas fullDrawMorph: m ] in [ :canvas | submorphs reverseDo: [ :m | canvas fullDrawMorph: m ] ] in PluggableTextMorph(Morph)>>drawSubmorphsOn:
	Receiver: a PluggableTextMorph(457441280)
	Arguments and temporary variables: 
		aCanvas: 	a FormCanvas on: DisplayScreen(1535x876x32)
		drawBlock: 	[ :canvas | submorphs reverseDo: [ :m | canvas fullDrawMorph: m ] ]
		canvas: 	a FormCanvas on: DisplayScreen(1535x876x32)
		m: 	a TransformMorph(462159872)
	Receiver's instance variables: 
		bounds: 	(453.0@129.0) corner: (951.0@816.0)
		owner: 	a DiffMorph(799801344)
		submorphs: 	an Array(a TransformMorph(462159872))
		fullBounds: 	(453@129) corner: (951@816)
		color: 	(Color r: 0.96 g: 0.96 b: 0.96 alpha: 1.0)
		extension: 	a MorphExtension (496762880) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	0
		borderColor: 	#inset
		model: 	a DiffMorph(799801344)
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(503316480)
		scroller: 	a TransformMorph(462159872)
		getMenuSelector: 	nil
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(1034682368)
		textMorph: 	a TextMorphForEditView(517996544)
		getTextSelector: 	nil
		setTextSelector: 	nil
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 0)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	false
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection(a TextHighlightByBounds a TextHighlightByBound...etc...
		acceptOnFocusChange: 	nil
		selectionColor: 	(Color r: 0.686 g: 0.835 b: 0.979 alpha: 0.498)
		alwaysAccept: 	nil
		changedAction: 	nil
		doubleClickSelector: 	nil
		setSelectionSelector: 	nil


Array(SequenceableCollection)>>reverseDo:
	Receiver: an Array(a TransformMorph(462159872))
	Arguments and temporary variables: 
		aBlock: 	[ :m | canvas fullDrawMorph: m ]
		index: 	1
	Receiver's instance variables: 
an Array(a TransformMorph(462159872))

[ :canvas | submorphs reverseDo: [ :m | canvas fullDrawMorph: m ] ] in PluggableTextMorph(Morph)>>drawSubmorphsOn:
	Receiver: a PluggableTextMorph(457441280)
	Arguments and temporary variables: 
		aCanvas: 	a FormCanvas on: DisplayScreen(1535x876x32)
		drawBlock: 	[ :canvas | submorphs reverseDo: [ :m | canvas fullDrawMorph: m ] ]
		canvas: 	a FormCanvas on: DisplayScreen(1535x876x32)
	Receiver's instance variables: 
		bounds: 	(453.0@129.0) corner: (951.0@816.0)
		owner: 	a DiffMorph(799801344)
		submorphs: 	an Array(a TransformMorph(462159872))
		fullBounds: 	(453@129) corner: (951@816)
		color: 	(Color r: 0.96 g: 0.96 b: 0.96 alpha: 1.0)
		extension: 	a MorphExtension (496762880) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	0
		borderColor: 	#inset
		model: 	a DiffMorph(799801344)
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(503316480)
		scroller: 	a TransformMorph(462159872)
		getMenuSelector: 	nil
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(1034682368)
		textMorph: 	a TextMorphForEditView(517996544)
		getTextSelector: 	nil
		setTextSelector: 	nil
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 0)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	false
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection(a TextHighlightByBounds a TextHighlightByBound...etc...
		acceptOnFocusChange: 	nil
		selectionColor: 	(Color r: 0.686 g: 0.835 b: 0.979 alpha: 0.498)
		alwaysAccept: 	nil
		changedAction: 	nil
		doubleClickSelector: 	nil
		setSelectionSelector: 	nil


PluggableTextMorph(Morph)>>drawSubmorphsOn:
	Receiver: a PluggableTextMorph(457441280)
	Arguments and temporary variables: 
		aCanvas: 	a FormCanvas on: DisplayScreen(1535x876x32)
		drawBlock: 	[ :canvas | submorphs reverseDo: [ :m | canvas fullDrawMorph: m ] ]
	Receiver's instance variables: 
		bounds: 	(453.0@129.0) corner: (951.0@816.0)
		owner: 	a DiffMorph(799801344)
		submorphs: 	an Array(a TransformMorph(462159872))
		fullBounds: 	(453@129) corner: (951@816)
		color: 	(Color r: 0.96 g: 0.96 b: 0.96 alpha: 1.0)
		extension: 	a MorphExtension (496762880) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	0
		borderColor: 	#inset
		model: 	a DiffMorph(799801344)
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(503316480)
		scroller: 	a TransformMorph(462159872)
		getMenuSelector: 	nil
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(1034682368)
		textMorph: 	a TextMorphForEditView(517996544)
		getTextSelector: 	nil
		setTextSelector: 	nil
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 0)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	false
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection(a TextHighlightByBounds a TextHighlightByBound...etc...
		acceptOnFocusChange: 	nil
		selectionColor: 	(Color r: 0.686 g: 0.835 b: 0.979 alpha: 0.498)
		alwaysAccept: 	nil
		changedAction: 	nil
		doubleClickSelector: 	nil
		setSelectionSelector: 	nil


PluggableTextMorph(ScrollPane)>>drawSubmorphsOn:
	Receiver: a PluggableTextMorph(457441280)
	Arguments and temporary variables: 
		aCanvas: 	a FormCanvas on: DisplayScreen(1535x876x32)
	Receiver's instance variables: 
		bounds: 	(453.0@129.0) corner: (951.0@816.0)
		owner: 	a DiffMorph(799801344)
		submorphs: 	an Array(a TransformMorph(462159872))
		fullBounds: 	(453@129) corner: (951@816)
		color: 	(Color r: 0.96 g: 0.96 b: 0.96 alpha: 1.0)
		extension: 	a MorphExtension (496762880) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	0
		borderColor: 	#inset
		model: 	a DiffMorph(799801344)
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(503316480)
		scroller: 	a TransformMorph(462159872)
		getMenuSelector: 	nil
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(1034682368)
		textMorph: 	a TextMorphForEditView(517996544)
		getTextSelector: 	nil
		setTextSelector: 	nil
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 0)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	false
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection(a TextHighlightByBounds a TextHighlightByBound...etc...
		acceptOnFocusChange: 	nil
		selectionColor: 	(Color r: 0.686 g: 0.835 b: 0.979 alpha: 0.498)
		alwaysAccept: 	nil
		changedAction: 	nil
		doubleClickSelector: 	nil
		setSelectionSelector: 	nil



--- The full stack ---
LogicalFont>>widthAndKernedWidthOfLeft:right:into:
BitBltDisplayScanner(CharacterScanner)>>scanKernableByteCharactersFrom:to:in:rightX:
FreeTypeFont>>scanByteCharactersFrom:to:in:with:rightX:
LogicalFont>>scanByteCharactersFrom:to:in:with:rightX:
ByteString>>scanCharactersFrom:to:with:rightX:font:
BitBltDisplayScanner(CharacterScanner)>>scanCharactersFrom:to:in:rightX:
BitBltDisplayScanner(DisplayScanner)>>displayLine:offset:leftInRun:
Paragraph>>displayOn:using:at:
FormCanvas>>paragraph:bounds:color:
TextMorphForEditView(TextMorph)>>drawOn:
TextMorphForEditView>>drawOn:
FormCanvas(Canvas)>>draw:
FormCanvas(Canvas)>>drawMorph:
[ 
(aCanvas isVisible: self bounds)
	ifTrue: [ aCanvas drawMorph: self ].
self drawSubmorphsOn: aCanvas.
self drawDropHighlightOn: aCanvas.
self drawMouseDownHighlightOn: aCanvas ] in [ 
"Note: At some point we should generalize this into some sort of 
		multi-canvas so that we can cross-optimize some drawing operations."
"Pass 1: Draw eventual drop-shadow"
self hasDropShadow
	ifTrue: [ self drawDropShadowOn: aCanvas ].
(self hasRolloverBorder and: [ (aCanvas seesNothingOutside: self bounds) not ])
	ifTrue: [ self drawRolloverBorderOn: aCanvas ].	"Pass 2: Draw receiver itself"
aCanvas
	roundCornersOf: self
	during: [ 
		(aCanvas isVisible: self bounds)
			ifTrue: [ aCanvas drawMorph: self ].
		self drawSubmorphsOn: aCanvas.
		self drawDropHighlightOn: aCanvas.
		self drawMouseDownHighlightOn: aCanvas ] ] in TextMorphForEditView(Morph)>>fullDrawOn:
FormCanvas>>roundCornersOf:in:during:
FormCanvas(Canvas)>>roundCornersOf:during:
[ 
"Note: At some point we should generalize this into some sort of 
		multi-canvas so that we can cross-optimize some drawing operations."
"Pass 1: Draw eventual drop-shadow"
self hasDropShadow
	ifTrue: [ self drawDropShadowOn: aCanvas ].
(self hasRolloverBorder and: [ (aCanvas seesNothingOutside: self bounds) not ])
	ifTrue: [ self drawRolloverBorderOn: aCanvas ].	"Pass 2: Draw receiver itself"
aCanvas
	roundCornersOf: self
	during: [ 
		(aCanvas isVisible: self bounds)
			ifTrue: [ aCanvas drawMorph: self ].
		self drawSubmorphsOn: aCanvas.
		self drawDropHighlightOn: aCanvas.
		self drawMouseDownHighlightOn: aCanvas ] ] in TextMorphForEditView(Morph)>>fullDrawOn:
BlockClosure>>on:do:
TextMorphForEditView(Morph)>>fullDrawOn:
FormCanvas(Canvas)>>fullDraw:
FormCanvas(Canvas)>>fullDrawMorph:
[ :m | myCanvas fullDrawMorph: m ] in [ :myCanvas | 
(self angle ~= 0.0 or: [ self scale ~= 1.0 ])
	ifTrue: [ FreeTypeSettings current forceNonSubPixelDuring: [ submorphs reverseDo: [ :m | myCanvas fullDrawMorph: m ] ] ]
	ifFalse: [ submorphs reverseDo: [ :m | myCanvas fullDrawMorph: m ] ] ] in TransformMorph>>drawSubmorphsOn:
Array(SequenceableCollection)>>reverseDo:
[ :myCanvas | 
(self angle ~= 0.0 or: [ self scale ~= 1.0 ])
	ifTrue: [ FreeTypeSettings current forceNonSubPixelDuring: [ submorphs reverseDo: [ :m | myCanvas fullDrawMorph: m ] ] ]
	ifFalse: [ submorphs reverseDo: [ :m | myCanvas fullDrawMorph: m ] ] ] in TransformMorph>>drawSubmorphsOn:
FormCanvas>>transformBy:clippingTo:during:smoothing:
TransformMorph>>drawSubmorphsOn:
[ 
(aCanvas isVisible: self bounds)
	ifTrue: [ aCanvas drawMorph: self ].
self drawSubmorphsOn: aCanvas.
self drawDropHighlightOn: aCanvas.
self drawMouseDownHighlightOn: aCanvas ] in [ 
"Note: At some point we should generalize this into some sort of 
		multi-canvas so that we can cross-optimize some drawing operations."
"Pass 1: Draw eventual drop-shadow"
self hasDropShadow
	ifTrue: [ self drawDropShadowOn: aCanvas ].
(self hasRolloverBorder and: [ (aCanvas seesNothingOutside: self bounds) not ])
	ifTrue: [ self drawRolloverBorderOn: aCanvas ].	"Pass 2: Draw receiver itself"
aCanvas
	roundCornersOf: self
	during: [ 
		(aCanvas isVisible: self bounds)
			ifTrue: [ aCanvas drawMorph: self ].
		self drawSubmorphsOn: aCanvas.
		self drawDropHighlightOn: aCanvas.
		self drawMouseDownHighlightOn: aCanvas ] ] in TransformMorph(Morph)>>fullDrawOn:
FormCanvas>>roundCornersOf:in:during:
FormCanvas(Canvas)>>roundCornersOf:during:
[ 
"Note: At some point we should generalize this into some sort of 
		multi-canvas so that we can cross-optimize some drawing operations."
"Pass 1: Draw eventual drop-shadow"
self hasDropShadow
	ifTrue: [ self drawDropShadowOn: aCanvas ].
(self hasRolloverBorder and: [ (aCanvas seesNothingOutside: self bounds) not ])
	ifTrue: [ self drawRolloverBorderOn: aCanvas ].	"Pass 2: Draw receiver itself"
aCanvas
	roundCornersOf: self
	during: [ 
		(aCanvas isVisible: self bounds)
			ifTrue: [ aCanvas drawMorph: self ].
		self drawSubmorphsOn: aCanvas.
		self drawDropHighlightOn: aCanvas.
		self drawMouseDownHighlightOn: aCanvas ] ] in TransformMorph(Morph)>>fullDrawOn:
BlockClosure>>on:do:
TransformMorph(Morph)>>fullDrawOn:
FormCanvas(Canvas)>>fullDraw:
FormCanvas(Canvas)>>fullDrawMorph:
[ :m | canvas fullDrawMorph: m ] in [ :canvas | submorphs reverseDo: [ :m | canvas fullDrawMorph: m ] ] in PluggableTextMorph(Morph)>>drawSubmorphsOn:
Array(SequenceableCollection)>>reverseDo:
[ :canvas | submorphs reverseDo: [ :m | canvas fullDrawMorph: m ] ] in PluggableTextMorph(Morph)>>drawSubmorphsOn:
PluggableTextMorph(Morph)>>drawSubmorphsOn:
PluggableTextMorph(ScrollPane)>>drawSubmorphsOn:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ 
(aCanvas isVisible: self bounds)
	ifTrue: [ aCanvas drawMorph: self ].
self drawSubmorphsOn: aCanvas.
self drawDropHighlightOn: aCanvas.
self drawMouseDownHighlightOn: aCanvas ] in [ 
"Note: At some point we should generalize this into some sort of 
		multi-canvas so that we can cross-optimize some drawing operations."
"Pass 1: Draw eventual drop-shadow"
self hasDropShadow
	ifTrue: [ self drawDropShadowOn: aCanvas ].
(self hasRolloverBorder and: [ (aCanvas seesNothingOutside: self bounds) not ])
	ifTrue: [ self drawRolloverBorderOn: aCanvas ].	"Pass 2: Draw receiver itself"
aCanvas
	roundCornersOf: self
	during: [ 
		(aCanvas isVisible: self bounds)
			ifTrue: [ aCanvas drawMorph: self ].
		self drawSubmorphsOn: aCanvas.
		self drawDropHighlightOn: aCanvas.
		self drawMouseDownHighlightOn: aCanvas ] ] in PluggableTextMorph(Morph)>>fullDrawOn:
FormCanvas>>roundCornersOf:in:during:
FormCanvas(Canvas)>>roundCornersOf:during:
[ 
"Note: At some point we should generalize this into some sort of 
		multi-canvas so that we can cross-optimize some drawing operations."
"Pass 1: Draw eventual drop-shadow"
self hasDropShadow
	ifTrue: [ self drawDropShadowOn: aCanvas ].
(self hasRolloverBorder and: [ (aCanvas seesNothingOutside: self bounds) not ])
	ifTrue: [ self drawRolloverBorderOn: aCanvas ].	"Pass 2: Draw receiver itself"
aCanvas
	roundCornersOf: self
	during: [ 
		(aCanvas isVisible: self bounds)
			ifTrue: [ aCanvas drawMorph: self ].
		self drawSubmorphsOn: aCanvas.
		self drawDropHighlightOn: aCanvas.
		self drawMouseDownHighlightOn: aCanvas ] ] in PluggableTextMorph(Morph)>>fullDrawOn:
BlockClosure>>on:do:
PluggableTextMorph(Morph)>>fullDrawOn:
FormCanvas(Canvas)>>fullDraw:
FormCanvas(Canvas)>>fullDrawMorph:
[ :m | canvas fullDrawMorph: m ] in [ :canvas | submorphs reverseDo: [ :m | canvas fullDrawMorph: m ] ] in DiffMorph(Morph)>>drawSubmorphsOn:
Array(SequenceableCollection)>>reverseDo:
[ :canvas | submorphs reverseDo: [ :m | canvas fullDrawMorph: m ] ] in DiffMorph(Morph)>>drawSubmorphsOn:
DiffMorph(Morph)>>drawSubmorphsOn:
[ 
(aCanvas isVisible: self bounds)
	ifTrue: [ aCanvas drawMorph: self ].
self drawSubmorphsOn: aCanvas.
self drawDropHighlightOn: aCanvas.
self drawMouseDownHighlightOn: aCanvas ] in [ 
"Note: At some point we should generalize this into some sort of 
		multi-canvas so that we can cross-optimize some drawing operations."
"Pass 1: Draw eventual drop-shadow"
self hasDropShadow
	ifTrue: [ self drawDropShadowOn: aCanvas ].
(self hasRolloverBorder and: [ (aCanvas seesNothingOutside: self bounds) not ])
	ifTrue: [ self drawRolloverBorderOn: aCanvas ].	"Pass 2: Draw receiver itself"
aCanvas
	roundCornersOf: self
	during: [ 
		(aCanvas isVisible: self bounds)
			ifTrue: [ aCanvas drawMorph: self ].
		self drawSubmorphsOn: aCanvas.
		self drawDropHighlightOn: aCanvas.
		self drawMouseDownHighlightOn: aCanvas ] ] in DiffMorph(Morph)>>fullDrawOn:
FormCanvas>>roundCornersOf:in:during:
FormCanvas(Canvas)>>roundCornersOf:during:
[ 
"Note: At some point we should generalize this into some sort of 
		multi-canvas so that we can cross-optimize some drawing operations."
"Pass 1: Draw eventual drop-shadow"
self hasDropShadow
	ifTrue: [ self drawDropShadowOn: aCanvas ].
(self hasRolloverBorder and: [ (aCanvas seesNothingOutside: self bounds) not ])
	ifTrue: [ self drawRolloverBorderOn: aCanvas ].	"Pass 2: Draw receiver itself"
aCanvas
	roundCornersOf: self
	during: [ 
		(aCanvas isVisible: self bounds)
			ifTrue: [ aCanvas drawMorph: self ].
		self drawSubmorphsOn: aCanvas.
		self drawDropHighlightOn: aCanvas.
		self drawMouseDownHighlightOn: aCanvas ] ] in DiffMorph(Morph)>>fullDrawOn:
BlockClosure>>on:do:
DiffMorph(Morph)>>fullDrawOn:
FormCanvas(Canvas)>>fullDraw:
FormCanvas(Canvas)>>fullDrawMorph:
[ :m | canvas fullDrawMorph: m ] in [ :canvas | submorphs reverseDo: [ :m | canvas fullDrawMorph: m ] ] in PSMCPatchMorph(Morph)>>drawSubmorphsOn:
Array(SequenceableCollection)>>reverseDo:
[ :canvas | submorphs reverseDo: [ :m | canvas fullDrawMorph: m ] ] in PSMCPatchMorph(Morph)>>drawSubmorphsOn:
PSMCPatchMorph(Morph)>>drawSubmorphsOn:
[ 
(aCanvas isVisible: self bounds)
	ifTrue: [ aCanvas drawMorph: self ].
self drawSubmorphsOn: aCanvas.
self drawDropHighlightOn: aCanvas.
self drawMouseDownHighlightOn: aCanvas ] in [ 
"Note: At some point we should generalize this into some sort of 
		multi-canvas so that we can cross-optimize some drawing operations."
"Pass 1: Draw eventual drop-shadow"
self hasDropShadow
	ifTrue: [ self drawDropShadowOn: aCanvas ].
(self hasRolloverBorder and: [ (aCanvas seesNothingOutside: self bounds) not ])
	ifTrue: [ self drawRolloverBorderOn: aCanvas ].	"Pass 2: Draw receiver itself"
aCanvas
	roundCornersOf: self
	during: [ 
		(aCanvas isVisible: self bounds)
			ifTrue: [ aCanvas drawMorph: self ].
		self drawSubmorphsOn: aCanvas.
		self drawDropHighlightOn: aCanvas.
		self drawMouseDownHighlightOn: aCanvas ] ] in PSMCPatchMorph(Morph)>>fullDrawOn:
FormCanvas>>roundCornersOf:in:during:
FormCanvas(Canvas)>>roundCornersOf:during:
[ 
"Note: At some point we should generalize this into some sort of 
		multi-canvas so that we can cross-optimize some drawing operations."
"Pass 1: Draw eventual drop-shadow"
self hasDropShadow
	ifTrue: [ self drawDropShadowOn: aCanvas ].
(self hasRolloverBorder and: [ (aCanvas seesNothingOutside: self bounds) not ])
	ifTrue: [ self drawRolloverBorderOn: aCanvas ].	"Pass 2: Draw receiver itself"
aCanvas
	roundCornersOf: self
	during: [ 
		(aCanvas isVisible: self bounds)
			ifTrue: [ aCanvas drawMorph: self ].
		self drawSubmorphsOn: aCanvas.
		self drawDropHighlightOn: aCanvas.
		self drawMouseDownHighlightOn: aCanvas ] ] in PSMCPatchMorph(Morph)>>fullDrawOn:
BlockClosure>>on:do:
PSMCPatchMorph(Morph)>>fullDrawOn:
FormCanvas(Canvas)>>fullDraw:
FormCanvas(Canvas)>>fullDrawMorph:
[ :m | canvas fullDrawMorph: m ] in [ :canvas | submorphs reverseDo: [ :m | canvas fullDrawMorph: m ] ] in StandardWindow(Morph)>>drawSubmorphsOn:
Array(SequenceableCollection)>>reverseDo:
[ :canvas | submorphs reverseDo: [ :m | canvas fullDrawMorph: m ] ] in StandardWindow(Morph)>>drawSubmorphsOn:
FormCanvas>>clipBy:during:
StandardWindow(Morph)>>drawSubmorphsOn:
[ 
(aCanvas isVisible: self bounds)
	ifTrue: [ aCanvas drawMorph: self ].
self drawSubmorphsOn: aCanvas.
self drawDropHighlightOn: aCanvas.
self drawMouseDownHighlightOn: aCanvas ] in [ 
"Note: At some point we should generalize this into some sort of 
		multi-canvas so that we can cross-optimize some drawing operations."
"Pass 1: Draw eventual drop-shadow"
self hasDropShadow
	ifTrue: [ self drawDropShadowOn: aCanvas ].
(self hasRolloverBorder and: [ (aCanvas seesNothingOutside: self bounds) not ])
	ifTrue: [ self drawRolloverBorderOn: aCanvas ].	"Pass 2: Draw receiver itself"
aCanvas
	roundCornersOf: self
	during: [ 
		(aCanvas isVisible: self bounds)
			ifTrue: [ aCanvas drawMorph: self ].
		self drawSubmorphsOn: aCanvas.
		self drawDropHighlightOn: aCanvas.
		self drawMouseDownHighlightOn: aCanvas ] ] in StandardWindow(Morph)>>fullDrawOn:
FormCanvas>>roundCornersOf:in:during:
FormCanvas(Canvas)>>roundCornersOf:during:
[ 
"Note: At some point we should generalize this into some sort of 
		multi-canvas so that we can cross-optimize some drawing operations."
"Pass 1: Draw eventual drop-shadow"
self hasDropShadow
	ifTrue: [ self drawDropShadowOn: aCanvas ].
(self hasRolloverBorder and: [ (aCanvas seesNothingOutside: self bounds) not ])
	ifTrue: [ self drawRolloverBorderOn: aCanvas ].	"Pass 2: Draw receiver itself"
aCanvas
	roundCornersOf: self
	during: [ 
		(aCanvas isVisible: self bounds)
			ifTrue: [ aCanvas drawMorph: self ].
		self drawSubmorphsOn: aCanvas.
		self drawDropHighlightOn: aCanvas.
		self drawMouseDownHighlightOn: aCanvas ] ] in StandardWindow(Morph)>>fullDrawOn:
BlockClosure>>on:do:
StandardWindow(Morph)>>fullDrawOn:
FormCanvas(Canvas)>>fullDraw:
FormCanvas(Canvas)>>fullDrawMorph:
[ :dirtyRect | 
dirtyRect
	allAreasOutsideList: validList
	do: [ :r | 
		| mm rect i c remnantIntersects remnants rectToFill |
		"Experimental top-down drawing --
			Traverses top to bottom, stopping if the entire area is filled.
			If only a single rectangle remains, then continue with the reduced rectangle."
		rectToFill := r.
		remnants := OrderedCollection with: r.
		i := 1.
		[ remnants isEmpty or: [ i > n ] ]
			whileFalse: [ 
				mm := submorphs at: i.
				((remnantIntersects := remnants select: [ :each | mm fullBounds intersects: each ]) notEmpty and: [ mm visible ])
					ifTrue: [ 
						morphs addLast: mm.
						rects addLast: (Rectangle merging: (remnantIntersects collect: [ :each | mm fullBounds intersect: each ])).
						remnants removeAll: remnantIntersects.
						remnantIntersects do: [ :eachIntersect | remnants addAll: (mm areasRemainingToFill: eachIntersect) ].
						remnants size = 1
							ifTrue: [ rectToFill := remnants first ].
						remnants isEmpty
							ifTrue: [ rectToFill := nil ] ].
				i := i + 1 ].	"Now paint from bottom to top, but using the reduced rectangles."
		rectToFill ifNotNil: [ aWorld drawOn: (c := aCanvas copyClipRect: rectToFill) ].
		[ morphs isEmpty ]
			whileFalse: [ 
				(rect := rects removeLast) == rectToFill
					ifFalse: [ c := aCanvas copyClipRect: (rectToFill := rect) ].
				c fullDrawMorph: morphs removeLast ].
		morphs reset.
		rects reset.
		validList add: r ] ] in drawWorld: aWorld submorphs: submorphs invalidAreasOn: aCanvas
	"Redraw the damaged areas of the given canvas and clear the damage list. Return a collection of the areas that
were redrawn."

	| rectList n morphs rects validList |
	rectList := damageRecorder invalidRectsFullBounds: aWorld viewBox.	"sort by areas to draw largest portions first"
	rectList := rectList asArray sort: [ :r1 :r2 | r1 area > r2 area ].
	damageRecorder reset.
	n := submorphs size.
	morphs := OrderedCollection new: n * 2.
	rects := OrderedCollection new: n * 2.
	validList := OrderedCollection new: n * 2.
	rectList
		do: [ :dirtyRect | 
			dirtyRect
				allAreasOutsideList: validList
				do: [ :r | 
					| mm rect i c remnantIntersects remnants rectToFill |
					"Experimental top-down drawing --
			Traverses top to bottom, stopping if the entire area is filled.
			If only a single rectangle remains, then continue with the reduced rectangle."
					rectToFill := r.
					remnants := OrderedCollection with: r.
					i := 1.
					[ remnants isEmpty or: [ i > n ] ]
						whileFalse: [ 
							mm := submorphs at: i.
							((remnantIntersects := remnants select: [ :each | mm fullBounds intersects: each ]) notEmpty and: [ mm visible ])
								ifTrue: [ 
									morphs addLast: mm.
									rects addLast: (Rectangle merging: (remnantIntersects collect: [ :each | mm fullBounds intersect: each ])).
									remnants removeAll: remnantIntersects.
									remnantIntersects do: [ :eachIntersect | remnants addAll: (mm areasRemainingToFill: eachIntersect) ].
									remnants size = 1
										ifTrue: [ rectToFill := remnants first ].
									remnants isEmpty
										ifTrue: [ rectToFill := nil ] ].
							i := i + 1 ].	"Now paint from bottom to top, but using the reduced rectangles."
					rectToFill ifNotNil: [ aWorld drawOn: (c := aCanvas copyClipRect: rectToFill) ].
					[ morphs isEmpty ]
						whileFalse: [ 
							(rect := rects removeLast) == rectToFill
								ifFalse: [ c := aCanvas copyClipRect: (rectToFill := rect) ].
							c fullDrawMorph: morphs removeLast ].
					morphs reset.
					rects reset.
					validList add: r ] ].
	^ validList in WorldState>>drawWorld:submorphs:invalidAreasOn:
Rectangle>>allAreasOutsideList:startingAt:do:
Rectangle>>allAreasOutsideList:do:
drawWorld: aWorld submorphs: submorphs invalidAreasOn: aCanvas
	"Redraw the damaged areas of the given canvas and clear the damage list. Return a collection of the areas that
were redrawn."

	| rectList n morphs rects validList |
	rectList := damageRecorder invalidRectsFullBounds: aWorld viewBox.	"sort by areas to draw largest portions first"
	rectList := rectList asArray sort: [ :r1 :r2 | r1 area > r2 area ].
	damageRecorder reset.
	n := submorphs size.
	morphs := OrderedCollection new: n * 2.
	rects := OrderedCollection new: n * 2.
	validList := OrderedCollection new: n * 2.
	rectList
		do: [ :dirtyRect | 
			dirtyRect
				allAreasOutsideList: validList
				do: [ :r | 
					| mm rect i c remnantIntersects remnants rectToFill |
					"Experimental top-down drawing --
			Traverses top to bottom, stopping if the entire area is filled.
			If only a single rectangle remains, then continue with the reduced rectangle."
					rectToFill := r.
					remnants := OrderedCollection with: r.
					i := 1.
					[ remnants isEmpty or: [ i > n ] ]
						whileFalse: [ 
							mm := submorphs at: i.
							((remnantIntersects := remnants select: [ :each | mm fullBounds intersects: each ]) notEmpty and: [ mm visible ])
								ifTrue: [ 
									morphs addLast: mm.
									rects addLast: (Rectangle merging: (remnantIntersects collect: [ :each | mm fullBounds intersect: each ])).
									remnants removeAll: remnantIntersects.
									remnantIntersects do: [ :eachIntersect | remnants addAll: (mm areasRemainingToFill: eachIntersect) ].
									remnants size = 1
										ifTrue: [ rectToFill := remnants first ].
									remnants isEmpty
										ifTrue: [ rectToFill := nil ] ].
							i := i + 1 ].	"Now paint from bottom to top, but using the reduced rectangles."
					rectToFill ifNotNil: [ aWorld drawOn: (c := aCanvas copyClipRect: rectToFill) ].
					[ morphs isEmpty ]
						whileFalse: [ 
							(rect := rects removeLast) == rectToFill
								ifFalse: [ c := aCanvas copyClipRect: (rectToFill := rect) ].
							c fullDrawMorph: morphs removeLast ].
					morphs reset.
					rects reset.
					validList add: r ] ].
	^ validList in WorldState>>drawWorld:submorphs:invalidAreasOn:
Array(SequenceableCollection)>>do:
WorldState>>drawWorld:submorphs:invalidAreasOn:
[ 
| worldDamageRects handDamageRects |
worldDamageRects := self drawWorld: aWorld submorphs: submorphs invalidAreasOn: canvas.	"repair world's damage on canvas"	"self handsDo:[:h| h noticeDamageRects: worldDamageRects]."
handsToDraw := self selectHandsToDrawForDamage: worldDamageRects.
handDamageRects := handsToDraw collect: [ :h | h savePatchFrom: canvas ].
allDamage := worldDamageRects , handDamageRects.
handsToDraw reverseDo: [ :h | canvas fullDrawMorph: h ]	"draw hands onto world canvas" ] in WorldState>>displayWorld:submorphs:
FormCanvas>>roundCornersOf:in:during:
FormCanvas(Canvas)>>roundCornersOf:during:
WorldState>>displayWorld:submorphs:
WorldMorph>>displayWorld
[ aWorld displayWorld ] in WorldState>>displayWorldSafely:
BlockClosure>>on:do:
BlockClosure>>ifError:
WorldState>>displayWorldSafely:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ 
World doOneCycle.
Processor yield.
false ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: receiver of "lastClicked:" is nil
3 March 2015 12:03:34.411156 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
NBCogit NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
https://github.com/pharo-project/pharo-vm.git Commit: 4a0d556150d478ff2de3c9624d2f18e6eaa3fa5c Date: 2014-12-18 18:42:53 +0100 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14893

Image: Pharo3.0 [Latest update: #30863]

UndefinedObject(Object)>>doesNotUnderstand: #lastClicked:
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	lastClicked: true
		exception: 	MessageNotUnderstood: receiver of "lastClicked:" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

MorphTreeListManager>>lastClickedMorph:
	Receiver: a MorphTreeListManager
	Arguments and temporary variables: 
		aNodeMorph: 	NodeMorph(nil)
	Receiver's instance variables: 
		keystrokeActionSelector: 	nil
		multipleSelection: 	true
		autoMultiSelection: 	false
		potentialDropMorph: 	nil
		firstClickedMorph: 	NodeMorph(nil)
		lastClickedMorph: 	NodeMorph(nil)
		columnDropUnabled: 	nil
		doubleClickBlock: 	nil
		autoDeselection: 	nil
		searchedElement: 	nil
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		lastSelection: 	0
		client: 	a MorphTreeMorph(293339136)
		isSelectionUpdateFromView: 	false
		isCheckList: 	false
		autoTargetMorph: 	nil
		selectedMorphList: 	a LinkedList()
		removeOnlyLastSelected: 	false


MorphTreeListManager>>mouseUp:on:
	Receiver: a MorphTreeListManager
	Arguments and temporary variables: 
		event: 	[(489@278) mouseUp 1140881 nil]
		aNodeMorph: 	NodeMorph(nil)
		path: 	an OrderedCollection(Node(a RPackage(Dicto)) Node(entities))
		cmdOrCtrl: 	false
		clickedTheCheckbox: 	false
	Receiver's instance variables: 
		keystrokeActionSelector: 	nil
		multipleSelection: 	true
		autoMultiSelection: 	false
		potentialDropMorph: 	nil
		firstClickedMorph: 	NodeMorph(nil)
		lastClickedMorph: 	NodeMorph(nil)
		columnDropUnabled: 	nil
		doubleClickBlock: 	nil
		autoDeselection: 	nil
		searchedElement: 	nil
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		lastSelection: 	0
		client: 	a MorphTreeMorph(293339136)
		isSelectionUpdateFromView: 	false
		isCheckList: 	false
		autoTargetMorph: 	nil
		selectedMorphList: 	a LinkedList()
		removeOnlyLastSelected: 	false


MorphTreeMorph>>mouseUp:
	Receiver: a MorphTreeMorph(293339136)
	Arguments and temporary variables: 
		event: 	[(489@278) mouseUp 1140881 nil]
		nodeMorph: 	NodeMorph(nil)
		wasHigh: 	true
	Receiver's instance variables: 
		bounds: 	(411.0@150.0) corner: (619.0@373.0)
		owner: 	a PanelMorph(208142336)
		submorphs: 	an Array(a ScrollBar(346816512) a Morph(285999104) a MorphTreeTransf...etc...
		fullBounds: 	(411@150) corner: (619@373)
		color: 	(Color r: 0.979 g: 0.979 b: 0.979 alpha: 1.0)
		extension: 	a MorphExtension (786169856) [other:  (dropEnabled -> true) (announc...etc...
		borderWidth: 	0
		borderColor: 	Color black
		model: 	a PackageTreeModel
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(346816512)
		scroller: 	a MorphTreeTransformMorph(586678272)
		getMenuSelector: 	#menu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(67371008)
		columns: 	an OrderedCollection(a MorphTreeColumn)
		potentialDropMorph: 	nil
		rowInset: 	0
		columnInset: 	0
		columnResizers: 	an OrderedCollection()
		withHLines: 	false
		preferedPaneColor: 	nil
		indentGap: 	20
		expandedToggleImage: 	an ImageMorph(404226048)
		notExpandedToggleImage: 	an ImageMorph(630980608)
		resizerWidth: 	3
		gapAfterToggle: 	5
		hasToggleAtRoot: 	nil
		topHeader: 	a Morph(285999104)
		topHeaderBackground: 	Color transparent
		unboundLastColumn: 	true
		columnDropUnabled: 	nil
		columnColors: 	{Color transparent. Color transparent}
		rowColors: 	{Color transparent. Color transparent}
		nodeList: 	an OrderedCollection(Node(a DynamicClassGroup ( Last Modified Classes...etc...
		iconBlock: 	nil
		treeLineWidth: 	0
		lineColorBlock: 	nil
		treeLineDashes: 	nil
		listManager: 	a MorphTreeListManager
		mouseOverAllowed: 	false
		maxNodeWidth: 	175.0
		enabled: 	true


MorphTreeMorph(Morph)>>handleMouseUp:
	Receiver: a MorphTreeMorph(293339136)
	Arguments and temporary variables: 
		anEvent: 	[(489@278) mouseUp 1140881 nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(411.0@150.0) corner: (619.0@373.0)
		owner: 	a PanelMorph(208142336)
		submorphs: 	an Array(a ScrollBar(346816512) a Morph(285999104) a MorphTreeTransf...etc...
		fullBounds: 	(411@150) corner: (619@373)
		color: 	(Color r: 0.979 g: 0.979 b: 0.979 alpha: 1.0)
		extension: 	a MorphExtension (786169856) [other:  (dropEnabled -> true) (announc...etc...
		borderWidth: 	0
		borderColor: 	Color black
		model: 	a PackageTreeModel
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(346816512)
		scroller: 	a MorphTreeTransformMorph(586678272)
		getMenuSelector: 	#menu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(67371008)
		columns: 	an OrderedCollection(a MorphTreeColumn)
		potentialDropMorph: 	nil
		rowInset: 	0
		columnInset: 	0
		columnResizers: 	an OrderedCollection()
		withHLines: 	false
		preferedPaneColor: 	nil
		indentGap: 	20
		expandedToggleImage: 	an ImageMorph(404226048)
		notExpandedToggleImage: 	an ImageMorph(630980608)
		resizerWidth: 	3
		gapAfterToggle: 	5
		hasToggleAtRoot: 	nil
		topHeader: 	a Morph(285999104)
		topHeaderBackground: 	Color transparent
		unboundLastColumn: 	true
		columnDropUnabled: 	nil
		columnColors: 	{Color transparent. Color transparent}
		rowColors: 	{Color transparent. Color transparent}
		nodeList: 	an OrderedCollection(Node(a DynamicClassGroup ( Last Modified Classes...etc...
		iconBlock: 	nil
		treeLineWidth: 	0
		lineColorBlock: 	nil
		treeLineDashes: 	nil
		listManager: 	a MorphTreeListManager
		mouseOverAllowed: 	false
		maxNodeWidth: 	175.0
		enabled: 	true


MouseButtonEvent>>sentTo:
	Receiver: [(489@278) mouseUp 1140881 nil]
	Arguments and temporary variables: 
		anObject: 	a MorphTreeMorph(293339136)
	Receiver's instance variables: 
		timeStamp: 	1140881
		source: 	a HandMorph(760479744)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(489@278)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


MorphTreeMorph(Morph)>>handleEvent:
	Receiver: a MorphTreeMorph(293339136)
	Arguments and temporary variables: 
		anEvent: 	[(489@278) mouseUp 1140881 nil]
	Receiver's instance variables: 
		bounds: 	(411.0@150.0) corner: (619.0@373.0)
		owner: 	a PanelMorph(208142336)
		submorphs: 	an Array(a ScrollBar(346816512) a Morph(285999104) a MorphTreeTransf...etc...
		fullBounds: 	(411@150) corner: (619@373)
		color: 	(Color r: 0.979 g: 0.979 b: 0.979 alpha: 1.0)
		extension: 	a MorphExtension (786169856) [other:  (dropEnabled -> true) (announc...etc...
		borderWidth: 	0
		borderColor: 	Color black
		model: 	a PackageTreeModel
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(346816512)
		scroller: 	a MorphTreeTransformMorph(586678272)
		getMenuSelector: 	#menu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(67371008)
		columns: 	an OrderedCollection(a MorphTreeColumn)
		potentialDropMorph: 	nil
		rowInset: 	0
		columnInset: 	0
		columnResizers: 	an OrderedCollection()
		withHLines: 	false
		preferedPaneColor: 	nil
		indentGap: 	20
		expandedToggleImage: 	an ImageMorph(404226048)
		notExpandedToggleImage: 	an ImageMorph(630980608)
		resizerWidth: 	3
		gapAfterToggle: 	5
		hasToggleAtRoot: 	nil
		topHeader: 	a Morph(285999104)
		topHeaderBackground: 	Color transparent
		unboundLastColumn: 	true
		columnDropUnabled: 	nil
		columnColors: 	{Color transparent. Color transparent}
		rowColors: 	{Color transparent. Color transparent}
		nodeList: 	an OrderedCollection(Node(a DynamicClassGroup ( Last Modified Classes...etc...
		iconBlock: 	nil
		treeLineWidth: 	0
		lineColorBlock: 	nil
		treeLineDashes: 	nil
		listManager: 	a MorphTreeListManager
		mouseOverAllowed: 	false
		maxNodeWidth: 	175.0
		enabled: 	true


MorphTreeMorph(Morph)>>handleFocusEvent:
	Receiver: a MorphTreeMorph(293339136)
	Arguments and temporary variables: 
		anEvent: 	[(489@278) mouseUp 1140881 nil]
	Receiver's instance variables: 
		bounds: 	(411.0@150.0) corner: (619.0@373.0)
		owner: 	a PanelMorph(208142336)
		submorphs: 	an Array(a ScrollBar(346816512) a Morph(285999104) a MorphTreeTransf...etc...
		fullBounds: 	(411@150) corner: (619@373)
		color: 	(Color r: 0.979 g: 0.979 b: 0.979 alpha: 1.0)
		extension: 	a MorphExtension (786169856) [other:  (dropEnabled -> true) (announc...etc...
		borderWidth: 	0
		borderColor: 	Color black
		model: 	a PackageTreeModel
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(346816512)
		scroller: 	a MorphTreeTransformMorph(586678272)
		getMenuSelector: 	#menu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(67371008)
		columns: 	an OrderedCollection(a MorphTreeColumn)
		potentialDropMorph: 	nil
		rowInset: 	0
		columnInset: 	0
		columnResizers: 	an OrderedCollection()
		withHLines: 	false
		preferedPaneColor: 	nil
		indentGap: 	20
		expandedToggleImage: 	an ImageMorph(404226048)
		notExpandedToggleImage: 	an ImageMorph(630980608)
		resizerWidth: 	3
		gapAfterToggle: 	5
		hasToggleAtRoot: 	nil
		topHeader: 	a Morph(285999104)
		topHeaderBackground: 	Color transparent
		unboundLastColumn: 	true
		columnDropUnabled: 	nil
		columnColors: 	{Color transparent. Color transparent}
		rowColors: 	{Color transparent. Color transparent}
		nodeList: 	an OrderedCollection(Node(a DynamicClassGroup ( Last Modified Classes...etc...
		iconBlock: 	nil
		treeLineWidth: 	0
		lineColorBlock: 	nil
		treeLineDashes: 	nil
		listManager: 	a MorphTreeListManager
		mouseOverAllowed: 	false
		maxNodeWidth: 	175.0
		enabled: 	true


[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[(489@278) mouseUp 1140881 nil]
		focusHolder: 	a MorphTreeMorph(293339136)
		aBlock: 	[ self mouseFocus: nil ]
		w: 	a WorldMorph(511705088) [world]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(435@385) corner: (451@401)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(435@385) corner: (451@401)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableIconListMorph(256638976)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(435@385) mouseOver nil nil]
		targetOffset: 	(33.0@17.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 1147953 435 385 0 0 0 1)
		lastKeyScanCode: 	30
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


BlockClosure>>on:do:
	Receiver: [ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (an...etc...
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :ex | 
ActiveWorld := priorWorld.
ActiveEvent := priorEvent.
A...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	HandMorph>>sendFocusEvent:to:clear:
		startpc: 	67
		numArgs: 	0


WorldMorph(PasteUpMorph)>>becomeActiveDuring:
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 
		aBlock: 	[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder ha...etc...
		priorWorld: 	a WorldMorph(511705088) [world]
		priorHand: 	a HandMorph(760479744)
		priorEvent: 	[(489@278) mouseOver red nil nil]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1535@876)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a NautilusWindow(722468864) a Sta...etc...
		fullBounds: 	nil
		color: 	Color white
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		result: 	nil
		anEvent: 	[(489@278) mouseUp 1140881 nil]
		focusHolder: 	a MorphTreeMorph(293339136)
		aBlock: 	[ self mouseFocus: nil ]
		w: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		bounds: 	(435@385) corner: (451@401)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(435@385) corner: (451@401)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableIconListMorph(256638976)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(435@385) mouseOver nil nil]
		targetOffset: 	(33.0@17.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 1147953 435 385 0 0 0 1)
		lastKeyScanCode: 	30
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[(489@278) mouseUp 1140881 nil]
		focusHolder: 	a MorphTreeMorph(293339136)
		aBlock: 	[ self mouseFocus: nil ]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(435@385) corner: (451@401)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(435@385) corner: (451@401)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableIconListMorph(256638976)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(435@385) mouseOver nil nil]
		targetOffset: 	(33.0@17.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 1147953 435 385 0 0 0 1)
		lastKeyScanCode: 	30
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[(489@278) mouseUp 1140881 nil]
	Receiver's instance variables: 
		bounds: 	(435@385) corner: (451@401)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(435@385) corner: (451@401)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableIconListMorph(256638976)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(435@385) mouseOver nil nil]
		targetOffset: 	(33.0@17.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 1147953 435 385 0 0 0 1)
		lastKeyScanCode: 	30
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>handleEvent:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[(489@278) mouseUp 1140881 nil]
		evt: 	[(489@278) mouseUp 1140881 nil]
	Receiver's instance variables: 
		bounds: 	(435@385) corner: (451@401)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(435@385) corner: (451@401)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableIconListMorph(256638976)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(435@385) mouseOver nil nil]
		targetOffset: 	(33.0@17.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 1147953 435 385 0 0 0 1)
		lastKeyScanCode: 	30
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


MouseClickState>>handleEvent:from:
	Receiver: a MouseClickState[#firstClickUp]
	Arguments and temporary variables: 
		evt: 	[(489@278) mouseUp 1140881 nil]
		aHand: 	a HandMorph(760479744)
		localEvt: 	[(489@278) mouseUp 1140881 nil]
		timedOut: 	false
		isDrag: 	false
	Receiver's instance variables: 
		clickClient: 	a MorphTreeMorph(293339136)
		clickState: 	#firstClickUp
		firstClickDown: 	[(489@278) mouseDown red 1140847 nil]
		firstClickUp: 	[(489@278) mouseUp 1140881 nil]
		firstClickTime: 	1140847
		clickSelector: 	#click:
		dblClickSelector: 	#doubleClick:
		dblClickTime: 	350
		dblClickTimeoutSelector: 	nil
		dragSelector: 	nil
		dragThreshold: 	10


HandMorph>>handleEvent:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[(489@278) mouseUp 1140881 nil]
		evt: 	[(489@278) mouseUp 1140881 nil]
	Receiver's instance variables: 
		bounds: 	(420@160) corner: (436@176)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(420@160) corner: (436@176)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableIconListMorph(256638976)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(420@160) mouseOver nil nil]
		targetOffset: 	(33.0@17.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 1148413 435 386 0 0 0 1)
		lastKeyScanCode: 	30
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		evt: 	[(489@278) mouseUp 1140881 nil]
		evtBuf: 	#(1 1140881 489 278 0 0 0 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(420@160) corner: (436@176)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(420@160) corner: (436@176)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	a MorphTreeMorph(293339136)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(420@160) mouseUp 1149451 nil]
		targetOffset: 	(9.0@10.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 1149451 420 160 0 0 0 1)
		lastKeyScanCode: 	30
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
		h: 	a HandMorph(760479744)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (1535@876)
		canvas: 	a FormCanvas on: DisplayScreen(1535x876x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(847773696))(a DropList...etc...
		lastStepTime: 	1149523
		lastStepMessage: 	nil
		lastCycleTime: 	1149541
		alarms: 	a Heap()
		lastAlarmTime: 	1149523
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(760479744))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(760479744))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (1535@876)
		canvas: 	a FormCanvas on: DisplayScreen(1535x876x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(847773696))(a DropList...etc...
		lastStepTime: 	1149523
		lastStepMessage: 	nil
		lastCycleTime: 	1149541
		alarms: 	a Heap()
		lastAlarmTime: 	1149523
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (1535@876)
		canvas: 	a FormCanvas on: DisplayScreen(1535x876x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(847773696))(a DropList...etc...
		lastStepTime: 	1149523
		lastStepMessage: 	nil
		lastCycleTime: 	1149541
		alarms: 	a Heap()
		lastAlarmTime: 	1149523
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (1535@876)
		canvas: 	a FormCanvas on: DisplayScreen(1535x876x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(847773696))(a DropList...etc...
		lastStepTime: 	1149523
		lastStepMessage: 	nil
		lastCycleTime: 	1149541
		alarms: 	a Heap()
		lastAlarmTime: 	1149523
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1535@876)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a NautilusWindow(722468864) a Sta...etc...
		fullBounds: 	(0@0) corner: (1535@876)
		color: 	Color white
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


[ 
World doOneCycle.
Processor yield.
false ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	Transcript


[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ 
World doOneCycle.
Processor yield.
false ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #lastClicked:
MorphTreeListManager>>lastClickedMorph:
MorphTreeListManager>>mouseUp:on:
MorphTreeMorph>>mouseUp:
MorphTreeMorph(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
MorphTreeMorph(Morph)>>handleEvent:
MorphTreeMorph(Morph)>>handleFocusEvent:
[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
MouseClickState>>handleEvent:from:
HandMorph>>handleEvent:
HandMorph>>processEvents
[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ 
World doOneCycle.
Processor yield.
false ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

rph(Morph)>>handleEvent:
	Receiver: a MorphTreeMorph(293339136)
	Arguments and temporary variables: 
		anEvent: 	[(420@160) mouseUp 1149451 nil]
	Receiver's instance variables: 
		bounds: 	(411.0@150.0) corner: (619.0@373.0)
		owner: 	a PanelMorph(208142336)
		submorphs: 	an Array(a ScrollBar(346816512) a Morph(285999104) a MorphTreeTransf...etc...
		fullBounds: 	(411@150) corner: (619@373)
		color: 	(Color r: 0.979 g: 0.979 b: 0.979 alpha: 1.0)
		extension: 	a MorphExtension (786169856) [other:  (dropEnabled -> true) (announc...etc...
		borderWidth: 	0
		borderColor: 	Color black
		model: 	a PackageTreeModel
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(346816512)
		scroller: 	a MorphTreeTransformMorph(586678272)
		getMenuSelector: 	#menu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(67371008)
		columns: 	an OrderedCollection(a MorphTreeColumn)
		potentialDropMorph: 	nil
		rowInset: 	0
		columnInset: 	0
		columnResizers: 	an OrderedCollection()
		withHLines: 	false
		preferedPaneColor: 	nil
		indentGap: 	20
		expandedToggleImage: 	an ImageMorph(404226048)
		notExpandedToggleImage: 	an ImageMorph(630980608)
		resizerWidth: 	3
		gapAfterToggle: 	5
		hasToggleAtRoot: 	nil
		topHeader: 	a Morph(285999104)
		topHeaderBackground: 	Color transparent
		unboundLastColumn: 	true
		columnDropUnabled: 	nil
		columnColors: 	{Color transparent. Color transparent}
		rowColors: 	{Color transparent. Color transparent}
		nodeList: 	an OrderedCollection(Node(a DynamicClassGroup ( Last Modified Classes...etc...
		iconBlock: 	nil
		treeLineWidth: 	0
		lineColorBlock: 	nil
		treeLineDashes: 	nil
		listManager: 	a MorphTreeListManager
		mouseOverAllowed: 	false
		maxNodeWidth: 	175.0
		enabled: 	true


MorphTreeMorph(Morph)>>handleFocusEvent:
	Receiver: a MorphTreeMorph(293339136)
	Arguments and temporary variables: 
		anEvent: 	[(420@160) mouseUp 1149451 nil]
	Receiver's instance variables: 
		bounds: 	(411.0@150.0) corner: (619.0@373.0)
		owner: 	a PanelMorph(208142336)
		submorphs: 	an Array(a ScrollBar(346816512) a Morph(285999104) a MorphTreeTransf...etc...
		fullBounds: 	(411@150) corner: (619@373)
		color: 	(Color r: 0.979 g: 0.979 b: 0.979 alpha: 1.0)
		extension: 	a MorphExtension (786169856) [other:  (dropEnabled -> true) (announc...etc...
		borderWidth: 	0
		borderColor: 	Color black
		model: 	a PackageTreeModel
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(346816512)
		scroller: 	a MorphTreeTransformMorph(586678272)
		getMenuSelector: 	#menu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(67371008)
		columns: 	an OrderedCollection(a MorphTreeColumn)
		potentialDropMorph: 	nil
		rowInset: 	0
		columnInset: 	0
		columnResizers: 	an OrderedCollection()
		withHLines: 	false
		preferedPaneColor: 	nil
		indentGap: 	20
		expandedToggleImage: 	an ImageMorph(404226048)
		notExpandedToggleImage: 	an ImageMorph(630980608)
		resizerWidth: 	3
		gapAfterToggle: 	5
		hasToggleAtRoot: 	nil
		topHeader: 	a Morph(285999104)
		topHeaderBackground: 	Color transparent
		unboundLastColumn: 	true
		columnDropUnabled: 	nil
		columnColors: 	{Color transparent. Color transparent}
		rowColors: 	{Color transparent. Color transparent}
		nodeList: 	an OrderedCollection(Node(a DynamicClassGroup ( Last Modified Classes...etc...
		iconBlock: 	nil
		treeLineWidth: 	0
		lineColorBlock: 	nil
		treeLineDashes: 	nil
		listManager: 	a MorphTreeListManager
		mouseOverAllowed: 	false
		maxNodeWidth: 	175.0
		enabled: 	true


[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[(420@160) mouseUp 1149451 nil]
		focusHolder: 	a MorphTreeMorph(293339136)
		aBlock: 	[ self mouseFocus: nil ]
		w: 	a WorldMorph(511705088) [world]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(420@160) corner: (436@176)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(420@160) corner: (436@176)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	a MorphTreeMorph(293339136)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(420@160) mouseUp 1149451 nil]
		targetOffset: 	(9.0@10.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 1149451 420 160 0 0 0 1)
		lastKeyScanCode: 	30
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


BlockClosure>>on:do:
	Receiver: [ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (an...etc...
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :ex | 
ActiveWorld := priorWorld.
ActiveEvent := priorEvent.
A...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	HandMorph>>sendFocusEvent:to:clear:
		startpc: 	67
		numArgs: 	0


WorldMorph(PasteUpMorph)>>becomeActiveDuring:
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 
		aBlock: 	[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder ha...etc...
		priorWorld: 	a WorldMorph(511705088) [world]
		priorHand: 	a HandMorph(760479744)
		priorEvent: 	[(420@160) mouseOver red nil nil]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1535@876)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a NautilusWindow(722468864) a Sta...etc...
		fullBounds: 	(0@0) corner: (1535@876)
		color: 	Color white
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		result: 	nil
		anEvent: 	[(420@160) mouseUp 1149451 nil]
		focusHolder: 	a MorphTreeMorph(293339136)
		aBlock: 	[ self mouseFocus: nil ]
		w: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		bounds: 	(420@160) corner: (436@176)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(420@160) corner: (436@176)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	a MorphTreeMorph(293339136)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(420@160) mouseUp 1149451 nil]
		targetOffset: 	(9.0@10.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 1149451 420 160 0 0 0 1)
		lastKeyScanCode: 	30
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[(420@160) mouseUp 1149451 nil]
		focusHolder: 	a MorphTreeMorph(293339136)
		aBlock: 	[ self mouseFocus: nil ]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(420@160) corner: (436@176)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(420@160) corner: (436@176)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	a MorphTreeMorph(293339136)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(420@160) mouseUp 1149451 nil]
		targetOffset: 	(9.0@10.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 1149451 420 160 0 0 0 1)
		lastKeyScanCode: 	30
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[(420@160) mouseUp 1149451 nil]
	Receiver's instance variables: 
		bounds: 	(420@160) corner: (436@176)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(420@160) corner: (436@176)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	a MorphTreeMorph(293339136)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(420@160) mouseUp 1149451 nil]
		targetOffset: 	(9.0@10.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 1149451 420 160 0 0 0 1)
		lastKeyScanCode: 	30
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>handleEvent:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[(420@160) mouseUp 1149451 nil]
		evt: 	[(420@160) mouseUp 1149451 nil]
	Receiver's instance variables: 
		bounds: 	(420@160) corner: (436@176)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(420@160) corner: (436@176)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	a MorphTreeMorph(293339136)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(420@160) mouseUp 1149451 nil]
		targetOffset: 	(9.0@10.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 1149451 420 160 0 0 0 1)
		lastKeyScanCode: 	30
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


MouseClickState>>handleEvent:from:
	Receiver: a MouseClickState[#firstClickUp]
	Arguments and temporary variables: 
		evt: 	[(420@160) mouseUp 1149451 nil]
		aHand: 	a HandMorph(760479744)
		localEvt: 	[(420@160) mouseUp 1149451 nil]
		timedOut: 	false
		isDrag: 	false
	Receiver's instance variables: 
		clickClient: 	a MorphTreeMorph(293339136)
		clickState: 	#firstClickUp
		firstClickDown: 	[(420@160) mouseDown red 1149389 nil]
		firstClickUp: 	[(420@160) mouseUp 1149451 nil]
		firstClickTime: 	1149389
		clickSelector: 	#click:
		dblClickSelector: 	#doubleClick:
		dblClickTime: 	350
		dblClickTimeoutSelector: 	nil
		dragSelector: 	nil
		dragThreshold: 	10


HandMorph>>handleEvent:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[(420@160) mouseUp 1149451 nil]
		evt: 	[(420@160) mouseUp 1149451 nil]
	Receiver's instance variables: 
		bounds: 	(420@160) corner: (436@176)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(420@160) corner: (436@176)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	a MorphTreeMorph(293339136)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(420@160) mouseUp 1149451 nil]
		targetOffset: 	(9.0@10.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 1149451 420 160 0 0 0 1)
		lastKeyScanCode: 	30
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		evt: 	[(420@160) mouseUp 1149451 nil]
		evtBuf: 	#(1 1149451 420 160 0 0 0 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(420@160) corner: (436@176)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(420@160) corner: (436@176)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	a MorphTreeMorph(293339136)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(420@160) mouseOver nil nil]
		targetOffset: 	(9.0@10.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 1149451 420 160 0 0 0 1)
		lastKeyScanCode: 	30
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
		h: 	a HandMorph(760479744)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (1535@876)
		canvas: 	a FormCanvas on: DisplayScreen(1535x876x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(847773696))(a DropList...etc...
		lastStepTime: 	1149523
		lastStepMessage: 	nil
		lastCycleTime: 	1149611
		alarms: 	a Heap()
		lastAlarmTime: 	1149523
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(760479744))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(760479744))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (1535@876)
		canvas: 	a FormCanvas on: DisplayScreen(1535x876x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(847773696))(a DropList...etc...
		lastStepTime: 	1149523
		lastStepMessage: 	nil
		lastCycleTime: 	1149611
		alarms: 	a Heap()
		lastAlarmTime: 	1149523
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (1535@876)
		canvas: 	a FormCanvas on: DisplayScreen(1535x876x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(847773696))(a DropList...etc...
		lastStepTime: 	1149523
		lastStepMessage: 	nil
		lastCycleTime: 	1149611
		alarms: 	a Heap()
		lastAlarmTime: 	1149523
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (1535@876)
		canvas: 	a FormCanvas on: DisplayScreen(1535x876x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(847773696))(a DropList...etc...
		lastStepTime: 	1149523
		lastStepMessage: 	nil
		lastCycleTime: 	1149611
		alarms: 	a Heap()
		lastAlarmTime: 	1149523
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1535@876)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a NautilusWindow(722468864) a Sta...etc...
		fullBounds: 	(0@0) corner: (1535@876)
		color: 	Color white
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


[ 
World doOneCycle.
Processor yield.
false ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	Transcript


[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ 
World doOneCycle.
Processor yield.
false ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #lastClicked:
MorphTreeListManager>>lastClickedMorph:
MorphTreeListManager>>selectMorph:multiple:clickedTheCheckBox:
MorphTreeListManager>>mouseUp:on:
MorphTreeMorph>>mouseUp:
MorphTreeMorph(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
MorphTreeMorph(Morph)>>handleEvent:
MorphTreeMorph(Morph)>>handleFocusEvent:
[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
MouseClickState>>handleEvent:from:
HandMorph>>handleEvent:
HandMorph>>processEvents
[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ 
World doOneCycle.
Processor yield.
false ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: receiver of "lastClicked:" is nil
3 March 2015 12:03:40.992518 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
NBCogit NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
https://github.com/pharo-project/pharo-vm.git Commit: 4a0d556150d478ff2de3c9624d2f18e6eaa3fa5c Date: 2014-12-18 18:42:53 +0100 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14893

Image: Pharo3.0 [Latest update: #30863]

UndefinedObject(Object)>>doesNotUnderstand: #lastClicked:
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	lastClicked: false
		exception: 	MessageNotUnderstood: receiver of "lastClicked:" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

MorphTreeListManager>>lastClickedMorph:
	Receiver: a MorphTreeListManager
	Arguments and temporary variables: 
		aNodeMorph: 	NodeMorph(Node(entities))
	Receiver's instance variables: 
		keystrokeActionSelector: 	nil
		multipleSelection: 	true
		autoMultiSelection: 	false
		potentialDropMorph: 	nil
		firstClickedMorph: 	NodeMorph(Node(entities))
		lastClickedMorph: 	NodeMorph(nil)
		columnDropUnabled: 	nil
		doubleClickBlock: 	nil
		autoDeselection: 	nil
		searchedElement: 	nil
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		lastSelection: 	0
		client: 	a MorphTreeMorph(293339136)
		isSelectionUpdateFromView: 	false
		isCheckList: 	false
		autoTargetMorph: 	nil
		selectedMorphList: 	a LinkedList()
		removeOnlyLastSelected: 	false


MorphTreeListManager>>selectMorph:multiple:clickedTheCheckBox:
	Receiver: a MorphTreeListManager
	Arguments and temporary variables: 
		aNodeMorph: 	NodeMorph(Node(entities))
		withMultipleSelection: 	false
		checkBox: 	false
		path: 	nil
		mult: 	nil
	Receiver's instance variables: 
		keystrokeActionSelector: 	nil
		multipleSelection: 	true
		autoMultiSelection: 	false
		potentialDropMorph: 	nil
		firstClickedMorph: 	NodeMorph(Node(entities))
		lastClickedMorph: 	NodeMorph(nil)
		columnDropUnabled: 	nil
		doubleClickBlock: 	nil
		autoDeselection: 	nil
		searchedElement: 	nil
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		lastSelection: 	0
		client: 	a MorphTreeMorph(293339136)
		isSelectionUpdateFromView: 	false
		isCheckList: 	false
		autoTargetMorph: 	nil
		selectedMorphList: 	a LinkedList()
		removeOnlyLastSelected: 	false


MorphTreeListManager>>mouseUp:on:
	Receiver: a MorphTreeListManager
	Arguments and temporary variables: 
		event: 	[(473@283) mouseUp 1155879 nil]
		aNodeMorph: 	NodeMorph(Node(entities))
		path: 	nil
		cmdOrCtrl: 	false
		clickedTheCheckbox: 	false
	Receiver's instance variables: 
		keystrokeActionSelector: 	nil
		multipleSelection: 	true
		autoMultiSelection: 	false
		potentialDropMorph: 	nil
		firstClickedMorph: 	NodeMorph(Node(entities))
		lastClickedMorph: 	NodeMorph(nil)
		columnDropUnabled: 	nil
		doubleClickBlock: 	nil
		autoDeselection: 	nil
		searchedElement: 	nil
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		lastSelection: 	0
		client: 	a MorphTreeMorph(293339136)
		isSelectionUpdateFromView: 	false
		isCheckList: 	false
		autoTargetMorph: 	nil
		selectedMorphList: 	a LinkedList()
		removeOnlyLastSelected: 	false


MorphTreeMorph>>mouseUp:
	Receiver: a MorphTreeMorph(293339136)
	Arguments and temporary variables: 
		event: 	[(473@283) mouseUp 1155879 nil]
		nodeMorph: 	NodeMorph(Node(entities))
		wasHigh: 	true
	Receiver's instance variables: 
		bounds: 	(411.0@150.0) corner: (619.0@373.0)
		owner: 	a PanelMorph(208142336)
		submorphs: 	an Array(a ScrollBar(346816512) a Morph(285999104) a MorphTreeTransf...etc...
		fullBounds: 	(411@150) corner: (619@373)
		color: 	(Color r: 0.979 g: 0.979 b: 0.979 alpha: 1.0)
		extension: 	a MorphExtension (786169856) [other:  (dropEnabled -> true) (announc...etc...
		borderWidth: 	0
		borderColor: 	Color black
		model: 	a PackageTreeModel
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(346816512)
		scroller: 	a MorphTreeTransformMorph(586678272)
		getMenuSelector: 	#menu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(67371008)
		columns: 	an OrderedCollection(a MorphTreeColumn)
		potentialDropMorph: 	nil
		rowInset: 	0
		columnInset: 	0
		columnResizers: 	an OrderedCollection()
		withHLines: 	false
		preferedPaneColor: 	nil
		indentGap: 	20
		expandedToggleImage: 	an ImageMorph(404226048)
		notExpandedToggleImage: 	an ImageMorph(630980608)
		resizerWidth: 	3
		gapAfterToggle: 	5
		hasToggleAtRoot: 	nil
		topHeader: 	a Morph(285999104)
		topHeaderBackground: 	Color transparent
		unboundLastColumn: 	true
		columnDropUnabled: 	nil
		columnColors: 	{Color transparent. Color transparent}
		rowColors: 	{Color transparent. Color transparent}
		nodeList: 	an OrderedCollection(Node(a DynamicClassGroup ( Last Modified Classes...etc...
		iconBlock: 	nil
		treeLineWidth: 	0
		lineColorBlock: 	nil
		treeLineDashes: 	nil
		listManager: 	a MorphTreeListManager
		mouseOverAllowed: 	false
		maxNodeWidth: 	175.0
		enabled: 	true


MorphTreeMorph(Morph)>>handleMouseUp:
	Receiver: a MorphTreeMorph(293339136)
	Arguments and temporary variables: 
		anEvent: 	[(473@283) mouseUp 1155879 nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(411.0@150.0) corner: (619.0@373.0)
		owner: 	a PanelMorph(208142336)
		submorphs: 	an Array(a ScrollBar(346816512) a Morph(285999104) a MorphTreeTransf...etc...
		fullBounds: 	(411@150) corner: (619@373)
		color: 	(Color r: 0.979 g: 0.979 b: 0.979 alpha: 1.0)
		extension: 	a MorphExtension (786169856) [other:  (dropEnabled -> true) (announc...etc...
		borderWidth: 	0
		borderColor: 	Color black
		model: 	a PackageTreeModel
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(346816512)
		scroller: 	a MorphTreeTransformMorph(586678272)
		getMenuSelector: 	#menu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(67371008)
		columns: 	an OrderedCollection(a MorphTreeColumn)
		potentialDropMorph: 	nil
		rowInset: 	0
		columnInset: 	0
		columnResizers: 	an OrderedCollection()
		withHLines: 	false
		preferedPaneColor: 	nil
		indentGap: 	20
		expandedToggleImage: 	an ImageMorph(404226048)
		notExpandedToggleImage: 	an ImageMorph(630980608)
		resizerWidth: 	3
		gapAfterToggle: 	5
		hasToggleAtRoot: 	nil
		topHeader: 	a Morph(285999104)
		topHeaderBackground: 	Color transparent
		unboundLastColumn: 	true
		columnDropUnabled: 	nil
		columnColors: 	{Color transparent. Color transparent}
		rowColors: 	{Color transparent. Color transparent}
		nodeList: 	an OrderedCollection(Node(a DynamicClassGroup ( Last Modified Classes...etc...
		iconBlock: 	nil
		treeLineWidth: 	0
		lineColorBlock: 	nil
		treeLineDashes: 	nil
		listManager: 	a MorphTreeListManager
		mouseOverAllowed: 	false
		maxNodeWidth: 	175.0
		enabled: 	true


MouseButtonEvent>>sentTo:
	Receiver: [(473@283) mouseUp 1155879 nil]
	Arguments and temporary variables: 
		anObject: 	a MorphTreeMorph(293339136)
	Receiver's instance variables: 
		timeStamp: 	1155879
		source: 	a HandMorph(760479744)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(473@283)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


MorphTreeMorph(Morph)>>handleEvent:
	Receiver: a MorphTreeMorph(293339136)
	Arguments and temporary variables: 
		anEvent: 	[(473@283) mouseUp 1155879 nil]
	Receiver's instance variables: 
		bounds: 	(411.0@150.0) corner: (619.0@373.0)
		owner: 	a PanelMorph(208142336)
		submorphs: 	an Array(a ScrollBar(346816512) a Morph(285999104) a MorphTreeTransf...etc...
		fullBounds: 	(411@150) corner: (619@373)
		color: 	(Color r: 0.979 g: 0.979 b: 0.979 alpha: 1.0)
		extension: 	a MorphExtension (786169856) [other:  (dropEnabled -> true) (announc...etc...
		borderWidth: 	0
		borderColor: 	Color black
		model: 	a PackageTreeModel
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(346816512)
		scroller: 	a MorphTreeTransformMorph(586678272)
		getMenuSelector: 	#menu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(67371008)
		columns: 	an OrderedCollection(a MorphTreeColumn)
		potentialDropMorph: 	nil
		rowInset: 	0
		columnInset: 	0
		columnResizers: 	an OrderedCollection()
		withHLines: 	false
		preferedPaneColor: 	nil
		indentGap: 	20
		expandedToggleImage: 	an ImageMorph(404226048)
		notExpandedToggleImage: 	an ImageMorph(630980608)
		resizerWidth: 	3
		gapAfterToggle: 	5
		hasToggleAtRoot: 	nil
		topHeader: 	a Morph(285999104)
		topHeaderBackground: 	Color transparent
		unboundLastColumn: 	true
		columnDropUnabled: 	nil
		columnColors: 	{Color transparent. Color transparent}
		rowColors: 	{Color transparent. Color transparent}
		nodeList: 	an OrderedCollection(Node(a DynamicClassGroup ( Last Modified Classes...etc...
		iconBlock: 	nil
		treeLineWidth: 	0
		lineColorBlock: 	nil
		treeLineDashes: 	nil
		listManager: 	a MorphTreeListManager
		mouseOverAllowed: 	false
		maxNodeWidth: 	175.0
		enabled: 	true


MorphTreeMorph(Morph)>>handleFocusEvent:
	Receiver: a MorphTreeMorph(293339136)
	Arguments and temporary variables: 
		anEvent: 	[(473@283) mouseUp 1155879 nil]
	Receiver's instance variables: 
		bounds: 	(411.0@150.0) corner: (619.0@373.0)
		owner: 	a PanelMorph(208142336)
		submorphs: 	an Array(a ScrollBar(346816512) a Morph(285999104) a MorphTreeTransf...etc...
		fullBounds: 	(411@150) corner: (619@373)
		color: 	(Color r: 0.979 g: 0.979 b: 0.979 alpha: 1.0)
		extension: 	a MorphExtension (786169856) [other:  (dropEnabled -> true) (announc...etc...
		borderWidth: 	0
		borderColor: 	Color black
		model: 	a PackageTreeModel
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(346816512)
		scroller: 	a MorphTreeTransformMorph(586678272)
		getMenuSelector: 	#menu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(67371008)
		columns: 	an OrderedCollection(a MorphTreeColumn)
		potentialDropMorph: 	nil
		rowInset: 	0
		columnInset: 	0
		columnResizers: 	an OrderedCollection()
		withHLines: 	false
		preferedPaneColor: 	nil
		indentGap: 	20
		expandedToggleImage: 	an ImageMorph(404226048)
		notExpandedToggleImage: 	an ImageMorph(630980608)
		resizerWidth: 	3
		gapAfterToggle: 	5
		hasToggleAtRoot: 	nil
		topHeader: 	a Morph(285999104)
		topHeaderBackground: 	Color transparent
		unboundLastColumn: 	true
		columnDropUnabled: 	nil
		columnColors: 	{Color transparent. Color transparent}
		rowColors: 	{Color transparent. Color transparent}
		nodeList: 	an OrderedCollection(Node(a DynamicClassGroup ( Last Modified Classes...etc...
		iconBlock: 	nil
		treeLineWidth: 	0
		lineColorBlock: 	nil
		treeLineDashes: 	nil
		listManager: 	a MorphTreeListManager
		mouseOverAllowed: 	false
		maxNodeWidth: 	175.0
		enabled: 	true


[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[(473@283) mouseUp 1155879 nil]
		focusHolder: 	a MorphTreeMorph(293339136)
		aBlock: 	[ self mouseFocus: nil ]
		w: 	a WorldMorph(511705088) [world]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(473@283) corner: (489@299)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(473@283) corner: (489@299)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	a MorphTreeMorph(293339136)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(473@283) mouseOver nil nil]
		targetOffset: 	(62.0@133.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 1155879 473 283 0 0 0 1)
		lastKeyScanCode: 	30
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


BlockClosure>>on:do:
	Receiver: [ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (an...etc...
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :ex | 
ActiveWorld := priorWorld.
ActiveEvent := priorEvent.
A...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	HandMorph>>sendFocusEvent:to:clear:
		startpc: 	67
		numArgs: 	0


WorldMorph(PasteUpMorph)>>becomeActiveDuring:
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 
		aBlock: 	[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder ha...etc...
		priorWorld: 	a WorldMorph(511705088) [world]
		priorHand: 	a HandMorph(760479744)
		priorEvent: 	[(473@283) mouseOver red nil nil]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1535@876)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a NautilusWindow(722468864) a Sta...etc...
		fullBounds: 	(0@0) corner: (1535@876)
		color: 	Color white
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		result: 	nil
		anEvent: 	[(473@283) mouseUp 1155879 nil]
		focusHolder: 	a MorphTreeMorph(293339136)
		aBlock: 	[ self mouseFocus: nil ]
		w: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		bounds: 	(473@283) corner: (489@299)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(473@283) corner: (489@299)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	a MorphTreeMorph(293339136)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(473@283) mouseOver nil nil]
		targetOffset: 	(62.0@133.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 1155879 473 283 0 0 0 1)
		lastKeyScanCode: 	30
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[(473@283) mouseUp 1155879 nil]
		focusHolder: 	a MorphTreeMorph(293339136)
		aBlock: 	[ self mouseFocus: nil ]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(473@283) corner: (489@299)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(473@283) corner: (489@299)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	a MorphTreeMorph(293339136)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(473@283) mouseOver nil nil]
		targetOffset: 	(62.0@133.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 1155879 473 283 0 0 0 1)
		lastKeyScanCode: 	30
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[(473@283) mouseUp 1155879 nil]
	Receiver's instance variables: 
		bounds: 	(473@283) corner: (489@299)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(473@283) corner: (489@299)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	a MorphTreeMorph(293339136)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(473@283) mouseOver nil nil]
		targetOffset: 	(62.0@133.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 1155879 473 283 0 0 0 1)
		lastKeyScanCode: 	30
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>handleEvent:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[(473@283) mouseUp 1155879 nil]
		evt: 	[(473@283) mouseUp 1155879 nil]
	Receiver's instance variables: 
		bounds: 	(473@283) corner: (489@299)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(473@283) corner: (489@299)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	a MorphTreeMorph(293339136)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(473@283) mouseOver nil nil]
		targetOffset: 	(62.0@133.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 1155879 473 283 0 0 0 1)
		lastKeyScanCode: 	30
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


MouseClickState>>handleEvent:from:
	Receiver: a MouseClickState[#firstClickUp]
	Arguments and temporary variables: 
		evt: 	[(473@283) mouseUp 1155879 nil]
		aHand: 	a HandMorph(760479744)
		localEvt: 	[(473@283) mouseUp 1155879 nil]
		timedOut: 	false
		isDrag: 	false
	Receiver's instance variables: 
		clickClient: 	a MorphTreeMorph(293339136)
		clickState: 	#firstClickUp
		firstClickDown: 	[(473@283) mouseDown red 1155867 nil]
		firstClickUp: 	[(473@283) mouseUp 1155879 nil]
		firstClickTime: 	1155867
		clickSelector: 	#click:
		dblClickSelector: 	#doubleClick:
		dblClickTime: 	350
		dblClickTimeoutSelector: 	nil
		dragSelector: 	nil
		dragThreshold: 	10


HandMorph>>handleEvent:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[(473@283) mouseUp 1155879 nil]
		evt: 	[(473@283) mouseUp 1155879 nil]
	Receiver's instance variables: 
		bounds: 	(473@283) corner: (489@299)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(473@283) corner: (489@299)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	a MorphTreeMorph(293339136)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(473@283) mouseOver nil nil]
		targetOffset: 	(62.0@133.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 1155879 473 283 0 0 0 1)
		lastKeyScanCode: 	30
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		evt: 	[(473@283) mouseUp 1155879 nil]
		evtBuf: 	#(1 1155879 473 283 0 0 0 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(473@283) corner: (489@299)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(473@283) corner: (489@299)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	a MorphTreeMorph(293339136)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(473@283) mouseOver nil nil]
		targetOffset: 	(62.0@133.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 1155879 473 283 0 0 0 1)
		lastKeyScanCode: 	30
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
		h: 	a HandMorph(760479744)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (1535@876)
		canvas: 	a FormCanvas on: DisplayScreen(1535x876x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(866648064))(a SearchMorp...etc...
		lastStepTime: 	1155913
		lastStepMessage: 	nil
		lastCycleTime: 	1155913
		alarms: 	a Heap()
		lastAlarmTime: 	1155913
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(760479744))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(760479744))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (1535@876)
		canvas: 	a FormCanvas on: DisplayScreen(1535x876x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(866648064))(a SearchMorp...etc...
		lastStepTime: 	1155913
		lastStepMessage: 	nil
		lastCycleTime: 	1155913
		alarms: 	a Heap()
		lastAlarmTime: 	1155913
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (1535@876)
		canvas: 	a FormCanvas on: DisplayScreen(1535x876x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(866648064))(a SearchMorp...etc...
		lastStepTime: 	1155913
		lastStepMessage: 	nil
		lastCycleTime: 	1155913
		alarms: 	a Heap()
		lastAlarmTime: 	1155913
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (1535@876)
		canvas: 	a FormCanvas on: DisplayScreen(1535x876x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(866648064))(a SearchMorp...etc...
		lastStepTime: 	1155913
		lastStepMessage: 	nil
		lastCycleTime: 	1155913
		alarms: 	a Heap()
		lastAlarmTime: 	1155913
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1535@876)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a NautilusWindow(722468864) a Sta...etc...
		fullBounds: 	(0@0) corner: (1535@876)
		color: 	Color white
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


[ 
World doOneCycle.
Processor yield.
false ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	Transcript


[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ 
World doOneCycle.
Processor yield.
false ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #lastClicked:
MorphTreeListManager>>lastClickedMorph:
MorphTreeListManager>>selectMorph:multiple:clickedTheCheckBox:
MorphTreeListManager>>mouseUp:on:
MorphTreeMorph>>mouseUp:
MorphTreeMorph(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
MorphTreeMorph(Morph)>>handleEvent:
MorphTreeMorph(Morph)>>handleFocusEvent:
[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
MouseClickState>>handleEvent:from:
HandMorph>>handleEvent:
HandMorph>>processEvents
[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ 
World doOneCycle.
Processor yield.
false ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: receiver of "lastClicked:" is nil
3 March 2015 12:03:44.947174 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
NBCogit NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
https://github.com/pharo-project/pharo-vm.git Commit: 4a0d556150d478ff2de3c9624d2f18e6eaa3fa5c Date: 2014-12-18 18:42:53 +0100 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14893

Image: Pharo3.0 [Latest update: #30863]

UndefinedObject(Object)>>doesNotUnderstand: #lastClicked:
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	lastClicked: false
		exception: 	MessageNotUnderstood: receiver of "lastClicked:" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

MorphTreeListManager>>lastClickedMorph:
	Receiver: a MorphTreeListManager
	Arguments and temporary variables: 
		aNodeMorph: 	NodeMorph(Node(model))
	Receiver's instance variables: 
		keystrokeActionSelector: 	nil
		multipleSelection: 	true
		autoMultiSelection: 	false
		potentialDropMorph: 	nil
		firstClickedMorph: 	NodeMorph(Node(model))
		lastClickedMorph: 	NodeMorph(nil)
		columnDropUnabled: 	nil
		doubleClickBlock: 	nil
		autoDeselection: 	nil
		searchedElement: 	nil
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		lastSelection: 	0
		client: 	a MorphTreeMorph(293339136)
		isSelectionUpdateFromView: 	false
		isCheckList: 	false
		autoTargetMorph: 	nil
		selectedMorphList: 	a LinkedList()
		removeOnlyLastSelected: 	false


MorphTreeListManager>>selectMorph:multiple:clickedTheCheckBox:
	Receiver: a MorphTreeListManager
	Arguments and temporary variables: 
		aNodeMorph: 	NodeMorph(Node(model))
		withMultipleSelection: 	false
		checkBox: 	false
		path: 	nil
		mult: 	nil
	Receiver's instance variables: 
		keystrokeActionSelector: 	nil
		multipleSelection: 	true
		autoMultiSelection: 	false
		potentialDropMorph: 	nil
		firstClickedMorph: 	NodeMorph(Node(model))
		lastClickedMorph: 	NodeMorph(nil)
		columnDropUnabled: 	nil
		doubleClickBlock: 	nil
		autoDeselection: 	nil
		searchedElement: 	nil
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		lastSelection: 	0
		client: 	a MorphTreeMorph(293339136)
		isSelectionUpdateFromView: 	false
		isCheckList: 	false
		autoTargetMorph: 	nil
		selectedMorphList: 	a LinkedList()
		removeOnlyLastSelected: 	false


MorphTreeListManager>>mouseUp:on:
	Receiver: a MorphTreeListManager
	Arguments and temporary variables: 
		event: 	[(481@297) mouseUp 1159821 nil]
		aNodeMorph: 	NodeMorph(Node(model))
		path: 	nil
		cmdOrCtrl: 	false
		clickedTheCheckbox: 	false
	Receiver's instance variables: 
		keystrokeActionSelector: 	nil
		multipleSelection: 	true
		autoMultiSelection: 	false
		potentialDropMorph: 	nil
		firstClickedMorph: 	NodeMorph(Node(model))
		lastClickedMorph: 	NodeMorph(nil)
		columnDropUnabled: 	nil
		doubleClickBlock: 	nil
		autoDeselection: 	nil
		searchedElement: 	nil
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		lastSelection: 	0
		client: 	a MorphTreeMorph(293339136)
		isSelectionUpdateFromView: 	false
		isCheckList: 	false
		autoTargetMorph: 	nil
		selectedMorphList: 	a LinkedList()
		removeOnlyLastSelected: 	false


MorphTreeMorph>>mouseUp:
	Receiver: a MorphTreeMorph(293339136)
	Arguments and temporary variables: 
		event: 	[(481@297) mouseUp 1159821 nil]
		nodeMorph: 	NodeMorph(Node(model))
		wasHigh: 	true
	Receiver's instance variables: 
		bounds: 	(411.0@150.0) corner: (619.0@373.0)
		owner: 	a PanelMorph(208142336)
		submorphs: 	an Array(a ScrollBar(346816512) a Morph(285999104) a MorphTreeTransf...etc...
		fullBounds: 	(411@150) corner: (619@373)
		color: 	(Color r: 0.979 g: 0.979 b: 0.979 alpha: 1.0)
		extension: 	a MorphExtension (786169856) [other:  (dropEnabled -> true) (announc...etc...
		borderWidth: 	0
		borderColor: 	Color black
		model: 	a PackageTreeModel
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(346816512)
		scroller: 	a MorphTreeTransformMorph(586678272)
		getMenuSelector: 	#menu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(67371008)
		columns: 	an OrderedCollection(a MorphTreeColumn)
		potentialDropMorph: 	nil
		rowInset: 	0
		columnInset: 	0
		columnResizers: 	an OrderedCollection()
		withHLines: 	false
		preferedPaneColor: 	nil
		indentGap: 	20
		expandedToggleImage: 	an ImageMorph(404226048)
		notExpandedToggleImage: 	an ImageMorph(630980608)
		resizerWidth: 	3
		gapAfterToggle: 	5
		hasToggleAtRoot: 	nil
		topHeader: 	a Morph(285999104)
		topHeaderBackground: 	Color transparent
		unboundLastColumn: 	true
		columnDropUnabled: 	nil
		columnColors: 	{Color transparent. Color transparent}
		rowColors: 	{Color transparent. Color transparent}
		nodeList: 	an OrderedCollection(Node(a DynamicClassGroup ( Last Modified Classes...etc...
		iconBlock: 	nil
		treeLineWidth: 	0
		lineColorBlock: 	nil
		treeLineDashes: 	nil
		listManager: 	a MorphTreeListManager
		mouseOverAllowed: 	false
		maxNodeWidth: 	175.0
		enabled: 	true


MorphTreeMorph(Morph)>>handleMouseUp:
	Receiver: a MorphTreeMorph(293339136)
	Arguments and temporary variables: 
		anEvent: 	[(481@297) mouseUp 1159821 nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(411.0@150.0) corner: (619.0@373.0)
		owner: 	a PanelMorph(208142336)
		submorphs: 	an Array(a ScrollBar(346816512) a Morph(285999104) a MorphTreeTransf...etc...
		fullBounds: 	(411@150) corner: (619@373)
		color: 	(Color r: 0.979 g: 0.979 b: 0.979 alpha: 1.0)
		extension: 	a MorphExtension (786169856) [other:  (dropEnabled -> true) (announc...etc...
		borderWidth: 	0
		borderColor: 	Color black
		model: 	a PackageTreeModel
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(346816512)
		scroller: 	a MorphTreeTransformMorph(586678272)
		getMenuSelector: 	#menu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(67371008)
		columns: 	an OrderedCollection(a MorphTreeColumn)
		potentialDropMorph: 	nil
		rowInset: 	0
		columnInset: 	0
		columnResizers: 	an OrderedCollection()
		withHLines: 	false
		preferedPaneColor: 	nil
		indentGap: 	20
		expandedToggleImage: 	an ImageMorph(404226048)
		notExpandedToggleImage: 	an ImageMorph(630980608)
		resizerWidth: 	3
		gapAfterToggle: 	5
		hasToggleAtRoot: 	nil
		topHeader: 	a Morph(285999104)
		topHeaderBackground: 	Color transparent
		unboundLastColumn: 	true
		columnDropUnabled: 	nil
		columnColors: 	{Color transparent. Color transparent}
		rowColors: 	{Color transparent. Color transparent}
		nodeList: 	an OrderedCollection(Node(a DynamicClassGroup ( Last Modified Classes...etc...
		iconBlock: 	nil
		treeLineWidth: 	0
		lineColorBlock: 	nil
		treeLineDashes: 	nil
		listManager: 	a MorphTreeListManager
		mouseOverAllowed: 	false
		maxNodeWidth: 	175.0
		enabled: 	true


MouseButtonEvent>>sentTo:
	Receiver: [(481@297) mouseUp 1159821 nil]
	Arguments and temporary variables: 
		anObject: 	a MorphTreeMorph(293339136)
	Receiver's instance variables: 
		timeStamp: 	1159821
		source: 	a HandMorph(760479744)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(481@297)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


MorphTreeMorph(Morph)>>handleEvent:
	Receiver: a MorphTreeMorph(293339136)
	Arguments and temporary variables: 
		anEvent: 	[(481@297) mouseUp 1159821 nil]
	Receiver's instance variables: 
		bounds: 	(411.0@150.0) corner: (619.0@373.0)
		owner: 	a PanelMorph(208142336)
		submorphs: 	an Array(a ScrollBar(346816512) a Morph(285999104) a MorphTreeTransf...etc...
		fullBounds: 	(411@150) corner: (619@373)
		color: 	(Color r: 0.979 g: 0.979 b: 0.979 alpha: 1.0)
		extension: 	a MorphExtension (786169856) [other:  (dropEnabled -> true) (announc...etc...
		borderWidth: 	0
		borderColor: 	Color black
		model: 	a PackageTreeModel
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(346816512)
		scroller: 	a MorphTreeTransformMorph(586678272)
		getMenuSelector: 	#menu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(67371008)
		columns: 	an OrderedCollection(a MorphTreeColumn)
		potentialDropMorph: 	nil
		rowInset: 	0
		columnInset: 	0
		columnResizers: 	an OrderedCollection()
		withHLines: 	false
		preferedPaneColor: 	nil
		indentGap: 	20
		expandedToggleImage: 	an ImageMorph(404226048)
		notExpandedToggleImage: 	an ImageMorph(630980608)
		resizerWidth: 	3
		gapAfterToggle: 	5
		hasToggleAtRoot: 	nil
		topHeader: 	a Morph(285999104)
		topHeaderBackground: 	Color transparent
		unboundLastColumn: 	true
		columnDropUnabled: 	nil
		columnColors: 	{Color transparent. Color transparent}
		rowColors: 	{Color transparent. Color transparent}
		nodeList: 	an OrderedCollection(Node(a DynamicClassGroup ( Last Modified Classes...etc...
		iconBlock: 	nil
		treeLineWidth: 	0
		lineColorBlock: 	nil
		treeLineDashes: 	nil
		listManager: 	a MorphTreeListManager
		mouseOverAllowed: 	false
		maxNodeWidth: 	175.0
		enabled: 	true


MorphTreeMorph(Morph)>>handleFocusEvent:
	Receiver: a MorphTreeMorph(293339136)
	Arguments and temporary variables: 
		anEvent: 	[(481@297) mouseUp 1159821 nil]
	Receiver's instance variables: 
		bounds: 	(411.0@150.0) corner: (619.0@373.0)
		owner: 	a PanelMorph(208142336)
		submorphs: 	an Array(a ScrollBar(346816512) a Morph(285999104) a MorphTreeTransf...etc...
		fullBounds: 	(411@150) corner: (619@373)
		color: 	(Color r: 0.979 g: 0.979 b: 0.979 alpha: 1.0)
		extension: 	a MorphExtension (786169856) [other:  (dropEnabled -> true) (announc...etc...
		borderWidth: 	0
		borderColor: 	Color black
		model: 	a PackageTreeModel
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(346816512)
		scroller: 	a MorphTreeTransformMorph(586678272)
		getMenuSelector: 	#menu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(67371008)
		columns: 	an OrderedCollection(a MorphTreeColumn)
		potentialDropMorph: 	nil
		rowInset: 	0
		columnInset: 	0
		columnResizers: 	an OrderedCollection()
		withHLines: 	false
		preferedPaneColor: 	nil
		indentGap: 	20
		expandedToggleImage: 	an ImageMorph(404226048)
		notExpandedToggleImage: 	an ImageMorph(630980608)
		resizerWidth: 	3
		gapAfterToggle: 	5
		hasToggleAtRoot: 	nil
		topHeader: 	a Morph(285999104)
		topHeaderBackground: 	Color transparent
		unboundLastColumn: 	true
		columnDropUnabled: 	nil
		columnColors: 	{Color transparent. Color transparent}
		rowColors: 	{Color transparent. Color transparent}
		nodeList: 	an OrderedCollection(Node(a DynamicClassGroup ( Last Modified Classes...etc...
		iconBlock: 	nil
		treeLineWidth: 	0
		lineColorBlock: 	nil
		treeLineDashes: 	nil
		listManager: 	a MorphTreeListManager
		mouseOverAllowed: 	false
		maxNodeWidth: 	175.0
		enabled: 	true


[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[(481@297) mouseUp 1159821 nil]
		focusHolder: 	a MorphTreeMorph(293339136)
		aBlock: 	[ self mouseFocus: nil ]
		w: 	a WorldMorph(511705088) [world]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(481@297) corner: (497@313)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(481@297) corner: (497@313)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	a MorphTreeMorph(293339136)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(481@297) mouseOver nil nil]
		targetOffset: 	(70.0@147.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 1159821 481 297 0 0 0 1)
		lastKeyScanCode: 	30
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


BlockClosure>>on:do:
	Receiver: [ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (an...etc...
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :ex | 
ActiveWorld := priorWorld.
ActiveEvent := priorEvent.
A...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	HandMorph>>sendFocusEvent:to:clear:
		startpc: 	67
		numArgs: 	0


WorldMorph(PasteUpMorph)>>becomeActiveDuring:
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 
		aBlock: 	[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder ha...etc...
		priorWorld: 	a WorldMorph(511705088) [world]
		priorHand: 	a HandMorph(760479744)
		priorEvent: 	[(481@297) mouseOver red nil nil]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1535@876)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a NautilusWindow(722468864) a Sta...etc...
		fullBounds: 	(0@0) corner: (1535@876)
		color: 	Color white
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		result: 	nil
		anEvent: 	[(481@297) mouseUp 1159821 nil]
		focusHolder: 	a MorphTreeMorph(293339136)
		aBlock: 	[ self mouseFocus: nil ]
		w: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		bounds: 	(481@297) corner: (497@313)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(481@297) corner: (497@313)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	a MorphTreeMorph(293339136)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(481@297) mouseOver nil nil]
		targetOffset: 	(70.0@147.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 1159821 481 297 0 0 0 1)
		lastKeyScanCode: 	30
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[(481@297) mouseUp 1159821 nil]
		focusHolder: 	a MorphTreeMorph(293339136)
		aBlock: 	[ self mouseFocus: nil ]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(481@297) corner: (497@313)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(481@297) corner: (497@313)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	a MorphTreeMorph(293339136)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(481@297) mouseOver nil nil]
		targetOffset: 	(70.0@147.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 1159821 481 297 0 0 0 1)
		lastKeyScanCode: 	30
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[(481@297) mouseUp 1159821 nil]
	Receiver's instance variables: 
		bounds: 	(481@297) corner: (497@313)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(481@297) corner: (497@313)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	a MorphTreeMorph(293339136)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(481@297) mouseOver nil nil]
		targetOffset: 	(70.0@147.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 1159821 481 297 0 0 0 1)
		lastKeyScanCode: 	30
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>handleEvent:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[(481@297) mouseUp 1159821 nil]
		evt: 	[(481@297) mouseUp 1159821 nil]
	Receiver's instance variables: 
		bounds: 	(481@297) corner: (497@313)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(481@297) corner: (497@313)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	a MorphTreeMorph(293339136)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(481@297) mouseOver nil nil]
		targetOffset: 	(70.0@147.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 1159821 481 297 0 0 0 1)
		lastKeyScanCode: 	30
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


MouseClickState>>handleEvent:from:
	Receiver: a MouseClickState[#firstClickUp]
	Arguments and temporary variables: 
		evt: 	[(481@297) mouseUp 1159821 nil]
		aHand: 	a HandMorph(760479744)
		localEvt: 	[(481@297) mouseUp 1159821 nil]
		timedOut: 	false
		isDrag: 	false
	Receiver's instance variables: 
		clickClient: 	a MorphTreeMorph(293339136)
		clickState: 	#firstClickUp
		firstClickDown: 	[(481@297) mouseDown red 1159799 nil]
		firstClickUp: 	[(481@297) mouseUp 1159821 nil]
		firstClickTime: 	1159799
		clickSelector: 	#click:
		dblClickSelector: 	#doubleClick:
		dblClickTime: 	350
		dblClickTimeoutSelector: 	nil
		dragSelector: 	nil
		dragThreshold: 	10


HandMorph>>handleEvent:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[(481@297) mouseUp 1159821 nil]
		evt: 	[(481@297) mouseUp 1159821 nil]
	Receiver's instance variables: 
		bounds: 	(481@297) corner: (497@313)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(481@297) corner: (497@313)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	a MorphTreeMorph(293339136)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(481@297) mouseOver nil nil]
		targetOffset: 	(70.0@147.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 1159821 481 297 0 0 0 1)
		lastKeyScanCode: 	30
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		evt: 	[(481@297) mouseUp 1159821 nil]
		evtBuf: 	#(1 1159821 481 297 0 0 0 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(481@297) corner: (497@313)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(481@297) corner: (497@313)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	a MorphTreeMorph(293339136)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(481@297) mouseOver nil nil]
		targetOffset: 	(70.0@147.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 1159821 481 297 0 0 0 1)
		lastKeyScanCode: 	30
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
		h: 	a HandMorph(760479744)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (1535@876)
		canvas: 	a FormCanvas on: DisplayScreen(1535x876x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(351272960))(a SearchMorp...etc...
		lastStepTime: 	1159863
		lastStepMessage: 	nil
		lastCycleTime: 	1159863
		alarms: 	a Heap()
		lastAlarmTime: 	1159863
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(760479744))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(760479744))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (1535@876)
		canvas: 	a FormCanvas on: DisplayScreen(1535x876x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(351272960))(a SearchMorp...etc...
		lastStepTime: 	1159863
		lastStepMessage: 	nil
		lastCycleTime: 	1159863
		alarms: 	a Heap()
		lastAlarmTime: 	1159863
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (1535@876)
		canvas: 	a FormCanvas on: DisplayScreen(1535x876x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(351272960))(a SearchMorp...etc...
		lastStepTime: 	1159863
		lastStepMessage: 	nil
		lastCycleTime: 	1159863
		alarms: 	a Heap()
		lastAlarmTime: 	1159863
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (1535@876)
		canvas: 	a FormCanvas on: DisplayScreen(1535x876x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(351272960))(a SearchMorp...etc...
		lastStepTime: 	1159863
		lastStepMessage: 	nil
		lastCycleTime: 	1159863
		alarms: 	a Heap()
		lastAlarmTime: 	1159863
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1535@876)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a NautilusWindow(722468864) a Sta...etc...
		fullBounds: 	(0@0) corner: (1535@876)
		color: 	Color white
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


[ 
World doOneCycle.
Processor yield.
false ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	Transcript


[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ 
World doOneCycle.
Processor yield.
false ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #lastClicked:
MorphTreeListManager>>lastClickedMorph:
MorphTreeListManager>>selectMorph:multiple:clickedTheCheckBox:
MorphTreeListManager>>mouseUp:on:
MorphTreeMorph>>mouseUp:
MorphTreeMorph(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
MorphTreeMorph(Morph)>>handleEvent:
MorphTreeMorph(Morph)>>handleFocusEvent:
[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
MouseClickState>>handleEvent:from:
HandMorph>>handleEvent:
HandMorph>>processEvents
[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ 
World doOneCycle.
Processor yield.
false ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
User Interrupt
3 March 2015 12:12:02.975287 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
NBCogit NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
https://github.com/pharo-project/pharo-vm.git Commit: 4a0d556150d478ff2de3c9624d2f18e6eaa3fa5c Date: 2014-12-18 18:42:53 +0100 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14893

Image: Pharo3.0 [Latest update: #30863]

[ :each | each ifNotNil: [ aBlock value: each ] ] in Dictionary>>associationsDo:
	Receiver: a Dictionary('<'->'/' '>'->'/' )
	Arguments and temporary variables: 
		aBlock: 	[ :association | aBlock value: association key ]
		each: 	nil
	Receiver's instance variables: 
		tally: 	2
		array: 	{nil. nil. '>'->'/'. '<'->'/'. nil}


Array(SequenceableCollection)>>do:
	Receiver: {nil. nil. '>'->'/'. '<'->'/'. nil}
	Arguments and temporary variables: 
		aBlock: 	[ :each | each ifNotNil: [ aBlock value: each ] ]
		index: 	2
	Receiver's instance variables: 
{nil. nil. '>'->'/'. '<'->'/'. nil}

Dictionary>>associationsDo:
	Receiver: a Dictionary('<'->'/' '>'->'/' )
	Arguments and temporary variables: 
		aBlock: 	[ :association | aBlock value: association key ]
	Receiver's instance variables: 
		tally: 	2
		array: 	{nil. nil. '>'->'/'. '<'->'/'. nil}


Dictionary>>keysDo:
	Receiver: a Dictionary('<'->'/' '>'->'/' )
	Arguments and temporary variables: 
		aBlock: 	[ :key | s nextPut: key ]
	Receiver's instance variables: 
		tally: 	2
		array: 	{nil. nil. '>'->'/'. '<'->'/'. nil}


[ :s | self keysDo: [ :key | s nextPut: key ] ] in Dictionary>>keys
	Receiver: a Dictionary('<'->'/' '>'->'/' )
	Arguments and temporary variables: 
		s: 	a WriteStream
	Receiver's instance variables: 
		tally: 	2
		array: 	{nil. nil. '>'->'/'. '<'->'/'. nil}


Array class(SequenceableCollection class)>>new:streamContents:
	Receiver: Array
	Arguments and temporary variables: 
		newSize: 	2
		blockWithArg: 	[ :s | self keysDo: [ :key | s nextPut: key ] ]
		stream: 	a WriteStream
	Receiver's instance variables: 
		superclass: 	ArrayedCollection
		methodDict: 	a MethodDictionary(#'+*'->Array>>#'+*' #asArray->Array>>#asArray #a...etc...
		format: 	6402
		layout: 	a VariableLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{WeakArray. WeakActionSequence. Cubic. MetacelloMethodSectionPath}
		name: 	#Array
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Collections-Sequenceable'
		traitComposition: 	{}
		localSelectors: 	nil


Dictionary>>keys
	Receiver: a Dictionary('<'->'/' '>'->'/' )
	Arguments and temporary variables: 

	Receiver's instance variables: 
		tally: 	2
		array: 	{nil. nil. '>'->'/'. '<'->'/'. nil}


DIUtil class>>buildDictionaryFromList:
	Receiver: DIUtil
	Arguments and temporary variables: 
		aList: 	{'>'->'/'. '<'->'/'}
		result: 	a Dictionary('<'->'/' '>'->'/' )
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary()
		format: 	2
		layout: 	a FixedLayout
		instanceVariables: 	#()
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#DIUtil
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Dicto-var-util'
		traitComposition: 	{}
		localSelectors: 	nil


DIUtil class>>replace:in:
	Receiver: DIUtil
	Arguments and temporary variables: 
		res: 	nil
		aDictionary: 	{'>'->'/'. '<'->'/'}
		aString: 	'ilObjSCORM2004LearningModuleGUI'
		repl: 	nil
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary()
		format: 	2
		layout: 	a FixedLayout
		instanceVariables: 	#()
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#DIUtil
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Dicto-var-util'
		traitComposition: 	{}
		localSelectors: 	nil


DIVarElement>>asString
	Receiver: ilObjSCORM2004LearningModuleGUI
	Arguments and temporary variables: 
		elemName: 	nil
		repl: 	{'>'->'/'. '<'->'/'}
	Receiver's instance variables: 
		isFirst: 	false
		dslText: 	''
		type: 	nil
		id: 	nil
		entity: 	'ilObjSCORM2004LearningModuleGUI'
		var: 	WholeCodebase
		value: 	'ilObjSCORM2004LearningModuleGUI'


DIVarElement>>=
	Receiver: ilObjSCORM2004LearningModuleGUI
	Arguments and temporary variables: 
		aVarElement: 	ilParameterAppender
	Receiver's instance variables: 
		isFirst: 	false
		dslText: 	''
		type: 	nil
		id: 	nil
		entity: 	'ilObjSCORM2004LearningModuleGUI'
		var: 	WholeCodebase
		value: 	'ilObjSCORM2004LearningModuleGUI'


DICollectionVarElements(SequenceableCollection)>>indexOf:startingAt:ifAbsent:
	Receiver: a DICollectionVarElements(ilObjMediaPoolGUI ilCASSettings ilADTEnumFormBridge ilDataCollec...etc...
	Arguments and temporary variables: 
		anElement: 	ilParameterAppender
		start: 	796
		exceptionBlock: 	0
		index: 	3013
	Receiver's instance variables: 
		array: 	an Array(ilObjMediaPoolGUI ilCASSettings ilADTEnumFormBridge ilDataColle...etc...
		firstIndex: 	1
		lastIndex: 	3417
		elements: 	nil


DICollectionVarElements(SequenceableCollection)>>indexOf:startingAt:
	Receiver: a DICollectionVarElements(ilObjMediaPoolGUI ilCASSettings ilADTEnumFormBridge ilDataCollec...etc...
	Arguments and temporary variables: 
		anElement: 	ilParameterAppender
		start: 	796
	Receiver's instance variables: 
		array: 	an Array(ilObjMediaPoolGUI ilCASSettings ilADTEnumFormBridge ilDataColle...etc...
		firstIndex: 	1
		lastIndex: 	3417
		elements: 	nil


DICollectionVarElements(OrderedCollection)>>removeDuplicates
	Receiver: a DICollectionVarElements(ilObjMediaPoolGUI ilCASSettings ilADTEnumFormBridge ilDataCollec...etc...
	Arguments and temporary variables: 
		iterator: 	795
		each: 	ilParameterAppender
		newIndex: 	nil
	Receiver's instance variables: 
		array: 	an Array(ilObjMediaPoolGUI ilCASSettings ilADTEnumFormBridge ilDataColle...etc...
		firstIndex: 	1
		lastIndex: 	3417
		elements: 	nil


DIVarPhpClass(DIVar)>>elements
	Receiver: WholeCodebase
	Arguments and temporary variables: 
		valid: 	false
	Receiver's instance variables: 
		isFirst: 	false
		dslText: 	'WholeCodebase=PhpClass with name:"il*"'
		type: 	'PhpClass'
		id: 	3
		entity: 	nil
		name: 	'WholeCodebase'
		specifiers: 	an OrderedCollection(name=il*)
		isInverted: 	false
		elements: 	a DICollectionVarElements(ilObjMediaPoolGUI ilCASSettings ilADTEnumFo...etc...
		invertedElements: 	a DICollectionVarElements()


DISimpleRule>>subjectElements
	Receiver: WholeCodebase cannot depend on triggerError
	Arguments and temporary variables: 
		subjectElements: 	nil
	Receiver's instance variables: 
		isFirst: 	nil
		dslText: 	'WholeCodebase cannot depend on triggerError'
		type: 	#cannot
		id: 	4001
		entity: 	nil
		subjects: 	an Array(WholeCodebase)
		predicates: 	an Array(depend on triggerError)
		subRules: 	nil
		documentation: 	nil
		candidateAdapters: 	a SortedCollection(DIPhpDependencies)
		chosenAdapter: 	DIPhpDependencies
		hasFailed: 	false
		failureMessage: 	''
		failingPredicates: 	a Set()
		hasSubjectInverted: 	false
		hasPredicateInverted: 	false


printRulesEntityRelationship: someRules
	| res processedPredicates |
	res := ''.
	processedPredicates := Set new.
	someRules
		do: [ :rule | 
			| predicateSelector subjectElements argumentElements data isPredicateInv isSubjectInv |
			predicateSelector := (rule predicate nameNormalized , ':') asSymbol.
			isPredicateInv := rule hasPredicateInverted.
			isSubjectInv := rule hasSubjectInverted.
			subjectElements := rule subjectElements.
			argumentElements := rule argumentElements.
			subjectElements
				do: [ :subject | 
					argumentElements
						do: [ :argument | 
							| relId spec msgPass msgFail |
							relId := subject id , '-' , argument id.
							msgPass := subject id , '.' , rule predicate name , '(' , argument id , ')=True'.
							msgFail := subject id , '.' , rule predicate name , '(' , argument id , ')=False'.
							(processedPredicates includes: relId)
								ifFalse: [ 
									data := {(#subject -> subject value).
									(#argument -> argument value).
									(#ruleId -> rule id).
									(#propertyId -> relId).
									(#msgPass -> msgPass).
									(#msgFail -> msgFail)} asDictionary.
									spec := self perform: predicateSelector withArguments: {data}.
									spec := spec
										dictoReplace:
											{('$subject' -> subject value).
											('$argument' -> argument value).
											('$ruleId' -> rule id).
											('$propertyId' -> relId).
											('$msgPass' -> msgPass).
											('$msgFail' -> msgFail)}.
									res := res , spec ].	"avoid duplicate predicate evaluations"
							processedPredicates add: relId ] ] ].
	^ res in DIPhpDependencies(DIAdapter)>>printRulesEntityRelationship:
	Receiver: a DIPhpDependencies
	Arguments and temporary variables: 
		someRules: 	a DICollectionRule(BibEntry cannot depend on BibObj BibObj must depe...etc...
		processedPredicates: 	a Set('176118082-170008991' '170008991-106046034' '1700089...etc...
		data: 	nil
		res: 	'{ "subject" : "ilBibliographicEntry",
	   "argument": "ilObjBibliographic...etc...
		rule: 	WholeCodebase cannot depend on triggerError
		predicateSelector: 	#dependOn:
		subjectElements: 	nil
		argumentElements: 	nil
		isPredicateInv: 	false
		isSubjectInv: 	false
	Receiver's instance variables: 
		output: 	''
		commandOutput: 	''
		NEWLINE: 	'
'
		rules: 	a DICollectionRule(BibEntry cannot depend on BibObj BibObj must depend o...etc...
		varSynonyms: 	nil
		sessionId: 	'1425380864'
		TIMESTAMP: 	'1425380864'
		TOOLNAME: 	'DIPhpDependencies'
		PROJECTROOT: 	'/home/otruffer/dicto/HugeProject'
		PROJECTSRC: 	'src/'
		PROJECTBIN: 	'bin/'
		RESULTFILE: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/DictoTestSuite/1...etc...
		TESTFILE: 	nil
		testInputFileExt: 	'.st'
		SYSTEM: 	SYSTEM


DICollectionRule(OrderedCollection)>>do:
	Receiver: a DICollectionRule(BibEntry cannot depend on BibObj BibObj must depend on BibEntry BibObj ...etc...
	Arguments and temporary variables: 
		aBlock: 	printRulesEntityRelationship: someRules
	| res processedPredicates |
	r...etc...
		index: 	4
	Receiver's instance variables: 
		array: 	an Array(BibEntry cannot depend on BibObj BibObj must depend on BibEntry...etc...
		firstIndex: 	1
		lastIndex: 	4
		elements: 	nil
		elements: 	nil


DIPhpDependencies(DIAdapter)>>printRulesEntityRelationship:
	Receiver: a DIPhpDependencies
	Arguments and temporary variables: 
		res: 	'{ "subject" : "ilBibliographicEntry",
	   "argument": "ilObjBibliographic...etc...
		someRules: 	a DICollectionRule(BibEntry cannot depend on BibObj BibObj must depe...etc...
		processedPredicates: 	a Set('176118082-170008991' '170008991-106046034' '1700089...etc...
	Receiver's instance variables: 
		output: 	''
		commandOutput: 	''
		NEWLINE: 	'
'
		rules: 	a DICollectionRule(BibEntry cannot depend on BibObj BibObj must depend o...etc...
		varSynonyms: 	nil
		sessionId: 	'1425380864'
		TIMESTAMP: 	'1425380864'
		TOOLNAME: 	'DIPhpDependencies'
		PROJECTROOT: 	'/home/otruffer/dicto/HugeProject'
		PROJECTSRC: 	'src/'
		PROJECTBIN: 	'bin/'
		RESULTFILE: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/DictoTestSuite/1...etc...
		TESTFILE: 	nil
		testInputFileExt: 	'.st'
		SYSTEM: 	SYSTEM


DIPhpDependencies(DIAdapter)>>printRules
	Receiver: a DIPhpDependencies
	Arguments and temporary variables: 
		res: 	nil
		allRules: 	a DICollectionRule(BibEntry cannot depend on BibObj BibObj must depen...etc...
	Receiver's instance variables: 
		output: 	''
		commandOutput: 	''
		NEWLINE: 	'
'
		rules: 	a DICollectionRule(BibEntry cannot depend on BibObj BibObj must depend o...etc...
		varSynonyms: 	nil
		sessionId: 	'1425380864'
		TIMESTAMP: 	'1425380864'
		TOOLNAME: 	'DIPhpDependencies'
		PROJECTROOT: 	'/home/otruffer/dicto/HugeProject'
		PROJECTSRC: 	'src/'
		PROJECTBIN: 	'bin/'
		RESULTFILE: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/DictoTestSuite/1...etc...
		TESTFILE: 	nil
		testInputFileExt: 	'.st'
		SYSTEM: 	SYSTEM


DIPhpDependencies>>testInput
	Receiver: a DIPhpDependencies
	Arguments and temporary variables: 
		strRules: 	nil
	Receiver's instance variables: 
		output: 	''
		commandOutput: 	''
		NEWLINE: 	'
'
		rules: 	a DICollectionRule(BibEntry cannot depend on BibObj BibObj must depend o...etc...
		varSynonyms: 	nil
		sessionId: 	'1425380864'
		TIMESTAMP: 	'1425380864'
		TOOLNAME: 	'DIPhpDependencies'
		PROJECTROOT: 	'/home/otruffer/dicto/HugeProject'
		PROJECTSRC: 	'src/'
		PROJECTBIN: 	'bin/'
		RESULTFILE: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/DictoTestSuite/1...etc...
		TESTFILE: 	nil
		testInputFileExt: 	'.st'
		SYSTEM: 	SYSTEM


DITestGroup>>build
	Receiver: a DITestGroup
	Arguments and temporary variables: 

	Receiver's instance variables: 
		rules: 	an OrderedCollection(BibEntry cannot depend on BibObj BibObj must depend...etc...
		adapter: 	a DIPhpDependencies
		runCommandText: 	nil
		testSpecification: 	nil
		adapterID: 	'DIPhpDependencies'
		resultFile: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/DictoTestSuite/1...etc...
		specificationFile: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/DictoTest...etc...
		commandFile: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/DictoTestSuite/...etc...
		rawOutput: 	nil
		xmlOutput: 	nil


[ :testGroup | testGroup build ] in DIDicto>>dictoBuild:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'
BibEntry = PhpClass with name:"ilBibliographicEntry"
BibObj = Php...etc...
		adapterTestGroups: 	a Dictionary(DIGrepFileContent->a DITestGroup DIJMeterLoadTe...etc...
		testGroup: 	a DITestGroup
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1425380864'
		singleShotTask: 	false


Array(SequenceableCollection)>>do:
	Receiver: an Array(a DITestGroup a DITestGroup a DITestGroup a DITestGroup a DITestGroup a DITestGro...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :testGroup | testGroup build ]
		index: 	3
	Receiver's instance variables: 
an Array(a DITestGroup a DITestGroup a DITestGroup a DITestGroup a DITestGroup a DITestGro...etc...

DIDicto>>dictoBuild:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'
BibEntry = PhpClass with name:"ilBibliographicEntry"
BibObj = Php...etc...
		adapterTestGroups: 	a Dictionary(DIGrepFileContent->a DITestGroup DIJMeterLoadTe...etc...
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1425380864'
		singleShotTask: 	false


DIDicto>>dictoRun:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'
BibEntry = PhpClass with name:"ilBibliographicEntry"
BibObj = Php...etc...
		adapterTestGroups: 	nil
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1425380864'
		singleShotTask: 	false


DIDicto>>dictoAll:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'
BibEntry = PhpClass with name:"ilBibliographicEntry"
BibObj = Php...etc...
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1425380864'
		singleShotTask: 	false


DIPHPTests(DIDSLTests)>>runAndReturnObjWithText:andSuccessResults:onProject:
	Receiver: DIPHPTests
	Arguments and temporary variables: 
		dslText: 	'
BibEntry = PhpClass with name:"ilBibliographicEntry"
BibObj = PhpCla...etc...
		res: 	#(false true true false)
		project: 	'HugeProject'
		dicto: 	a DIDicto
	Receiver's instance variables: 
		testSelector: 	nil
		expectedFails: 	nil


DIPHPTests class>>DoIt
	Receiver: DIPHPTests
	Arguments and temporary variables: 
		dsl: 	'
BibEntry = PhpClass with name:"ilBibliographicEntry"
BibObj = PhpClass w...etc...
		success: 	#(false true true false)
		test: 	DIPHPTests
	Receiver's instance variables: 
		superclass: 	DIDSLTests
		methodDict: 	a MethodDictionary(#testHugePhp->DIPHPTests>>#testHugePhp #testPhp-...etc...
		format: 	134
		layout: 	a FixedLayout
		instanceVariables: 	#()
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#DIPHPTests
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Dicto-var-tests'
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set(#testH...etc...


CompiledMethod>>valueWithReceiver:arguments:
	Receiver: DIPHPTests class>>#DoIt
	Arguments and temporary variables: 
		aReceiver: 	DIPHPTests
		anArray: 	#()
	Receiver's instance variables: 
DIPHPTests class>>#DoIt

[ v := compiledMethod valueWithReceiver: receiver arguments: #() ] in SmalltalkEditor>>tallySelection
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		receiver: 	DIPHPTests
		context: 	nil
		compiledMethod: 	DIPHPTests class>>#DoIt
		profiler: 	nil
		v: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(739246080)
		selectionShowing: 	true
		model: 	a PackageTreeNautilusUI
		editingState: 	a SmalltalkEditingState


BlockClosure>>ensure:
	Receiver: [ v := compiledMethod valueWithReceiver: receiver arguments: #() ]
	Arguments and temporary variables: 
		aBlock: 	[ 
"cancel the probe and return the value"
"Could have already been ter...etc...
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor>>tallySelection
		startpc: 	105
		numArgs: 	0


MessageTally>>spyEvery:on:
	Receiver: nil(SmalltalkEditor) >> tallySelection
	Arguments and temporary variables: 
		observedProcess: 	a Process in [ :each | each ifNotNil: [ aBlock value: each ] ]...etc...
		millisecs: 	1
		aBlock: 	[ v := compiledMethod valueWithReceiver: receiver arguments: #() ]
		myDelay: 	a Delay(1 msecs)
		time0: 	1398545
	Receiver's instance variables: 
		class: 	SmalltalkEditor
		method: 	SmalltalkEditor>>#tallySelection
		process: 	nil
		tally: 	259417
		receivers: 	an Array(nil(CompiledMethod) >> valueWithReceiver:arguments: nil(ZnM...etc...
		senders: 	nil
		time: 	0
		gcStats: 	#(80375168 81339152 86221936 nil nil 2000 10 2706 16723 26013 737 0 0 ...etc...
		maxClassNameSize: 	1000
		maxClassPlusSelectorSize: 	1000
		maxTabs: 	100
		reportOtherProcesses: 	true


TimeProfiler>>runBlock:pollingEvery:
	Receiver: a TimeProfiler
	Arguments and temporary variables: 
		aBlock: 	[ v := compiledMethod valueWithReceiver: receiver arguments: #() ]
		pollPeriod: 	1
	Receiver's instance variables: 
		dependents: 	nil
		selection: 	nil
		announcer: 	nil
		rootItems: 	nil
		autoMultiSelection: 	nil
		headerLabel: 	nil
		multiSelection: 	nil
		wrapBlockOrSelector: 	nil
		isCheckList: 	nil
		enabled: 	nil
		win: 	nil
		rootMessageTally: 	nil(SmalltalkEditor) >> tallySelection
		threshold: 	nil
		minPercentageToExpand: 	nil
		treeMorph: 	nil
		block: 	[ v := compiledMethod valueWithReceiver: receiver arguments: #() ]
		blockCodePane: 	nil
		withBlockCodePane: 	false
		blockSource: 	nil
		reportOtherProcesses: 	nil
		showLeavesOnly: 	nil
		codeTabPane: 	nil
		resultPane: 	nil
		result: 	nil
		withToolBar: 	false


TimeProfiler>>openOnBlock:
	Receiver: a TimeProfiler
	Arguments and temporary variables: 
		aBlock: 	[ v := compiledMethod valueWithReceiver: receiver arguments: #() ]
	Receiver's instance variables: 
		dependents: 	nil
		selection: 	nil
		announcer: 	nil
		rootItems: 	nil
		autoMultiSelection: 	nil
		headerLabel: 	nil
		multiSelection: 	nil
		wrapBlockOrSelector: 	nil
		isCheckList: 	nil
		enabled: 	nil
		win: 	nil
		rootMessageTally: 	nil(SmalltalkEditor) >> tallySelection
		threshold: 	nil
		minPercentageToExpand: 	nil
		treeMorph: 	nil
		block: 	[ v := compiledMethod valueWithReceiver: receiver arguments: #() ]
		blockCodePane: 	nil
		withBlockCodePane: 	false
		blockSource: 	nil
		reportOtherProcesses: 	nil
		showLeavesOnly: 	nil
		codeTabPane: 	nil
		resultPane: 	nil
		result: 	nil
		withToolBar: 	false


TimeProfiler class>>spyOn:
	Receiver: TimeProfiler
	Arguments and temporary variables: 
		aBlock: 	[ v := compiledMethod valueWithReceiver: receiver arguments: #() ]
	Receiver's instance variables: 
		superclass: 	MorphTreeModel
		methodDict: 	a MethodDictionary(#blockCode->TimeProfiler>>#blockCode #blockCode:...etc...
		format: 	180
		layout: 	a FixedLayout
		instanceVariables: 	#(#win #rootMessageTally #threshold #minPercentageToExpand #...etc...
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#TimeProfiler
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Tools-Profilers'
		traitComposition: 	{}
		localSelectors: 	nil


SmalltalkEditor>>tallySelection
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		v: 	nil
		receiver: 	DIPHPTests
		context: 	nil
		compiledMethod: 	DIPHPTests class>>#DoIt
		profiler: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(739246080)
		selectionShowing: 	true
		model: 	a PackageTreeNautilusUI
		editingState: 	a SmalltalkEditingState


SmalltalkEditor>>tallyIt
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 

	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(739246080)
		selectionShowing: 	true
		model: 	a PackageTreeNautilusUI
		editingState: 	a SmalltalkEditingState


[ textMorph editor tallyIt ] in PluggableTextMorphWithLimits(PluggableTextMorph)>>tallyIt
	Receiver: a PluggableTextMorphWithLimits(320602112)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(459.0@356.0) corner: (1275.0@631.0)
		owner: 	a MultipleMethodsEditor(1060896768)
		submorphs: 	an Array(a ScrollBar(362283008) an AlphaImageMorph(741343232) a Tran...etc...
		fullBounds: 	(459@356) corner: (1275@631)
		color: 	Color white
		extension: 	a MorphExtension (718012416) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.784 g: 0.784 b: 0.784 alpha: 1.0)
		model: 	a PackageTreeNautilusUI
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(362283008)
		scroller: 	a TransformMorph(633077760)
		getMenuSelector: 	#sourceCodeMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(1060896768)
		textMorph: 	a TextMorphForEditView(739246080)
		getTextSelector: 	#sourceCodeFrom:
		setTextSelector: 	#compileSource:notifying:
		getSelectionSelector: 	#contentsSelectionFrom:
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(13 to: 570)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil
		doubleClickSelector: 	nil
		setSelectionSelector: 	nil
		alertLimit: 	700
		locked: 	false
		warningLimit: 	350
		method: 	nil
		lockIcon: 	an AlphaImageMorph(741343232)
		canLockChangeSelector: 	#canChangeLockFor:
		lockSelector: 	#lockTextArea:from:



--- The full stack ---
[ :each | each ifNotNil: [ aBlock value: each ] ] in Dictionary>>associationsDo:
Array(SequenceableCollection)>>do:
Dictionary>>associationsDo:
Dictionary>>keysDo:
[ :s | self keysDo: [ :key | s nextPut: key ] ] in Dictionary>>keys
Array class(SequenceableCollection class)>>new:streamContents:
Dictionary>>keys
DIUtil class>>buildDictionaryFromList:
DIUtil class>>replace:in:
DIVarElement>>asString
DIVarElement>>=
DICollectionVarElements(SequenceableCollection)>>indexOf:startingAt:ifAbsent:
DICollectionVarElements(SequenceableCollection)>>indexOf:startingAt:
DICollectionVarElements(OrderedCollection)>>removeDuplicates
DIVarPhpClass(DIVar)>>elements
DISimpleRule>>subjectElements
printRulesEntityRelationship: someRules
	| res processedPredicates |
	res := ''.
	processedPredicates := Set new.
	someRules
		do: [ :rule | 
			| predicateSelector subjectElements argumentElements data isPredicateInv isSubjectInv |
			predicateSelector := (rule predicate nameNormalized , ':') asSymbol.
			isPredicateInv := rule hasPredicateInverted.
			isSubjectInv := rule hasSubjectInverted.
			subjectElements := rule subjectElements.
			argumentElements := rule argumentElements.
			subjectElements
				do: [ :subject | 
					argumentElements
						do: [ :argument | 
							| relId spec msgPass msgFail |
							relId := subject id , '-' , argument id.
							msgPass := subject id , '.' , rule predicate name , '(' , argument id , ')=True'.
							msgFail := subject id , '.' , rule predicate name , '(' , argument id , ')=False'.
							(processedPredicates includes: relId)
								ifFalse: [ 
									data := {(#subject -> subject value).
									(#argument -> argument value).
									(#ruleId -> rule id).
									(#propertyId -> relId).
									(#msgPass -> msgPass).
									(#msgFail -> msgFail)} asDictionary.
									spec := self perform: predicateSelector withArguments: {data}.
									spec := spec
										dictoReplace:
											{('$subject' -> subject value).
											('$argument' -> argument value).
											('$ruleId' -> rule id).
											('$propertyId' -> relId).
											('$msgPass' -> msgPass).
											('$msgFail' -> msgFail)}.
									res := res , spec ].	"avoid duplicate predicate evaluations"
							processedPredicates add: relId ] ] ].
	^ res in DIPhpDependencies(DIAdapter)>>printRulesEntityRelationship:
DICollectionRule(OrderedCollection)>>do:
DIPhpDependencies(DIAdapter)>>printRulesEntityRelationship:
DIPhpDependencies(DIAdapter)>>printRules
DIPhpDependencies>>testInput
DITestGroup>>build
[ :testGroup | testGroup build ] in DIDicto>>dictoBuild:
Array(SequenceableCollection)>>do:
DIDicto>>dictoBuild:
DIDicto>>dictoRun:
DIDicto>>dictoAll:
DIPHPTests(DIDSLTests)>>runAndReturnObjWithText:andSuccessResults:onProject:
DIPHPTests class>>DoIt
CompiledMethod>>valueWithReceiver:arguments:
[ v := compiledMethod valueWithReceiver: receiver arguments: #() ] in SmalltalkEditor>>tallySelection
BlockClosure>>ensure:
MessageTally>>spyEvery:on:
TimeProfiler>>runBlock:pollingEvery:
TimeProfiler>>openOnBlock:
TimeProfiler class>>spyOn:
SmalltalkEditor>>tallySelection
SmalltalkEditor>>tallyIt
[ textMorph editor tallyIt ] in PluggableTextMorphWithLimits(PluggableTextMorph)>>tallyIt
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ result := editBlock value ] in PluggableTextMorphWithLimits(PluggableTextMorph)>>handleEdit:
TextMorphForEditView(TextMorph)>>handleEdit:
PluggableTextMorphWithLimits(PluggableTextMorph)>>handleEdit:
PluggableTextMorphWithLimits(PluggableTextMorph)>>tallyIt
PackageTreeNautilusUI(Object)>>perform:orSendTo:
[ 
| selArgCount |
"show cursor in case item opens a new MVC window"
(selArgCount := selector numArgs) = 0
	ifTrue: [ target perform: selector ]
	ifFalse: [ 
		selArgCount = arguments size
			ifTrue: [ target perform: selector withArguments: arguments ]
			ifFalse: [ target perform: selector withArguments: (arguments copyWith: evt) ] ].
self changed ] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
ToggleMenuItemMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
ToggleMenuItemMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
MenuMorph(Morph)>>processEvent:using:
MenuMorph(Morph)>>processEvent:
MenuMorph>>handleFocusEvent:
[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldState>>doOneSubCycleFor:
WorldMorph>>doOneSubCycle
MenuMorph>>invokeModalAt:in:allowKeyboard:
MenuMorph>>invokeModal:
MenuMorph>>invokeModal
PluggableTextMorphWithLimits(PluggableTextMorph)>>yellowButtonActivity:
SmalltalkEditor(TextEditor)>>mouseUp:
[ editor mouseUp: evt ] in TextMorphForEditView(TextMorph)>>mouseUp:
TextMorphForEditView(TextMorph)>>handleInteraction:
TextMorphForEditView>>handleInteraction:
TextMorphForEditView(TextMorph)>>mouseUp:
TextMorphForEditView>>mouseUp:
TextMorphForEditView(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
TextMorphForEditView(Morph)>>handleEvent:
TextMorphForEditView(Morph)>>handleFocusEvent:
[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ 
World doOneCycle.
Processor yield.
false ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
User Interrupt
3 March 2015 12:16:25.529572 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
NBCogit NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
https://github.com/pharo-project/pharo-vm.git Commit: 4a0d556150d478ff2de3c9624d2f18e6eaa3fa5c Date: 2014-12-18 18:42:53 +0100 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14893

Image: Pharo3.0 [Latest update: #30863]

PackageTreeNautilusUI(NautilusUI)>>runTestForAMethod:notifying:priority:
	Receiver: a PackageTreeNautilusUI
	Arguments and temporary variables: 
		shouldAnnounce: 	true
		aMethod: 	DIPHPTests>>#testHugePhp
		aBoolean: 	true
		aPriority: 	30
		testMethod: 	DIPHPTests>>#testHugePhp
		testSemaphoreForMethod: 	a Semaphore(a Process in PackageTreeNautilusUI(Nautilus...etc...
		blockToEvaluate: 	[ 
| vScroll testClass testResult |
vScroll := methodWidget vS...etc...
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a CategoryWidget a MethodWidget a NautilusWindow(...etc...
		model: 	a PackageTreeNautilus
		window: 	a NautilusWindow(722468864)
		hierarchyClass: 	nil
		cachedHierarchy: 	a SortHierarchically
		sourceTextArea: 	a PluggableTextMorphWithLimits(748158976)
		groupsSelection: 	a Dictionary()
		packagesSelection: 	a Dictionary(entities->true )
		classesSelection: 	a Dictionary()
		list: 	a MorphTreeMorph(293339136)
		list2: 	a PluggableIconListMorph(488112128)
		sourceCodePanel: 	a PanelMorph(628621312)
		commentTextArea: 	nil
		currentDisplayChoice: 	#SourceCode
		sourceTextAreaLimit: 	350
		sourceCodeContainer: 	a PanelMorph(459276288)
		list2Elements: 	{DIElement. DIPredicate. DIRule. DISimpleRule. DIRuleTail. DIVar...etc...
		listElements: 	nil
		shouldUpdateTitle: 	true
		testSemaphore: 	a Semaphore()
		sourceTextAreas: 	an OrderedCollection(a PluggableTextMorphWithLimits(748158976)...etc...
		multipleMethodsEditor: 	a MultipleMethodsEditor(154664960)
		contentSelection: 	nil
		acceptor: 	a MethodDefinitionAcceptor
		classifier: 	a MethodClassifier
		categoryWidget: 	a CategoryWidget
		methodWidget: 	a MethodWidget
		packagePattern: 	a RxMatcher
		searchWidget: 	a SearchMorph(351272960)


PackageTreeNautilusUI(NautilusUI)>>runTestForAMethod:notifying:
	Receiver: a PackageTreeNautilusUI
	Arguments and temporary variables: 
		aMethod: 	DIPHPTests>>#testHugePhp
		aBoolean: 	true
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a CategoryWidget a MethodWidget a NautilusWindow(...etc...
		model: 	a PackageTreeNautilus
		window: 	a NautilusWindow(722468864)
		hierarchyClass: 	nil
		cachedHierarchy: 	a SortHierarchically
		sourceTextArea: 	a PluggableTextMorphWithLimits(748158976)
		groupsSelection: 	a Dictionary()
		packagesSelection: 	a Dictionary(entities->true )
		classesSelection: 	a Dictionary()
		list: 	a MorphTreeMorph(293339136)
		list2: 	a PluggableIconListMorph(488112128)
		sourceCodePanel: 	a PanelMorph(628621312)
		commentTextArea: 	nil
		currentDisplayChoice: 	#SourceCode
		sourceTextAreaLimit: 	350
		sourceCodeContainer: 	a PanelMorph(459276288)
		list2Elements: 	{DIElement. DIPredicate. DIRule. DISimpleRule. DIRuleTail. DIVar...etc...
		listElements: 	nil
		shouldUpdateTitle: 	true
		testSemaphore: 	a Semaphore()
		sourceTextAreas: 	an OrderedCollection(a PluggableTextMorphWithLimits(748158976)...etc...
		multipleMethodsEditor: 	a MultipleMethodsEditor(154664960)
		contentSelection: 	nil
		acceptor: 	a MethodDefinitionAcceptor
		classifier: 	a MethodClassifier
		categoryWidget: 	a CategoryWidget
		methodWidget: 	a MethodWidget
		packagePattern: 	a RxMatcher
		searchWidget: 	a SearchMorph(351272960)


[ target perform: actionSelector withArguments: arguments ] in IconicButton(SimpleButtonMorph)>>doButtonAction
	Receiver: an IconicButton(346554368)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0.0@2.0) corner: (12.0@14.0)
		owner: 	an IconicListItem(192413696)
		submorphs: 	an Array(an ImageMorph(886308864))
		fullBounds: 	(0.0@2.0) corner: (12.0@14.0)
		color: 	Color transparent
		extension: 	a MorphExtension (401866752) [other:  (oldBorder -> (BorderStyle wid...etc...
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	a PackageTreeNautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{DIPHPTests>>#testHugePhp. true}
		actWhen: 	#buttonUp
		oldColor: 	nil
		mouseDownTime: 	1914162
		label: 	nil
		helpText: 	'Run the test'
		graphicalMorph: 	an ImageMorph(886308864)


BlockClosure>>ensure:
	Receiver: [ target perform: actionSelector withArguments: arguments ]
	Arguments and temporary variables: 
		aBlock: 	[ oldcursor show ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	IconicButton(SimpleButtonMorph)>>doButtonAction
		startpc: 	68
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r100000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[ target perform: actionSelector withArguments: arguments ]
		oldcursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	(-1@ -1)
		maskForm: 	Form(16x16x1)


IconicButton(SimpleButtonMorph)>>doButtonAction
	Receiver: an IconicButton(346554368)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0.0@2.0) corner: (12.0@14.0)
		owner: 	an IconicListItem(192413696)
		submorphs: 	an Array(an ImageMorph(886308864))
		fullBounds: 	(0.0@2.0) corner: (12.0@14.0)
		color: 	Color transparent
		extension: 	a MorphExtension (401866752) [other:  (oldBorder -> (BorderStyle wid...etc...
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	a PackageTreeNautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{DIPHPTests>>#testHugePhp. true}
		actWhen: 	#buttonUp
		oldColor: 	nil
		mouseDownTime: 	1914162
		label: 	nil
		helpText: 	'Run the test'
		graphicalMorph: 	an ImageMorph(886308864)


IconicButton(SimpleButtonMorph)>>mouseUp:
	Receiver: an IconicButton(346554368)
	Arguments and temporary variables: 
		evt: 	[(8.0@6.0) mouseUp 1914226 nil]
	Receiver's instance variables: 
		bounds: 	(0.0@2.0) corner: (12.0@14.0)
		owner: 	an IconicListItem(192413696)
		submorphs: 	an Array(an ImageMorph(886308864))
		fullBounds: 	(0.0@2.0) corner: (12.0@14.0)
		color: 	Color transparent
		extension: 	a MorphExtension (401866752) [other:  (oldBorder -> (BorderStyle wid...etc...
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	a PackageTreeNautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{DIPHPTests>>#testHugePhp. true}
		actWhen: 	#buttonUp
		oldColor: 	nil
		mouseDownTime: 	1914162
		label: 	nil
		helpText: 	'Run the test'
		graphicalMorph: 	an ImageMorph(886308864)


IconicButton(Morph)>>handleMouseUp:
	Receiver: an IconicButton(346554368)
	Arguments and temporary variables: 
		anEvent: 	[(8.0@6.0) mouseUp 1914226 nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(0.0@2.0) corner: (12.0@14.0)
		owner: 	an IconicListItem(192413696)
		submorphs: 	an Array(an ImageMorph(886308864))
		fullBounds: 	(0.0@2.0) corner: (12.0@14.0)
		color: 	Color transparent
		extension: 	a MorphExtension (401866752) [other:  (oldBorder -> (BorderStyle wid...etc...
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	a PackageTreeNautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{DIPHPTests>>#testHugePhp. true}
		actWhen: 	#buttonUp
		oldColor: 	nil
		mouseDownTime: 	1914162
		label: 	nil
		helpText: 	'Run the test'
		graphicalMorph: 	an ImageMorph(886308864)


MouseButtonEvent>>sentTo:
	Receiver: [(8.0@6.0) mouseUp 1914226 nil]
	Arguments and temporary variables: 
		anObject: 	an IconicButton(346554368)
	Receiver's instance variables: 
		timeStamp: 	1914226
		source: 	a HandMorph(760479744)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(8.0@6.0)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


IconicButton(Morph)>>handleEvent:
	Receiver: an IconicButton(346554368)
	Arguments and temporary variables: 
		anEvent: 	[(8.0@6.0) mouseUp 1914226 nil]
	Receiver's instance variables: 
		bounds: 	(0.0@2.0) corner: (12.0@14.0)
		owner: 	an IconicListItem(192413696)
		submorphs: 	an Array(an ImageMorph(886308864))
		fullBounds: 	(0.0@2.0) corner: (12.0@14.0)
		color: 	Color transparent
		extension: 	a MorphExtension (401866752) [other:  (oldBorder -> (BorderStyle wid...etc...
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	a PackageTreeNautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{DIPHPTests>>#testHugePhp. true}
		actWhen: 	#buttonUp
		oldColor: 	nil
		mouseDownTime: 	1914162
		label: 	nil
		helpText: 	'Run the test'
		graphicalMorph: 	an ImageMorph(886308864)


IconicButton(Morph)>>handleFocusEvent:
	Receiver: an IconicButton(346554368)
	Arguments and temporary variables: 
		anEvent: 	[(8.0@6.0) mouseUp 1914226 nil]
	Receiver's instance variables: 
		bounds: 	(0.0@2.0) corner: (12.0@14.0)
		owner: 	an IconicListItem(192413696)
		submorphs: 	an Array(an ImageMorph(886308864))
		fullBounds: 	(0.0@2.0) corner: (12.0@14.0)
		color: 	Color transparent
		extension: 	a MorphExtension (401866752) [other:  (oldBorder -> (BorderStyle wid...etc...
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	a PackageTreeNautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{DIPHPTests>>#testHugePhp. true}
		actWhen: 	#buttonUp
		oldColor: 	nil
		mouseDownTime: 	1914162
		label: 	nil
		helpText: 	'Run the test'
		graphicalMorph: 	an ImageMorph(886308864)


[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[(1190@222) mouseUp 1914226 nil]
		focusHolder: 	an IconicButton(346554368)
		aBlock: 	[ self mouseFocus: nil ]
		w: 	a WorldMorph(511705088) [world]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(1190@222) corner: (1206@238)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(1190@222) corner: (1206@238)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	a TextMorphForEditView(739246080)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1190@222) mouseUp 1914226 nil]
		targetOffset: 	(8.0@4.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 1914226 1190 222 0 0 0 1)
		lastKeyScanCode: 	23
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


BlockClosure>>on:do:
	Receiver: [ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (an...etc...
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :ex | 
ActiveWorld := priorWorld.
ActiveEvent := priorEvent.
A...etc...
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	HandMorph>>sendFocusEvent:to:clear:
		startpc: 	67
		numArgs: 	0


WorldMorph(PasteUpMorph)>>becomeActiveDuring:
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 
		aBlock: 	[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder ha...etc...
		priorWorld: 	a WorldMorph(511705088) [world]
		priorHand: 	a HandMorph(760479744)
		priorEvent: 	[(1190@222) mouseOver red nil nil]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1535@876)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a NautilusWindow(334233600) a Sta...etc...
		fullBounds: 	nil
		color: 	Color white
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		result: 	nil
		anEvent: 	[(1190@222) mouseUp 1914226 nil]
		focusHolder: 	an IconicButton(346554368)
		aBlock: 	[ self mouseFocus: nil ]
		w: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		bounds: 	(1190@222) corner: (1206@238)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(1190@222) corner: (1206@238)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	a TextMorphForEditView(739246080)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1190@222) mouseUp 1914226 nil]
		targetOffset: 	(8.0@4.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 1914226 1190 222 0 0 0 1)
		lastKeyScanCode: 	23
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[(1190@222) mouseUp 1914226 nil]
		focusHolder: 	an IconicButton(346554368)
		aBlock: 	[ self mouseFocus: nil ]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(1190@222) corner: (1206@238)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(1190@222) corner: (1206@238)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	a TextMorphForEditView(739246080)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1190@222) mouseUp 1914226 nil]
		targetOffset: 	(8.0@4.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 1914226 1190 222 0 0 0 1)
		lastKeyScanCode: 	23
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[(1190@222) mouseUp 1914226 nil]
	Receiver's instance variables: 
		bounds: 	(1190@222) corner: (1206@238)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(1190@222) corner: (1206@238)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	a TextMorphForEditView(739246080)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1190@222) mouseUp 1914226 nil]
		targetOffset: 	(8.0@4.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 1914226 1190 222 0 0 0 1)
		lastKeyScanCode: 	23
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>handleEvent:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[(1190@222) mouseUp 1914226 nil]
		evt: 	[(1190@222) mouseUp 1914226 nil]
	Receiver's instance variables: 
		bounds: 	(1190@222) corner: (1206@238)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(1190@222) corner: (1206@238)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	a TextMorphForEditView(739246080)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1190@222) mouseUp 1914226 nil]
		targetOffset: 	(8.0@4.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 1914226 1190 222 0 0 0 1)
		lastKeyScanCode: 	23
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		evt: 	[(1190@222) mouseUp 1914226 nil]
		evtBuf: 	#(1 1914226 1190 222 0 0 0 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(1190@222) corner: (1206@238)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(1190@222) corner: (1206@238)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	a TextMorphForEditView(739246080)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1190@222) mouseUp 1914226 nil]
		targetOffset: 	(8.0@4.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 1914226 1190 222 0 0 0 1)
		lastKeyScanCode: 	23
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
		h: 	a HandMorph(760479744)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (1535@876)
		canvas: 	a FormCanvas on: DisplayScreen(1535x876x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#onBlinkCursor -> a TextMorphForEditView(739246080...etc...
		lastStepTime: 	1914224
		lastStepMessage: 	nil
		lastCycleTime: 	1914244
		alarms: 	a Heap()
		lastAlarmTime: 	1914224
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(760479744))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(760479744))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (1535@876)
		canvas: 	a FormCanvas on: DisplayScreen(1535x876x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#onBlinkCursor -> a TextMorphForEditView(739246080...etc...
		lastStepTime: 	1914224
		lastStepMessage: 	nil
		lastCycleTime: 	1914244
		alarms: 	a Heap()
		lastAlarmTime: 	1914224
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (1535@876)
		canvas: 	a FormCanvas on: DisplayScreen(1535x876x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#onBlinkCursor -> a TextMorphForEditView(739246080...etc...
		lastStepTime: 	1914224
		lastStepMessage: 	nil
		lastCycleTime: 	1914244
		alarms: 	a Heap()
		lastAlarmTime: 	1914224
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (1535@876)
		canvas: 	a FormCanvas on: DisplayScreen(1535x876x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#onBlinkCursor -> a TextMorphForEditView(739246080...etc...
		lastStepTime: 	1914224
		lastStepMessage: 	nil
		lastCycleTime: 	1914244
		alarms: 	a Heap()
		lastAlarmTime: 	1914224
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1535@876)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a NautilusWindow(334233600) a Sta...etc...
		fullBounds: 	nil
		color: 	Color white
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


[ 
World doOneCycle.
Processor yield.
false ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	Transcript


[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ 
World doOneCycle.
Processor yield.
false ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
PackageTreeNautilusUI(NautilusUI)>>runTestForAMethod:notifying:priority:
PackageTreeNautilusUI(NautilusUI)>>runTestForAMethod:notifying:
[ target perform: actionSelector withArguments: arguments ] in IconicButton(SimpleButtonMorph)>>doButtonAction
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
IconicButton(SimpleButtonMorph)>>doButtonAction
IconicButton(SimpleButtonMorph)>>mouseUp:
IconicButton(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
IconicButton(Morph)>>handleEvent:
IconicButton(Morph)>>handleFocusEvent:
[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ 
World doOneCycle.
Processor yield.
false ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
NeoJSONParseError: invalid input: nil
4 March 2015 10:45:16.536989 am

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
NBCogit NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
https://github.com/pharo-project/pharo-vm.git Commit: 4a0d556150d478ff2de3c9624d2f18e6eaa3fa5c Date: 2014-12-18 18:42:53 +0100 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14893

Image: Pharo3.0 [Latest update: #30863]

NeoJSONReader>>error:
	Receiver: a NeoJSONReader
	Arguments and temporary variables: 
		text: 	'invalid input: nil'
	Receiver's instance variables: 
		mappings: 	nil
		readStream: 	a ReadStream
		stringStream: 	nil
		listClass: 	nil
		mapClass: 	nil
		propertyNamesAsSymbols: 	false


NeoJSONReader>>parseValue
	Receiver: a NeoJSONReader
	Arguments and temporary variables: 
		char: 	nil
	Receiver's instance variables: 
		mappings: 	nil
		readStream: 	a ReadStream
		stringStream: 	nil
		listClass: 	nil
		mapClass: 	nil
		propertyNamesAsSymbols: 	false


NeoJSONReader>>next
	Receiver: a NeoJSONReader
	Arguments and temporary variables: 

	Receiver's instance variables: 
		mappings: 	nil
		readStream: 	a ReadStream
		stringStream: 	nil
		listClass: 	nil
		mapClass: 	nil
		propertyNamesAsSymbols: 	false


NeoJSONReader class>>fromString:
	Receiver: NeoJSONReader
	Arguments and temporary variables: 
		string: 	''
	Receiver's instance variables: 
		superclass: 	NeoJSONMapper
		methodDict: 	a MethodDictionary(#atEnd->NeoJSONReader>>#atEnd #close->NeoJSONRea...etc...
		format: 	142
		layout: 	a FixedLayout
		instanceVariables: 	#(#readStream #stringStream #listClass #mapClass #propertyNa...etc...
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#NeoJSONReader
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Neo-JSON-Core'
		traitComposition: 	{}
		localSelectors: 	nil


DIPhpModel>>_loadPhpModel
	Receiver: a DIPhpModel
	Arguments and temporary variables: 

	Receiver's instance variables: 
		defRules: 	a DICollectionRule()
		defVars: 	a DICollectionVar(SYSTEM)
		analysisID: 	'1425462315'
		additionalProperties: 	a Dictionary()
		ruleCounter: 	0
		varCounter: 	0
		defVarElements: 	a DICollectionVarElements()
		defVarInvertedElements: 	a DICollectionVarElements()
		model: 	nil


DIPhpModel>>model
	Receiver: a DIPhpModel
	Arguments and temporary variables: 

	Receiver's instance variables: 
		defRules: 	a DICollectionRule()
		defVars: 	a DICollectionVar(SYSTEM)
		analysisID: 	'1425462315'
		additionalProperties: 	a Dictionary()
		ruleCounter: 	0
		varCounter: 	0
		defVarElements: 	a DICollectionVarElements()
		defVarInvertedElements: 	a DICollectionVarElements()
		model: 	nil


DIVarPhpClass>>allElements
	Receiver: RuleResult
	Arguments and temporary variables: 

	Receiver's instance variables: 
		isFirst: 	false
		dslText: 	'RuleResult=PhpClass with name:"Dicto\\RuleResult"'
		type: 	'PhpClass'
		id: 	1
		entity: 	nil
		name: 	'RuleResult'
		specifiers: 	an OrderedCollection(name=Dicto\\RuleResult)
		isInverted: 	false
		elements: 	a DICollectionVarElements()
		invertedElements: 	a DICollectionVarElements()


DIVarPhpClass(DIVar)>>elements
	Receiver: RuleResult
	Arguments and temporary variables: 
		valid: 	nil
	Receiver's instance variables: 
		isFirst: 	false
		dslText: 	'RuleResult=PhpClass with name:"Dicto\\RuleResult"'
		type: 	'PhpClass'
		id: 	1
		entity: 	nil
		name: 	'RuleResult'
		specifiers: 	an OrderedCollection(name=Dicto\\RuleResult)
		isInverted: 	false
		elements: 	a DICollectionVarElements()
		invertedElements: 	a DICollectionVarElements()


DISimpleRule>>subjectElements
	Receiver: RuleResult cannot depend on DictoTalker
	Arguments and temporary variables: 
		subjectElements: 	nil
	Receiver's instance variables: 
		isFirst: 	nil
		dslText: 	'RuleResult cannot depend on DictoTalker'
		type: 	#cannot
		id: 	1001
		entity: 	nil
		subjects: 	an Array(RuleResult)
		predicates: 	an Array(depend on DictoTalker)
		subRules: 	nil
		documentation: 	nil
		candidateAdapters: 	a SortedCollection(DIPhpDependencies)
		chosenAdapter: 	DIPhpDependencies
		hasFailed: 	false
		failureMessage: 	''
		failingPredicates: 	a Set()
		hasSubjectInverted: 	false
		hasPredicateInverted: 	false


printRulesEntityRelationship: someRules
	| res processedPredicates |
	res := ''.
	processedPredicates := Set new.
	someRules
		do: [ :rule | 
			| predicateSelector subjectElements argumentElements data isPredicateInv isSubjectInv |
			predicateSelector := (rule predicate nameNormalized , ':') asSymbol.
			isPredicateInv := rule hasPredicateInverted.
			isSubjectInv := rule hasSubjectInverted.
			subjectElements := rule subjectElements.
			argumentElements := rule argumentElements.
			subjectElements
				do: [ :subject | 
					argumentElements
						do: [ :argument | 
							| relId spec msgPass msgFail |
							relId := subject id , '-' , argument id.
							msgPass := subject id , '.' , rule predicate name , '(' , argument id , ')=True'.
							msgFail := subject id , '.' , rule predicate name , '(' , argument id , ')=False'.
							(processedPredicates includes: relId)
								ifFalse: [ 
									data := {(#subject -> subject value).
									(#argument -> argument value).
									(#ruleId -> rule id).
									(#propertyId -> relId).
									(#msgPass -> msgPass).
									(#msgFail -> msgFail)} asDictionary.
									spec := self perform: predicateSelector withArguments: {data}.
									spec := spec
										dictoReplace:
											{('$subject' -> subject value).
											('$argument' -> argument value).
											('$ruleId' -> rule id).
											('$propertyId' -> relId).
											('$msgPass' -> msgPass).
											('$msgFail' -> msgFail)}.
									res := res , spec ].	"avoid duplicate predicate evaluations"
							processedPredicates add: relId ] ] ].
	^ res in DIPhpDependencies(DIAdapter)>>printRulesEntityRelationship:
	Receiver: a DIPhpDependencies
	Arguments and temporary variables: 
		someRules: 	a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalk...etc...
		processedPredicates: 	a Set()
		data: 	nil
		res: 	''
		rule: 	RuleResult cannot depend on DictoTalker
		predicateSelector: 	#dependOn:
		subjectElements: 	nil
		argumentElements: 	nil
		isPredicateInv: 	false
		isSubjectInv: 	false
	Receiver's instance variables: 
		output: 	''
		commandOutput: 	''
		NEWLINE: 	'
'
		rules: 	a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalker m...etc...
		varSynonyms: 	nil
		sessionId: 	'1425462315'
		TIMESTAMP: 	'1425462315'
		TOOLNAME: 	'DIPhpDependencies'
		PROJECTROOT: 	'/home/otruffer/DictoCLI/'
		PROJECTSRC: 	'./'
		PROJECTBIN: 	'./'
		RESULTFILE: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/mai/1425462315/D...etc...
		TESTFILE: 	nil
		testInputFileExt: 	'.st'
		SYSTEM: 	SYSTEM


DICollectionRule(OrderedCollection)>>do:
	Receiver: a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalker must depend on Rule...etc...
	Arguments and temporary variables: 
		aBlock: 	printRulesEntityRelationship: someRules
	| res processedPredicates |
	r...etc...
		index: 	1
	Receiver's instance variables: 
		array: 	an Array(RuleResult cannot depend on DictoTalker DictoTalker must depend...etc...
		firstIndex: 	1
		lastIndex: 	3
		elements: 	nil
		elements: 	nil


DIPhpDependencies(DIAdapter)>>printRulesEntityRelationship:
	Receiver: a DIPhpDependencies
	Arguments and temporary variables: 
		res: 	''
		someRules: 	a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalk...etc...
		processedPredicates: 	a Set()
	Receiver's instance variables: 
		output: 	''
		commandOutput: 	''
		NEWLINE: 	'
'
		rules: 	a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalker m...etc...
		varSynonyms: 	nil
		sessionId: 	'1425462315'
		TIMESTAMP: 	'1425462315'
		TOOLNAME: 	'DIPhpDependencies'
		PROJECTROOT: 	'/home/otruffer/DictoCLI/'
		PROJECTSRC: 	'./'
		PROJECTBIN: 	'./'
		RESULTFILE: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/mai/1425462315/D...etc...
		TESTFILE: 	nil
		testInputFileExt: 	'.st'
		SYSTEM: 	SYSTEM


DIPhpDependencies(DIAdapter)>>printRules
	Receiver: a DIPhpDependencies
	Arguments and temporary variables: 
		res: 	nil
		allRules: 	a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalke...etc...
	Receiver's instance variables: 
		output: 	''
		commandOutput: 	''
		NEWLINE: 	'
'
		rules: 	a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalker m...etc...
		varSynonyms: 	nil
		sessionId: 	'1425462315'
		TIMESTAMP: 	'1425462315'
		TOOLNAME: 	'DIPhpDependencies'
		PROJECTROOT: 	'/home/otruffer/DictoCLI/'
		PROJECTSRC: 	'./'
		PROJECTBIN: 	'./'
		RESULTFILE: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/mai/1425462315/D...etc...
		TESTFILE: 	nil
		testInputFileExt: 	'.st'
		SYSTEM: 	SYSTEM


DIPhpDependencies>>testInput
	Receiver: a DIPhpDependencies
	Arguments and temporary variables: 
		strRules: 	nil
	Receiver's instance variables: 
		output: 	''
		commandOutput: 	''
		NEWLINE: 	'
'
		rules: 	a DICollectionRule(RuleResult cannot depend on DictoTalker DictoTalker m...etc...
		varSynonyms: 	nil
		sessionId: 	'1425462315'
		TIMESTAMP: 	'1425462315'
		TOOLNAME: 	'DIPhpDependencies'
		PROJECTROOT: 	'/home/otruffer/DictoCLI/'
		PROJECTSRC: 	'./'
		PROJECTBIN: 	'./'
		RESULTFILE: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/mai/1425462315/D...etc...
		TESTFILE: 	nil
		testInputFileExt: 	'.st'
		SYSTEM: 	SYSTEM


DITestGroup>>build
	Receiver: a DITestGroup
	Arguments and temporary variables: 

	Receiver's instance variables: 
		rules: 	an OrderedCollection(RuleResult cannot depend on DictoTalker DictoTalker...etc...
		adapter: 	a DIPhpDependencies
		runCommandText: 	nil
		testSpecification: 	nil
		adapterID: 	'DIPhpDependencies'
		resultFile: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/mai/1425462315/D...etc...
		specificationFile: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/mai/14254...etc...
		commandFile: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/mai/1425462315/...etc...
		rawOutput: 	nil
		xmlOutput: 	nil


[ :testGroup | testGroup build ] in DIDicto>>dictoBuild:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = ...etc...
		adapterTestGroups: 	a Dictionary(DIGrepFileContent->a DITestGroup DIJMeterLoadTe...etc...
		testGroup: 	a DITestGroup
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1425462315'
		singleShotTask: 	false


Array(SequenceableCollection)>>do:
	Receiver: an Array(a DITestGroup a DITestGroup a DITestGroup a DITestGroup a DITestGroup a DITestGro...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :testGroup | testGroup build ]
		index: 	3
	Receiver's instance variables: 
an Array(a DITestGroup a DITestGroup a DITestGroup a DITestGroup a DITestGroup a DITestGro...etc...

DIDicto>>dictoBuild:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = ...etc...
		adapterTestGroups: 	a Dictionary(DIGrepFileContent->a DITestGroup DIJMeterLoadTe...etc...
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1425462315'
		singleShotTask: 	false


DIDicto>>dictoRun:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = ...etc...
		adapterTestGroups: 	nil
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1425462315'
		singleShotTask: 	false


DIDicto>>dictoAll:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = ...etc...
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1425462315'
		singleShotTask: 	false


[ DIDicto new dictoAll: input ] in DIWebServiceAPI>>getRun
	Receiver: a DIWebServiceAPI
	Arguments and temporary variables: 
		in: 	'/home/otruffer/dicto/bin/analysis/mai/dicto.rules'
		input: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = PhpCl...etc...
		rulesFailed: 	nil
		rulesTotal: 	nil
	Receiver's instance variables: 
		request: 	nil
		response: 	nil
		variables: 	nil
		delegate: 	nil
		principal: 	nil
		credentials: 	nil


BlockClosure>>on:do:
	Receiver: [ DIDicto new dictoAll: input ]
	Arguments and temporary variables: 
		exception: 	DIException
		handlerAction: 	[ :ex | ^ self error: ex description ]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	DIWebServiceAPI>>getRun
		startpc: 	138
		numArgs: 	0


DIWebServiceAPI>>getRun
	Receiver: a DIWebServiceAPI
	Arguments and temporary variables: 
		in: 	'/home/otruffer/dicto/bin/analysis/mai/dicto.rules'
		input: 	'RuleResult = PhpClass with name:"Dicto\\RuleResult"
DictoTalker = PhpCl...etc...
		rulesFailed: 	nil
		rulesTotal: 	nil
	Receiver's instance variables: 
		request: 	nil
		response: 	nil
		variables: 	nil
		delegate: 	nil
		principal: 	nil
		credentials: 	nil


DIWebServiceHandler>>post
	Receiver: a DIWebServiceHandler
	Arguments and temporary variables: 
		api: 	a DIWebServiceAPI
	Receiver's instance variables: 
		request: 	a ZnRequest(POST /mai/run)
		response: 	nil
		variables: 	an OrderedCollection('mai' 'run')
		delegate: 	a ZnJSONRestServerDelegate
		principal: 	nil
		credentials: 	nil
		dicto: 	a DIDicto


DIWebServiceHandler(ZnRestCall)>>execute
	Receiver: a DIWebServiceHandler
	Arguments and temporary variables: 

	Receiver's instance variables: 
		request: 	a ZnRequest(POST /mai/run)
		response: 	nil
		variables: 	an OrderedCollection('mai' 'run')
		delegate: 	a ZnJSONRestServerDelegate
		principal: 	nil
		credentials: 	nil
		dicto: 	a DIDicto


[ call execute ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


BlockClosure>>on:do:
	Receiver: [ call execute ]
	Arguments and temporary variables: 
		exception: 	ZnRestCallUnauthorized
		handlerAction: 	[ :exception | self unauthorized: exception request ]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
		startpc: 	38
		numArgs: 	0


ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


[ self execute: call ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /mai/run)
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


BlockClosure>>on:do:
	Receiver: [ self execute: call ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :exception | 
request server debugMode
	ifTrue: [ exception pa...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
		startpc: 	99
		numArgs: 	0


ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /mai/run)
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ :delegate | delegate handleRequest: request ] ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /mai/run)
		delegate: 	a ZnJSONRestServerDelegate
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream a ZdcSock...etc...


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateRequest:do:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /mai/run)
		block: 	[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ ...etc...
		authenticator: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream a ZdcSock...etc...


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /mai/run)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream a ZdcSock...etc...


[ self authenticateAndDelegateRequest: request ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /mai/run)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream a ZdcSock...etc...


BlockClosure>>on:do:
	Receiver: [ self authenticateAndDelegateRequest: request ]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :exception | 
self debugMode
	ifTrue: [ exception pass ]
	ifFa...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequ...etc...
		startpc: 	58
		numArgs: 	0


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /mai/run)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream a ZdcSock...etc...


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /mai/run)
		response: 	nil
		initialMilliseconds: 	82849967
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream a ZdcSock...etc...


ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeOneRequestResponseOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		stream: 	a ZdcSocketStream
		request: 	a ZnRequest(POST /mai/run)
		response: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream a ZdcSocketStream a ZdcSock...etc...



--- The full stack ---
NeoJSONReader>>error:
NeoJSONReader>>parseValue
NeoJSONReader>>next
NeoJSONReader class>>fromString:
DIPhpModel>>_loadPhpModel
DIPhpModel>>model
DIVarPhpClass>>allElements
DIVarPhpClass(DIVar)>>elements
DISimpleRule>>subjectElements
printRulesEntityRelationship: someRules
	| res processedPredicates |
	res := ''.
	processedPredicates := Set new.
	someRules
		do: [ :rule | 
			| predicateSelector subjectElements argumentElements data isPredicateInv isSubjectInv |
			predicateSelector := (rule predicate nameNormalized , ':') asSymbol.
			isPredicateInv := rule hasPredicateInverted.
			isSubjectInv := rule hasSubjectInverted.
			subjectElements := rule subjectElements.
			argumentElements := rule argumentElements.
			subjectElements
				do: [ :subject | 
					argumentElements
						do: [ :argument | 
							| relId spec msgPass msgFail |
							relId := subject id , '-' , argument id.
							msgPass := subject id , '.' , rule predicate name , '(' , argument id , ')=True'.
							msgFail := subject id , '.' , rule predicate name , '(' , argument id , ')=False'.
							(processedPredicates includes: relId)
								ifFalse: [ 
									data := {(#subject -> subject value).
									(#argument -> argument value).
									(#ruleId -> rule id).
									(#propertyId -> relId).
									(#msgPass -> msgPass).
									(#msgFail -> msgFail)} asDictionary.
									spec := self perform: predicateSelector withArguments: {data}.
									spec := spec
										dictoReplace:
											{('$subject' -> subject value).
											('$argument' -> argument value).
											('$ruleId' -> rule id).
											('$propertyId' -> relId).
											('$msgPass' -> msgPass).
											('$msgFail' -> msgFail)}.
									res := res , spec ].	"avoid duplicate predicate evaluations"
							processedPredicates add: relId ] ] ].
	^ res in DIPhpDependencies(DIAdapter)>>printRulesEntityRelationship:
DICollectionRule(OrderedCollection)>>do:
DIPhpDependencies(DIAdapter)>>printRulesEntityRelationship:
DIPhpDependencies(DIAdapter)>>printRules
DIPhpDependencies>>testInput
DITestGroup>>build
[ :testGroup | testGroup build ] in DIDicto>>dictoBuild:
Array(SequenceableCollection)>>do:
DIDicto>>dictoBuild:
DIDicto>>dictoRun:
DIDicto>>dictoAll:
[ DIDicto new dictoAll: input ] in DIWebServiceAPI>>getRun
BlockClosure>>on:do:
DIWebServiceAPI>>getRun
DIWebServiceHandler>>post
DIWebServiceHandler(ZnRestCall)>>execute
[ call execute ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
BlockClosure>>on:do:
ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
[ self execute: call ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
BlockClosure>>on:do:
ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ :delegate | delegate handleRequest: request ] ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateRequest:do:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
[ self authenticateAndDelegateRequest: request ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
BlockClosure>>on:do:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequest:
ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeOneRequestResponseOn:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ self executeOneRequestResponseOn: stream ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
[ 
p psValueAt: index put: anObject.
aBlock value ] in ZnCurrentServer(DynamicVariable)>>value:during:
BlockClosure>>ensure:
ZnCurrentServer(DynamicVariable)>>value:during:
ZnCurrentServer class(DynamicVariable class)>>value:during:
ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
[ self executeRequestResponseLoopOn: stream ] in [ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ] in [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
BlockClosure>>ensure:
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ] in [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
BlockClosure>>ifCurtailed:
[ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: False>>trim
11 March 2015 4:35:34.241186 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
NBCogit NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
https://github.com/pharo-project/pharo-vm.git Commit: 4a0d556150d478ff2de3c9624d2f18e6eaa3fa5c Date: 2014-12-18 18:42:53 +0100 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14893

Image: Pharo3.0 [Latest update: #30863]

False(Object)>>doesNotUnderstand: #trim
	Receiver: false
	Arguments and temporary variables: 
		aMessage: 	trim
		exception: 	MessageNotUnderstood: False>>trim
		resumeValue: 	nil
	Receiver's instance variables: 
false

DILogger>>newSessionWithDSLText:
	Receiver: a DILogger
	Arguments and temporary variables: 
		aDSLText: 	false
		projectRoot: 	'/home/otruffer/AR/Dicto/DictoCLI'
	Receiver's instance variables: 
		transcript: 	nil
		sessions: 	an OrderedCollection(an OrderedCollection('==========================...etc...
		lastSession: 	an OrderedCollection('===============================' '// Time: 1...etc...
		outputStream: 	MultiByteFileStream: '/home/otruffer/dicto/bin/analysis/full-test...etc...
		verbose: 	true


DIDicto>>_importText:withImporter:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aText: 	false
		anImporterClass: 	DIDSLImporter
		adjustedText: 	nil
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1426088134'
		singleShotTask: 	true


DIDicto>>dictoParse:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	false
		adapterTestGroups: 	nil
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1426088134'
		singleShotTask: 	true


[ dicto dictoParse: text ] in DIWebServiceAPI>>postRules:
	Receiver: a DIWebServiceAPI
	Arguments and temporary variables: 
		dict: 	a Dictionary('rules'->false )
		dicto: 	a DIDicto
		text: 	false
	Receiver's instance variables: 
		request: 	nil
		response: 	nil
		variables: 	nil
		delegate: 	nil
		principal: 	nil
		credentials: 	nil


BlockClosure>>on:do:
	Receiver: [ dicto dictoParse: text ]
	Arguments and temporary variables: 
		exception: 	DISyntaxErrorException
		handlerAction: 	[ :ex | ^ self error: 'syntax error' ]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	DIWebServiceAPI>>postRules:
		startpc: 	58
		numArgs: 	0


DIWebServiceAPI>>postRules:
	Receiver: a DIWebServiceAPI
	Arguments and temporary variables: 
		dict: 	a Dictionary('rules'->false )
		dicto: 	a DIDicto
		text: 	false
	Receiver's instance variables: 
		request: 	nil
		response: 	nil
		variables: 	nil
		delegate: 	nil
		principal: 	nil
		credentials: 	nil


DIWebServiceHandler>>post
	Receiver: a DIWebServiceHandler
	Arguments and temporary variables: 
		api: 	a DIWebServiceAPI
	Receiver's instance variables: 
		request: 	a ZnRequest(POST /full-test/rules)
		response: 	nil
		variables: 	an OrderedCollection('full-test' 'rules')
		delegate: 	a ZnJSONRestServerDelegate
		principal: 	nil
		credentials: 	nil
		dicto: 	a DIDicto


DIWebServiceHandler(ZnRestCall)>>execute
	Receiver: a DIWebServiceHandler
	Arguments and temporary variables: 

	Receiver's instance variables: 
		request: 	a ZnRequest(POST /full-test/rules)
		response: 	nil
		variables: 	an OrderedCollection('full-test' 'rules')
		delegate: 	a ZnJSONRestServerDelegate
		principal: 	nil
		credentials: 	nil
		dicto: 	a DIDicto


[ call execute ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


BlockClosure>>on:do:
	Receiver: [ call execute ]
	Arguments and temporary variables: 
		exception: 	ZnRestCallUnauthorized
		handlerAction: 	[ :exception | self unauthorized: exception request ]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
		startpc: 	38
		numArgs: 	0


ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


[ self execute: call ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /full-test/rules)
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


BlockClosure>>on:do:
	Receiver: [ self execute: call ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :exception | 
request server debugMode
	ifTrue: [ exception pa...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
		startpc: 	99
		numArgs: 	0


ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /full-test/rules)
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ :delegate | delegate handleRequest: request ] ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /full-test/rules)
		delegate: 	a ZnJSONRestServerDelegate
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateRequest:do:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /full-test/rules)
		block: 	[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ ...etc...
		authenticator: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /full-test/rules)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


[ self authenticateAndDelegateRequest: request ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /full-test/rules)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


BlockClosure>>on:do:
	Receiver: [ self authenticateAndDelegateRequest: request ]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :exception | 
self debugMode
	ifTrue: [ exception pass ]
	ifFa...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequ...etc...
		startpc: 	58
		numArgs: 	0


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /full-test/rules)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /full-test/rules)
		response: 	nil
		initialMilliseconds: 	143552
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeOneRequestResponseOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		stream: 	a ZdcSocketStream
		request: 	a ZnRequest(POST /full-test/rules)
		response: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


[ self executeOneRequestResponseOn: stream ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		stream: 	a ZdcSocketStream
		request: 	nil
		response: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


[ 
p psValueAt: index put: anObject.
aBlock value ] in ZnCurrentServer(DynamicVariable)>>value:during:
	Receiver: a ZnCurrentServer
	Arguments and temporary variables: 
		anObject: 	a ZnManagingMultiThreadedServer(running 8010)
		aBlock: 	[ self executeOneRequestResponseOn: stream ]
		p: 	a Process in nil
		oldValue: 	nil
	Receiver's instance variables: 
		index: 	5


BlockClosure>>ensure:
	Receiver: [ 
p psValueAt: index put: anObject.
aBlock value ]
	Arguments and temporary variables: 
		aBlock: 	[ p psValueAt: index put: oldValue ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ZnCurrentServer(DynamicVariable)>>value:during:
		startpc: 	62
		numArgs: 	0


ZnCurrentServer(DynamicVariable)>>value:during:
	Receiver: a ZnCurrentServer
	Arguments and temporary variables: 
		anObject: 	a ZnManagingMultiThreadedServer(running 8010)
		aBlock: 	[ self executeOneRequestResponseOn: stream ]
		p: 	a Process in nil
		oldValue: 	nil
	Receiver's instance variables: 
		index: 	5


ZnCurrentServer class(DynamicVariable class)>>value:during:
	Receiver: ZnCurrentServer
	Arguments and temporary variables: 
		anObject: 	a ZnManagingMultiThreadedServer(running 8010)
		aBlock: 	[ self executeOneRequestResponseOn: stream ]
	Receiver's instance variables: 
		superclass: 	DynamicVariable
		methodDict: 	a MethodDictionary()
		format: 	132
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#ZnCurrentServer
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Zinc-HTTP-Variables'
		traitComposition: 	{}
		localSelectors: 	nil
		hash: 	nil
		soleInstance: 	a ZnCurrentServer


ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		stream: 	a ZdcSocketStream
		request: 	nil
		response: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


[ self executeRequestResponseLoopOn: stream ] in [ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ] in [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		listeningSocket: 	a Socket[waitingForConnection]
		stream: 	a ZdcSocketStream
		socket: 	a Socket[connected]
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


BlockClosure>>ensure:
	Receiver: [ self executeRequestResponseLoopOn: stream ]
	Arguments and temporary variables: 
		aBlock: 	[ 
self log debug: 'Closing stream'.
self closeSocketStream: stream ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		se...etc...
		startpc: 	118
		numArgs: 	0


[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ] in [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		listeningSocket: 	a Socket[waitingForConnection]
		stream: 	a ZdcSocketStream
		socket: 	a Socket[connected]
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


BlockClosure>>ifCurtailed:
	Receiver: [ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing st...etc...
	Arguments and temporary variables: 
		aBlock: 	[ 
self log debug: 'Destroying socket'.
socket destroy ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	[ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
	...etc...
		startpc: 	113
		numArgs: 	0


[ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		listeningSocket: 	a Socket[waitingForConnection]
		stream: 	a ZdcSocketStream
		socket: 	a Socket[connected]
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnec...etc...
		startpc: 	108
		numArgs: 	0



--- The full stack ---
False(Object)>>doesNotUnderstand: #trim
DILogger>>newSessionWithDSLText:
DIDicto>>_importText:withImporter:
DIDicto>>dictoParse:
[ dicto dictoParse: text ] in DIWebServiceAPI>>postRules:
BlockClosure>>on:do:
DIWebServiceAPI>>postRules:
DIWebServiceHandler>>post
DIWebServiceHandler(ZnRestCall)>>execute
[ call execute ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
BlockClosure>>on:do:
ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
[ self execute: call ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
BlockClosure>>on:do:
ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ :delegate | delegate handleRequest: request ] ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateRequest:do:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
[ self authenticateAndDelegateRequest: request ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
BlockClosure>>on:do:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequest:
ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeOneRequestResponseOn:
[ self executeOneRequestResponseOn: stream ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
[ 
p psValueAt: index put: anObject.
aBlock value ] in ZnCurrentServer(DynamicVariable)>>value:during:
BlockClosure>>ensure:
ZnCurrentServer(DynamicVariable)>>value:during:
ZnCurrentServer class(DynamicVariable class)>>value:during:
ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
[ self executeRequestResponseLoopOn: stream ] in [ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ] in [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
BlockClosure>>ensure:
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ] in [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
BlockClosure>>ifCurtailed:
[ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: receiver of "isReadOnly" is nil
17 March 2015 4:31:15.574427 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
NBCogit NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
https://github.com/pharo-project/pharo-vm.git Commit: 4a0d556150d478ff2de3c9624d2f18e6eaa3fa5c Date: 2014-12-18 18:42:53 +0100 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14893

Image: Pharo3.0 [Latest update: #30863]

UndefinedObject(Object)>>doesNotUnderstand: #isReadOnly
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	isReadOnly
		exception: 	MessageNotUnderstood: receiver of "isReadOnly" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

MultiByteFileStream class>>newFrom:
	Receiver: MultiByteFileStream
	Arguments and temporary variables: 
		aFileStream: 	nil
		rw: 	nil
		n: 	'nil'
	Receiver's instance variables: 
		superclass: 	StandardFileStream
		methodDict: 	a MethodDictionary(#accepts:->MultiByteFileStream>>#accepts: #ascii...etc...
		format: 	152
		layout: 	a FixedLayout
		instanceVariables: 	#('converter' 'lineEndConvention' 'wantsLineEndConversion')
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#MultiByteFileStream
		classPool: 	a Dictionary(#Cr->Character cr #CrLf->'

' #Lf->Character lf #LineEn...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Files-Kernel'
		traitComposition: 	{}
		localSelectors: 	nil


DIJavaModel>>_loadMooseModel
	Receiver: a DIJavaModel
	Arguments and temporary variables: 
		src: 	'/home/otruffer/DictoCLI//./'
		stream: 	nil
		trg: 	'/home/otruffer/dicto/bin/analysis/mai/1426606226/../model.mse'
	Receiver's instance variables: 
		defRules: 	a DICollectionRule()
		defVars: 	a DICollectionVar(SYSTEM)
		analysisID: 	'1426606063'
		additionalProperties: 	a Dictionary()
		ruleCounter: 	0
		varCounter: 	0
		defVarElements: 	a DICollectionVarElements()
		defVarInvertedElements: 	a DICollectionVarElements()
		model: 	a MooseModel #noname(0)


DIJavaModel>>model
	Receiver: a DIJavaModel
	Arguments and temporary variables: 

	Receiver's instance variables: 
		defRules: 	a DICollectionRule()
		defVars: 	a DICollectionVar(SYSTEM)
		analysisID: 	'1426606063'
		additionalProperties: 	a Dictionary()
		ruleCounter: 	0
		varCounter: 	0
		defVarElements: 	a DICollectionVarElements()
		defVarInvertedElements: 	a DICollectionVarElements()
		model: 	a MooseModel #noname(0)


DIJavaModel class(DIModel class)>>model
	Receiver: DIJavaModel
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	DIModel
		methodDict: 	a MethodDictionary(#_isTestJHD->DIJavaModel>>#_isTestJHD #_isTestSp...etc...
		format: 	148
		layout: 	a FixedLayout
		instanceVariables: 	#()
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#DIJavaModel
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Dicto-model'
		traitComposition: 	{}
		localSelectors: 	nil
		UniqueInstance: 	a DIJavaModel
		model: 	nil


DIVarPackage>>allElements
	Receiver: WholeCodeBase
	Arguments and temporary variables: 

	Receiver's instance variables: 
		isFirst: 	false
		dslText: 	'WholeCodeBase=Package with name:"*"'
		type: 	'Package'
		id: 	2
		entity: 	nil
		name: 	'WholeCodeBase'
		specifiers: 	an OrderedCollection(name=*)
		isInverted: 	false
		elements: 	a DICollectionVarElements()
		invertedElements: 	a DICollectionVarElements()


DIVarPackage(DIVar)>>elements
	Receiver: WholeCodeBase
	Arguments and temporary variables: 
		valid: 	nil
	Receiver's instance variables: 
		isFirst: 	false
		dslText: 	'WholeCodeBase=Package with name:"*"'
		type: 	'Package'
		id: 	2
		entity: 	nil
		name: 	'WholeCodeBase'
		specifiers: 	an OrderedCollection(name=*)
		isInverted: 	false
		elements: 	a DICollectionVarElements()
		invertedElements: 	a DICollectionVarElements()


DISimpleRule>>subjectElements
	Receiver: WholeCodeBase cannot contain code clones 
	Arguments and temporary variables: 
		subjectElements: 	nil
	Receiver's instance variables: 
		isFirst: 	nil
		dslText: 	'WholeCodeBase cannot contain code clones '
		type: 	#cannot
		id: 	5001
		entity: 	nil
		subjects: 	an Array(WholeCodeBase)
		predicates: 	an Array(contain code clones )
		subRules: 	nil
		documentation: 	nil
		candidateAdapters: 	a SortedCollection(DIPMDClones)
		chosenAdapter: 	DIPMDClones
		hasFailed: 	false
		failureMessage: 	''
		failingPredicates: 	a Set()
		hasSubjectInverted: 	false
		hasPredicateInverted: 	false


printRulesConstant: someRules
	| res processedPredicates |
	res := ''.
	processedPredicates := Set new.
	someRules
		do: [ :rule | 
			| predicateSelector argument data predName |
			predicateSelector := (rule predicate nameNormalized , ':') asSymbol.
			argument := rule predicate argument.
			predName := rule predicate nameNormalized.
			rule subjectElements
				do: [ :subject | 
					| spec predicate |
					predicate := DIPredicate
						newFrom:
							{predName.
							subject.
							argument.
							rule}.
					(processedPredicates includes: predicate)
						ifFalse: [ 
							data := predicate data.
							spec := self perform: predicateSelector withArguments: {data}.
							res := res , (predicate dataReplace: spec) ].	"avoid duplicate predicate evaluations"
					processedPredicates add: predicate ] ].
	^ res in DIPMDClones(DIAdapter)>>printRulesConstant:
	Receiver: a DIPMDClones
	Arguments and temporary variables: 
		res: 	'	$DICTO.TOOLDIR/pmd/bin/run.sh cpd --files /home/otruffer/DictoCLI//./ --...etc...
		someRules: 	WholeCodeBase cannot contain code clones 
		processedPredicates: 	a Set(SYSTEM containCodeClones )
	Receiver's instance variables: 
		output: 	''
		commandOutput: 	''
		NEWLINE: 	'
'
		rules: 	a DICollectionRule(SYSTEM cannot contain code clones  WholeCodeBase cann...etc...
		varSynonyms: 	nil
		sessionId: 	'1426606226'
		TIMESTAMP: 	'1426606226'
		TOOLNAME: 	'DIPMDClones'
		PROJECTROOT: 	'/home/otruffer/DictoCLI/'
		PROJECTSRC: 	'./'
		PROJECTBIN: 	'./'
		RESULTFILE: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/mai/1426606226/D...etc...
		TESTFILE: 	nil
		testInputFileExt: 	'.txt'
		SYSTEM: 	SYSTEM


DICollectionRule(OrderedCollection)>>do:
	Receiver: a DICollectionRule(SYSTEM cannot contain code clones  WholeCodeBase cannot contain code cl...etc...
	Arguments and temporary variables: 
		aBlock: 	printRulesConstant: someRules
	| res processedPredicates |
	res := ''.
...etc...
		index: 	2
	Receiver's instance variables: 
		array: 	an Array(SYSTEM cannot contain code clones  WholeCodeBase cannot contain...etc...
		firstIndex: 	1
		lastIndex: 	2
		elements: 	nil
		elements: 	nil


DIPMDClones(DIAdapter)>>printRulesConstant:
	Receiver: a DIPMDClones
	Arguments and temporary variables: 
		res: 	'	$DICTO.TOOLDIR/pmd/bin/run.sh cpd --files /home/otruffer/DictoCLI//./ --...etc...
		someRules: 	a DICollectionRule(SYSTEM cannot contain code clones  WholeCodeBase ...etc...
		processedPredicates: 	a Set(SYSTEM containCodeClones )
	Receiver's instance variables: 
		output: 	''
		commandOutput: 	''
		NEWLINE: 	'
'
		rules: 	a DICollectionRule(SYSTEM cannot contain code clones  WholeCodeBase cann...etc...
		varSynonyms: 	nil
		sessionId: 	'1426606226'
		TIMESTAMP: 	'1426606226'
		TOOLNAME: 	'DIPMDClones'
		PROJECTROOT: 	'/home/otruffer/DictoCLI/'
		PROJECTSRC: 	'./'
		PROJECTBIN: 	'./'
		RESULTFILE: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/mai/1426606226/D...etc...
		TESTFILE: 	nil
		testInputFileExt: 	'.txt'
		SYSTEM: 	SYSTEM


DIPMDClones(DIAdapter)>>printRules
	Receiver: a DIPMDClones
	Arguments and temporary variables: 
		res: 	''
		allRules: 	a DICollectionRule(SYSTEM cannot contain code clones  WholeCodeBase c...etc...
	Receiver's instance variables: 
		output: 	''
		commandOutput: 	''
		NEWLINE: 	'
'
		rules: 	a DICollectionRule(SYSTEM cannot contain code clones  WholeCodeBase cann...etc...
		varSynonyms: 	nil
		sessionId: 	'1426606226'
		TIMESTAMP: 	'1426606226'
		TOOLNAME: 	'DIPMDClones'
		PROJECTROOT: 	'/home/otruffer/DictoCLI/'
		PROJECTSRC: 	'./'
		PROJECTBIN: 	'./'
		RESULTFILE: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/mai/1426606226/D...etc...
		TESTFILE: 	nil
		testInputFileExt: 	'.txt'
		SYSTEM: 	SYSTEM


DIPMDClones>>testRun
	Receiver: a DIPMDClones
	Arguments and temporary variables: 

	Receiver's instance variables: 
		output: 	''
		commandOutput: 	''
		NEWLINE: 	'
'
		rules: 	a DICollectionRule(SYSTEM cannot contain code clones  WholeCodeBase cann...etc...
		varSynonyms: 	nil
		sessionId: 	'1426606226'
		TIMESTAMP: 	'1426606226'
		TOOLNAME: 	'DIPMDClones'
		PROJECTROOT: 	'/home/otruffer/DictoCLI/'
		PROJECTSRC: 	'./'
		PROJECTBIN: 	'./'
		RESULTFILE: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/mai/1426606226/D...etc...
		TESTFILE: 	nil
		testInputFileExt: 	'.txt'
		SYSTEM: 	SYSTEM


DITestGroup>>build
	Receiver: a DITestGroup
	Arguments and temporary variables: 

	Receiver's instance variables: 
		rules: 	an OrderedCollection(SYSTEM cannot contain code clones  WholeCodeBase ca...etc...
		adapter: 	a DIPMDClones
		runCommandText: 	nil
		testSpecification: 	''
		adapterID: 	'DIPMDClones'
		resultFile: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/mai/1426606226/D...etc...
		specificationFile: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/mai/14266...etc...
		commandFile: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/mai/1426606226/...etc...
		rawOutput: 	nil
		xmlOutput: 	nil


[ :testGroup | testGroup build ] in DIDicto>>dictoBuild:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'RuleResult= PhpClass with name:"Dicto\\RuleResult"
DictoTalker= Ph...etc...
		adapterTestGroups: 	a Dictionary(DIGrepFileContent->a DITestGroup DIJMeterLoadTe...etc...
		testGroup: 	a DITestGroup
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1426606226'
		singleShotTask: 	false


Array(SequenceableCollection)>>do:
	Receiver: an Array(a DITestGroup a DITestGroup a DITestGroup a DITestGroup a DITestGroup a DITestGro...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :testGroup | testGroup build ]
		index: 	4
	Receiver's instance variables: 
an Array(a DITestGroup a DITestGroup a DITestGroup a DITestGroup a DITestGroup a DITestGro...etc...

DIDicto>>dictoBuild:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'RuleResult= PhpClass with name:"Dicto\\RuleResult"
DictoTalker= Ph...etc...
		adapterTestGroups: 	a Dictionary(DIGrepFileContent->a DITestGroup DIJMeterLoadTe...etc...
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1426606226'
		singleShotTask: 	false


DIDicto>>dictoRun:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'RuleResult= PhpClass with name:"Dicto\\RuleResult"
DictoTalker= Ph...etc...
		adapterTestGroups: 	nil
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1426606226'
		singleShotTask: 	false


DIDicto>>dictoAll:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'RuleResult= PhpClass with name:"Dicto\\RuleResult"
DictoTalker= Ph...etc...
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1426606226'
		singleShotTask: 	false


[ DIDicto new dictoAll: input ] in DIWebServiceAPI>>getRun
	Receiver: a DIWebServiceAPI
	Arguments and temporary variables: 
		in: 	'/home/otruffer/dicto/bin/analysis/mai/dicto.rules'
		input: 	'RuleResult= PhpClass with name:"Dicto\\RuleResult"
DictoTalker= PhpClas...etc...
		rulesFailed: 	nil
		rulesTotal: 	nil
	Receiver's instance variables: 
		request: 	nil
		response: 	nil
		variables: 	nil
		delegate: 	nil
		principal: 	nil
		credentials: 	nil


BlockClosure>>on:do:
	Receiver: [ DIDicto new dictoAll: input ]
	Arguments and temporary variables: 
		exception: 	DIException
		handlerAction: 	[ :ex | ^ self error: ex description ]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	DIWebServiceAPI>>getRun
		startpc: 	138
		numArgs: 	0


DIWebServiceAPI>>getRun
	Receiver: a DIWebServiceAPI
	Arguments and temporary variables: 
		in: 	'/home/otruffer/dicto/bin/analysis/mai/dicto.rules'
		input: 	'RuleResult= PhpClass with name:"Dicto\\RuleResult"
DictoTalker= PhpClas...etc...
		rulesFailed: 	nil
		rulesTotal: 	nil
	Receiver's instance variables: 
		request: 	nil
		response: 	nil
		variables: 	nil
		delegate: 	nil
		principal: 	nil
		credentials: 	nil


DIWebServiceHandler>>post
	Receiver: a DIWebServiceHandler
	Arguments and temporary variables: 
		api: 	a DIWebServiceAPI
	Receiver's instance variables: 
		request: 	a ZnRequest(POST /mai/run)
		response: 	nil
		variables: 	an OrderedCollection('mai' 'run')
		delegate: 	a ZnJSONRestServerDelegate
		principal: 	nil
		credentials: 	nil
		dicto: 	a DIDicto


DIWebServiceHandler(ZnRestCall)>>execute
	Receiver: a DIWebServiceHandler
	Arguments and temporary variables: 

	Receiver's instance variables: 
		request: 	a ZnRequest(POST /mai/run)
		response: 	nil
		variables: 	an OrderedCollection('mai' 'run')
		delegate: 	a ZnJSONRestServerDelegate
		principal: 	nil
		credentials: 	nil
		dicto: 	a DIDicto


[ call execute ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


BlockClosure>>on:do:
	Receiver: [ call execute ]
	Arguments and temporary variables: 
		exception: 	ZnRestCallUnauthorized
		handlerAction: 	[ :exception | self unauthorized: exception request ]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
		startpc: 	38
		numArgs: 	0


ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


[ self execute: call ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /mai/run)
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


BlockClosure>>on:do:
	Receiver: [ self execute: call ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :exception | 
request server debugMode
	ifTrue: [ exception pa...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
		startpc: 	99
		numArgs: 	0


ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
	Receiver: a ZnJSONRestServerDelegate
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /mai/run)
		call: 	a DIWebServiceHandler
	Receiver's instance variables: 
		uriSpace: 	a ZnCallHierarchyRestUriSpace


[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ :delegate | delegate handleRequest: request ] ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /mai/run)
		delegate: 	a ZnJSONRestServerDelegate
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateRequest:do:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /mai/run)
		block: 	[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ ...etc...
		authenticator: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /mai/run)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


[ self authenticateAndDelegateRequest: request ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /mai/run)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


BlockClosure>>on:do:
	Receiver: [ self authenticateAndDelegateRequest: request ]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :exception | 
self debugMode
	ifTrue: [ exception pass ]
	ifFa...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequ...etc...
		startpc: 	58
		numArgs: 	0


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /mai/run)
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequest:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		request: 	a ZnRequest(POST /mai/run)
		response: 	nil
		initialMilliseconds: 	423917
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeOneRequestResponseOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		stream: 	a ZdcSocketStream
		request: 	a ZnRequest(POST /mai/run)
		response: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)


[ self executeOneRequestResponseOn: stream ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
	Receiver: a ZnManagingMultiThreadedServer(running 8010)
	Arguments and temporary variables: 
		stream: 	a ZdcSocketStream
		request: 	nil
		response: 	nil
	Receiver's instance variables: 
		options: 	a Dictionary(#debugMode->true #delegate->a ZnJSONRestServerDelegate #p...etc...
		sessionManager: 	nil
		process: 	a Process in [ 
self schedule.	"It is critical that the following has ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil
		lock: 	a Mutex
		connections: 	an OrderedCollection(a ZdcSocketStream)



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #isReadOnly
MultiByteFileStream class>>newFrom:
DIJavaModel>>_loadMooseModel
DIJavaModel>>model
DIJavaModel class(DIModel class)>>model
DIVarPackage>>allElements
DIVarPackage(DIVar)>>elements
DISimpleRule>>subjectElements
printRulesConstant: someRules
	| res processedPredicates |
	res := ''.
	processedPredicates := Set new.
	someRules
		do: [ :rule | 
			| predicateSelector argument data predName |
			predicateSelector := (rule predicate nameNormalized , ':') asSymbol.
			argument := rule predicate argument.
			predName := rule predicate nameNormalized.
			rule subjectElements
				do: [ :subject | 
					| spec predicate |
					predicate := DIPredicate
						newFrom:
							{predName.
							subject.
							argument.
							rule}.
					(processedPredicates includes: predicate)
						ifFalse: [ 
							data := predicate data.
							spec := self perform: predicateSelector withArguments: {data}.
							res := res , (predicate dataReplace: spec) ].	"avoid duplicate predicate evaluations"
					processedPredicates add: predicate ] ].
	^ res in DIPMDClones(DIAdapter)>>printRulesConstant:
DICollectionRule(OrderedCollection)>>do:
DIPMDClones(DIAdapter)>>printRulesConstant:
DIPMDClones(DIAdapter)>>printRules
DIPMDClones>>testRun
DITestGroup>>build
[ :testGroup | testGroup build ] in DIDicto>>dictoBuild:
Array(SequenceableCollection)>>do:
DIDicto>>dictoBuild:
DIDicto>>dictoRun:
DIDicto>>dictoAll:
[ DIDicto new dictoAll: input ] in DIWebServiceAPI>>getRun
BlockClosure>>on:do:
DIWebServiceAPI>>getRun
DIWebServiceHandler>>post
DIWebServiceHandler(ZnRestCall)>>execute
[ call execute ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
BlockClosure>>on:do:
ZnJSONRestServerDelegate(ZnRestServerDelegate)>>execute:
[ self execute: call ] in ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
BlockClosure>>on:do:
ZnJSONRestServerDelegate(ZnRestServerDelegate)>>handleRequest:
[ self delegate ifNil: [ ZnResponse notFound: request uri ] ifNotNil: [ :delegate | delegate handleRequest: request ] ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateRequest:do:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>authenticateAndDelegateRequest:
[ self authenticateAndDelegateRequest: request ] in ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
BlockClosure>>on:do:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequestProtected:
ZnManagingMultiThreadedServer(ZnSingleThreadedServer)>>handleRequest:
ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeOneRequestResponseOn:
[ self executeOneRequestResponseOn: stream ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ 
p psValueAt: index put: anObject.
aBlock value ] in ZnCurrentServer(DynamicVariable)>>value:during:
BlockClosure>>ensure:
ZnCurrentServer(DynamicVariable)>>value:during:
ZnCurrentServer class(DynamicVariable class)>>value:during:
ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>executeRequestResponseLoopOn:
[ self executeRequestResponseLoopOn: stream ] in [ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ] in [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
BlockClosure>>ensure:
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ] in [ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
BlockClosure>>ifCurtailed:
[ 
[ 
[ self executeRequestResponseLoopOn: stream ]
	ensure: [ 
		self log debug: 'Closing stream'.
		self closeSocketStream: stream ] ]
	ifCurtailed: [ 
		self log debug: 'Destroying socket'.
		socket destroy ] ] in ZnManagingMultiThreadedServer(ZnMultiThreadedServer)>>serveConnectionsOn:
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
TestFailure: Assertion failed
17 March 2015 5:45:20.327746 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
NBCogit NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
https://github.com/pharo-project/pharo-vm.git Commit: 4a0d556150d478ff2de3c9624d2f18e6eaa3fa5c Date: 2014-12-18 18:42:53 +0100 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14893

Image: Pharo3.0 [Latest update: #30863]

DIPHPTests(TestAsserter)>>assert:
	Receiver: DIPHPTests
	Arguments and temporary variables: 
		aBoolean: 	false
	Receiver's instance variables: 
		testSelector: 	nil
		expectedFails: 	nil


[ :n | self assert: (DIModel allRules at: n) hasFailed = (res at: n) not ] in DIPHPTests(DIDSLTests)>>runAndReturnObjWithText:andSuccessResults:onProject:
	Receiver: DIPHPTests
	Arguments and temporary variables: 
		dslText: 	'
WholeIliasCodebase = PhpClass with name:"il*"
WholeCodeBase = PhpCla...etc...
		res: 	#(false true true false)
		project: 	'HugeProject'
		dicto: 	a DIDicto
		n: 	2
	Receiver's instance variables: 
		testSelector: 	nil
		expectedFails: 	nil


Interval>>do:
	Receiver: (1 to: 4)
	Arguments and temporary variables: 
		aBlock: 	[ :n | self assert: (DIModel allRules at: n) hasFailed = (res at: n) no...etc...
		aValue: 	2
		index: 	2
		size: 	4
	Receiver's instance variables: 
		start: 	1
		stop: 	4
		step: 	1


DIPHPTests(DIDSLTests)>>runAndReturnObjWithText:andSuccessResults:onProject:
	Receiver: DIPHPTests
	Arguments and temporary variables: 
		dslText: 	'
WholeIliasCodebase = PhpClass with name:"il*"
WholeCodeBase = PhpCla...etc...
		res: 	#(false true true false)
		project: 	'HugeProject'
		dicto: 	a DIDicto
	Receiver's instance variables: 
		testSelector: 	nil
		expectedFails: 	nil


DIPHPTests class>>DoIt
	Receiver: DIPHPTests
	Arguments and temporary variables: 
		dsl: 	'
WholeIliasCodebase = PhpClass with name:"il*"
WholeCodeBase = PhpClass w...etc...
		success: 	#(false true true false)
		test: 	DIPHPTests
	Receiver's instance variables: 
		superclass: 	DIDSLTests
		methodDict: 	a MethodDictionary(#testHugePhp->DIPHPTests>>#testHugePhp #testPhp-...etc...
		format: 	134
		layout: 	a FixedLayout
		instanceVariables: 	#()
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#DIPHPTests
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Dicto-var-tests'
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set(#testH...etc...


CompiledMethod>>valueWithReceiver:arguments:
	Receiver: DIPHPTests class>>#DoIt
	Arguments and temporary variables: 
		aReceiver: 	DIPHPTests
		anArray: 	#()
	Receiver's instance variables: 
DIPHPTests class>>#DoIt

[ v := compiledMethod valueWithReceiver: receiver arguments: #() ] in SmalltalkEditor>>tallySelection
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		receiver: 	DIPHPTests
		context: 	nil
		compiledMethod: 	DIPHPTests class>>#DoIt
		profiler: 	nil
		v: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(177733632)
		selectionShowing: 	true
		model: 	a PackageTreeNautilusUI
		editingState: 	a SmalltalkEditingState


BlockClosure>>ensure:
	Receiver: [ v := compiledMethod valueWithReceiver: receiver arguments: #() ]
	Arguments and temporary variables: 
		aBlock: 	[ 
"cancel the probe and return the value"
"Could have already been ter...etc...
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor>>tallySelection
		startpc: 	105
		numArgs: 	0


MessageTally>>spyEvery:on:
	Receiver: nil(SmalltalkEditor) >> tallySelection
	Arguments and temporary variables: 
		observedProcess: 	a Process in nil
		millisecs: 	1
		aBlock: 	[ v := compiledMethod valueWithReceiver: receiver arguments: #() ]
		myDelay: 	a Delay(1 msecs; 1 msecs remaining)
		time0: 	3857101
	Receiver's instance variables: 
		class: 	SmalltalkEditor
		method: 	SmalltalkEditor>>#tallySelection
		process: 	nil
		tally: 	1061222
		receivers: 	an Array(nil(CompiledMethod) >> valueWithReceiver:arguments: nil(Wea...etc...
		senders: 	nil
		time: 	0
		gcStats: 	#(73628452 75442112 79814016 nil nil 2000 10535 999435 34477 9602 123 ...etc...
		maxClassNameSize: 	1000
		maxClassPlusSelectorSize: 	1000
		maxTabs: 	100
		reportOtherProcesses: 	true


TimeProfiler>>runBlock:pollingEvery:
	Receiver: a TimeProfiler
	Arguments and temporary variables: 
		aBlock: 	[ v := compiledMethod valueWithReceiver: receiver arguments: #() ]
		pollPeriod: 	1
	Receiver's instance variables: 
		dependents: 	nil
		selection: 	nil
		announcer: 	nil
		rootItems: 	nil
		autoMultiSelection: 	nil
		headerLabel: 	nil
		multiSelection: 	nil
		wrapBlockOrSelector: 	nil
		isCheckList: 	nil
		enabled: 	nil
		win: 	nil
		rootMessageTally: 	nil(SmalltalkEditor) >> tallySelection
		threshold: 	nil
		minPercentageToExpand: 	nil
		treeMorph: 	nil
		block: 	[ v := compiledMethod valueWithReceiver: receiver arguments: #() ]
		blockCodePane: 	nil
		withBlockCodePane: 	false
		blockSource: 	nil
		reportOtherProcesses: 	nil
		showLeavesOnly: 	nil
		codeTabPane: 	nil
		resultPane: 	nil
		result: 	nil
		withToolBar: 	false


TimeProfiler>>openOnBlock:
	Receiver: a TimeProfiler
	Arguments and temporary variables: 
		aBlock: 	[ v := compiledMethod valueWithReceiver: receiver arguments: #() ]
	Receiver's instance variables: 
		dependents: 	nil
		selection: 	nil
		announcer: 	nil
		rootItems: 	nil
		autoMultiSelection: 	nil
		headerLabel: 	nil
		multiSelection: 	nil
		wrapBlockOrSelector: 	nil
		isCheckList: 	nil
		enabled: 	nil
		win: 	nil
		rootMessageTally: 	nil(SmalltalkEditor) >> tallySelection
		threshold: 	nil
		minPercentageToExpand: 	nil
		treeMorph: 	nil
		block: 	[ v := compiledMethod valueWithReceiver: receiver arguments: #() ]
		blockCodePane: 	nil
		withBlockCodePane: 	false
		blockSource: 	nil
		reportOtherProcesses: 	nil
		showLeavesOnly: 	nil
		codeTabPane: 	nil
		resultPane: 	nil
		result: 	nil
		withToolBar: 	false


TimeProfiler class>>spyOn:
	Receiver: TimeProfiler
	Arguments and temporary variables: 
		aBlock: 	[ v := compiledMethod valueWithReceiver: receiver arguments: #() ]
	Receiver's instance variables: 
		superclass: 	MorphTreeModel
		methodDict: 	a MethodDictionary(#blockCode->TimeProfiler>>#blockCode #blockCode:...etc...
		format: 	180
		layout: 	a FixedLayout
		instanceVariables: 	#(#win #rootMessageTally #threshold #minPercentageToExpand #...etc...
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#TimeProfiler
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Tools-Profilers'
		traitComposition: 	{}
		localSelectors: 	nil


SmalltalkEditor>>tallySelection
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		v: 	nil
		receiver: 	DIPHPTests
		context: 	nil
		compiledMethod: 	DIPHPTests class>>#DoIt
		profiler: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(177733632)
		selectionShowing: 	true
		model: 	a PackageTreeNautilusUI
		editingState: 	a SmalltalkEditingState


SmalltalkEditor>>tallyIt
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 

	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(177733632)
		selectionShowing: 	true
		model: 	a PackageTreeNautilusUI
		editingState: 	a SmalltalkEditingState


[ textMorph editor tallyIt ] in PluggableTextMorphWithLimits(PluggableTextMorph)>>tallyIt
	Receiver: a PluggableTextMorphWithLimits(327155712)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(621.0@428.0) corner: (1437.0@703.0)
		owner: 	a MultipleMethodsEditor(397672448)
		submorphs: 	an Array(a ScrollBar(368836608) an AlphaImageMorph(624164864) a Tran...etc...
		fullBounds: 	(621@428) corner: (1437@703)
		color: 	Color white
		extension: 	a MorphExtension (156499968) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.784 g: 0.784 b: 0.784 alpha: 1.0)
		model: 	a PackageTreeNautilusUI
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(368836608)
		scroller: 	a TransformMorph(466354176)
		getMenuSelector: 	#sourceCodeMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(1008730112)
		textMorph: 	a TextMorphForEditView(177733632)
		getTextSelector: 	#sourceCodeFrom:
		setTextSelector: 	#compileSource:notifying:
		getSelectionSelector: 	#contentsSelectionFrom:
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(347 to: 346)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil
		doubleClickSelector: 	nil
		setSelectionSelector: 	nil
		alertLimit: 	700
		locked: 	false
		warningLimit: 	350
		method: 	nil
		lockIcon: 	an AlphaImageMorph(624164864)
		canLockChangeSelector: 	#canChangeLockFor:
		lockSelector: 	#lockTextArea:from:


[ result := editBlock value ] in PluggableTextMorphWithLimits(PluggableTextMorph)>>handleEdit:
	Receiver: a PluggableTextMorphWithLimits(327155712)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph editor tallyIt ]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(621.0@428.0) corner: (1437.0@703.0)
		owner: 	a MultipleMethodsEditor(397672448)
		submorphs: 	an Array(a ScrollBar(368836608) an AlphaImageMorph(624164864) a Tran...etc...
		fullBounds: 	(621@428) corner: (1437@703)
		color: 	Color white
		extension: 	a MorphExtension (156499968) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.784 g: 0.784 b: 0.784 alpha: 1.0)
		model: 	a PackageTreeNautilusUI
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(368836608)
		scroller: 	a TransformMorph(466354176)
		getMenuSelector: 	#sourceCodeMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(1008730112)
		textMorph: 	a TextMorphForEditView(177733632)
		getTextSelector: 	#sourceCodeFrom:
		setTextSelector: 	#compileSource:notifying:
		getSelectionSelector: 	#contentsSelectionFrom:
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(347 to: 346)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil
		doubleClickSelector: 	nil
		setSelectionSelector: 	nil
		alertLimit: 	700
		locked: 	false
		warningLimit: 	350
		method: 	nil
		lockIcon: 	an AlphaImageMorph(624164864)
		canLockChangeSelector: 	#canChangeLockFor:
		lockSelector: 	#lockTextArea:from:


TextMorphForEditView(TextMorph)>>handleEdit:
	Receiver: a TextMorphForEditView(177733632)
	Arguments and temporary variables: 
		editBlock: 	[ result := editBlock value ]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (795@800)
		owner: 	a TransformMorph(466354176)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (795@800)
		color: 	Color black
		extension: 	a MorphExtension (226492416) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Source Code Pro
		text: 	a Text for 'testHugePhp
| dsl success test|
	
dsl := ''
WholeIliasCodebas...etc...
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		defaultColor: 	Color black
		editView: 	a PluggableTextMorphWithLimits(327155712)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


PluggableTextMorphWithLimits(PluggableTextMorph)>>handleEdit:
	Receiver: a PluggableTextMorphWithLimits(327155712)
	Arguments and temporary variables: 
		result: 	nil
		editBlock: 	[ textMorph editor tallyIt ]
	Receiver's instance variables: 
		bounds: 	(606.0@408.0) corner: (1422.0@683.0)
		owner: 	a MultipleMethodsEditor(397672448)
		submorphs: 	an Array(a ScrollBar(368836608) an AlphaImageMorph(624164864) a Tran...etc...
		fullBounds: 	(606.0@408.0) corner: (1422.0@683.0)
		color: 	Color white
		extension: 	a MorphExtension (156499968) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.784 g: 0.784 b: 0.784 alpha: 1.0)
		model: 	a PackageTreeNautilusUI
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(368836608)
		scroller: 	a TransformMorph(466354176)
		getMenuSelector: 	#sourceCodeMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(1008730112)
		textMorph: 	a TextMorphForEditView(177733632)
		getTextSelector: 	#sourceCodeFrom:
		setTextSelector: 	#compileSource:notifying:
		getSelectionSelector: 	#contentsSelectionFrom:
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(347 to: 346)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil
		doubleClickSelector: 	nil
		setSelectionSelector: 	nil
		alertLimit: 	700
		locked: 	false
		warningLimit: 	350
		method: 	nil
		lockIcon: 	an AlphaImageMorph(624164864)
		canLockChangeSelector: 	#canChangeLockFor:
		lockSelector: 	#lockTextArea:from:


PluggableTextMorphWithLimits(PluggableTextMorph)>>tallyIt
	Receiver: a PluggableTextMorphWithLimits(327155712)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(606.0@408.0) corner: (1422.0@683.0)
		owner: 	a MultipleMethodsEditor(397672448)
		submorphs: 	an Array(a ScrollBar(368836608) an AlphaImageMorph(624164864) a Tran...etc...
		fullBounds: 	(606.0@408.0) corner: (1422.0@683.0)
		color: 	Color white
		extension: 	a MorphExtension (156499968) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.784 g: 0.784 b: 0.784 alpha: 1.0)
		model: 	a PackageTreeNautilusUI
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(368836608)
		scroller: 	a TransformMorph(466354176)
		getMenuSelector: 	#sourceCodeMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(1008730112)
		textMorph: 	a TextMorphForEditView(177733632)
		getTextSelector: 	#sourceCodeFrom:
		setTextSelector: 	#compileSource:notifying:
		getSelectionSelector: 	#contentsSelectionFrom:
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(347 to: 346)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil
		doubleClickSelector: 	nil
		setSelectionSelector: 	nil
		alertLimit: 	700
		locked: 	false
		warningLimit: 	350
		method: 	nil
		lockIcon: 	an AlphaImageMorph(624164864)
		canLockChangeSelector: 	#canChangeLockFor:
		lockSelector: 	#lockTextArea:from:


PackageTreeNautilusUI(Object)>>perform:orSendTo:
	Receiver: a PackageTreeNautilusUI
	Arguments and temporary variables: 
		selector: 	#tallyIt
		otherTarget: 	a PluggableTextMorphWithLimits(327155712)
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a CategoryWidget a MethodWidget a NautilusWindow(...etc...
		model: 	a PackageTreeNautilus
		window: 	a NautilusWindow(712507392)
		hierarchyClass: 	nil
		cachedHierarchy: 	a SortHierarchically
		sourceTextArea: 	a PluggableTextMorphWithLimits(327155712)
		groupsSelection: 	a Dictionary()
		packagesSelection: 	a Dictionary(var-tests->true )
		classesSelection: 	a Dictionary(DIPHPTests->true )
		list: 	a MorphTreeMorph(1034944512)
		list2: 	a PluggableIconListMorph(1020002304)
		sourceCodePanel: 	a PanelMorph(207618048)
		commentTextArea: 	nil
		currentDisplayChoice: 	#SourceCode
		sourceTextAreaLimit: 	350
		sourceCodeContainer: 	a PanelMorph(702283776)
		list2Elements: 	{DIDSLTests. DIJavaTests. DILangTests. DIPHPTests. DISTTests}
		listElements: 	nil
		shouldUpdateTitle: 	true
		testSemaphore: 	a Semaphore()
		sourceTextAreas: 	an OrderedCollection(a PluggableTextMorphWithLimits(327155712)...etc...
		multipleMethodsEditor: 	a MultipleMethodsEditor(397672448)
		contentSelection: 	nil
		acceptor: 	a MethodDefinitionAcceptor
		classifier: 	a MethodClassifier
		categoryWidget: 	a CategoryWidget
		methodWidget: 	a MethodWidget
		packagePattern: 	nil
		searchWidget: 	a SearchMorph(1029963776)


[ 
| selArgCount |
"show cursor in case item opens a new MVC window"
(selArgCount := selector numArgs) = 0
	ifTrue: [ target perform: selector ]
	ifFalse: [ 
		selArgCount = arguments size
			ifTrue: [ target perform: selector withArguments: arguments ]
			ifFalse: [ target perform: selector withArguments: (arguments copyWith: evt) ] ].
self changed ] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(617611264)'Profile it'
	Arguments and temporary variables: 
		evt: 	[(904@729) mouseUp 3857069 nil]
		w: 	a WorldMorph(511705088) [world]
		selArgCount: 	2
	Receiver's instance variables: 
		bounds: 	(800.0@721.0) corner: (971.0@739.0)
		owner: 	a MenuMorph(280756224)
		submorphs: 	#()
		fullBounds: 	(800.0@721.0) corner: (971.0@739.0)
		color: 	Color black
		extension: 	a MorphExtension (640942080)
		font: 	a LogicalFont
 familyName: Source Sans Pro
 emphasis: nil
 pointSize: 10
...etc...
		emphasis: 	0
		contents: 	'Profile it'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a PackageTreeNautilusUI
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#tallyIt a PluggableTextMorphWithLimits(327155712))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


BlockClosure>>ensure:
	Receiver: [ 
| selArgCount |
"show cursor in case item opens a new MVC window"
(selArgCount := selec...etc...
	Arguments and temporary variables: 
		aBlock: 	[ oldcursor show ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
		startpc: 	134
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r100000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[ 
| selArgCount |
"show cursor in case item opens a new MVC window"
(s...etc...
		oldcursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	(-1@ -1)
		maskForm: 	Form(16x16x1)


ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(617611264)'Profile it'
	Arguments and temporary variables: 
		evt: 	[(904@729) mouseUp 3857069 nil]
		w: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		bounds: 	(800.0@721.0) corner: (971.0@739.0)
		owner: 	a MenuMorph(280756224)
		submorphs: 	#()
		fullBounds: 	(800.0@721.0) corner: (971.0@739.0)
		color: 	Color black
		extension: 	a MorphExtension (640942080)
		font: 	a LogicalFont
 familyName: Source Sans Pro
 emphasis: nil
 pointSize: 10
...etc...
		emphasis: 	0
		contents: 	'Profile it'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a PackageTreeNautilusUI
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#tallyIt a PluggableTextMorphWithLimits(327155712))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
	Receiver: a ToggleMenuItemMorph(617611264)'Profile it'
	Arguments and temporary variables: 
		evt: 	[(904@729) mouseUp 3857069 nil]
	Receiver's instance variables: 
		bounds: 	(800.0@721.0) corner: (971.0@739.0)
		owner: 	a MenuMorph(280756224)
		submorphs: 	#()
		fullBounds: 	(800.0@721.0) corner: (971.0@739.0)
		color: 	Color black
		extension: 	a MorphExtension (640942080)
		font: 	a LogicalFont
 familyName: Source Sans Pro
 emphasis: nil
 pointSize: 10
...etc...
		emphasis: 	0
		contents: 	'Profile it'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a PackageTreeNautilusUI
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#tallyIt a PluggableTextMorphWithLimits(327155712))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
	Receiver: a ToggleMenuItemMorph(617611264)'Profile it'
	Arguments and temporary variables: 
		anEvent: 	[(904@729) mouseUp 3857069 nil]
	Receiver's instance variables: 
		bounds: 	(800.0@721.0) corner: (971.0@739.0)
		owner: 	a MenuMorph(280756224)
		submorphs: 	#()
		fullBounds: 	(800.0@721.0) corner: (971.0@739.0)
		color: 	Color black
		extension: 	a MorphExtension (640942080)
		font: 	a LogicalFont
 familyName: Source Sans Pro
 emphasis: nil
 pointSize: 10
...etc...
		emphasis: 	0
		contents: 	'Profile it'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a PackageTreeNautilusUI
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#tallyIt a PluggableTextMorphWithLimits(327155712))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [(904@729) mouseUp 3857069 nil]
	Arguments and temporary variables: 
		anObject: 	a ToggleMenuItemMorph(617611264)'Profile it'
	Receiver's instance variables: 
		timeStamp: 	3857069
		source: 	a HandMorph(760479744)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(904@729)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


ToggleMenuItemMorph(Morph)>>handleEvent:
	Receiver: a ToggleMenuItemMorph(617611264)'Profile it'
	Arguments and temporary variables: 
		anEvent: 	[(904@729) mouseUp 3857069 nil]
	Receiver's instance variables: 
		bounds: 	(800.0@721.0) corner: (971.0@739.0)
		owner: 	a MenuMorph(280756224)
		submorphs: 	#()
		fullBounds: 	(800.0@721.0) corner: (971.0@739.0)
		color: 	Color black
		extension: 	a MorphExtension (640942080)
		font: 	a LogicalFont
 familyName: Source Sans Pro
 emphasis: nil
 pointSize: 10
...etc...
		emphasis: 	0
		contents: 	'Profile it'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a PackageTreeNautilusUI
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#tallyIt a PluggableTextMorphWithLimits(327155712))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(904@729) mouseUp 3857069 nil]
		aMorph: 	a ToggleMenuItemMorph(617611264)'Profile it'
		localEvt: 	nil
		index: 	1
		child: 	nil
		morphs: 	#()
		inside: 	true
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(904@729) mouseUp 3857069 nil]
		aMorph: 	a ToggleMenuItemMorph(617611264)'Profile it'
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


ToggleMenuItemMorph(Morph)>>processEvent:using:
	Receiver: a ToggleMenuItemMorph(617611264)'Profile it'
	Arguments and temporary variables: 
		anEvent: 	[(904@729) mouseUp 3857069 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	(800.0@721.0) corner: (971.0@739.0)
		owner: 	a MenuMorph(280756224)
		submorphs: 	#()
		fullBounds: 	(800.0@721.0) corner: (971.0@739.0)
		color: 	Color black
		extension: 	a MorphExtension (640942080)
		font: 	a LogicalFont
 familyName: Source Sans Pro
 emphasis: nil
 pointSize: 10
...etc...
		emphasis: 	0
		contents: 	'Profile it'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a PackageTreeNautilusUI
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#tallyIt a PluggableTextMorphWithLimits(327155712))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(904@729) mouseUp 3857069 nil]
		aMorph: 	a MenuMorph(280756224)
		localEvt: 	[(904@729) mouseUp 3857069 nil]
		index: 	11
		child: 	a ToggleMenuItemMorph(617611264)'Profile it'
		morphs: 	an Array(a ToggleMenuItemMorph(360710144)'Suggestions' a MenuLineMorph(...etc...
		inside: 	false
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(904@729) mouseUp 3857069 nil]
		aMorph: 	a MenuMorph(280756224)
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MenuMorph(Morph)>>processEvent:using:
	Receiver: a MenuMorph(280756224)
	Arguments and temporary variables: 
		anEvent: 	[(904@729) mouseUp 3857069 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	(795.0@561.0) corner: (976.0@1003.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(360710144)'Suggestions' a MenuLineMor...etc...
		fullBounds: 	(795.0@561.0) corner: (976.0@1003.0)
		color: 	(Color r: 0.894 g: 0.894 b: 0.894 alpha: 1.0)
		extension: 	a MorphExtension (322174976) [other:  (basicColor -> (Color r: 0.823...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.674 g: 0.674 b: 0.674 alpha: 1.0)
		defaultTarget: 	a PackageTreeNautilusUI
		selectedItem: 	a ToggleMenuItemMorph(617611264)'Profile it'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(360710144)'Suggestions' a...etc...


MenuMorph(Morph)>>processEvent:
	Receiver: a MenuMorph(280756224)
	Arguments and temporary variables: 
		anEvent: 	[(904@729) mouseUp 3857069 nil]
	Receiver's instance variables: 
		bounds: 	(795.0@561.0) corner: (976.0@1003.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(360710144)'Suggestions' a MenuLineMor...etc...
		fullBounds: 	(795.0@561.0) corner: (976.0@1003.0)
		color: 	(Color r: 0.894 g: 0.894 b: 0.894 alpha: 1.0)
		extension: 	a MorphExtension (322174976) [other:  (basicColor -> (Color r: 0.823...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.674 g: 0.674 b: 0.674 alpha: 1.0)
		defaultTarget: 	a PackageTreeNautilusUI
		selectedItem: 	a ToggleMenuItemMorph(617611264)'Profile it'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(360710144)'Suggestions' a...etc...


MenuMorph>>handleFocusEvent:
	Receiver: a MenuMorph(280756224)
	Arguments and temporary variables: 
		evt: 	[(904@729) mouseUp 3857069 nil]
	Receiver's instance variables: 
		bounds: 	(795.0@561.0) corner: (976.0@1003.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(360710144)'Suggestions' a MenuLineMor...etc...
		fullBounds: 	(795.0@561.0) corner: (976.0@1003.0)
		color: 	(Color r: 0.894 g: 0.894 b: 0.894 alpha: 1.0)
		extension: 	a MorphExtension (322174976) [other:  (basicColor -> (Color r: 0.823...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.674 g: 0.674 b: 0.674 alpha: 1.0)
		defaultTarget: 	a PackageTreeNautilusUI
		selectedItem: 	a ToggleMenuItemMorph(617611264)'Profile it'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(360710144)'Suggestions' a...etc...


[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[(904@729) mouseUp 3857069 nil]
		focusHolder: 	a MenuMorph(280756224)
		aBlock: 	[ self mouseFocus: nil ]
		w: 	a WorldMorph(511705088) [world]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(1061@104) corner: (1077@120)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	a TextMorphForEditView(177733632)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1061@104) mouseOver nil nil]
		targetOffset: 	(-460.0@ -16.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	a FormCanvas on: Form(850x600x32)
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	Form(856x608x32)
		lastEventBuffer: 	#(1 3919818 1061 104 0 0 0 1)
		lastKeyScanCode: 	247
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


BlockClosure>>on:do:
	Receiver: [ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (an...etc...
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :ex | 
ActiveWorld := priorWorld.
ActiveEvent := priorEvent.
A...etc...
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	HandMorph>>sendFocusEvent:to:clear:
		startpc: 	67
		numArgs: 	0


WorldMorph(PasteUpMorph)>>becomeActiveDuring:
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 
		aBlock: 	[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder ha...etc...
		priorWorld: 	a WorldMorph(511705088) [world]
		priorHand: 	a HandMorph(760479744)
		priorEvent: 	[(904@729) mouseOver red nil nil]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1855@1056)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a NautilusWindow(712507392) a GLM...etc...
		fullBounds: 	(0@0) corner: (1855@1056)
		color: 	Color white
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil



--- The full stack ---
DIPHPTests(TestAsserter)>>assert:
[ :n | self assert: (DIModel allRules at: n) hasFailed = (res at: n) not ] in DIPHPTests(DIDSLTests)>>runAndReturnObjWithText:andSuccessResults:onProject:
Interval>>do:
DIPHPTests(DIDSLTests)>>runAndReturnObjWithText:andSuccessResults:onProject:
DIPHPTests class>>DoIt
CompiledMethod>>valueWithReceiver:arguments:
[ v := compiledMethod valueWithReceiver: receiver arguments: #() ] in SmalltalkEditor>>tallySelection
BlockClosure>>ensure:
MessageTally>>spyEvery:on:
TimeProfiler>>runBlock:pollingEvery:
TimeProfiler>>openOnBlock:
TimeProfiler class>>spyOn:
SmalltalkEditor>>tallySelection
SmalltalkEditor>>tallyIt
[ textMorph editor tallyIt ] in PluggableTextMorphWithLimits(PluggableTextMorph)>>tallyIt
[ result := editBlock value ] in PluggableTextMorphWithLimits(PluggableTextMorph)>>handleEdit:
TextMorphForEditView(TextMorph)>>handleEdit:
PluggableTextMorphWithLimits(PluggableTextMorph)>>handleEdit:
PluggableTextMorphWithLimits(PluggableTextMorph)>>tallyIt
PackageTreeNautilusUI(Object)>>perform:orSendTo:
[ 
| selArgCount |
"show cursor in case item opens a new MVC window"
(selArgCount := selector numArgs) = 0
	ifTrue: [ target perform: selector ]
	ifFalse: [ 
		selArgCount = arguments size
			ifTrue: [ target perform: selector withArguments: arguments ]
			ifFalse: [ target perform: selector withArguments: (arguments copyWith: evt) ] ].
self changed ] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
ToggleMenuItemMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
ToggleMenuItemMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
MenuMorph(Morph)>>processEvent:using:
MenuMorph(Morph)>>processEvent:
MenuMorph>>handleFocusEvent:
[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldState>>doOneSubCycleFor:
WorldMorph>>doOneSubCycle
MenuMorph>>invokeModalAt:in:allowKeyboard:
MenuMorph>>invokeModal:
MenuMorph>>invokeModal
PluggableTextMorphWithLimits(PluggableTextMorph)>>yellowButtonActivity:
SmalltalkEditor(TextEditor)>>mouseUp:
[ editor mouseUp: evt ] in TextMorphForEditView(TextMorph)>>mouseUp:
TextMorphForEditView(TextMorph)>>handleInteraction:
TextMorphForEditView>>handleInteraction:
TextMorphForEditView(TextMorph)>>mouseUp:
TextMorphForEditView>>mouseUp:
TextMorphForEditView(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
TextMorphForEditView(Morph)>>handleEvent:
TextMorphForEditView(Morph)>>handleFocusEvent:
[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ 
World doOneCycle.
Processor yield.
false ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
TestFailure: Assertion failed
18 March 2015 10:47:32.944166 am

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
NBCogit NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
https://github.com/pharo-project/pharo-vm.git Commit: 4a0d556150d478ff2de3c9624d2f18e6eaa3fa5c Date: 2014-12-18 18:42:53 +0100 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14893

Image: Pharo3.0 [Latest update: #30863]

DIPHPTests(TestAsserter)>>assert:
	Receiver: DIPHPTests
	Arguments and temporary variables: 
		aBoolean: 	false
	Receiver's instance variables: 
		testSelector: 	nil
		expectedFails: 	nil


[ :n | self assert: (DIModel allRules at: n) hasFailed = (res at: n) not ] in DIPHPTests(DIDSLTests)>>runAndReturnObjWithText:andSuccessResults:onProject:
	Receiver: DIPHPTests
	Arguments and temporary variables: 
		dslText: 	'
WholeIliasCodebase = PhpClass with name:"il*"
WholeCodeBase = PhpCla...etc...
		res: 	#(false true true false)
		project: 	'HugeProject'
		dicto: 	a DIDicto
		n: 	3
	Receiver's instance variables: 
		testSelector: 	nil
		expectedFails: 	nil


Interval>>do:
	Receiver: (1 to: 4)
	Arguments and temporary variables: 
		aBlock: 	[ :n | self assert: (DIModel allRules at: n) hasFailed = (res at: n) no...etc...
		aValue: 	3
		index: 	3
		size: 	4
	Receiver's instance variables: 
		start: 	1
		stop: 	4
		step: 	1


DIPHPTests(DIDSLTests)>>runAndReturnObjWithText:andSuccessResults:onProject:
	Receiver: DIPHPTests
	Arguments and temporary variables: 
		dslText: 	'
WholeIliasCodebase = PhpClass with name:"il*"
WholeCodeBase = PhpCla...etc...
		res: 	#(false true true false)
		project: 	'HugeProject'
		dicto: 	a DIDicto
	Receiver's instance variables: 
		testSelector: 	nil
		expectedFails: 	nil


DIPHPTests class>>DoIt
	Receiver: DIPHPTests
	Arguments and temporary variables: 
		dsl: 	'
WholeIliasCodebase = PhpClass with name:"il*"
WholeCodeBase = PhpClass w...etc...
		success: 	#(false true true false)
		test: 	DIPHPTests
	Receiver's instance variables: 
		superclass: 	DIDSLTests
		methodDict: 	a MethodDictionary(#testHugePhp->DIPHPTests>>#testHugePhp #testPhp-...etc...
		format: 	134
		layout: 	a FixedLayout
		instanceVariables: 	#()
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#DIPHPTests
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Dicto-var-tests'
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set(#testH...etc...


CompiledMethod>>valueWithReceiver:arguments:
	Receiver: DIPHPTests class>>#DoIt
	Arguments and temporary variables: 
		aReceiver: 	DIPHPTests
		anArray: 	#()
	Receiver's instance variables: 
DIPHPTests class>>#DoIt

[ v := compiledMethod valueWithReceiver: receiver arguments: #() ] in SmalltalkEditor>>tallySelection
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		receiver: 	DIPHPTests
		context: 	nil
		compiledMethod: 	DIPHPTests class>>#DoIt
		profiler: 	nil
		v: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(177733632)
		selectionShowing: 	true
		model: 	a PackageTreeNautilusUI
		editingState: 	a SmalltalkEditingState


BlockClosure>>ensure:
	Receiver: [ v := compiledMethod valueWithReceiver: receiver arguments: #() ]
	Arguments and temporary variables: 
		aBlock: 	[ 
"cancel the probe and return the value"
"Could have already been ter...etc...
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor>>tallySelection
		startpc: 	105
		numArgs: 	0


MessageTally>>spyEvery:on:
	Receiver: nil(SmalltalkEditor) >> tallySelection
	Arguments and temporary variables: 
		observedProcess: 	a Process in nil
		millisecs: 	1
		aBlock: 	[ v := compiledMethod valueWithReceiver: receiver arguments: #() ]
		myDelay: 	a Delay(1 msecs; 1 msecs remaining)
		time0: 	3857101
	Receiver's instance variables: 
		class: 	SmalltalkEditor
		method: 	SmalltalkEditor>>#tallySelection
		process: 	nil
		tally: 	62393665
		receivers: 	an Array(nil(CompiledMethod) >> valueWithReceiver:arguments: nil(Wea...etc...
		senders: 	nil
		time: 	0
		gcStats: 	#(73628452 75442112 79814016 nil nil 2000 10535 999435 34477 9602 123 ...etc...
		maxClassNameSize: 	1000
		maxClassPlusSelectorSize: 	1000
		maxTabs: 	100
		reportOtherProcesses: 	true


TimeProfiler>>runBlock:pollingEvery:
	Receiver: a TimeProfiler
	Arguments and temporary variables: 
		aBlock: 	[ v := compiledMethod valueWithReceiver: receiver arguments: #() ]
		pollPeriod: 	1
	Receiver's instance variables: 
		dependents: 	nil
		selection: 	nil
		announcer: 	nil
		rootItems: 	nil
		autoMultiSelection: 	nil
		headerLabel: 	nil
		multiSelection: 	nil
		wrapBlockOrSelector: 	nil
		isCheckList: 	nil
		enabled: 	nil
		win: 	nil
		rootMessageTally: 	nil(SmalltalkEditor) >> tallySelection
		threshold: 	nil
		minPercentageToExpand: 	nil
		treeMorph: 	nil
		block: 	[ v := compiledMethod valueWithReceiver: receiver arguments: #() ]
		blockCodePane: 	nil
		withBlockCodePane: 	false
		blockSource: 	nil
		reportOtherProcesses: 	nil
		showLeavesOnly: 	nil
		codeTabPane: 	nil
		resultPane: 	nil
		result: 	nil
		withToolBar: 	false


TimeProfiler>>openOnBlock:
	Receiver: a TimeProfiler
	Arguments and temporary variables: 
		aBlock: 	[ v := compiledMethod valueWithReceiver: receiver arguments: #() ]
	Receiver's instance variables: 
		dependents: 	nil
		selection: 	nil
		announcer: 	nil
		rootItems: 	nil
		autoMultiSelection: 	nil
		headerLabel: 	nil
		multiSelection: 	nil
		wrapBlockOrSelector: 	nil
		isCheckList: 	nil
		enabled: 	nil
		win: 	nil
		rootMessageTally: 	nil(SmalltalkEditor) >> tallySelection
		threshold: 	nil
		minPercentageToExpand: 	nil
		treeMorph: 	nil
		block: 	[ v := compiledMethod valueWithReceiver: receiver arguments: #() ]
		blockCodePane: 	nil
		withBlockCodePane: 	false
		blockSource: 	nil
		reportOtherProcesses: 	nil
		showLeavesOnly: 	nil
		codeTabPane: 	nil
		resultPane: 	nil
		result: 	nil
		withToolBar: 	false


TimeProfiler class>>spyOn:
	Receiver: TimeProfiler
	Arguments and temporary variables: 
		aBlock: 	[ v := compiledMethod valueWithReceiver: receiver arguments: #() ]
	Receiver's instance variables: 
		superclass: 	MorphTreeModel
		methodDict: 	a MethodDictionary(#blockCode->TimeProfiler>>#blockCode #blockCode:...etc...
		format: 	180
		layout: 	a FixedLayout
		instanceVariables: 	#(#win #rootMessageTally #threshold #minPercentageToExpand #...etc...
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#TimeProfiler
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Tools-Profilers'
		traitComposition: 	{}
		localSelectors: 	nil


SmalltalkEditor>>tallySelection
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		v: 	nil
		receiver: 	DIPHPTests
		context: 	nil
		compiledMethod: 	DIPHPTests class>>#DoIt
		profiler: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(177733632)
		selectionShowing: 	true
		model: 	a PackageTreeNautilusUI
		editingState: 	a SmalltalkEditingState


SmalltalkEditor>>tallyIt
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 

	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(177733632)
		selectionShowing: 	true
		model: 	a PackageTreeNautilusUI
		editingState: 	a SmalltalkEditingState


[ textMorph editor tallyIt ] in PluggableTextMorphWithLimits(PluggableTextMorph)>>tallyIt
	Receiver: a PluggableTextMorphWithLimits(327155712)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(606.0@408.0) corner: (1422.0@683.0)
		owner: 	a MultipleMethodsEditor(397672448)
		submorphs: 	an Array(a ScrollBar(368836608) an AlphaImageMorph(624164864) a Tran...etc...
		fullBounds: 	(606@408) corner: (1422@683)
		color: 	Color white
		extension: 	a MorphExtension (156499968) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.784 g: 0.784 b: 0.784 alpha: 1.0)
		model: 	a PackageTreeNautilusUI
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(368836608)
		scroller: 	a TransformMorph(466354176)
		getMenuSelector: 	#sourceCodeMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(1008730112)
		textMorph: 	a TextMorphForEditView(177733632)
		getTextSelector: 	#sourceCodeFrom:
		setTextSelector: 	#compileSource:notifying:
		getSelectionSelector: 	#contentsSelectionFrom:
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(347 to: 346)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil
		doubleClickSelector: 	nil
		setSelectionSelector: 	nil
		alertLimit: 	700
		locked: 	false
		warningLimit: 	350
		method: 	nil
		lockIcon: 	an AlphaImageMorph(624164864)
		canLockChangeSelector: 	#canChangeLockFor:
		lockSelector: 	#lockTextArea:from:


[ result := editBlock value ] in PluggableTextMorphWithLimits(PluggableTextMorph)>>handleEdit:
	Receiver: a PluggableTextMorphWithLimits(327155712)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph editor tallyIt ]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(606.0@408.0) corner: (1422.0@683.0)
		owner: 	a MultipleMethodsEditor(397672448)
		submorphs: 	an Array(a ScrollBar(368836608) an AlphaImageMorph(624164864) a Tran...etc...
		fullBounds: 	(606@408) corner: (1422@683)
		color: 	Color white
		extension: 	a MorphExtension (156499968) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.784 g: 0.784 b: 0.784 alpha: 1.0)
		model: 	a PackageTreeNautilusUI
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(368836608)
		scroller: 	a TransformMorph(466354176)
		getMenuSelector: 	#sourceCodeMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(1008730112)
		textMorph: 	a TextMorphForEditView(177733632)
		getTextSelector: 	#sourceCodeFrom:
		setTextSelector: 	#compileSource:notifying:
		getSelectionSelector: 	#contentsSelectionFrom:
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(347 to: 346)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil
		doubleClickSelector: 	nil
		setSelectionSelector: 	nil
		alertLimit: 	700
		locked: 	false
		warningLimit: 	350
		method: 	nil
		lockIcon: 	an AlphaImageMorph(624164864)
		canLockChangeSelector: 	#canChangeLockFor:
		lockSelector: 	#lockTextArea:from:


TextMorphForEditView(TextMorph)>>handleEdit:
	Receiver: a TextMorphForEditView(177733632)
	Arguments and temporary variables: 
		editBlock: 	[ result := editBlock value ]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (795@800)
		owner: 	a TransformMorph(466354176)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (795@800)
		color: 	Color black
		extension: 	a MorphExtension (226492416) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Source Code Pro
		text: 	a Text for 'testHugePhp
| dsl success test|
	
dsl := ''
WholeIliasCodebas...etc...
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		defaultColor: 	Color black
		editView: 	a PluggableTextMorphWithLimits(327155712)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


PluggableTextMorphWithLimits(PluggableTextMorph)>>handleEdit:
	Receiver: a PluggableTextMorphWithLimits(327155712)
	Arguments and temporary variables: 
		result: 	nil
		editBlock: 	[ textMorph editor tallyIt ]
	Receiver's instance variables: 
		bounds: 	(606.0@408.0) corner: (1422.0@683.0)
		owner: 	a MultipleMethodsEditor(397672448)
		submorphs: 	an Array(a ScrollBar(368836608) an AlphaImageMorph(624164864) a Tran...etc...
		fullBounds: 	(606@408) corner: (1422@683)
		color: 	Color white
		extension: 	a MorphExtension (156499968) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.784 g: 0.784 b: 0.784 alpha: 1.0)
		model: 	a PackageTreeNautilusUI
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(368836608)
		scroller: 	a TransformMorph(466354176)
		getMenuSelector: 	#sourceCodeMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(1008730112)
		textMorph: 	a TextMorphForEditView(177733632)
		getTextSelector: 	#sourceCodeFrom:
		setTextSelector: 	#compileSource:notifying:
		getSelectionSelector: 	#contentsSelectionFrom:
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(347 to: 346)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil
		doubleClickSelector: 	nil
		setSelectionSelector: 	nil
		alertLimit: 	700
		locked: 	false
		warningLimit: 	350
		method: 	nil
		lockIcon: 	an AlphaImageMorph(624164864)
		canLockChangeSelector: 	#canChangeLockFor:
		lockSelector: 	#lockTextArea:from:


PluggableTextMorphWithLimits(PluggableTextMorph)>>tallyIt
	Receiver: a PluggableTextMorphWithLimits(327155712)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(606.0@408.0) corner: (1422.0@683.0)
		owner: 	a MultipleMethodsEditor(397672448)
		submorphs: 	an Array(a ScrollBar(368836608) an AlphaImageMorph(624164864) a Tran...etc...
		fullBounds: 	(606@408) corner: (1422@683)
		color: 	Color white
		extension: 	a MorphExtension (156499968) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.784 g: 0.784 b: 0.784 alpha: 1.0)
		model: 	a PackageTreeNautilusUI
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(368836608)
		scroller: 	a TransformMorph(466354176)
		getMenuSelector: 	#sourceCodeMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(1008730112)
		textMorph: 	a TextMorphForEditView(177733632)
		getTextSelector: 	#sourceCodeFrom:
		setTextSelector: 	#compileSource:notifying:
		getSelectionSelector: 	#contentsSelectionFrom:
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(347 to: 346)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil
		doubleClickSelector: 	nil
		setSelectionSelector: 	nil
		alertLimit: 	700
		locked: 	false
		warningLimit: 	350
		method: 	nil
		lockIcon: 	an AlphaImageMorph(624164864)
		canLockChangeSelector: 	#canChangeLockFor:
		lockSelector: 	#lockTextArea:from:


PackageTreeNautilusUI(Object)>>perform:orSendTo:
	Receiver: a PackageTreeNautilusUI
	Arguments and temporary variables: 
		selector: 	#tallyIt
		otherTarget: 	a PluggableTextMorphWithLimits(327155712)
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a CategoryWidget a MethodWidget a NautilusWindow(...etc...
		model: 	a PackageTreeNautilus
		window: 	a NautilusWindow(712507392)
		hierarchyClass: 	nil
		cachedHierarchy: 	a SortHierarchically
		sourceTextArea: 	a PluggableTextMorphWithLimits(327155712)
		groupsSelection: 	a Dictionary()
		packagesSelection: 	a Dictionary(var-tests->true )
		classesSelection: 	a Dictionary(DIPHPTests->true )
		list: 	a MorphTreeMorph(1034944512)
		list2: 	a PluggableIconListMorph(1020002304)
		sourceCodePanel: 	a PanelMorph(207618048)
		commentTextArea: 	nil
		currentDisplayChoice: 	#SourceCode
		sourceTextAreaLimit: 	350
		sourceCodeContainer: 	a PanelMorph(702283776)
		list2Elements: 	{DIDSLTests. DIJavaTests. DILangTests. DIPHPTests. DISTTests}
		listElements: 	nil
		shouldUpdateTitle: 	true
		testSemaphore: 	a Semaphore()
		sourceTextAreas: 	an OrderedCollection(a PluggableTextMorphWithLimits(327155712)...etc...
		multipleMethodsEditor: 	a MultipleMethodsEditor(397672448)
		contentSelection: 	nil
		acceptor: 	a MethodDefinitionAcceptor
		classifier: 	a MethodClassifier
		categoryWidget: 	a CategoryWidget
		methodWidget: 	a MethodWidget
		packagePattern: 	nil
		searchWidget: 	a SearchMorph(1029963776)


[ 
| selArgCount |
"show cursor in case item opens a new MVC window"
(selArgCount := selector numArgs) = 0
	ifTrue: [ target perform: selector ]
	ifFalse: [ 
		selArgCount = arguments size
			ifTrue: [ target perform: selector withArguments: arguments ]
			ifFalse: [ target perform: selector withArguments: (arguments copyWith: evt) ] ].
self changed ] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(617611264)'Profile it'
	Arguments and temporary variables: 
		evt: 	[(904@729) mouseUp 3857069 nil]
		w: 	a WorldMorph(511705088) [world]
		selArgCount: 	2
	Receiver's instance variables: 
		bounds: 	(800.0@721.0) corner: (971.0@739.0)
		owner: 	a MenuMorph(280756224)
		submorphs: 	#()
		fullBounds: 	(800.0@721.0) corner: (971.0@739.0)
		color: 	Color black
		extension: 	a MorphExtension (640942080)
		font: 	a LogicalFont
 familyName: Source Sans Pro
 emphasis: nil
 pointSize: 10
...etc...
		emphasis: 	0
		contents: 	'Profile it'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a PackageTreeNautilusUI
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#tallyIt a PluggableTextMorphWithLimits(327155712))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


BlockClosure>>ensure:
	Receiver: [ 
| selArgCount |
"show cursor in case item opens a new MVC window"
(selArgCount := selec...etc...
	Arguments and temporary variables: 
		aBlock: 	[ oldcursor show ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
		startpc: 	134
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r100000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[ 
| selArgCount |
"show cursor in case item opens a new MVC window"
(s...etc...
		oldcursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	(-1@ -1)
		maskForm: 	Form(16x16x1)


ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(617611264)'Profile it'
	Arguments and temporary variables: 
		evt: 	[(904@729) mouseUp 3857069 nil]
		w: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		bounds: 	(800.0@721.0) corner: (971.0@739.0)
		owner: 	a MenuMorph(280756224)
		submorphs: 	#()
		fullBounds: 	(800.0@721.0) corner: (971.0@739.0)
		color: 	Color black
		extension: 	a MorphExtension (640942080)
		font: 	a LogicalFont
 familyName: Source Sans Pro
 emphasis: nil
 pointSize: 10
...etc...
		emphasis: 	0
		contents: 	'Profile it'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a PackageTreeNautilusUI
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#tallyIt a PluggableTextMorphWithLimits(327155712))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
	Receiver: a ToggleMenuItemMorph(617611264)'Profile it'
	Arguments and temporary variables: 
		evt: 	[(904@729) mouseUp 3857069 nil]
	Receiver's instance variables: 
		bounds: 	(800.0@721.0) corner: (971.0@739.0)
		owner: 	a MenuMorph(280756224)
		submorphs: 	#()
		fullBounds: 	(800.0@721.0) corner: (971.0@739.0)
		color: 	Color black
		extension: 	a MorphExtension (640942080)
		font: 	a LogicalFont
 familyName: Source Sans Pro
 emphasis: nil
 pointSize: 10
...etc...
		emphasis: 	0
		contents: 	'Profile it'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a PackageTreeNautilusUI
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#tallyIt a PluggableTextMorphWithLimits(327155712))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
	Receiver: a ToggleMenuItemMorph(617611264)'Profile it'
	Arguments and temporary variables: 
		anEvent: 	[(904@729) mouseUp 3857069 nil]
	Receiver's instance variables: 
		bounds: 	(800.0@721.0) corner: (971.0@739.0)
		owner: 	a MenuMorph(280756224)
		submorphs: 	#()
		fullBounds: 	(800.0@721.0) corner: (971.0@739.0)
		color: 	Color black
		extension: 	a MorphExtension (640942080)
		font: 	a LogicalFont
 familyName: Source Sans Pro
 emphasis: nil
 pointSize: 10
...etc...
		emphasis: 	0
		contents: 	'Profile it'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a PackageTreeNautilusUI
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#tallyIt a PluggableTextMorphWithLimits(327155712))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [(904@729) mouseUp 3857069 nil]
	Arguments and temporary variables: 
		anObject: 	a ToggleMenuItemMorph(617611264)'Profile it'
	Receiver's instance variables: 
		timeStamp: 	3857069
		source: 	a HandMorph(760479744)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(904@729)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


ToggleMenuItemMorph(Morph)>>handleEvent:
	Receiver: a ToggleMenuItemMorph(617611264)'Profile it'
	Arguments and temporary variables: 
		anEvent: 	[(904@729) mouseUp 3857069 nil]
	Receiver's instance variables: 
		bounds: 	(800.0@721.0) corner: (971.0@739.0)
		owner: 	a MenuMorph(280756224)
		submorphs: 	#()
		fullBounds: 	(800.0@721.0) corner: (971.0@739.0)
		color: 	Color black
		extension: 	a MorphExtension (640942080)
		font: 	a LogicalFont
 familyName: Source Sans Pro
 emphasis: nil
 pointSize: 10
...etc...
		emphasis: 	0
		contents: 	'Profile it'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a PackageTreeNautilusUI
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#tallyIt a PluggableTextMorphWithLimits(327155712))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(904@729) mouseUp 3857069 nil]
		aMorph: 	a ToggleMenuItemMorph(617611264)'Profile it'
		localEvt: 	nil
		index: 	1
		child: 	nil
		morphs: 	#()
		inside: 	true
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(904@729) mouseUp 3857069 nil]
		aMorph: 	a ToggleMenuItemMorph(617611264)'Profile it'
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


ToggleMenuItemMorph(Morph)>>processEvent:using:
	Receiver: a ToggleMenuItemMorph(617611264)'Profile it'
	Arguments and temporary variables: 
		anEvent: 	[(904@729) mouseUp 3857069 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	(800.0@721.0) corner: (971.0@739.0)
		owner: 	a MenuMorph(280756224)
		submorphs: 	#()
		fullBounds: 	(800.0@721.0) corner: (971.0@739.0)
		color: 	Color black
		extension: 	a MorphExtension (640942080)
		font: 	a LogicalFont
 familyName: Source Sans Pro
 emphasis: nil
 pointSize: 10
...etc...
		emphasis: 	0
		contents: 	'Profile it'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a PackageTreeNautilusUI
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#tallyIt a PluggableTextMorphWithLimits(327155712))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(904@729) mouseUp 3857069 nil]
		aMorph: 	a MenuMorph(280756224)
		localEvt: 	[(904@729) mouseUp 3857069 nil]
		index: 	11
		child: 	a ToggleMenuItemMorph(617611264)'Profile it'
		morphs: 	an Array(a ToggleMenuItemMorph(360710144)'Suggestions' a MenuLineMorph(...etc...
		inside: 	false
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(904@729) mouseUp 3857069 nil]
		aMorph: 	a MenuMorph(280756224)
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MenuMorph(Morph)>>processEvent:using:
	Receiver: a MenuMorph(280756224)
	Arguments and temporary variables: 
		anEvent: 	[(904@729) mouseUp 3857069 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	(795.0@561.0) corner: (976.0@1003.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(360710144)'Suggestions' a MenuLineMor...etc...
		fullBounds: 	(795.0@561.0) corner: (976.0@1003.0)
		color: 	(Color r: 0.894 g: 0.894 b: 0.894 alpha: 1.0)
		extension: 	a MorphExtension (322174976) [other:  (basicColor -> (Color r: 0.823...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.674 g: 0.674 b: 0.674 alpha: 1.0)
		defaultTarget: 	a PackageTreeNautilusUI
		selectedItem: 	a ToggleMenuItemMorph(617611264)'Profile it'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(360710144)'Suggestions' a...etc...


MenuMorph(Morph)>>processEvent:
	Receiver: a MenuMorph(280756224)
	Arguments and temporary variables: 
		anEvent: 	[(904@729) mouseUp 3857069 nil]
	Receiver's instance variables: 
		bounds: 	(795.0@561.0) corner: (976.0@1003.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(360710144)'Suggestions' a MenuLineMor...etc...
		fullBounds: 	(795.0@561.0) corner: (976.0@1003.0)
		color: 	(Color r: 0.894 g: 0.894 b: 0.894 alpha: 1.0)
		extension: 	a MorphExtension (322174976) [other:  (basicColor -> (Color r: 0.823...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.674 g: 0.674 b: 0.674 alpha: 1.0)
		defaultTarget: 	a PackageTreeNautilusUI
		selectedItem: 	a ToggleMenuItemMorph(617611264)'Profile it'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(360710144)'Suggestions' a...etc...


MenuMorph>>handleFocusEvent:
	Receiver: a MenuMorph(280756224)
	Arguments and temporary variables: 
		evt: 	[(904@729) mouseUp 3857069 nil]
	Receiver's instance variables: 
		bounds: 	(795.0@561.0) corner: (976.0@1003.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(360710144)'Suggestions' a MenuLineMor...etc...
		fullBounds: 	(795.0@561.0) corner: (976.0@1003.0)
		color: 	(Color r: 0.894 g: 0.894 b: 0.894 alpha: 1.0)
		extension: 	a MorphExtension (322174976) [other:  (basicColor -> (Color r: 0.823...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.674 g: 0.674 b: 0.674 alpha: 1.0)
		defaultTarget: 	a PackageTreeNautilusUI
		selectedItem: 	a ToggleMenuItemMorph(617611264)'Profile it'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(360710144)'Suggestions' a...etc...


[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[(904@729) mouseUp 3857069 nil]
		focusHolder: 	a MenuMorph(280756224)
		aBlock: 	[ self mouseFocus: nil ]
		w: 	a WorldMorph(511705088) [world]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(536@204) corner: (552@220)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(536@204) corner: (552@220)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	a PaginatedMorphTreeMorph(56885248)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(536@204) mouseOver nil nil]
		targetOffset: 	(11.0@9.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 66251005 536 204 0 0 0 1)
		lastKeyScanCode: 	247
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


BlockClosure>>on:do:
	Receiver: [ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (an...etc...
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :ex | 
ActiveWorld := priorWorld.
ActiveEvent := priorEvent.
A...etc...
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	HandMorph>>sendFocusEvent:to:clear:
		startpc: 	67
		numArgs: 	0


WorldMorph(PasteUpMorph)>>becomeActiveDuring:
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 
		aBlock: 	[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder ha...etc...
		priorWorld: 	a WorldMorph(511705088) [world]
		priorHand: 	a HandMorph(760479744)
		priorEvent: 	[(904@729) mouseOver red nil nil]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1855@1056)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a NautilusWindow(712507392) a GLM...etc...
		fullBounds: 	nil
		color: 	Color white
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil



--- The full stack ---
DIPHPTests(TestAsserter)>>assert:
[ :n | self assert: (DIModel allRules at: n) hasFailed = (res at: n) not ] in DIPHPTests(DIDSLTests)>>runAndReturnObjWithText:andSuccessResults:onProject:
Interval>>do:
DIPHPTests(DIDSLTests)>>runAndReturnObjWithText:andSuccessResults:onProject:
DIPHPTests class>>DoIt
CompiledMethod>>valueWithReceiver:arguments:
[ v := compiledMethod valueWithReceiver: receiver arguments: #() ] in SmalltalkEditor>>tallySelection
BlockClosure>>ensure:
MessageTally>>spyEvery:on:
TimeProfiler>>runBlock:pollingEvery:
TimeProfiler>>openOnBlock:
TimeProfiler class>>spyOn:
SmalltalkEditor>>tallySelection
SmalltalkEditor>>tallyIt
[ textMorph editor tallyIt ] in PluggableTextMorphWithLimits(PluggableTextMorph)>>tallyIt
[ result := editBlock value ] in PluggableTextMorphWithLimits(PluggableTextMorph)>>handleEdit:
TextMorphForEditView(TextMorph)>>handleEdit:
PluggableTextMorphWithLimits(PluggableTextMorph)>>handleEdit:
PluggableTextMorphWithLimits(PluggableTextMorph)>>tallyIt
PackageTreeNautilusUI(Object)>>perform:orSendTo:
[ 
| selArgCount |
"show cursor in case item opens a new MVC window"
(selArgCount := selector numArgs) = 0
	ifTrue: [ target perform: selector ]
	ifFalse: [ 
		selArgCount = arguments size
			ifTrue: [ target perform: selector withArguments: arguments ]
			ifFalse: [ target perform: selector withArguments: (arguments copyWith: evt) ] ].
self changed ] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
ToggleMenuItemMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
ToggleMenuItemMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
MenuMorph(Morph)>>processEvent:using:
MenuMorph(Morph)>>processEvent:
MenuMorph>>handleFocusEvent:
[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldState>>doOneSubCycleFor:
WorldMorph>>doOneSubCycle
MenuMorph>>invokeModalAt:in:allowKeyboard:
MenuMorph>>invokeModal:
MenuMorph>>invokeModal
PluggableTextMorphWithLimits(PluggableTextMorph)>>yellowButtonActivity:
SmalltalkEditor(TextEditor)>>mouseUp:
[ editor mouseUp: evt ] in TextMorphForEditView(TextMorph)>>mouseUp:
TextMorphForEditView(TextMorph)>>handleInteraction:
TextMorphForEditView>>handleInteraction:
TextMorphForEditView(TextMorph)>>mouseUp:
TextMorphForEditView>>mouseUp:
TextMorphForEditView(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
TextMorphForEditView(Morph)>>handleEvent:
TextMorphForEditView(Morph)>>handleFocusEvent:
[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ 
World doOneCycle.
Processor yield.
false ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
TestFailure: Assertion failed
18 March 2015 11:39:17.110973 am

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
NBCogit NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
https://github.com/pharo-project/pharo-vm.git Commit: 4a0d556150d478ff2de3c9624d2f18e6eaa3fa5c Date: 2014-12-18 18:42:53 +0100 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14893

Image: Pharo3.0 [Latest update: #30863]

DIPHPTests(TestAsserter)>>assert:
	Receiver: DIPHPTests
	Arguments and temporary variables: 
		aBoolean: 	false
	Receiver's instance variables: 
		testSelector: 	nil
		expectedFails: 	nil


[ :n | self assert: (DIModel allRules at: n) hasFailed = (res at: n) not ] in DIPHPTests(DIDSLTests)>>runAndReturnObjWithText:andSuccessResults:onProject:
	Receiver: DIPHPTests
	Arguments and temporary variables: 
		dslText: 	'
WholeIliasCodebase = PhpClass with name:"il*"
WholeCodeBase = PhpCla...etc...
		res: 	#(false true true false)
		project: 	'HugeProject'
		dicto: 	a DIDicto
		n: 	2
	Receiver's instance variables: 
		testSelector: 	nil
		expectedFails: 	nil


Interval>>do:
	Receiver: (1 to: 4)
	Arguments and temporary variables: 
		aBlock: 	[ :n | self assert: (DIModel allRules at: n) hasFailed = (res at: n) no...etc...
		aValue: 	2
		index: 	2
		size: 	4
	Receiver's instance variables: 
		start: 	1
		stop: 	4
		step: 	1


DIPHPTests(DIDSLTests)>>runAndReturnObjWithText:andSuccessResults:onProject:
	Receiver: DIPHPTests
	Arguments and temporary variables: 
		dslText: 	'
WholeIliasCodebase = PhpClass with name:"il*"
WholeCodeBase = PhpCla...etc...
		res: 	#(false true true false)
		project: 	'HugeProject'
		dicto: 	a DIDicto
	Receiver's instance variables: 
		testSelector: 	nil
		expectedFails: 	nil


DIPHPTests class>>DoIt
	Receiver: DIPHPTests
	Arguments and temporary variables: 
		dsl: 	'
WholeIliasCodebase = PhpClass with name:"il*"
WholeCodeBase = PhpClass w...etc...
		success: 	#(false true true false)
		test: 	DIPHPTests
	Receiver's instance variables: 
		superclass: 	DIDSLTests
		methodDict: 	a MethodDictionary(#testHugePhp->DIPHPTests>>#testHugePhp #testPhp-...etc...
		format: 	134
		layout: 	a FixedLayout
		instanceVariables: 	#()
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#DIPHPTests
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Dicto-var-tests'
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set(#testH...etc...


CompiledMethod>>valueWithReceiver:arguments:
	Receiver: DIPHPTests class>>#DoIt
	Arguments and temporary variables: 
		aReceiver: 	DIPHPTests
		anArray: 	#()
	Receiver's instance variables: 
DIPHPTests class>>#DoIt

[ v := compiledMethod valueWithReceiver: receiver arguments: #() ] in SmalltalkEditor>>tallySelection
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		receiver: 	DIPHPTests
		context: 	nil
		compiledMethod: 	DIPHPTests class>>#DoIt
		profiler: 	nil
		v: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(177733632)
		selectionShowing: 	true
		model: 	a PackageTreeNautilusUI
		editingState: 	a SmalltalkEditingState


BlockClosure>>ensure:
	Receiver: [ v := compiledMethod valueWithReceiver: receiver arguments: #() ]
	Arguments and temporary variables: 
		aBlock: 	[ 
"cancel the probe and return the value"
"Could have already been ter...etc...
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor>>tallySelection
		startpc: 	105
		numArgs: 	0


MessageTally>>spyEvery:on:
	Receiver: nil(SmalltalkEditor) >> tallySelection
	Arguments and temporary variables: 
		observedProcess: 	a Process in nil
		millisecs: 	1
		aBlock: 	[ v := compiledMethod valueWithReceiver: receiver arguments: #() ]
		myDelay: 	a Delay(1 msecs; 1 msecs remaining)
		time0: 	68239557
	Receiver's instance variables: 
		class: 	SmalltalkEditor
		method: 	SmalltalkEditor>>#tallySelection
		process: 	nil
		tally: 	1115439
		receivers: 	an Array(nil(CompiledMethod) >> valueWithReceiver:arguments: nil(DID...etc...
		senders: 	nil
		time: 	0
		gcStats: 	#(68310888 68949164 75836916 nil nil 2000 20968 1916386 87883 45327 22...etc...
		maxClassNameSize: 	1000
		maxClassPlusSelectorSize: 	1000
		maxTabs: 	100
		reportOtherProcesses: 	true


TimeProfiler>>runBlock:pollingEvery:
	Receiver: a TimeProfiler
	Arguments and temporary variables: 
		aBlock: 	[ v := compiledMethod valueWithReceiver: receiver arguments: #() ]
		pollPeriod: 	1
	Receiver's instance variables: 
		dependents: 	nil
		selection: 	nil
		announcer: 	nil
		rootItems: 	nil
		autoMultiSelection: 	nil
		headerLabel: 	nil
		multiSelection: 	nil
		wrapBlockOrSelector: 	nil
		isCheckList: 	nil
		enabled: 	nil
		win: 	nil
		rootMessageTally: 	nil(SmalltalkEditor) >> tallySelection
		threshold: 	nil
		minPercentageToExpand: 	nil
		treeMorph: 	nil
		block: 	[ v := compiledMethod valueWithReceiver: receiver arguments: #() ]
		blockCodePane: 	nil
		withBlockCodePane: 	false
		blockSource: 	nil
		reportOtherProcesses: 	nil
		showLeavesOnly: 	nil
		codeTabPane: 	nil
		resultPane: 	nil
		result: 	nil
		withToolBar: 	false


TimeProfiler>>openOnBlock:
	Receiver: a TimeProfiler
	Arguments and temporary variables: 
		aBlock: 	[ v := compiledMethod valueWithReceiver: receiver arguments: #() ]
	Receiver's instance variables: 
		dependents: 	nil
		selection: 	nil
		announcer: 	nil
		rootItems: 	nil
		autoMultiSelection: 	nil
		headerLabel: 	nil
		multiSelection: 	nil
		wrapBlockOrSelector: 	nil
		isCheckList: 	nil
		enabled: 	nil
		win: 	nil
		rootMessageTally: 	nil(SmalltalkEditor) >> tallySelection
		threshold: 	nil
		minPercentageToExpand: 	nil
		treeMorph: 	nil
		block: 	[ v := compiledMethod valueWithReceiver: receiver arguments: #() ]
		blockCodePane: 	nil
		withBlockCodePane: 	false
		blockSource: 	nil
		reportOtherProcesses: 	nil
		showLeavesOnly: 	nil
		codeTabPane: 	nil
		resultPane: 	nil
		result: 	nil
		withToolBar: 	false


TimeProfiler class>>spyOn:
	Receiver: TimeProfiler
	Arguments and temporary variables: 
		aBlock: 	[ v := compiledMethod valueWithReceiver: receiver arguments: #() ]
	Receiver's instance variables: 
		superclass: 	MorphTreeModel
		methodDict: 	a MethodDictionary(#blockCode->TimeProfiler>>#blockCode #blockCode:...etc...
		format: 	180
		layout: 	a FixedLayout
		instanceVariables: 	#(#win #rootMessageTally #threshold #minPercentageToExpand #...etc...
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#TimeProfiler
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Tools-Profilers'
		traitComposition: 	{}
		localSelectors: 	nil


SmalltalkEditor>>tallySelection
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		v: 	nil
		receiver: 	DIPHPTests
		context: 	nil
		compiledMethod: 	DIPHPTests class>>#DoIt
		profiler: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(177733632)
		selectionShowing: 	true
		model: 	a PackageTreeNautilusUI
		editingState: 	a SmalltalkEditingState


SmalltalkEditor>>tallyIt
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 

	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(177733632)
		selectionShowing: 	true
		model: 	a PackageTreeNautilusUI
		editingState: 	a SmalltalkEditingState


[ textMorph editor tallyIt ] in PluggableTextMorphWithLimits(PluggableTextMorph)>>tallyIt
	Receiver: a PluggableTextMorphWithLimits(327155712)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(606.0@408.0) corner: (1422.0@683.0)
		owner: 	a MultipleMethodsEditor(397672448)
		submorphs: 	an Array(a ScrollBar(368836608) an AlphaImageMorph(624164864) a Tran...etc...
		fullBounds: 	(606@408) corner: (1422@683)
		color: 	Color white
		extension: 	a MorphExtension (156499968) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.784 g: 0.784 b: 0.784 alpha: 1.0)
		model: 	a PackageTreeNautilusUI
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(368836608)
		scroller: 	a TransformMorph(466354176)
		getMenuSelector: 	#sourceCodeMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(1008730112)
		textMorph: 	a TextMorphForEditView(177733632)
		getTextSelector: 	#sourceCodeFrom:
		setTextSelector: 	#compileSource:notifying:
		getSelectionSelector: 	#contentsSelectionFrom:
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(13 to: 1509)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil
		doubleClickSelector: 	nil
		setSelectionSelector: 	nil
		alertLimit: 	700
		locked: 	false
		warningLimit: 	350
		method: 	nil
		lockIcon: 	an AlphaImageMorph(624164864)
		canLockChangeSelector: 	#canChangeLockFor:
		lockSelector: 	#lockTextArea:from:


[ result := editBlock value ] in PluggableTextMorphWithLimits(PluggableTextMorph)>>handleEdit:
	Receiver: a PluggableTextMorphWithLimits(327155712)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph editor tallyIt ]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(606.0@408.0) corner: (1422.0@683.0)
		owner: 	a MultipleMethodsEditor(397672448)
		submorphs: 	an Array(a ScrollBar(368836608) an AlphaImageMorph(624164864) a Tran...etc...
		fullBounds: 	(606@408) corner: (1422@683)
		color: 	Color white
		extension: 	a MorphExtension (156499968) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.784 g: 0.784 b: 0.784 alpha: 1.0)
		model: 	a PackageTreeNautilusUI
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(368836608)
		scroller: 	a TransformMorph(466354176)
		getMenuSelector: 	#sourceCodeMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(1008730112)
		textMorph: 	a TextMorphForEditView(177733632)
		getTextSelector: 	#sourceCodeFrom:
		setTextSelector: 	#compileSource:notifying:
		getSelectionSelector: 	#contentsSelectionFrom:
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(13 to: 1509)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil
		doubleClickSelector: 	nil
		setSelectionSelector: 	nil
		alertLimit: 	700
		locked: 	false
		warningLimit: 	350
		method: 	nil
		lockIcon: 	an AlphaImageMorph(624164864)
		canLockChangeSelector: 	#canChangeLockFor:
		lockSelector: 	#lockTextArea:from:


TextMorphForEditView(TextMorph)>>handleEdit:
	Receiver: a TextMorphForEditView(177733632)
	Arguments and temporary variables: 
		editBlock: 	[ result := editBlock value ]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (795@800)
		owner: 	a TransformMorph(466354176)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (795@800)
		color: 	Color black
		extension: 	a MorphExtension (226492416) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Source Code Pro
		text: 	a Text for 'testHugePhp
| dsl success test|
	
dsl := ''
WholeIliasCodebas...etc...
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		defaultColor: 	Color black
		editView: 	a PluggableTextMorphWithLimits(327155712)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


PluggableTextMorphWithLimits(PluggableTextMorph)>>handleEdit:
	Receiver: a PluggableTextMorphWithLimits(327155712)
	Arguments and temporary variables: 
		result: 	nil
		editBlock: 	[ textMorph editor tallyIt ]
	Receiver's instance variables: 
		bounds: 	(606.0@408.0) corner: (1422.0@683.0)
		owner: 	a MultipleMethodsEditor(397672448)
		submorphs: 	an Array(a ScrollBar(368836608) an AlphaImageMorph(624164864) a Tran...etc...
		fullBounds: 	(606@408) corner: (1422@683)
		color: 	Color white
		extension: 	a MorphExtension (156499968) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.784 g: 0.784 b: 0.784 alpha: 1.0)
		model: 	a PackageTreeNautilusUI
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(368836608)
		scroller: 	a TransformMorph(466354176)
		getMenuSelector: 	#sourceCodeMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(1008730112)
		textMorph: 	a TextMorphForEditView(177733632)
		getTextSelector: 	#sourceCodeFrom:
		setTextSelector: 	#compileSource:notifying:
		getSelectionSelector: 	#contentsSelectionFrom:
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(13 to: 1509)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil
		doubleClickSelector: 	nil
		setSelectionSelector: 	nil
		alertLimit: 	700
		locked: 	false
		warningLimit: 	350
		method: 	nil
		lockIcon: 	an AlphaImageMorph(624164864)
		canLockChangeSelector: 	#canChangeLockFor:
		lockSelector: 	#lockTextArea:from:


PluggableTextMorphWithLimits(PluggableTextMorph)>>tallyIt
	Receiver: a PluggableTextMorphWithLimits(327155712)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(606.0@408.0) corner: (1422.0@683.0)
		owner: 	a MultipleMethodsEditor(397672448)
		submorphs: 	an Array(a ScrollBar(368836608) an AlphaImageMorph(624164864) a Tran...etc...
		fullBounds: 	(606@408) corner: (1422@683)
		color: 	Color white
		extension: 	a MorphExtension (156499968) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.784 g: 0.784 b: 0.784 alpha: 1.0)
		model: 	a PackageTreeNautilusUI
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(368836608)
		scroller: 	a TransformMorph(466354176)
		getMenuSelector: 	#sourceCodeMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(1008730112)
		textMorph: 	a TextMorphForEditView(177733632)
		getTextSelector: 	#sourceCodeFrom:
		setTextSelector: 	#compileSource:notifying:
		getSelectionSelector: 	#contentsSelectionFrom:
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(13 to: 1509)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil
		doubleClickSelector: 	nil
		setSelectionSelector: 	nil
		alertLimit: 	700
		locked: 	false
		warningLimit: 	350
		method: 	nil
		lockIcon: 	an AlphaImageMorph(624164864)
		canLockChangeSelector: 	#canChangeLockFor:
		lockSelector: 	#lockTextArea:from:


PackageTreeNautilusUI(Object)>>perform:orSendTo:
	Receiver: a PackageTreeNautilusUI
	Arguments and temporary variables: 
		selector: 	#tallyIt
		otherTarget: 	a PluggableTextMorphWithLimits(327155712)
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a CategoryWidget a MethodWidget a NautilusWindow(...etc...
		model: 	a PackageTreeNautilus
		window: 	a NautilusWindow(712507392)
		hierarchyClass: 	nil
		cachedHierarchy: 	a SortHierarchically
		sourceTextArea: 	a PluggableTextMorphWithLimits(327155712)
		groupsSelection: 	a Dictionary()
		packagesSelection: 	a Dictionary(var-tests->true )
		classesSelection: 	a Dictionary(DIPHPTests->true )
		list: 	a MorphTreeMorph(1034944512)
		list2: 	a PluggableIconListMorph(1020002304)
		sourceCodePanel: 	a PanelMorph(207618048)
		commentTextArea: 	nil
		currentDisplayChoice: 	#SourceCode
		sourceTextAreaLimit: 	350
		sourceCodeContainer: 	a PanelMorph(702283776)
		list2Elements: 	{DIDSLTests. DIJavaTests. DILangTests. DIPHPTests. DISTTests}
		listElements: 	nil
		shouldUpdateTitle: 	true
		testSemaphore: 	a Semaphore()
		sourceTextAreas: 	an OrderedCollection(a PluggableTextMorphWithLimits(327155712)...etc...
		multipleMethodsEditor: 	a MultipleMethodsEditor(397672448)
		contentSelection: 	nil
		acceptor: 	a MethodDefinitionAcceptor
		classifier: 	a MethodClassifier
		categoryWidget: 	a CategoryWidget
		methodWidget: 	a MethodWidget
		packagePattern: 	nil
		searchWidget: 	a SearchMorph(1029963776)


[ 
| selArgCount |
"show cursor in case item opens a new MVC window"
(selArgCount := selector numArgs) = 0
	ifTrue: [ target perform: selector ]
	ifFalse: [ 
		selArgCount = arguments size
			ifTrue: [ target perform: selector withArguments: arguments ]
			ifFalse: [ target perform: selector withArguments: (arguments copyWith: evt) ] ].
self changed ] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(223870976)'Profile it'
	Arguments and temporary variables: 
		evt: 	[(715@603) mouseUp 68239533 nil]
		w: 	a WorldMorph(511705088) [world]
		selArgCount: 	2
	Receiver's instance variables: 
		bounds: 	(648.0@598.0) corner: (819.0@616.0)
		owner: 	a MenuMorph(848560128)
		submorphs: 	#()
		fullBounds: 	(648.0@598.0) corner: (819.0@616.0)
		color: 	Color black
		extension: 	a MorphExtension (259260416)
		font: 	a LogicalFont
 familyName: Source Sans Pro
 emphasis: nil
 pointSize: 10
...etc...
		emphasis: 	0
		contents: 	'Profile it'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a PackageTreeNautilusUI
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#tallyIt a PluggableTextMorphWithLimits(327155712))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


BlockClosure>>ensure:
	Receiver: [ 
| selArgCount |
"show cursor in case item opens a new MVC window"
(selArgCount := selec...etc...
	Arguments and temporary variables: 
		aBlock: 	[ oldcursor show ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
		startpc: 	134
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r100000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[ 
| selArgCount |
"show cursor in case item opens a new MVC window"
(s...etc...
		oldcursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	(-1@ -1)
		maskForm: 	Form(16x16x1)


ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(223870976)'Profile it'
	Arguments and temporary variables: 
		evt: 	[(715@603) mouseUp 68239533 nil]
		w: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		bounds: 	(648.0@598.0) corner: (819.0@616.0)
		owner: 	a MenuMorph(848560128)
		submorphs: 	#()
		fullBounds: 	(648.0@598.0) corner: (819.0@616.0)
		color: 	Color black
		extension: 	a MorphExtension (259260416)
		font: 	a LogicalFont
 familyName: Source Sans Pro
 emphasis: nil
 pointSize: 10
...etc...
		emphasis: 	0
		contents: 	'Profile it'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a PackageTreeNautilusUI
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#tallyIt a PluggableTextMorphWithLimits(327155712))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
	Receiver: a ToggleMenuItemMorph(223870976)'Profile it'
	Arguments and temporary variables: 
		evt: 	[(715@603) mouseUp 68239533 nil]
	Receiver's instance variables: 
		bounds: 	(648.0@598.0) corner: (819.0@616.0)
		owner: 	a MenuMorph(848560128)
		submorphs: 	#()
		fullBounds: 	(648.0@598.0) corner: (819.0@616.0)
		color: 	Color black
		extension: 	a MorphExtension (259260416)
		font: 	a LogicalFont
 familyName: Source Sans Pro
 emphasis: nil
 pointSize: 10
...etc...
		emphasis: 	0
		contents: 	'Profile it'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a PackageTreeNautilusUI
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#tallyIt a PluggableTextMorphWithLimits(327155712))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
	Receiver: a ToggleMenuItemMorph(223870976)'Profile it'
	Arguments and temporary variables: 
		anEvent: 	[(715@603) mouseUp 68239533 nil]
	Receiver's instance variables: 
		bounds: 	(648.0@598.0) corner: (819.0@616.0)
		owner: 	a MenuMorph(848560128)
		submorphs: 	#()
		fullBounds: 	(648.0@598.0) corner: (819.0@616.0)
		color: 	Color black
		extension: 	a MorphExtension (259260416)
		font: 	a LogicalFont
 familyName: Source Sans Pro
 emphasis: nil
 pointSize: 10
...etc...
		emphasis: 	0
		contents: 	'Profile it'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a PackageTreeNautilusUI
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#tallyIt a PluggableTextMorphWithLimits(327155712))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [(715@603) mouseUp 68239533 nil]
	Arguments and temporary variables: 
		anObject: 	a ToggleMenuItemMorph(223870976)'Profile it'
	Receiver's instance variables: 
		timeStamp: 	68239533
		source: 	a HandMorph(760479744)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(715@603)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


ToggleMenuItemMorph(Morph)>>handleEvent:
	Receiver: a ToggleMenuItemMorph(223870976)'Profile it'
	Arguments and temporary variables: 
		anEvent: 	[(715@603) mouseUp 68239533 nil]
	Receiver's instance variables: 
		bounds: 	(648.0@598.0) corner: (819.0@616.0)
		owner: 	a MenuMorph(848560128)
		submorphs: 	#()
		fullBounds: 	(648.0@598.0) corner: (819.0@616.0)
		color: 	Color black
		extension: 	a MorphExtension (259260416)
		font: 	a LogicalFont
 familyName: Source Sans Pro
 emphasis: nil
 pointSize: 10
...etc...
		emphasis: 	0
		contents: 	'Profile it'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a PackageTreeNautilusUI
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#tallyIt a PluggableTextMorphWithLimits(327155712))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(715@603) mouseUp 68239533 nil]
		aMorph: 	a ToggleMenuItemMorph(223870976)'Profile it'
		localEvt: 	nil
		index: 	1
		child: 	nil
		morphs: 	#()
		inside: 	true
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(715@603) mouseUp 68239533 nil]
		aMorph: 	a ToggleMenuItemMorph(223870976)'Profile it'
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


ToggleMenuItemMorph(Morph)>>processEvent:using:
	Receiver: a ToggleMenuItemMorph(223870976)'Profile it'
	Arguments and temporary variables: 
		anEvent: 	[(715@603) mouseUp 68239533 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	(648.0@598.0) corner: (819.0@616.0)
		owner: 	a MenuMorph(848560128)
		submorphs: 	#()
		fullBounds: 	(648.0@598.0) corner: (819.0@616.0)
		color: 	Color black
		extension: 	a MorphExtension (259260416)
		font: 	a LogicalFont
 familyName: Source Sans Pro
 emphasis: nil
 pointSize: 10
...etc...
		emphasis: 	0
		contents: 	'Profile it'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a PackageTreeNautilusUI
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#tallyIt a PluggableTextMorphWithLimits(327155712))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(715@603) mouseUp 68239533 nil]
		aMorph: 	a MenuMorph(848560128)
		localEvt: 	[(715@603) mouseUp 68239533 nil]
		index: 	11
		child: 	a ToggleMenuItemMorph(223870976)'Profile it'
		morphs: 	an Array(a ToggleMenuItemMorph(998506496)'Suggestions' a MenuLineMorph(...etc...
		inside: 	false
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(715@603) mouseUp 68239533 nil]
		aMorph: 	a MenuMorph(848560128)
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MenuMorph(Morph)>>processEvent:using:
	Receiver: a MenuMorph(848560128)
	Arguments and temporary variables: 
		anEvent: 	[(715@603) mouseUp 68239533 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	(643.0@438.0) corner: (824.0@880.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(998506496)'Suggestions' a MenuLineMor...etc...
		fullBounds: 	(643.0@438.0) corner: (824.0@880.0)
		color: 	(Color r: 0.894 g: 0.894 b: 0.894 alpha: 1.0)
		extension: 	a MorphExtension (889978880) [other:  (basicColor -> (Color r: 0.823...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.674 g: 0.674 b: 0.674 alpha: 1.0)
		defaultTarget: 	a PackageTreeNautilusUI
		selectedItem: 	a ToggleMenuItemMorph(223870976)'Profile it'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(998506496)'Suggestions' a...etc...


MenuMorph(Morph)>>processEvent:
	Receiver: a MenuMorph(848560128)
	Arguments and temporary variables: 
		anEvent: 	[(715@603) mouseUp 68239533 nil]
	Receiver's instance variables: 
		bounds: 	(643.0@438.0) corner: (824.0@880.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(998506496)'Suggestions' a MenuLineMor...etc...
		fullBounds: 	(643.0@438.0) corner: (824.0@880.0)
		color: 	(Color r: 0.894 g: 0.894 b: 0.894 alpha: 1.0)
		extension: 	a MorphExtension (889978880) [other:  (basicColor -> (Color r: 0.823...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.674 g: 0.674 b: 0.674 alpha: 1.0)
		defaultTarget: 	a PackageTreeNautilusUI
		selectedItem: 	a ToggleMenuItemMorph(223870976)'Profile it'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(998506496)'Suggestions' a...etc...


MenuMorph>>handleFocusEvent:
	Receiver: a MenuMorph(848560128)
	Arguments and temporary variables: 
		evt: 	[(715@603) mouseUp 68239533 nil]
	Receiver's instance variables: 
		bounds: 	(643.0@438.0) corner: (824.0@880.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(998506496)'Suggestions' a MenuLineMor...etc...
		fullBounds: 	(643.0@438.0) corner: (824.0@880.0)
		color: 	(Color r: 0.894 g: 0.894 b: 0.894 alpha: 1.0)
		extension: 	a MorphExtension (889978880) [other:  (basicColor -> (Color r: 0.823...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.674 g: 0.674 b: 0.674 alpha: 1.0)
		defaultTarget: 	a PackageTreeNautilusUI
		selectedItem: 	a ToggleMenuItemMorph(223870976)'Profile it'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(998506496)'Suggestions' a...etc...


[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[(715@603) mouseUp 68239533 nil]
		focusHolder: 	a MenuMorph(848560128)
		aBlock: 	[ self mouseFocus: nil ]
		w: 	a WorldMorph(511705088) [world]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(710@572) corner: (726@588)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(710@572) corner: (726@588)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(710@572) mouseOver nil nil]
		targetOffset: 	(67.0@5.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 68241048 716 576 0 0 0 1)
		lastKeyScanCode: 	30
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


BlockClosure>>on:do:
	Receiver: [ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (an...etc...
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :ex | 
ActiveWorld := priorWorld.
ActiveEvent := priorEvent.
A...etc...
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	HandMorph>>sendFocusEvent:to:clear:
		startpc: 	67
		numArgs: 	0


WorldMorph(PasteUpMorph)>>becomeActiveDuring:
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 
		aBlock: 	[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder ha...etc...
		priorWorld: 	a WorldMorph(511705088) [world]
		priorHand: 	a HandMorph(760479744)
		priorEvent: 	[(715@603) mouseOver red nil nil]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1855@1056)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a NautilusWindow(712507392) a GLM...etc...
		fullBounds: 	(0@0) corner: (1855@1056)
		color: 	Color white
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil



--- The full stack ---
DIPHPTests(TestAsserter)>>assert:
[ :n | self assert: (DIModel allRules at: n) hasFailed = (res at: n) not ] in DIPHPTests(DIDSLTests)>>runAndReturnObjWithText:andSuccessResults:onProject:
Interval>>do:
DIPHPTests(DIDSLTests)>>runAndReturnObjWithText:andSuccessResults:onProject:
DIPHPTests class>>DoIt
CompiledMethod>>valueWithReceiver:arguments:
[ v := compiledMethod valueWithReceiver: receiver arguments: #() ] in SmalltalkEditor>>tallySelection
BlockClosure>>ensure:
MessageTally>>spyEvery:on:
TimeProfiler>>runBlock:pollingEvery:
TimeProfiler>>openOnBlock:
TimeProfiler class>>spyOn:
SmalltalkEditor>>tallySelection
SmalltalkEditor>>tallyIt
[ textMorph editor tallyIt ] in PluggableTextMorphWithLimits(PluggableTextMorph)>>tallyIt
[ result := editBlock value ] in PluggableTextMorphWithLimits(PluggableTextMorph)>>handleEdit:
TextMorphForEditView(TextMorph)>>handleEdit:
PluggableTextMorphWithLimits(PluggableTextMorph)>>handleEdit:
PluggableTextMorphWithLimits(PluggableTextMorph)>>tallyIt
PackageTreeNautilusUI(Object)>>perform:orSendTo:
[ 
| selArgCount |
"show cursor in case item opens a new MVC window"
(selArgCount := selector numArgs) = 0
	ifTrue: [ target perform: selector ]
	ifFalse: [ 
		selArgCount = arguments size
			ifTrue: [ target perform: selector withArguments: arguments ]
			ifFalse: [ target perform: selector withArguments: (arguments copyWith: evt) ] ].
self changed ] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
ToggleMenuItemMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
ToggleMenuItemMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
MenuMorph(Morph)>>processEvent:using:
MenuMorph(Morph)>>processEvent:
MenuMorph>>handleFocusEvent:
[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldState>>doOneSubCycleFor:
WorldMorph>>doOneSubCycle
MenuMorph>>invokeModalAt:in:allowKeyboard:
MenuMorph>>invokeModal:
MenuMorph>>invokeModal
PluggableTextMorphWithLimits(PluggableTextMorph)>>yellowButtonActivity:
SmalltalkEditor(TextEditor)>>mouseUp:
[ editor mouseUp: evt ] in TextMorphForEditView(TextMorph)>>mouseUp:
TextMorphForEditView(TextMorph)>>handleInteraction:
TextMorphForEditView>>handleInteraction:
TextMorphForEditView(TextMorph)>>mouseUp:
TextMorphForEditView>>mouseUp:
TextMorphForEditView(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
TextMorphForEditView(Morph)>>handleEvent:
TextMorphForEditView(Morph)>>handleFocusEvent:
[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ 
World doOneCycle.
Processor yield.
false ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
TestFailure: Assertion failed
18 March 2015 11:46:13.525325 am

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
NBCogit NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
https://github.com/pharo-project/pharo-vm.git Commit: 4a0d556150d478ff2de3c9624d2f18e6eaa3fa5c Date: 2014-12-18 18:42:53 +0100 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14893

Image: Pharo3.0 [Latest update: #30863]

DIPHPTests(TestAsserter)>>assert:
	Receiver: DIPHPTests
	Arguments and temporary variables: 
		aBoolean: 	false
	Receiver's instance variables: 
		testSelector: 	nil
		expectedFails: 	nil


[ :n | self assert: (DIModel allRules at: n) hasFailed = (res at: n) not ] in DIPHPTests(DIDSLTests)>>runAndReturnObjWithText:andSuccessResults:onProject:
	Receiver: DIPHPTests
	Arguments and temporary variables: 
		dslText: 	'
WholeIliasCodebase = PhpClass with name:"il*"
WholeCodeBase = PhpCla...etc...
		res: 	#(false true true false)
		project: 	'HugeProject'
		dicto: 	a DIDicto
		n: 	3
	Receiver's instance variables: 
		testSelector: 	nil
		expectedFails: 	nil


Interval>>do:
	Receiver: (1 to: 4)
	Arguments and temporary variables: 
		aBlock: 	[ :n | self assert: (DIModel allRules at: n) hasFailed = (res at: n) no...etc...
		aValue: 	3
		index: 	3
		size: 	4
	Receiver's instance variables: 
		start: 	1
		stop: 	4
		step: 	1


DIPHPTests(DIDSLTests)>>runAndReturnObjWithText:andSuccessResults:onProject:
	Receiver: DIPHPTests
	Arguments and temporary variables: 
		dslText: 	'
WholeIliasCodebase = PhpClass with name:"il*"
WholeCodeBase = PhpCla...etc...
		res: 	#(false true true false)
		project: 	'HugeProject'
		dicto: 	a DIDicto
	Receiver's instance variables: 
		testSelector: 	nil
		expectedFails: 	nil


DIPHPTests class>>DoIt
	Receiver: DIPHPTests
	Arguments and temporary variables: 
		dsl: 	'
WholeIliasCodebase = PhpClass with name:"il*"
WholeCodeBase = PhpClass w...etc...
		success: 	#(false true true false)
		test: 	DIPHPTests
	Receiver's instance variables: 
		superclass: 	DIDSLTests
		methodDict: 	a MethodDictionary(#testHugePhp->DIPHPTests>>#testHugePhp #testPhp-...etc...
		format: 	134
		layout: 	a FixedLayout
		instanceVariables: 	#()
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#DIPHPTests
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Dicto-var-tests'
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set(#testH...etc...


CompiledMethod>>valueWithReceiver:arguments:
	Receiver: DIPHPTests class>>#DoIt
	Arguments and temporary variables: 
		aReceiver: 	DIPHPTests
		anArray: 	#()
	Receiver's instance variables: 
DIPHPTests class>>#DoIt

[ v := compiledMethod valueWithReceiver: receiver arguments: #() ] in SmalltalkEditor>>tallySelection
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		receiver: 	DIPHPTests
		context: 	nil
		compiledMethod: 	DIPHPTests class>>#DoIt
		profiler: 	nil
		v: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(177733632)
		selectionShowing: 	true
		model: 	a PackageTreeNautilusUI
		editingState: 	a SmalltalkEditingState


BlockClosure>>ensure:
	Receiver: [ v := compiledMethod valueWithReceiver: receiver arguments: #() ]
	Arguments and temporary variables: 
		aBlock: 	[ 
"cancel the probe and return the value"
"Could have already been ter...etc...
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor>>tallySelection
		startpc: 	105
		numArgs: 	0


MessageTally>>spyEvery:on:
	Receiver: nil(SmalltalkEditor) >> tallySelection
	Arguments and temporary variables: 
		observedProcess: 	a Process in nil
		millisecs: 	1
		aBlock: 	[ v := compiledMethod valueWithReceiver: receiver arguments: #() ]
		myDelay: 	a Delay(1 msecs; 1 msecs remaining)
		time0: 	68239557
	Receiver's instance variables: 
		class: 	SmalltalkEditor
		method: 	SmalltalkEditor>>#tallySelection
		process: 	nil
		tally: 	1531829
		receivers: 	an Array(nil(CompiledMethod) >> valueWithReceiver:arguments: nil(DID...etc...
		senders: 	nil
		time: 	0
		gcStats: 	#(68310888 68949164 75836916 nil nil 2000 20968 1916386 87883 45327 22...etc...
		maxClassNameSize: 	1000
		maxClassPlusSelectorSize: 	1000
		maxTabs: 	100
		reportOtherProcesses: 	true


TimeProfiler>>runBlock:pollingEvery:
	Receiver: a TimeProfiler
	Arguments and temporary variables: 
		aBlock: 	[ v := compiledMethod valueWithReceiver: receiver arguments: #() ]
		pollPeriod: 	1
	Receiver's instance variables: 
		dependents: 	nil
		selection: 	nil
		announcer: 	nil
		rootItems: 	nil
		autoMultiSelection: 	nil
		headerLabel: 	nil
		multiSelection: 	nil
		wrapBlockOrSelector: 	nil
		isCheckList: 	nil
		enabled: 	nil
		win: 	nil
		rootMessageTally: 	nil(SmalltalkEditor) >> tallySelection
		threshold: 	nil
		minPercentageToExpand: 	nil
		treeMorph: 	nil
		block: 	[ v := compiledMethod valueWithReceiver: receiver arguments: #() ]
		blockCodePane: 	nil
		withBlockCodePane: 	false
		blockSource: 	nil
		reportOtherProcesses: 	nil
		showLeavesOnly: 	nil
		codeTabPane: 	nil
		resultPane: 	nil
		result: 	nil
		withToolBar: 	false


TimeProfiler>>openOnBlock:
	Receiver: a TimeProfiler
	Arguments and temporary variables: 
		aBlock: 	[ v := compiledMethod valueWithReceiver: receiver arguments: #() ]
	Receiver's instance variables: 
		dependents: 	nil
		selection: 	nil
		announcer: 	nil
		rootItems: 	nil
		autoMultiSelection: 	nil
		headerLabel: 	nil
		multiSelection: 	nil
		wrapBlockOrSelector: 	nil
		isCheckList: 	nil
		enabled: 	nil
		win: 	nil
		rootMessageTally: 	nil(SmalltalkEditor) >> tallySelection
		threshold: 	nil
		minPercentageToExpand: 	nil
		treeMorph: 	nil
		block: 	[ v := compiledMethod valueWithReceiver: receiver arguments: #() ]
		blockCodePane: 	nil
		withBlockCodePane: 	false
		blockSource: 	nil
		reportOtherProcesses: 	nil
		showLeavesOnly: 	nil
		codeTabPane: 	nil
		resultPane: 	nil
		result: 	nil
		withToolBar: 	false


TimeProfiler class>>spyOn:
	Receiver: TimeProfiler
	Arguments and temporary variables: 
		aBlock: 	[ v := compiledMethod valueWithReceiver: receiver arguments: #() ]
	Receiver's instance variables: 
		superclass: 	MorphTreeModel
		methodDict: 	a MethodDictionary(#blockCode->TimeProfiler>>#blockCode #blockCode:...etc...
		format: 	180
		layout: 	a FixedLayout
		instanceVariables: 	#(#win #rootMessageTally #threshold #minPercentageToExpand #...etc...
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#TimeProfiler
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Tools-Profilers'
		traitComposition: 	{}
		localSelectors: 	nil


SmalltalkEditor>>tallySelection
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		v: 	nil
		receiver: 	DIPHPTests
		context: 	nil
		compiledMethod: 	DIPHPTests class>>#DoIt
		profiler: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(177733632)
		selectionShowing: 	true
		model: 	a PackageTreeNautilusUI
		editingState: 	a SmalltalkEditingState


SmalltalkEditor>>tallyIt
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 

	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(177733632)
		selectionShowing: 	true
		model: 	a PackageTreeNautilusUI
		editingState: 	a SmalltalkEditingState


[ textMorph editor tallyIt ] in PluggableTextMorphWithLimits(PluggableTextMorph)>>tallyIt
	Receiver: a PluggableTextMorphWithLimits(327155712)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(584.0@485.0) corner: (1400.0@760.0)
		owner: 	a MultipleMethodsEditor(397672448)
		submorphs: 	an Array(a ScrollBar(368836608) an AlphaImageMorph(624164864) a Tran...etc...
		fullBounds: 	(584@485) corner: (1400@760)
		color: 	Color white
		extension: 	a MorphExtension (156499968) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.784 g: 0.784 b: 0.784 alpha: 1.0)
		model: 	a PackageTreeNautilusUI
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(368836608)
		scroller: 	a TransformMorph(466354176)
		getMenuSelector: 	#sourceCodeMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(1008730112)
		textMorph: 	a TextMorphForEditView(177733632)
		getTextSelector: 	#sourceCodeFrom:
		setTextSelector: 	#compileSource:notifying:
		getSelectionSelector: 	#contentsSelectionFrom:
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(13 to: 1509)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil
		doubleClickSelector: 	nil
		setSelectionSelector: 	nil
		alertLimit: 	700
		locked: 	false
		warningLimit: 	350
		method: 	nil
		lockIcon: 	an AlphaImageMorph(624164864)
		canLockChangeSelector: 	#canChangeLockFor:
		lockSelector: 	#lockTextArea:from:


[ result := editBlock value ] in PluggableTextMorphWithLimits(PluggableTextMorph)>>handleEdit:
	Receiver: a PluggableTextMorphWithLimits(327155712)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph editor tallyIt ]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(584.0@485.0) corner: (1400.0@760.0)
		owner: 	a MultipleMethodsEditor(397672448)
		submorphs: 	an Array(a ScrollBar(368836608) an AlphaImageMorph(624164864) a Tran...etc...
		fullBounds: 	(584@485) corner: (1400@760)
		color: 	Color white
		extension: 	a MorphExtension (156499968) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.784 g: 0.784 b: 0.784 alpha: 1.0)
		model: 	a PackageTreeNautilusUI
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(368836608)
		scroller: 	a TransformMorph(466354176)
		getMenuSelector: 	#sourceCodeMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(1008730112)
		textMorph: 	a TextMorphForEditView(177733632)
		getTextSelector: 	#sourceCodeFrom:
		setTextSelector: 	#compileSource:notifying:
		getSelectionSelector: 	#contentsSelectionFrom:
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(13 to: 1509)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil
		doubleClickSelector: 	nil
		setSelectionSelector: 	nil
		alertLimit: 	700
		locked: 	false
		warningLimit: 	350
		method: 	nil
		lockIcon: 	an AlphaImageMorph(624164864)
		canLockChangeSelector: 	#canChangeLockFor:
		lockSelector: 	#lockTextArea:from:


TextMorphForEditView(TextMorph)>>handleEdit:
	Receiver: a TextMorphForEditView(177733632)
	Arguments and temporary variables: 
		editBlock: 	[ result := editBlock value ]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (795@800)
		owner: 	a TransformMorph(466354176)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (795@800)
		color: 	Color black
		extension: 	a MorphExtension (226492416) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Source Code Pro
		text: 	a Text for 'testHugePhp
| dsl success test|
	
dsl := ''
WholeIliasCodebas...etc...
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		defaultColor: 	Color black
		editView: 	a PluggableTextMorphWithLimits(327155712)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


PluggableTextMorphWithLimits(PluggableTextMorph)>>handleEdit:
	Receiver: a PluggableTextMorphWithLimits(327155712)
	Arguments and temporary variables: 
		result: 	nil
		editBlock: 	[ textMorph editor tallyIt ]
	Receiver's instance variables: 
		bounds: 	(584.0@485.0) corner: (1400.0@760.0)
		owner: 	a MultipleMethodsEditor(397672448)
		submorphs: 	an Array(a ScrollBar(368836608) an AlphaImageMorph(624164864) a Tran...etc...
		fullBounds: 	(584@485) corner: (1400@760)
		color: 	Color white
		extension: 	a MorphExtension (156499968) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.784 g: 0.784 b: 0.784 alpha: 1.0)
		model: 	a PackageTreeNautilusUI
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(368836608)
		scroller: 	a TransformMorph(466354176)
		getMenuSelector: 	#sourceCodeMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(1008730112)
		textMorph: 	a TextMorphForEditView(177733632)
		getTextSelector: 	#sourceCodeFrom:
		setTextSelector: 	#compileSource:notifying:
		getSelectionSelector: 	#contentsSelectionFrom:
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(13 to: 1509)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil
		doubleClickSelector: 	nil
		setSelectionSelector: 	nil
		alertLimit: 	700
		locked: 	false
		warningLimit: 	350
		method: 	nil
		lockIcon: 	an AlphaImageMorph(624164864)
		canLockChangeSelector: 	#canChangeLockFor:
		lockSelector: 	#lockTextArea:from:


PluggableTextMorphWithLimits(PluggableTextMorph)>>tallyIt
	Receiver: a PluggableTextMorphWithLimits(327155712)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(584.0@485.0) corner: (1400.0@760.0)
		owner: 	a MultipleMethodsEditor(397672448)
		submorphs: 	an Array(a ScrollBar(368836608) an AlphaImageMorph(624164864) a Tran...etc...
		fullBounds: 	(584@485) corner: (1400@760)
		color: 	Color white
		extension: 	a MorphExtension (156499968) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.784 g: 0.784 b: 0.784 alpha: 1.0)
		model: 	a PackageTreeNautilusUI
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(368836608)
		scroller: 	a TransformMorph(466354176)
		getMenuSelector: 	#sourceCodeMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(1008730112)
		textMorph: 	a TextMorphForEditView(177733632)
		getTextSelector: 	#sourceCodeFrom:
		setTextSelector: 	#compileSource:notifying:
		getSelectionSelector: 	#contentsSelectionFrom:
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(13 to: 1509)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil
		doubleClickSelector: 	nil
		setSelectionSelector: 	nil
		alertLimit: 	700
		locked: 	false
		warningLimit: 	350
		method: 	nil
		lockIcon: 	an AlphaImageMorph(624164864)
		canLockChangeSelector: 	#canChangeLockFor:
		lockSelector: 	#lockTextArea:from:


PackageTreeNautilusUI(Object)>>perform:orSendTo:
	Receiver: a PackageTreeNautilusUI
	Arguments and temporary variables: 
		selector: 	#tallyIt
		otherTarget: 	a PluggableTextMorphWithLimits(327155712)
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a CategoryWidget a MethodWidget a NautilusWindow(...etc...
		model: 	a PackageTreeNautilus
		window: 	a NautilusWindow(712507392)
		hierarchyClass: 	nil
		cachedHierarchy: 	a SortHierarchically
		sourceTextArea: 	a PluggableTextMorphWithLimits(327155712)
		groupsSelection: 	a Dictionary()
		packagesSelection: 	a Dictionary(var-tests->true )
		classesSelection: 	a Dictionary(DIPHPTests->true )
		list: 	a MorphTreeMorph(1034944512)
		list2: 	a PluggableIconListMorph(1020002304)
		sourceCodePanel: 	a PanelMorph(207618048)
		commentTextArea: 	nil
		currentDisplayChoice: 	#SourceCode
		sourceTextAreaLimit: 	350
		sourceCodeContainer: 	a PanelMorph(702283776)
		list2Elements: 	{DIDSLTests. DIJavaTests. DILangTests. DIPHPTests. DISTTests}
		listElements: 	nil
		shouldUpdateTitle: 	true
		testSemaphore: 	a Semaphore()
		sourceTextAreas: 	an OrderedCollection(a PluggableTextMorphWithLimits(327155712)...etc...
		multipleMethodsEditor: 	a MultipleMethodsEditor(397672448)
		contentSelection: 	nil
		acceptor: 	a MethodDefinitionAcceptor
		classifier: 	a MethodClassifier
		categoryWidget: 	a CategoryWidget
		methodWidget: 	a MethodWidget
		packagePattern: 	nil
		searchWidget: 	a SearchMorph(1029963776)


[ 
| selArgCount |
"show cursor in case item opens a new MVC window"
(selArgCount := selector numArgs) = 0
	ifTrue: [ target perform: selector ]
	ifFalse: [ 
		selArgCount = arguments size
			ifTrue: [ target perform: selector withArguments: arguments ]
			ifFalse: [ target perform: selector withArguments: (arguments copyWith: evt) ] ].
self changed ] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(223870976)'Profile it'
	Arguments and temporary variables: 
		evt: 	[(715@603) mouseUp 68239533 nil]
		w: 	a WorldMorph(511705088) [world]
		selArgCount: 	2
	Receiver's instance variables: 
		bounds: 	(648.0@598.0) corner: (819.0@616.0)
		owner: 	a MenuMorph(848560128)
		submorphs: 	#()
		fullBounds: 	(648.0@598.0) corner: (819.0@616.0)
		color: 	Color black
		extension: 	a MorphExtension (259260416)
		font: 	a LogicalFont
 familyName: Source Sans Pro
 emphasis: nil
 pointSize: 10
...etc...
		emphasis: 	0
		contents: 	'Profile it'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a PackageTreeNautilusUI
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#tallyIt a PluggableTextMorphWithLimits(327155712))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


BlockClosure>>ensure:
	Receiver: [ 
| selArgCount |
"show cursor in case item opens a new MVC window"
(selArgCount := selec...etc...
	Arguments and temporary variables: 
		aBlock: 	[ oldcursor show ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
		startpc: 	134
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r100000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[ 
| selArgCount |
"show cursor in case item opens a new MVC window"
(s...etc...
		oldcursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	(-1@ -1)
		maskForm: 	Form(16x16x1)


ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(223870976)'Profile it'
	Arguments and temporary variables: 
		evt: 	[(715@603) mouseUp 68239533 nil]
		w: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		bounds: 	(648.0@598.0) corner: (819.0@616.0)
		owner: 	a MenuMorph(848560128)
		submorphs: 	#()
		fullBounds: 	(648.0@598.0) corner: (819.0@616.0)
		color: 	Color black
		extension: 	a MorphExtension (259260416)
		font: 	a LogicalFont
 familyName: Source Sans Pro
 emphasis: nil
 pointSize: 10
...etc...
		emphasis: 	0
		contents: 	'Profile it'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a PackageTreeNautilusUI
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#tallyIt a PluggableTextMorphWithLimits(327155712))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
	Receiver: a ToggleMenuItemMorph(223870976)'Profile it'
	Arguments and temporary variables: 
		evt: 	[(715@603) mouseUp 68239533 nil]
	Receiver's instance variables: 
		bounds: 	(648.0@598.0) corner: (819.0@616.0)
		owner: 	a MenuMorph(848560128)
		submorphs: 	#()
		fullBounds: 	(648.0@598.0) corner: (819.0@616.0)
		color: 	Color black
		extension: 	a MorphExtension (259260416)
		font: 	a LogicalFont
 familyName: Source Sans Pro
 emphasis: nil
 pointSize: 10
...etc...
		emphasis: 	0
		contents: 	'Profile it'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a PackageTreeNautilusUI
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#tallyIt a PluggableTextMorphWithLimits(327155712))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
	Receiver: a ToggleMenuItemMorph(223870976)'Profile it'
	Arguments and temporary variables: 
		anEvent: 	[(715@603) mouseUp 68239533 nil]
	Receiver's instance variables: 
		bounds: 	(648.0@598.0) corner: (819.0@616.0)
		owner: 	a MenuMorph(848560128)
		submorphs: 	#()
		fullBounds: 	(648.0@598.0) corner: (819.0@616.0)
		color: 	Color black
		extension: 	a MorphExtension (259260416)
		font: 	a LogicalFont
 familyName: Source Sans Pro
 emphasis: nil
 pointSize: 10
...etc...
		emphasis: 	0
		contents: 	'Profile it'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a PackageTreeNautilusUI
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#tallyIt a PluggableTextMorphWithLimits(327155712))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [(715@603) mouseUp 68239533 nil]
	Arguments and temporary variables: 
		anObject: 	a ToggleMenuItemMorph(223870976)'Profile it'
	Receiver's instance variables: 
		timeStamp: 	68239533
		source: 	a HandMorph(760479744)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(715@603)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


ToggleMenuItemMorph(Morph)>>handleEvent:
	Receiver: a ToggleMenuItemMorph(223870976)'Profile it'
	Arguments and temporary variables: 
		anEvent: 	[(715@603) mouseUp 68239533 nil]
	Receiver's instance variables: 
		bounds: 	(648.0@598.0) corner: (819.0@616.0)
		owner: 	a MenuMorph(848560128)
		submorphs: 	#()
		fullBounds: 	(648.0@598.0) corner: (819.0@616.0)
		color: 	Color black
		extension: 	a MorphExtension (259260416)
		font: 	a LogicalFont
 familyName: Source Sans Pro
 emphasis: nil
 pointSize: 10
...etc...
		emphasis: 	0
		contents: 	'Profile it'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a PackageTreeNautilusUI
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#tallyIt a PluggableTextMorphWithLimits(327155712))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(715@603) mouseUp 68239533 nil]
		aMorph: 	a ToggleMenuItemMorph(223870976)'Profile it'
		localEvt: 	nil
		index: 	1
		child: 	nil
		morphs: 	#()
		inside: 	true
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(715@603) mouseUp 68239533 nil]
		aMorph: 	a ToggleMenuItemMorph(223870976)'Profile it'
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


ToggleMenuItemMorph(Morph)>>processEvent:using:
	Receiver: a ToggleMenuItemMorph(223870976)'Profile it'
	Arguments and temporary variables: 
		anEvent: 	[(715@603) mouseUp 68239533 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	(648.0@598.0) corner: (819.0@616.0)
		owner: 	a MenuMorph(848560128)
		submorphs: 	#()
		fullBounds: 	(648.0@598.0) corner: (819.0@616.0)
		color: 	Color black
		extension: 	a MorphExtension (259260416)
		font: 	a LogicalFont
 familyName: Source Sans Pro
 emphasis: nil
 pointSize: 10
...etc...
		emphasis: 	0
		contents: 	'Profile it'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a PackageTreeNautilusUI
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#tallyIt a PluggableTextMorphWithLimits(327155712))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(715@603) mouseUp 68239533 nil]
		aMorph: 	a MenuMorph(848560128)
		localEvt: 	[(715@603) mouseUp 68239533 nil]
		index: 	11
		child: 	a ToggleMenuItemMorph(223870976)'Profile it'
		morphs: 	an Array(a ToggleMenuItemMorph(998506496)'Suggestions' a MenuLineMorph(...etc...
		inside: 	false
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(715@603) mouseUp 68239533 nil]
		aMorph: 	a MenuMorph(848560128)
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MenuMorph(Morph)>>processEvent:using:
	Receiver: a MenuMorph(848560128)
	Arguments and temporary variables: 
		anEvent: 	[(715@603) mouseUp 68239533 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	(643.0@438.0) corner: (824.0@880.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(998506496)'Suggestions' a MenuLineMor...etc...
		fullBounds: 	(643.0@438.0) corner: (824.0@880.0)
		color: 	(Color r: 0.894 g: 0.894 b: 0.894 alpha: 1.0)
		extension: 	a MorphExtension (889978880) [other:  (basicColor -> (Color r: 0.823...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.674 g: 0.674 b: 0.674 alpha: 1.0)
		defaultTarget: 	a PackageTreeNautilusUI
		selectedItem: 	a ToggleMenuItemMorph(223870976)'Profile it'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(998506496)'Suggestions' a...etc...


MenuMorph(Morph)>>processEvent:
	Receiver: a MenuMorph(848560128)
	Arguments and temporary variables: 
		anEvent: 	[(715@603) mouseUp 68239533 nil]
	Receiver's instance variables: 
		bounds: 	(643.0@438.0) corner: (824.0@880.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(998506496)'Suggestions' a MenuLineMor...etc...
		fullBounds: 	(643.0@438.0) corner: (824.0@880.0)
		color: 	(Color r: 0.894 g: 0.894 b: 0.894 alpha: 1.0)
		extension: 	a MorphExtension (889978880) [other:  (basicColor -> (Color r: 0.823...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.674 g: 0.674 b: 0.674 alpha: 1.0)
		defaultTarget: 	a PackageTreeNautilusUI
		selectedItem: 	a ToggleMenuItemMorph(223870976)'Profile it'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(998506496)'Suggestions' a...etc...


MenuMorph>>handleFocusEvent:
	Receiver: a MenuMorph(848560128)
	Arguments and temporary variables: 
		evt: 	[(715@603) mouseUp 68239533 nil]
	Receiver's instance variables: 
		bounds: 	(643.0@438.0) corner: (824.0@880.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(998506496)'Suggestions' a MenuLineMor...etc...
		fullBounds: 	(643.0@438.0) corner: (824.0@880.0)
		color: 	(Color r: 0.894 g: 0.894 b: 0.894 alpha: 1.0)
		extension: 	a MorphExtension (889978880) [other:  (basicColor -> (Color r: 0.823...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.674 g: 0.674 b: 0.674 alpha: 1.0)
		defaultTarget: 	a PackageTreeNautilusUI
		selectedItem: 	a ToggleMenuItemMorph(223870976)'Profile it'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(998506496)'Suggestions' a...etc...


[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[(715@603) mouseUp 68239533 nil]
		focusHolder: 	a MenuMorph(848560128)
		aBlock: 	[ self mouseFocus: nil ]
		w: 	a WorldMorph(511705088) [world]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(900@154) corner: (916@170)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(900@154) corner: (916@170)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	a PaginatedMorphTreeMorph(648544256)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(900@154) mouseOver nil nil]
		targetOffset: 	(9.0@12.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 69771584 900 154 0 0 0 1)
		lastKeyScanCode: 	247
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


BlockClosure>>on:do:
	Receiver: [ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (an...etc...
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :ex | 
ActiveWorld := priorWorld.
ActiveEvent := priorEvent.
A...etc...
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	HandMorph>>sendFocusEvent:to:clear:
		startpc: 	67
		numArgs: 	0


WorldMorph(PasteUpMorph)>>becomeActiveDuring:
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 
		aBlock: 	[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder ha...etc...
		priorWorld: 	a WorldMorph(511705088) [world]
		priorHand: 	a HandMorph(760479744)
		priorEvent: 	[(715@603) mouseOver red nil nil]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1855@1056)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a NautilusWindow(712507392) a GLM...etc...
		fullBounds: 	nil
		color: 	Color white
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil



--- The full stack ---
DIPHPTests(TestAsserter)>>assert:
[ :n | self assert: (DIModel allRules at: n) hasFailed = (res at: n) not ] in DIPHPTests(DIDSLTests)>>runAndReturnObjWithText:andSuccessResults:onProject:
Interval>>do:
DIPHPTests(DIDSLTests)>>runAndReturnObjWithText:andSuccessResults:onProject:
DIPHPTests class>>DoIt
CompiledMethod>>valueWithReceiver:arguments:
[ v := compiledMethod valueWithReceiver: receiver arguments: #() ] in SmalltalkEditor>>tallySelection
BlockClosure>>ensure:
MessageTally>>spyEvery:on:
TimeProfiler>>runBlock:pollingEvery:
TimeProfiler>>openOnBlock:
TimeProfiler class>>spyOn:
SmalltalkEditor>>tallySelection
SmalltalkEditor>>tallyIt
[ textMorph editor tallyIt ] in PluggableTextMorphWithLimits(PluggableTextMorph)>>tallyIt
[ result := editBlock value ] in PluggableTextMorphWithLimits(PluggableTextMorph)>>handleEdit:
TextMorphForEditView(TextMorph)>>handleEdit:
PluggableTextMorphWithLimits(PluggableTextMorph)>>handleEdit:
PluggableTextMorphWithLimits(PluggableTextMorph)>>tallyIt
PackageTreeNautilusUI(Object)>>perform:orSendTo:
[ 
| selArgCount |
"show cursor in case item opens a new MVC window"
(selArgCount := selector numArgs) = 0
	ifTrue: [ target perform: selector ]
	ifFalse: [ 
		selArgCount = arguments size
			ifTrue: [ target perform: selector withArguments: arguments ]
			ifFalse: [ target perform: selector withArguments: (arguments copyWith: evt) ] ].
self changed ] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
ToggleMenuItemMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
ToggleMenuItemMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
MenuMorph(Morph)>>processEvent:using:
MenuMorph(Morph)>>processEvent:
MenuMorph>>handleFocusEvent:
[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldState>>doOneSubCycleFor:
WorldMorph>>doOneSubCycle
MenuMorph>>invokeModalAt:in:allowKeyboard:
MenuMorph>>invokeModal:
MenuMorph>>invokeModal
PluggableTextMorphWithLimits(PluggableTextMorph)>>yellowButtonActivity:
SmalltalkEditor(TextEditor)>>mouseUp:
[ editor mouseUp: evt ] in TextMorphForEditView(TextMorph)>>mouseUp:
TextMorphForEditView(TextMorph)>>handleInteraction:
TextMorphForEditView>>handleInteraction:
TextMorphForEditView(TextMorph)>>mouseUp:
TextMorphForEditView>>mouseUp:
TextMorphForEditView(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
TextMorphForEditView(Morph)>>handleEvent:
TextMorphForEditView(Morph)>>handleFocusEvent:
[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ 
World doOneCycle.
Processor yield.
false ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: ThreadSafeTranscript>>write:
18 March 2015 1:06:45.383283 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
NBCogit NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
https://github.com/pharo-project/pharo-vm.git Commit: 4a0d556150d478ff2de3c9624d2f18e6eaa3fa5c Date: 2014-12-18 18:42:53 +0100 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14893

Image: Pharo3.0 [Latest update: #30863]

ThreadSafeTranscript(Object)>>doesNotUnderstand: #write:
	Receiver: Transcript
	Arguments and temporary variables: 
		aMessage: 	write: 'hoi'
		exception: 	MessageNotUnderstood: ThreadSafeTranscript>>write:
		resumeValue: 	nil
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SystemWindow(587988992) a ThreadSafeTranscriptP...etc...
		stream: 	a WriteStream
		accessSemaphore: 	a Mutex


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	'Transcript write: ''hoi''.'
		itsSelection: 	a Text for 'Transcript write: ''hoi''.'
		itsSelectionString: 	'Transcript write: ''hoi''.'
	Receiver's instance variables: 
		ast: 	DoIt
	^ Transcript write: 'hoi'
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil
		useFaultyForParsing: 	false


RubSmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(280231936)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ textMorph textArea editor evaluateSelectionAndDo: ann action ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnEvaluateSelection:
	Receiver: a GLMMorphicPharoPlaygroundRenderer
	Arguments and temporary variables: 
		ann: 	a GLMEvaluateSelection
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(496762880)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ textMorph textArea editor evaluateSelectionAndDo: ann action ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (1855@1056)
		canvas: 	a FormCanvas on: DisplayScreen(1855x1056x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(471597056))(a SearchMorp...etc...
		lastStepTime: 	74603474
		lastStepMessage: 	nil
		lastCycleTime: 	74603474
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(1007943680)))
		lastAlarmTime: 	74603474
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1855@1056)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a GLMSystemWindow(581173248) a Sy...etc...
		fullBounds: 	(0@0) corner: (1855@1056)
		color: 	Color white
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (1855@1056)
		canvas: 	a FormCanvas on: DisplayScreen(1855x1056x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(471597056))(a SearchMorp...etc...
		lastStepTime: 	74603474
		lastStepMessage: 	nil
		lastCycleTime: 	74603474
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(1007943680)))
		lastAlarmTime: 	74603474
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (1855@1056)
		canvas: 	a FormCanvas on: DisplayScreen(1855x1056x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(471597056))(a SearchMorp...etc...
		lastStepTime: 	74603474
		lastStepMessage: 	nil
		lastCycleTime: 	74603474
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(1007943680)))
		lastAlarmTime: 	74603474
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1855@1056)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a GLMSystemWindow(581173248) a Sy...etc...
		fullBounds: 	(0@0) corner: (1855@1056)
		color: 	Color white
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


[ 
World doOneCycle.
Processor yield.
false ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	Transcript


[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ 
World doOneCycle.
Processor yield.
false ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
ThreadSafeTranscript(Object)>>doesNotUnderstand: #write:
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluateSelectionAndDo:
[ textMorph textArea editor evaluateSelectionAndDo: ann action ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnEvaluateSelection:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ 
World doOneCycle.
Processor yield.
false ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: SubclassResponsibility>>asDictionary
18 March 2015 1:15:21.150705 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
NBCogit NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
https://github.com/pharo-project/pharo-vm.git Commit: 4a0d556150d478ff2de3c9624d2f18e6eaa3fa5c Date: 2014-12-18 18:42:53 +0100 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14893

Image: Pharo3.0 [Latest update: #30863]

SubclassResponsibility(Object)>>doesNotUnderstand: #asDictionary
	Receiver: SubclassResponsibility: UndefinedObject had the subclass responsibility to implement nil
	Arguments and temporary variables: 
		aMessage: 	asDictionary
		exception: 	MessageNotUnderstood: SubclassResponsibility>>asDictionary
		resumeValue: 	nil
	Receiver's instance variables: 
		messageText: 	'UndefinedObject had the subclass responsibility to implement nil'...etc...
		tag: 	nil
		signaler: 	nil
		signalContext: 	nil
		handlerContext: 	nil
		outerContext: 	nil
		selector: 	nil


DIVarPhpClass(DIVar)>>elements
	Receiver: WholeIliasCodebase
	Arguments and temporary variables: 
		valid: 	nil
		filters: 	nil
	Receiver's instance variables: 
		isFirst: 	false
		dslText: 	'WholeIliasCodebase=PhpClass with name:"il*"'
		type: 	'PhpClass'
		id: 	4
		entity: 	nil
		name: 	'WholeIliasCodebase'
		specifiers: 	an OrderedCollection(name=il*)
		isInverted: 	false
		elements: 	a DICollectionVarElements()
		invertedElements: 	a DICollectionVarElements()
		resultsCache: 	a Dictionary()


DISimpleRule>>subjectElements
	Receiver: WholeIliasCodebase cannot depend on triggerError
	Arguments and temporary variables: 
		subjectElements: 	nil
	Receiver's instance variables: 
		isFirst: 	nil
		dslText: 	'WholeIliasCodebase cannot depend on triggerError'
		type: 	#cannot
		id: 	1001
		entity: 	nil
		subjects: 	an Array(WholeIliasCodebase)
		predicates: 	an Array(depend on triggerError)
		subRules: 	nil
		documentation: 	nil
		candidateAdapters: 	a SortedCollection(DIPhpDependencies)
		chosenAdapter: 	DIPhpDependencies
		hasFailed: 	false
		failureMessage: 	''
		failingPredicates: 	a Set()
		hasSubjectInverted: 	false
		hasPredicateInverted: 	false


printRulesEntityRelationship: someRules
	| res processedPredicates |
	res := ''.
	processedPredicates := Set new.
	someRules
		do: [ :rule | 
			| predicateSelector subjectElements argumentElements data isPredicateInv isSubjectInv |
			predicateSelector := (rule predicate nameNormalized , ':') asSymbol.
			isPredicateInv := rule hasPredicateInverted.
			isSubjectInv := rule hasSubjectInverted.
			subjectElements := rule subjectElements.
			argumentElements := rule argumentElements.
			subjectElements
				do: [ :subject | 
					argumentElements
						do: [ :argument | 
							| relId spec msgPass msgFail |
							relId := subject id , '-' , argument id.
							msgPass := subject id , '.' , rule predicate name , '(' , argument id , ')=True'.
							msgFail := subject id , '.' , rule predicate name , '(' , argument id , ')=False'.
							(processedPredicates includes: relId)
								ifFalse: [ 
									data := {(#subject -> subject value).
									(#argument -> argument value).
									(#ruleId -> rule id).
									(#propertyId -> relId).
									(#msgPass -> msgPass).
									(#msgFail -> msgFail)} asDictionary.
									spec := self perform: predicateSelector withArguments: {data}.
									spec := spec
										dictoReplace:
											{('$subject' -> subject value).
											('$argument' -> argument value).
											('$ruleId' -> rule id).
											('$propertyId' -> relId).
											('$msgPass' -> msgPass).
											('$msgFail' -> msgFail)}.
									res := res , spec ].	"avoid duplicate predicate evaluations"
							processedPredicates add: relId ] ] ].
	^ res in DIPhpDependencies(DIAdapter)>>printRulesEntityRelationship:
	Receiver: a DIPhpDependencies
	Arguments and temporary variables: 
		someRules: 	a DICollectionRule(WholeIliasCodebase cannot depend on triggerError ...etc...
		processedPredicates: 	a Set()
		data: 	nil
		res: 	''
		rule: 	WholeIliasCodebase cannot depend on triggerError
		predicateSelector: 	#dependOn:
		subjectElements: 	nil
		argumentElements: 	nil
		isPredicateInv: 	false
		isSubjectInv: 	false
	Receiver's instance variables: 
		output: 	''
		commandOutput: 	''
		NEWLINE: 	'
'
		rules: 	a DICollectionRule(WholeIliasCodebase cannot depend on triggerError Whol...etc...
		varSynonyms: 	nil
		sessionId: 	'1426680921'
		TIMESTAMP: 	'1426680921'
		TOOLNAME: 	'DIPhpDependencies'
		PROJECTROOT: 	'/home/otruffer/dicto/HugeProject'
		PROJECTSRC: 	'src/'
		PROJECTBIN: 	'bin/'
		RESULTFILE: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/DictoTestSuite/1...etc...
		TESTFILE: 	nil
		testInputFileExt: 	'.st'
		SYSTEM: 	SYSTEM


DICollectionRule(OrderedCollection)>>do:
	Receiver: a DICollectionRule(WholeIliasCodebase cannot depend on triggerError WholeIliasCodebase can...etc...
	Arguments and temporary variables: 
		aBlock: 	printRulesEntityRelationship: someRules
	| res processedPredicates |
	r...etc...
		index: 	1
	Receiver's instance variables: 
		array: 	an Array(WholeIliasCodebase cannot depend on triggerError WholeIliasCode...etc...
		firstIndex: 	1
		lastIndex: 	2
		elements: 	nil
		elements: 	nil


DIPhpDependencies(DIAdapter)>>printRulesEntityRelationship:
	Receiver: a DIPhpDependencies
	Arguments and temporary variables: 
		res: 	''
		someRules: 	a DICollectionRule(WholeIliasCodebase cannot depend on triggerError ...etc...
		processedPredicates: 	a Set()
	Receiver's instance variables: 
		output: 	''
		commandOutput: 	''
		NEWLINE: 	'
'
		rules: 	a DICollectionRule(WholeIliasCodebase cannot depend on triggerError Whol...etc...
		varSynonyms: 	nil
		sessionId: 	'1426680921'
		TIMESTAMP: 	'1426680921'
		TOOLNAME: 	'DIPhpDependencies'
		PROJECTROOT: 	'/home/otruffer/dicto/HugeProject'
		PROJECTSRC: 	'src/'
		PROJECTBIN: 	'bin/'
		RESULTFILE: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/DictoTestSuite/1...etc...
		TESTFILE: 	nil
		testInputFileExt: 	'.st'
		SYSTEM: 	SYSTEM


DIPhpDependencies(DIAdapter)>>printRules
	Receiver: a DIPhpDependencies
	Arguments and temporary variables: 
		res: 	nil
		allRules: 	a DICollectionRule(WholeIliasCodebase cannot depend on triggerError W...etc...
	Receiver's instance variables: 
		output: 	''
		commandOutput: 	''
		NEWLINE: 	'
'
		rules: 	a DICollectionRule(WholeIliasCodebase cannot depend on triggerError Whol...etc...
		varSynonyms: 	nil
		sessionId: 	'1426680921'
		TIMESTAMP: 	'1426680921'
		TOOLNAME: 	'DIPhpDependencies'
		PROJECTROOT: 	'/home/otruffer/dicto/HugeProject'
		PROJECTSRC: 	'src/'
		PROJECTBIN: 	'bin/'
		RESULTFILE: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/DictoTestSuite/1...etc...
		TESTFILE: 	nil
		testInputFileExt: 	'.st'
		SYSTEM: 	SYSTEM


DIPhpDependencies>>testInput
	Receiver: a DIPhpDependencies
	Arguments and temporary variables: 
		strRules: 	nil
	Receiver's instance variables: 
		output: 	''
		commandOutput: 	''
		NEWLINE: 	'
'
		rules: 	a DICollectionRule(WholeIliasCodebase cannot depend on triggerError Whol...etc...
		varSynonyms: 	nil
		sessionId: 	'1426680921'
		TIMESTAMP: 	'1426680921'
		TOOLNAME: 	'DIPhpDependencies'
		PROJECTROOT: 	'/home/otruffer/dicto/HugeProject'
		PROJECTSRC: 	'src/'
		PROJECTBIN: 	'bin/'
		RESULTFILE: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/DictoTestSuite/1...etc...
		TESTFILE: 	nil
		testInputFileExt: 	'.st'
		SYSTEM: 	SYSTEM


DITestGroup>>build
	Receiver: a DITestGroup
	Arguments and temporary variables: 

	Receiver's instance variables: 
		rules: 	an OrderedCollection(WholeIliasCodebase cannot depend on triggerError Wh...etc...
		adapter: 	a DIPhpDependencies
		runCommandText: 	nil
		testSpecification: 	nil
		adapterID: 	'DIPhpDependencies'
		resultFile: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/DictoTestSuite/1...etc...
		specificationFile: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/DictoTest...etc...
		commandFile: 	'/home/otruffer/dicto/bin/dicto-engine/../analysis/DictoTestSuite/...etc...
		rawOutput: 	nil
		xmlOutput: 	nil


[ :testGroup | testGroup build ] in DIDicto>>dictoBuild:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'
WholeIliasCodebase = PhpClass with name:"il*"
triggerError = PhpC...etc...
		adapterTestGroups: 	a Dictionary(DIGrepFileContent->a DITestGroup DIJMeterLoadTe...etc...
		testGroup: 	a DITestGroup
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1426680921'
		singleShotTask: 	false


Array(SequenceableCollection)>>do:
	Receiver: an Array(a DITestGroup a DITestGroup a DITestGroup a DITestGroup a DITestGroup a DITestGro...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :testGroup | testGroup build ]
		index: 	3
	Receiver's instance variables: 
an Array(a DITestGroup a DITestGroup a DITestGroup a DITestGroup a DITestGroup a DITestGro...etc...

DIDicto>>dictoBuild:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'
WholeIliasCodebase = PhpClass with name:"il*"
triggerError = PhpC...etc...
		adapterTestGroups: 	a Dictionary(DIGrepFileContent->a DITestGroup DIJMeterLoadTe...etc...
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1426680921'
		singleShotTask: 	false


DIDicto>>dictoRun:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'
WholeIliasCodebase = PhpClass with name:"il*"
triggerError = PhpC...etc...
		adapterTestGroups: 	nil
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1426680921'
		singleShotTask: 	false


DIDicto>>dictoAll:
	Receiver: a DIDicto
	Arguments and temporary variables: 
		aDSLString: 	'
WholeIliasCodebase = PhpClass with name:"il*"
triggerError = PhpC...etc...
	Receiver's instance variables: 
		ignoreUnsopportedRules: 	true
		sessionId: 	'1426680921'
		singleShotTask: 	false


DIPHPTests(DIDSLTests)>>runAndReturnObjWithText:andSuccessResults:onProject:
	Receiver: DIPHPTests
	Arguments and temporary variables: 
		dslText: 	'
WholeIliasCodebase = PhpClass with name:"il*"
triggerError = PhpClas...etc...
		res: 	#(false true true false)
		project: 	'HugeProject'
		dicto: 	a DIDicto
	Receiver's instance variables: 
		testSelector: 	nil
		expectedFails: 	nil


DIPHPTests class>>DoIt
	Receiver: DIPHPTests
	Arguments and temporary variables: 
		dsl: 	'
WholeIliasCodebase = PhpClass with name:"il*"
triggerError = PhpClass wi...etc...
		success: 	#(false true true false)
		test: 	DIPHPTests
	Receiver's instance variables: 
		superclass: 	DIDSLTests
		methodDict: 	a MethodDictionary(#testHugePhp->DIPHPTests>>#testHugePhp #testPhp-...etc...
		format: 	134
		layout: 	a FixedLayout
		instanceVariables: 	#()
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#DIPHPTests
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Dicto-var-tests'
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set(#testH...etc...


CompiledMethod>>valueWithReceiver:arguments:
	Receiver: DIPHPTests class>>#DoIt
	Arguments and temporary variables: 
		aReceiver: 	DIPHPTests
		anArray: 	#()
	Receiver's instance variables: 
DIPHPTests class>>#DoIt

[ v := compiledMethod valueWithReceiver: receiver arguments: #() ] in SmalltalkEditor>>tallySelection
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		receiver: 	DIPHPTests
		context: 	nil
		compiledMethod: 	DIPHPTests class>>#DoIt
		profiler: 	nil
		v: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(177733632)
		selectionShowing: 	true
		model: 	a PackageTreeNautilusUI
		editingState: 	a SmalltalkEditingState


BlockClosure>>ensure:
	Receiver: [ v := compiledMethod valueWithReceiver: receiver arguments: #() ]
	Arguments and temporary variables: 
		aBlock: 	[ 
"cancel the probe and return the value"
"Could have already been ter...etc...
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor>>tallySelection
		startpc: 	105
		numArgs: 	0


MessageTally>>spyEvery:on:
	Receiver: nil(SmalltalkEditor) >> tallySelection
	Arguments and temporary variables: 
		observedProcess: 	a Process in nil
		millisecs: 	1
		aBlock: 	[ v := compiledMethod valueWithReceiver: receiver arguments: #() ]
		myDelay: 	a Delay(1 msecs; 1 msecs remaining)
		time0: 	75119175
	Receiver's instance variables: 
		class: 	SmalltalkEditor
		method: 	SmalltalkEditor>>#tallySelection
		process: 	nil
		tally: 	80
		receivers: 	an Array(nil(CompiledMethod) >> valueWithReceiver:arguments: nil(DID...etc...
		senders: 	nil
		time: 	0
		gcStats: 	#(73502992 74920732 80750816 nil nil 2000 41353 3869007 142953 59339 7...etc...
		maxClassNameSize: 	1000
		maxClassPlusSelectorSize: 	1000
		maxTabs: 	100
		reportOtherProcesses: 	true


TimeProfiler>>runBlock:pollingEvery:
	Receiver: a TimeProfiler
	Arguments and temporary variables: 
		aBlock: 	[ v := compiledMethod valueWithReceiver: receiver arguments: #() ]
		pollPeriod: 	1
	Receiver's instance variables: 
		dependents: 	nil
		selection: 	nil
		announcer: 	nil
		rootItems: 	nil
		autoMultiSelection: 	nil
		headerLabel: 	nil
		multiSelection: 	nil
		wrapBlockOrSelector: 	nil
		isCheckList: 	nil
		enabled: 	nil
		win: 	nil
		rootMessageTally: 	nil(SmalltalkEditor) >> tallySelection
		threshold: 	nil
		minPercentageToExpand: 	nil
		treeMorph: 	nil
		block: 	[ v := compiledMethod valueWithReceiver: receiver arguments: #() ]
		blockCodePane: 	nil
		withBlockCodePane: 	false
		blockSource: 	nil
		reportOtherProcesses: 	nil
		showLeavesOnly: 	nil
		codeTabPane: 	nil
		resultPane: 	nil
		result: 	nil
		withToolBar: 	false


TimeProfiler>>openOnBlock:
	Receiver: a TimeProfiler
	Arguments and temporary variables: 
		aBlock: 	[ v := compiledMethod valueWithReceiver: receiver arguments: #() ]
	Receiver's instance variables: 
		dependents: 	nil
		selection: 	nil
		announcer: 	nil
		rootItems: 	nil
		autoMultiSelection: 	nil
		headerLabel: 	nil
		multiSelection: 	nil
		wrapBlockOrSelector: 	nil
		isCheckList: 	nil
		enabled: 	nil
		win: 	nil
		rootMessageTally: 	nil(SmalltalkEditor) >> tallySelection
		threshold: 	nil
		minPercentageToExpand: 	nil
		treeMorph: 	nil
		block: 	[ v := compiledMethod valueWithReceiver: receiver arguments: #() ]
		blockCodePane: 	nil
		withBlockCodePane: 	false
		blockSource: 	nil
		reportOtherProcesses: 	nil
		showLeavesOnly: 	nil
		codeTabPane: 	nil
		resultPane: 	nil
		result: 	nil
		withToolBar: 	false


TimeProfiler class>>spyOn:
	Receiver: TimeProfiler
	Arguments and temporary variables: 
		aBlock: 	[ v := compiledMethod valueWithReceiver: receiver arguments: #() ]
	Receiver's instance variables: 
		superclass: 	MorphTreeModel
		methodDict: 	a MethodDictionary(#blockCode->TimeProfiler>>#blockCode #blockCode:...etc...
		format: 	180
		layout: 	a FixedLayout
		instanceVariables: 	#(#win #rootMessageTally #threshold #minPercentageToExpand #...etc...
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#TimeProfiler
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Tools-Profilers'
		traitComposition: 	{}
		localSelectors: 	nil


SmalltalkEditor>>tallySelection
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		v: 	nil
		receiver: 	DIPHPTests
		context: 	nil
		compiledMethod: 	DIPHPTests class>>#DoIt
		profiler: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(177733632)
		selectionShowing: 	true
		model: 	a PackageTreeNautilusUI
		editingState: 	a SmalltalkEditingState


SmalltalkEditor>>tallyIt
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 

	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(177733632)
		selectionShowing: 	true
		model: 	a PackageTreeNautilusUI
		editingState: 	a SmalltalkEditingState


[ textMorph editor tallyIt ] in PluggableTextMorphWithLimits(PluggableTextMorph)>>tallyIt
	Receiver: a PluggableTextMorphWithLimits(327155712)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(822.0@477.0) corner: (1638.0@752.0)
		owner: 	a MultipleMethodsEditor(397672448)
		submorphs: 	an Array(a ScrollBar(368836608) an AlphaImageMorph(624164864) a Tran...etc...
		fullBounds: 	(822@477) corner: (1638@752)
		color: 	Color white
		extension: 	a MorphExtension (156499968) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.784 g: 0.784 b: 0.784 alpha: 1.0)
		model: 	a PackageTreeNautilusUI
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(368836608)
		scroller: 	a TransformMorph(466354176)
		getMenuSelector: 	#sourceCodeMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(1008730112)
		textMorph: 	a TextMorphForEditView(177733632)
		getTextSelector: 	#sourceCodeFrom:
		setTextSelector: 	#compileSource:notifying:
		getSelectionSelector: 	#contentsSelectionFrom:
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(13 to: 1370)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil
		doubleClickSelector: 	nil
		setSelectionSelector: 	nil
		alertLimit: 	700
		locked: 	false
		warningLimit: 	350
		method: 	nil
		lockIcon: 	an AlphaImageMorph(624164864)
		canLockChangeSelector: 	#canChangeLockFor:
		lockSelector: 	#lockTextArea:from:


[ result := editBlock value ] in PluggableTextMorphWithLimits(PluggableTextMorph)>>handleEdit:
	Receiver: a PluggableTextMorphWithLimits(327155712)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph editor tallyIt ]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(822.0@477.0) corner: (1638.0@752.0)
		owner: 	a MultipleMethodsEditor(397672448)
		submorphs: 	an Array(a ScrollBar(368836608) an AlphaImageMorph(624164864) a Tran...etc...
		fullBounds: 	(822@477) corner: (1638@752)
		color: 	Color white
		extension: 	a MorphExtension (156499968) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.784 g: 0.784 b: 0.784 alpha: 1.0)
		model: 	a PackageTreeNautilusUI
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(368836608)
		scroller: 	a TransformMorph(466354176)
		getMenuSelector: 	#sourceCodeMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(1008730112)
		textMorph: 	a TextMorphForEditView(177733632)
		getTextSelector: 	#sourceCodeFrom:
		setTextSelector: 	#compileSource:notifying:
		getSelectionSelector: 	#contentsSelectionFrom:
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(13 to: 1370)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil
		doubleClickSelector: 	nil
		setSelectionSelector: 	nil
		alertLimit: 	700
		locked: 	false
		warningLimit: 	350
		method: 	nil
		lockIcon: 	an AlphaImageMorph(624164864)
		canLockChangeSelector: 	#canChangeLockFor:
		lockSelector: 	#lockTextArea:from:


TextMorphForEditView(TextMorph)>>handleEdit:
	Receiver: a TextMorphForEditView(177733632)
	Arguments and temporary variables: 
		editBlock: 	[ result := editBlock value ]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (795@705)
		owner: 	a TransformMorph(466354176)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (795@705)
		color: 	Color black
		extension: 	a MorphExtension (226492416) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Source Code Pro
		text: 	a Text for 'testHugePhp
| dsl success test|
	
dsl := ''
WholeIliasCodebas...etc...
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		defaultColor: 	Color black
		editView: 	a PluggableTextMorphWithLimits(327155712)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


PluggableTextMorphWithLimits(PluggableTextMorph)>>handleEdit:
	Receiver: a PluggableTextMorphWithLimits(327155712)
	Arguments and temporary variables: 
		result: 	nil
		editBlock: 	[ textMorph editor tallyIt ]
	Receiver's instance variables: 
		bounds: 	(822.0@477.0) corner: (1638.0@752.0)
		owner: 	a MultipleMethodsEditor(397672448)
		submorphs: 	an Array(a ScrollBar(368836608) an AlphaImageMorph(624164864) a Tran...etc...
		fullBounds: 	(822@477) corner: (1638@752)
		color: 	Color white
		extension: 	a MorphExtension (156499968) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.784 g: 0.784 b: 0.784 alpha: 1.0)
		model: 	a PackageTreeNautilusUI
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(368836608)
		scroller: 	a TransformMorph(466354176)
		getMenuSelector: 	#sourceCodeMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(1008730112)
		textMorph: 	a TextMorphForEditView(177733632)
		getTextSelector: 	#sourceCodeFrom:
		setTextSelector: 	#compileSource:notifying:
		getSelectionSelector: 	#contentsSelectionFrom:
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(13 to: 1370)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil
		doubleClickSelector: 	nil
		setSelectionSelector: 	nil
		alertLimit: 	700
		locked: 	false
		warningLimit: 	350
		method: 	nil
		lockIcon: 	an AlphaImageMorph(624164864)
		canLockChangeSelector: 	#canChangeLockFor:
		lockSelector: 	#lockTextArea:from:


PluggableTextMorphWithLimits(PluggableTextMorph)>>tallyIt
	Receiver: a PluggableTextMorphWithLimits(327155712)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(822.0@477.0) corner: (1638.0@752.0)
		owner: 	a MultipleMethodsEditor(397672448)
		submorphs: 	an Array(a ScrollBar(368836608) an AlphaImageMorph(624164864) a Tran...etc...
		fullBounds: 	(822@477) corner: (1638@752)
		color: 	Color white
		extension: 	a MorphExtension (156499968) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.784 g: 0.784 b: 0.784 alpha: 1.0)
		model: 	a PackageTreeNautilusUI
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(368836608)
		scroller: 	a TransformMorph(466354176)
		getMenuSelector: 	#sourceCodeMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(1008730112)
		textMorph: 	a TextMorphForEditView(177733632)
		getTextSelector: 	#sourceCodeFrom:
		setTextSelector: 	#compileSource:notifying:
		getSelectionSelector: 	#contentsSelectionFrom:
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(13 to: 1370)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil
		doubleClickSelector: 	nil
		setSelectionSelector: 	nil
		alertLimit: 	700
		locked: 	false
		warningLimit: 	350
		method: 	nil
		lockIcon: 	an AlphaImageMorph(624164864)
		canLockChangeSelector: 	#canChangeLockFor:
		lockSelector: 	#lockTextArea:from:


PackageTreeNautilusUI(Object)>>perform:orSendTo:
	Receiver: a PackageTreeNautilusUI
	Arguments and temporary variables: 
		selector: 	#tallyIt
		otherTarget: 	a PluggableTextMorphWithLimits(327155712)
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a CategoryWidget a MethodWidget a NautilusWindow(...etc...
		model: 	a PackageTreeNautilus
		window: 	a NautilusWindow(712507392)
		hierarchyClass: 	nil
		cachedHierarchy: 	a SortHierarchically
		sourceTextArea: 	a PluggableTextMorphWithLimits(327155712)
		groupsSelection: 	a Dictionary()
		packagesSelection: 	a Dictionary(var-tests->true )
		classesSelection: 	a Dictionary(DIPHPTests->true )
		list: 	a MorphTreeMorph(1034944512)
		list2: 	a PluggableIconListMorph(1020002304)
		sourceCodePanel: 	a PanelMorph(207618048)
		commentTextArea: 	nil
		currentDisplayChoice: 	#SourceCode
		sourceTextAreaLimit: 	350
		sourceCodeContainer: 	a PanelMorph(702283776)
		list2Elements: 	{DIDSLTests. DIJavaTests. DILangTests. DIPHPTests. DISTTests}
		listElements: 	nil
		shouldUpdateTitle: 	true
		testSemaphore: 	a Semaphore()
		sourceTextAreas: 	an OrderedCollection(a PluggableTextMorphWithLimits(327155712)...etc...
		multipleMethodsEditor: 	a MultipleMethodsEditor(397672448)
		contentSelection: 	nil
		acceptor: 	a MethodDefinitionAcceptor
		classifier: 	a MethodClassifier
		categoryWidget: 	a CategoryWidget
		methodWidget: 	a MethodWidget
		packagePattern: 	nil
		searchWidget: 	a SearchMorph(1029963776)


[ 
| selArgCount |
"show cursor in case item opens a new MVC window"
(selArgCount := selector numArgs) = 0
	ifTrue: [ target perform: selector ]
	ifFalse: [ 
		selArgCount = arguments size
			ifTrue: [ target perform: selector withArguments: arguments ]
			ifFalse: [ target perform: selector withArguments: (arguments copyWith: evt) ] ].
self changed ] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(799014912)'Profile it'
	Arguments and temporary variables: 
		evt: 	[(1244@749) mouseUp 75119135 nil]
		w: 	a WorldMorph(511705088) [world]
		selArgCount: 	2
	Receiver's instance variables: 
		bounds: 	(1160.0@738.0) corner: (1331.0@756.0)
		owner: 	a MenuMorph(535560192)
		submorphs: 	#()
		fullBounds: 	(1160.0@738.0) corner: (1331.0@756.0)
		color: 	Color black
		extension: 	a MorphExtension (846462976)
		font: 	a LogicalFont
 familyName: Source Sans Pro
 emphasis: nil
 pointSize: 10
...etc...
		emphasis: 	0
		contents: 	'Profile it'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a PackageTreeNautilusUI
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#tallyIt a PluggableTextMorphWithLimits(327155712))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


BlockClosure>>ensure:
	Receiver: [ 
| selArgCount |
"show cursor in case item opens a new MVC window"
(selArgCount := selec...etc...
	Arguments and temporary variables: 
		aBlock: 	[ oldcursor show ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
		startpc: 	134
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r100000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[ 
| selArgCount |
"show cursor in case item opens a new MVC window"
(s...etc...
		oldcursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	(-1@ -1)
		maskForm: 	Form(16x16x1)


ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(799014912)'Profile it'
	Arguments and temporary variables: 
		evt: 	[(1244@749) mouseUp 75119135 nil]
		w: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		bounds: 	(1160.0@738.0) corner: (1331.0@756.0)
		owner: 	a MenuMorph(535560192)
		submorphs: 	#()
		fullBounds: 	(1160.0@738.0) corner: (1331.0@756.0)
		color: 	Color black
		extension: 	a MorphExtension (846462976)
		font: 	a LogicalFont
 familyName: Source Sans Pro
 emphasis: nil
 pointSize: 10
...etc...
		emphasis: 	0
		contents: 	'Profile it'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a PackageTreeNautilusUI
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#tallyIt a PluggableTextMorphWithLimits(327155712))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
	Receiver: a ToggleMenuItemMorph(799014912)'Profile it'
	Arguments and temporary variables: 
		evt: 	[(1244@749) mouseUp 75119135 nil]
	Receiver's instance variables: 
		bounds: 	(1160.0@738.0) corner: (1331.0@756.0)
		owner: 	a MenuMorph(535560192)
		submorphs: 	#()
		fullBounds: 	(1160.0@738.0) corner: (1331.0@756.0)
		color: 	Color black
		extension: 	a MorphExtension (846462976)
		font: 	a LogicalFont
 familyName: Source Sans Pro
 emphasis: nil
 pointSize: 10
...etc...
		emphasis: 	0
		contents: 	'Profile it'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a PackageTreeNautilusUI
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#tallyIt a PluggableTextMorphWithLimits(327155712))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
	Receiver: a ToggleMenuItemMorph(799014912)'Profile it'
	Arguments and temporary variables: 
		anEvent: 	[(1244@749) mouseUp 75119135 nil]
	Receiver's instance variables: 
		bounds: 	(1160.0@738.0) corner: (1331.0@756.0)
		owner: 	a MenuMorph(535560192)
		submorphs: 	#()
		fullBounds: 	(1160.0@738.0) corner: (1331.0@756.0)
		color: 	Color black
		extension: 	a MorphExtension (846462976)
		font: 	a LogicalFont
 familyName: Source Sans Pro
 emphasis: nil
 pointSize: 10
...etc...
		emphasis: 	0
		contents: 	'Profile it'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a PackageTreeNautilusUI
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#tallyIt a PluggableTextMorphWithLimits(327155712))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [(1244@749) mouseUp 75119135 nil]
	Arguments and temporary variables: 
		anObject: 	a ToggleMenuItemMorph(799014912)'Profile it'
	Receiver's instance variables: 
		timeStamp: 	75119135
		source: 	a HandMorph(760479744)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(1244@749)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


ToggleMenuItemMorph(Morph)>>handleEvent:
	Receiver: a ToggleMenuItemMorph(799014912)'Profile it'
	Arguments and temporary variables: 
		anEvent: 	[(1244@749) mouseUp 75119135 nil]
	Receiver's instance variables: 
		bounds: 	(1160.0@738.0) corner: (1331.0@756.0)
		owner: 	a MenuMorph(535560192)
		submorphs: 	#()
		fullBounds: 	(1160.0@738.0) corner: (1331.0@756.0)
		color: 	Color black
		extension: 	a MorphExtension (846462976)
		font: 	a LogicalFont
 familyName: Source Sans Pro
 emphasis: nil
 pointSize: 10
...etc...
		emphasis: 	0
		contents: 	'Profile it'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a PackageTreeNautilusUI
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#tallyIt a PluggableTextMorphWithLimits(327155712))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil



--- The full stack ---
SubclassResponsibility(Object)>>doesNotUnderstand: #asDictionary
DIVarPhpClass(DIVar)>>elements
DISimpleRule>>subjectElements
printRulesEntityRelationship: someRules
	| res processedPredicates |
	res := ''.
	processedPredicates := Set new.
	someRules
		do: [ :rule | 
			| predicateSelector subjectElements argumentElements data isPredicateInv isSubjectInv |
			predicateSelector := (rule predicate nameNormalized , ':') asSymbol.
			isPredicateInv := rule hasPredicateInverted.
			isSubjectInv := rule hasSubjectInverted.
			subjectElements := rule subjectElements.
			argumentElements := rule argumentElements.
			subjectElements
				do: [ :subject | 
					argumentElements
						do: [ :argument | 
							| relId spec msgPass msgFail |
							relId := subject id , '-' , argument id.
							msgPass := subject id , '.' , rule predicate name , '(' , argument id , ')=True'.
							msgFail := subject id , '.' , rule predicate name , '(' , argument id , ')=False'.
							(processedPredicates includes: relId)
								ifFalse: [ 
									data := {(#subject -> subject value).
									(#argument -> argument value).
									(#ruleId -> rule id).
									(#propertyId -> relId).
									(#msgPass -> msgPass).
									(#msgFail -> msgFail)} asDictionary.
									spec := self perform: predicateSelector withArguments: {data}.
									spec := spec
										dictoReplace:
											{('$subject' -> subject value).
											('$argument' -> argument value).
											('$ruleId' -> rule id).
											('$propertyId' -> relId).
											('$msgPass' -> msgPass).
											('$msgFail' -> msgFail)}.
									res := res , spec ].	"avoid duplicate predicate evaluations"
							processedPredicates add: relId ] ] ].
	^ res in DIPhpDependencies(DIAdapter)>>printRulesEntityRelationship:
DICollectionRule(OrderedCollection)>>do:
DIPhpDependencies(DIAdapter)>>printRulesEntityRelationship:
DIPhpDependencies(DIAdapter)>>printRules
DIPhpDependencies>>testInput
DITestGroup>>build
[ :testGroup | testGroup build ] in DIDicto>>dictoBuild:
Array(SequenceableCollection)>>do:
DIDicto>>dictoBuild:
DIDicto>>dictoRun:
DIDicto>>dictoAll:
DIPHPTests(DIDSLTests)>>runAndReturnObjWithText:andSuccessResults:onProject:
DIPHPTests class>>DoIt
CompiledMethod>>valueWithReceiver:arguments:
[ v := compiledMethod valueWithReceiver: receiver arguments: #() ] in SmalltalkEditor>>tallySelection
BlockClosure>>ensure:
MessageTally>>spyEvery:on:
TimeProfiler>>runBlock:pollingEvery:
TimeProfiler>>openOnBlock:
TimeProfiler class>>spyOn:
SmalltalkEditor>>tallySelection
SmalltalkEditor>>tallyIt
[ textMorph editor tallyIt ] in PluggableTextMorphWithLimits(PluggableTextMorph)>>tallyIt
[ result := editBlock value ] in PluggableTextMorphWithLimits(PluggableTextMorph)>>handleEdit:
TextMorphForEditView(TextMorph)>>handleEdit:
PluggableTextMorphWithLimits(PluggableTextMorph)>>handleEdit:
PluggableTextMorphWithLimits(PluggableTextMorph)>>tallyIt
PackageTreeNautilusUI(Object)>>perform:orSendTo:
[ 
| selArgCount |
"show cursor in case item opens a new MVC window"
(selArgCount := selector numArgs) = 0
	ifTrue: [ target perform: selector ]
	ifFalse: [ 
		selArgCount = arguments size
			ifTrue: [ target perform: selector withArguments: arguments ]
			ifFalse: [ target perform: selector withArguments: (arguments copyWith: evt) ] ].
self changed ] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
ToggleMenuItemMorph(Morph)>>handleEvent:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
ToggleMenuItemMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
MenuMorph(Morph)>>processEvent:using:
MenuMorph(Morph)>>processEvent:
MenuMorph>>handleFocusEvent:
[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldState>>doOneSubCycleFor:
WorldMorph>>doOneSubCycle
MenuMorph>>invokeModalAt:in:allowKeyboard:
MenuMorph>>invokeModal:
MenuMorph>>invokeModal
PluggableTextMorphWithLimits(PluggableTextMorph)>>yellowButtonActivity:
SmalltalkEditor(TextEditor)>>mouseUp:
[ editor mouseUp: evt ] in TextMorphForEditView(TextMorph)>>mouseUp:
TextMorphForEditView(TextMorph)>>handleInteraction:
TextMorphForEditView>>handleInteraction:
TextMorphForEditView(TextMorph)>>mouseUp:
TextMorphForEditView>>mouseUp:
TextMorphForEditView(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
TextMorphForEditView(Morph)>>handleEvent:
TextMorphForEditView(Morph)>>handleFocusEvent:
[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ 
World doOneCycle.
Processor yield.
false ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
TestFailure: WholeIliasCodebase cannot depend on exitOrDie -- outcome different from expected
18 March 2015 1:21:01.63718 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
NBCogit NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
https://github.com/pharo-project/pharo-vm.git Commit: 4a0d556150d478ff2de3c9624d2f18e6eaa3fa5c Date: 2014-12-18 18:42:53 +0100 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14893

Image: Pharo3.0 [Latest update: #30863]

DIPHPTests(TestAsserter)>>assert:description:
	Receiver: DIPHPTests
	Arguments and temporary variables: 
		aBooleanOrBlock: 	false
		aStringOrBlock: 	'WholeIliasCodebase cannot depend on exitOrDie -- outcome diffe...etc...
		aString: 	'WholeIliasCodebase cannot depend on exitOrDie -- outcome different fr...etc...
	Receiver's instance variables: 
		testSelector: 	nil
		expectedFails: 	nil


[ :n | 
| testPassed testRule |
testRule := DIModel allRules at: n.
testPassed := testRule hasFailed = (res at: n) not.
self assert: testPassed description: testRule asString , ' -- outcome different from expected' ] in DIPHPTests(DIDSLTests)>>runAndReturnObjWithText:andSuccessResults:onProject:
	Receiver: DIPHPTests
	Arguments and temporary variables: 
		dslText: 	'
WholeIliasCodebase = PhpClass with name:"il*"
triggerError = PhpClas...etc...
		res: 	#(false true true false)
		project: 	'HugeProject'
		dicto: 	a DIDicto
		n: 	2
		testPassed: 	false
		testRule: 	WholeIliasCodebase cannot depend on exitOrDie
	Receiver's instance variables: 
		testSelector: 	nil
		expectedFails: 	nil


Interval>>do:
	Receiver: (1 to: 2)
	Arguments and temporary variables: 
		aBlock: 	[ :n | 
| testPassed testRule |
testRule := DIModel allRules at: n.
tes...etc...
		aValue: 	2
		index: 	2
		size: 	2
	Receiver's instance variables: 
		start: 	1
		stop: 	2
		step: 	1


DIPHPTests(DIDSLTests)>>runAndReturnObjWithText:andSuccessResults:onProject:
	Receiver: DIPHPTests
	Arguments and temporary variables: 
		dslText: 	'
WholeIliasCodebase = PhpClass with name:"il*"
triggerError = PhpClas...etc...
		res: 	#(false true true false)
		project: 	'HugeProject'
		dicto: 	a DIDicto
	Receiver's instance variables: 
		testSelector: 	nil
		expectedFails: 	nil


DIPHPTests class>>DoIt
	Receiver: DIPHPTests
	Arguments and temporary variables: 
		dsl: 	'
WholeIliasCodebase = PhpClass with name:"il*"
triggerError = PhpClass wi...etc...
		success: 	#(false true true false)
		test: 	DIPHPTests
	Receiver's instance variables: 
		superclass: 	DIDSLTests
		methodDict: 	a MethodDictionary(#testHugePhp->DIPHPTests>>#testHugePhp #testPhp-...etc...
		format: 	134
		layout: 	a FixedLayout
		instanceVariables: 	#()
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#DIPHPTests
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Dicto-var-tests'
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set(#testH...etc...


CompiledMethod>>valueWithReceiver:arguments:
	Receiver: DIPHPTests class>>#DoIt
	Arguments and temporary variables: 
		aReceiver: 	DIPHPTests
		anArray: 	#()
	Receiver's instance variables: 
DIPHPTests class>>#DoIt

[ v := compiledMethod valueWithReceiver: receiver arguments: #() ] in SmalltalkEditor>>tallySelection
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		receiver: 	DIPHPTests
		context: 	nil
		compiledMethod: 	DIPHPTests class>>#DoIt
		profiler: 	nil
		v: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(600571904)
		selectionShowing: 	true
		model: 	a PackageTreeNautilusUI
		editingState: 	a SmalltalkEditingState


BlockClosure>>ensure:
	Receiver: [ v := compiledMethod valueWithReceiver: receiver arguments: #() ]
	Arguments and temporary variables: 
		aBlock: 	[ 
"cancel the probe and return the value"
"Could have already been ter...etc...
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor>>tallySelection
		startpc: 	105
		numArgs: 	0


MessageTally>>spyEvery:on:
	Receiver: nil(SmalltalkEditor) >> tallySelection
	Arguments and temporary variables: 
		observedProcess: 	a Process in nil
		millisecs: 	1
		aBlock: 	[ v := compiledMethod valueWithReceiver: receiver arguments: #() ]
		myDelay: 	a Delay(1 msecs; 1 msecs remaining)
		time0: 	75364401
	Receiver's instance variables: 
		class: 	SmalltalkEditor
		method: 	SmalltalkEditor>>#tallySelection
		process: 	nil
		tally: 	95345
		receivers: 	an Array(nil(CompiledMethod) >> valueWithReceiver:arguments: nil(DID...etc...
		senders: 	nil
		time: 	0
		gcStats: 	#(69197328 70983016 75735516 nil nil 2000 41357 3869490 144478 60618 1...etc...
		maxClassNameSize: 	1000
		maxClassPlusSelectorSize: 	1000
		maxTabs: 	100
		reportOtherProcesses: 	true


TimeProfiler>>runBlock:pollingEvery:
	Receiver: a TimeProfiler
	Arguments and temporary variables: 
		aBlock: 	[ v := compiledMethod valueWithReceiver: receiver arguments: #() ]
		pollPeriod: 	1
	Receiver's instance variables: 
		dependents: 	nil
		selection: 	nil
		announcer: 	nil
		rootItems: 	nil
		autoMultiSelection: 	nil
		headerLabel: 	nil
		multiSelection: 	nil
		wrapBlockOrSelector: 	nil
		isCheckList: 	nil
		enabled: 	nil
		win: 	nil
		rootMessageTally: 	nil(SmalltalkEditor) >> tallySelection
		threshold: 	nil
		minPercentageToExpand: 	nil
		treeMorph: 	nil
		block: 	[ v := compiledMethod valueWithReceiver: receiver arguments: #() ]
		blockCodePane: 	nil
		withBlockCodePane: 	false
		blockSource: 	nil
		reportOtherProcesses: 	nil
		showLeavesOnly: 	nil
		codeTabPane: 	nil
		resultPane: 	nil
		result: 	nil
		withToolBar: 	false


TimeProfiler>>openOnBlock:
	Receiver: a TimeProfiler
	Arguments and temporary variables: 
		aBlock: 	[ v := compiledMethod valueWithReceiver: receiver arguments: #() ]
	Receiver's instance variables: 
		dependents: 	nil
		selection: 	nil
		announcer: 	nil
		rootItems: 	nil
		autoMultiSelection: 	nil
		headerLabel: 	nil
		multiSelection: 	nil
		wrapBlockOrSelector: 	nil
		isCheckList: 	nil
		enabled: 	nil
		win: 	nil
		rootMessageTally: 	nil(SmalltalkEditor) >> tallySelection
		threshold: 	nil
		minPercentageToExpand: 	nil
		treeMorph: 	nil
		block: 	[ v := compiledMethod valueWithReceiver: receiver arguments: #() ]
		blockCodePane: 	nil
		withBlockCodePane: 	false
		blockSource: 	nil
		reportOtherProcesses: 	nil
		showLeavesOnly: 	nil
		codeTabPane: 	nil
		resultPane: 	nil
		result: 	nil
		withToolBar: 	false


TimeProfiler class>>spyOn:
	Receiver: TimeProfiler
	Arguments and temporary variables: 
		aBlock: 	[ v := compiledMethod valueWithReceiver: receiver arguments: #() ]
	Receiver's instance variables: 
		superclass: 	MorphTreeModel
		methodDict: 	a MethodDictionary(#blockCode->TimeProfiler>>#blockCode #blockCode:...etc...
		format: 	180
		layout: 	a FixedLayout
		instanceVariables: 	#(#win #rootMessageTally #threshold #minPercentageToExpand #...etc...
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#TimeProfiler
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Tools-Profilers'
		traitComposition: 	{}
		localSelectors: 	nil


SmalltalkEditor>>tallySelection
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		v: 	nil
		receiver: 	DIPHPTests
		context: 	nil
		compiledMethod: 	DIPHPTests class>>#DoIt
		profiler: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(600571904)
		selectionShowing: 	true
		model: 	a PackageTreeNautilusUI
		editingState: 	a SmalltalkEditingState


SmalltalkEditor>>tallyIt
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 

	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(600571904)
		selectionShowing: 	true
		model: 	a PackageTreeNautilusUI
		editingState: 	a SmalltalkEditingState


[ textMorph editor tallyIt ] in PluggableTextMorphWithLimits(PluggableTextMorph)>>tallyIt
	Receiver: a PluggableTextMorphWithLimits(900202496)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(538.0@569.0) corner: (1354.0@844.0)
		owner: 	a MultipleMethodsEditor(1069547520)
		submorphs: 	an Array(a ScrollBar(941883392) an AlphaImageMorph(560463872) a Tran...etc...
		fullBounds: 	(538@569) corner: (1354@844)
		color: 	Color white
		extension: 	a MorphExtension (579338240) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.784 g: 0.784 b: 0.784 alpha: 1.0)
		model: 	a PackageTreeNautilusUI
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(941883392)
		scroller: 	a TransformMorph(469499904)
		getMenuSelector: 	#sourceCodeMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(897318912)
		textMorph: 	a TextMorphForEditView(600571904)
		getTextSelector: 	#sourceCodeFrom:
		setTextSelector: 	#compileSource:notifying:
		getSelectionSelector: 	#contentsSelectionFrom:
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(13 to: 1370)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil
		doubleClickSelector: 	nil
		setSelectionSelector: 	nil
		alertLimit: 	700
		locked: 	false
		warningLimit: 	350
		method: 	nil
		lockIcon: 	an AlphaImageMorph(560463872)
		canLockChangeSelector: 	#canChangeLockFor:
		lockSelector: 	#lockTextArea:from:


[ result := editBlock value ] in PluggableTextMorphWithLimits(PluggableTextMorph)>>handleEdit:
	Receiver: a PluggableTextMorphWithLimits(900202496)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph editor tallyIt ]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(538.0@569.0) corner: (1354.0@844.0)
		owner: 	a MultipleMethodsEditor(1069547520)
		submorphs: 	an Array(a ScrollBar(941883392) an AlphaImageMorph(560463872) a Tran...etc...
		fullBounds: 	(538@569) corner: (1354@844)
		color: 	Color white
		extension: 	a MorphExtension (579338240) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.784 g: 0.784 b: 0.784 alpha: 1.0)
		model: 	a PackageTreeNautilusUI
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(941883392)
		scroller: 	a TransformMorph(469499904)
		getMenuSelector: 	#sourceCodeMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(897318912)
		textMorph: 	a TextMorphForEditView(600571904)
		getTextSelector: 	#sourceCodeFrom:
		setTextSelector: 	#compileSource:notifying:
		getSelectionSelector: 	#contentsSelectionFrom:
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(13 to: 1370)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil
		doubleClickSelector: 	nil
		setSelectionSelector: 	nil
		alertLimit: 	700
		locked: 	false
		warningLimit: 	350
		method: 	nil
		lockIcon: 	an AlphaImageMorph(560463872)
		canLockChangeSelector: 	#canChangeLockFor:
		lockSelector: 	#lockTextArea:from:


TextMorphForEditView(TextMorph)>>handleEdit:
	Receiver: a TextMorphForEditView(600571904)
	Arguments and temporary variables: 
		editBlock: 	[ result := editBlock value ]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (795@705)
		owner: 	a TransformMorph(469499904)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (795@705)
		color: 	Color black
		extension: 	a MorphExtension (649330688) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Source Code Pro
		text: 	a Text for 'testHugePhp
| dsl success test|
	
dsl := ''
WholeIliasCodebas...etc...
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		defaultColor: 	nil
		editView: 	a PluggableTextMorphWithLimits(900202496)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


PluggableTextMorphWithLimits(PluggableTextMorph)>>handleEdit:
	Receiver: a PluggableTextMorphWithLimits(900202496)
	Arguments and temporary variables: 
		result: 	nil
		editBlock: 	[ textMorph editor tallyIt ]
	Receiver's instance variables: 
		bounds: 	(538.0@569.0) corner: (1354.0@844.0)
		owner: 	a MultipleMethodsEditor(1069547520)
		submorphs: 	an Array(a ScrollBar(941883392) an AlphaImageMorph(560463872) a Tran...etc...
		fullBounds: 	(538@569) corner: (1354@844)
		color: 	Color white
		extension: 	a MorphExtension (579338240) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.784 g: 0.784 b: 0.784 alpha: 1.0)
		model: 	a PackageTreeNautilusUI
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(941883392)
		scroller: 	a TransformMorph(469499904)
		getMenuSelector: 	#sourceCodeMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(897318912)
		textMorph: 	a TextMorphForEditView(600571904)
		getTextSelector: 	#sourceCodeFrom:
		setTextSelector: 	#compileSource:notifying:
		getSelectionSelector: 	#contentsSelectionFrom:
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(13 to: 1370)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil
		doubleClickSelector: 	nil
		setSelectionSelector: 	nil
		alertLimit: 	700
		locked: 	false
		warningLimit: 	350
		method: 	nil
		lockIcon: 	an AlphaImageMorph(560463872)
		canLockChangeSelector: 	#canChangeLockFor:
		lockSelector: 	#lockTextArea:from:


PluggableTextMorphWithLimits(PluggableTextMorph)>>tallyIt
	Receiver: a PluggableTextMorphWithLimits(900202496)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(538.0@569.0) corner: (1354.0@844.0)
		owner: 	a MultipleMethodsEditor(1069547520)
		submorphs: 	an Array(a ScrollBar(941883392) an AlphaImageMorph(560463872) a Tran...etc...
		fullBounds: 	(538@569) corner: (1354@844)
		color: 	Color white
		extension: 	a MorphExtension (579338240) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.784 g: 0.784 b: 0.784 alpha: 1.0)
		model: 	a PackageTreeNautilusUI
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(941883392)
		scroller: 	a TransformMorph(469499904)
		getMenuSelector: 	#sourceCodeMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(897318912)
		textMorph: 	a TextMorphForEditView(600571904)
		getTextSelector: 	#sourceCodeFrom:
		setTextSelector: 	#compileSource:notifying:
		getSelectionSelector: 	#contentsSelectionFrom:
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(13 to: 1370)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil
		doubleClickSelector: 	nil
		setSelectionSelector: 	nil
		alertLimit: 	700
		locked: 	false
		warningLimit: 	350
		method: 	nil
		lockIcon: 	an AlphaImageMorph(560463872)
		canLockChangeSelector: 	#canChangeLockFor:
		lockSelector: 	#lockTextArea:from:


PackageTreeNautilusUI(Object)>>perform:orSendTo:
	Receiver: a PackageTreeNautilusUI
	Arguments and temporary variables: 
		selector: 	#tallyIt
		otherTarget: 	a PluggableTextMorphWithLimits(900202496)
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a CategoryWidget a MethodWidget a NautilusWindow(...etc...
		model: 	a PackageTreeNautilus
		window: 	a NautilusWindow(1020002304)
		hierarchyClass: 	nil
		cachedHierarchy: 	a SortHierarchically
		sourceTextArea: 	a PluggableTextMorphWithLimits(900202496)
		groupsSelection: 	a Dictionary()
		packagesSelection: 	a Dictionary(var-tests->true )
		classesSelection: 	a Dictionary(DIPHPTests->true )
		list: 	a MorphTreeMorph(874250240)
		list2: 	a PluggableIconListMorph(513277952)
		sourceCodePanel: 	a PanelMorph(780664832)
		commentTextArea: 	nil
		currentDisplayChoice: 	#SourceCode
		sourceTextAreaLimit: 	350
		sourceCodeContainer: 	a PanelMorph(306446336)
		list2Elements: 	{DIDSLTests. DIJavaTests. DILangTests. DIPHPTests. DISTTests}
		listElements: 	nil
		shouldUpdateTitle: 	true
		testSemaphore: 	a Semaphore()
		sourceTextAreas: 	an OrderedCollection(a PluggableTextMorphWithLimits(900202496)...etc...
		multipleMethodsEditor: 	a MultipleMethodsEditor(1069547520)
		contentSelection: 	nil
		acceptor: 	a MethodDefinitionAcceptor
		classifier: 	a MethodClassifier
		categoryWidget: 	a CategoryWidget
		methodWidget: 	a MethodWidget
		packagePattern: 	a RxMatcher
		searchWidget: 	a SearchMorph(666894336)


[ 
| selArgCount |
"show cursor in case item opens a new MVC window"
(selArgCount := selector numArgs) = 0
	ifTrue: [ target perform: selector ]
	ifFalse: [ 
		selArgCount = arguments size
			ifTrue: [ target perform: selector withArguments: arguments ]
			ifFalse: [ target perform: selector withArguments: (arguments copyWith: evt) ] ].
self changed ] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(648282112)'Profile it'
	Arguments and temporary variables: 
		evt: 	[(848@764) mouseUp 75364377 nil]
		w: 	a WorldMorph(511705088) [world]
		selArgCount: 	2
	Receiver's instance variables: 
		bounds: 	(757.0@756.0) corner: (928.0@774.0)
		owner: 	a MenuMorph(692060160)
		submorphs: 	#()
		fullBounds: 	(757.0@756.0) corner: (928.0@774.0)
		color: 	Color black
		extension: 	a MorphExtension (671612928)
		font: 	a LogicalFont
 familyName: Source Sans Pro
 emphasis: nil
 pointSize: 10
...etc...
		emphasis: 	0
		contents: 	'Profile it'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a PackageTreeNautilusUI
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#tallyIt a PluggableTextMorphWithLimits(900202496))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


BlockClosure>>ensure:
	Receiver: [ 
| selArgCount |
"show cursor in case item opens a new MVC window"
(selArgCount := selec...etc...
	Arguments and temporary variables: 
		aBlock: 	[ oldcursor show ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
		startpc: 	134
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r100000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[ 
| selArgCount |
"show cursor in case item opens a new MVC window"
(s...etc...
		oldcursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	(-1@ -1)
		maskForm: 	Form(16x16x1)


ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(648282112)'Profile it'
	Arguments and temporary variables: 
		evt: 	[(848@764) mouseUp 75364377 nil]
		w: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		bounds: 	(757.0@756.0) corner: (928.0@774.0)
		owner: 	a MenuMorph(692060160)
		submorphs: 	#()
		fullBounds: 	(757.0@756.0) corner: (928.0@774.0)
		color: 	Color black
		extension: 	a MorphExtension (671612928)
		font: 	a LogicalFont
 familyName: Source Sans Pro
 emphasis: nil
 pointSize: 10
...etc...
		emphasis: 	0
		contents: 	'Profile it'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a PackageTreeNautilusUI
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#tallyIt a PluggableTextMorphWithLimits(900202496))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
	Receiver: a ToggleMenuItemMorph(648282112)'Profile it'
	Arguments and temporary variables: 
		evt: 	[(848@764) mouseUp 75364377 nil]
	Receiver's instance variables: 
		bounds: 	(757.0@756.0) corner: (928.0@774.0)
		owner: 	a MenuMorph(692060160)
		submorphs: 	#()
		fullBounds: 	(757.0@756.0) corner: (928.0@774.0)
		color: 	Color black
		extension: 	a MorphExtension (671612928)
		font: 	a LogicalFont
 familyName: Source Sans Pro
 emphasis: nil
 pointSize: 10
...etc...
		emphasis: 	0
		contents: 	'Profile it'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a PackageTreeNautilusUI
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#tallyIt a PluggableTextMorphWithLimits(900202496))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
	Receiver: a ToggleMenuItemMorph(648282112)'Profile it'
	Arguments and temporary variables: 
		anEvent: 	[(848@764) mouseUp 75364377 nil]
	Receiver's instance variables: 
		bounds: 	(757.0@756.0) corner: (928.0@774.0)
		owner: 	a MenuMorph(692060160)
		submorphs: 	#()
		fullBounds: 	(757.0@756.0) corner: (928.0@774.0)
		color: 	Color black
		extension: 	a MorphExtension (671612928)
		font: 	a LogicalFont
 familyName: Source Sans Pro
 emphasis: nil
 pointSize: 10
...etc...
		emphasis: 	0
		contents: 	'Profile it'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a PackageTreeNautilusUI
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#tallyIt a PluggableTextMorphWithLimits(900202496))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [(848@764) mouseUp 75364377 nil]
	Arguments and temporary variables: 
		anObject: 	a ToggleMenuItemMorph(648282112)'Profile it'
	Receiver's instance variables: 
		timeStamp: 	75364377
		source: 	a HandMorph(760479744)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(848@764)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


ToggleMenuItemMorph(Morph)>>handleEvent:
	Receiver: a ToggleMenuItemMorph(648282112)'Profile it'
	Arguments and temporary variables: 
		anEvent: 	[(848@764) mouseUp 75364377 nil]
	Receiver's instance variables: 
		bounds: 	(757.0@756.0) corner: (928.0@774.0)
		owner: 	a MenuMorph(692060160)
		submorphs: 	#()
		fullBounds: 	(757.0@756.0) corner: (928.0@774.0)
		color: 	Color black
		extension: 	a MorphExtension (671612928)
		font: 	a LogicalFont
 familyName: Source Sans Pro
 emphasis: nil
 pointSize: 10
...etc...
		emphasis: 	0
		contents: 	'Profile it'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a PackageTreeNautilusUI
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#tallyIt a PluggableTextMorphWithLimits(900202496))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(848@764) mouseUp 75364377 nil]
		aMorph: 	a ToggleMenuItemMorph(648282112)'Profile it'
		localEvt: 	nil
		index: 	1
		child: 	nil
		morphs: 	#()
		inside: 	true
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(848@764) mouseUp 75364377 nil]
		aMorph: 	a ToggleMenuItemMorph(648282112)'Profile it'
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


ToggleMenuItemMorph(Morph)>>processEvent:using:
	Receiver: a ToggleMenuItemMorph(648282112)'Profile it'
	Arguments and temporary variables: 
		anEvent: 	[(848@764) mouseUp 75364377 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	(757.0@756.0) corner: (928.0@774.0)
		owner: 	a MenuMorph(692060160)
		submorphs: 	#()
		fullBounds: 	(757.0@756.0) corner: (928.0@774.0)
		color: 	Color black
		extension: 	a MorphExtension (671612928)
		font: 	a LogicalFont
 familyName: Source Sans Pro
 emphasis: nil
 pointSize: 10
...etc...
		emphasis: 	0
		contents: 	'Profile it'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a PackageTreeNautilusUI
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#tallyIt a PluggableTextMorphWithLimits(900202496))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(848@764) mouseUp 75364377 nil]
		aMorph: 	a MenuMorph(692060160)
		localEvt: 	[(848@764) mouseUp 75364377 nil]
		index: 	11
		child: 	a ToggleMenuItemMorph(648282112)'Profile it'
		morphs: 	an Array(a ToggleMenuItemMorph(131596288)'Suggestions' a MenuLineMorph(...etc...
		inside: 	false
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(848@764) mouseUp 75364377 nil]
		aMorph: 	a MenuMorph(692060160)
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MenuMorph(Morph)>>processEvent:using:
	Receiver: a MenuMorph(692060160)
	Arguments and temporary variables: 
		anEvent: 	[(848@764) mouseUp 75364377 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	(752.0@596.0) corner: (933.0@1038.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(131596288)'Suggestions' a MenuLineMor...etc...
		fullBounds: 	(752.0@596.0) corner: (933.0@1038.0)
		color: 	(Color r: 0.894 g: 0.894 b: 0.894 alpha: 1.0)
		extension: 	a MorphExtension (727449600) [other:  (basicColor -> (Color r: 0.823...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.674 g: 0.674 b: 0.674 alpha: 1.0)
		defaultTarget: 	a PackageTreeNautilusUI
		selectedItem: 	a ToggleMenuItemMorph(648282112)'Profile it'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(131596288)'Suggestions' a...etc...


MenuMorph(Morph)>>processEvent:
	Receiver: a MenuMorph(692060160)
	Arguments and temporary variables: 
		anEvent: 	[(848@764) mouseUp 75364377 nil]
	Receiver's instance variables: 
		bounds: 	(752.0@596.0) corner: (933.0@1038.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(131596288)'Suggestions' a MenuLineMor...etc...
		fullBounds: 	(752.0@596.0) corner: (933.0@1038.0)
		color: 	(Color r: 0.894 g: 0.894 b: 0.894 alpha: 1.0)
		extension: 	a MorphExtension (727449600) [other:  (basicColor -> (Color r: 0.823...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.674 g: 0.674 b: 0.674 alpha: 1.0)
		defaultTarget: 	a PackageTreeNautilusUI
		selectedItem: 	a ToggleMenuItemMorph(648282112)'Profile it'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(131596288)'Suggestions' a...etc...


MenuMorph>>handleFocusEvent:
	Receiver: a MenuMorph(692060160)
	Arguments and temporary variables: 
		evt: 	[(848@764) mouseUp 75364377 nil]
	Receiver's instance variables: 
		bounds: 	(752.0@596.0) corner: (933.0@1038.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(131596288)'Suggestions' a MenuLineMor...etc...
		fullBounds: 	(752.0@596.0) corner: (933.0@1038.0)
		color: 	(Color r: 0.894 g: 0.894 b: 0.894 alpha: 1.0)
		extension: 	a MorphExtension (727449600) [other:  (basicColor -> (Color r: 0.823...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.674 g: 0.674 b: 0.674 alpha: 1.0)
		defaultTarget: 	a PackageTreeNautilusUI
		selectedItem: 	a ToggleMenuItemMorph(648282112)'Profile it'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(131596288)'Suggestions' a...etc...


[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[(848@764) mouseUp 75364377 nil]
		focusHolder: 	a MenuMorph(692060160)
		aBlock: 	[ self mouseFocus: nil ]
		w: 	a WorldMorph(511705088) [world]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(574@147.0) corner: (590@163.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(574@147) mouseOver nil nil]
		targetOffset: 	(91.0@8.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 75368339 723 228 0 0 0 1)
		lastKeyScanCode: 	247
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


BlockClosure>>on:do:
	Receiver: [ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (an...etc...
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :ex | 
ActiveWorld := priorWorld.
ActiveEvent := priorEvent.
A...etc...
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	HandMorph>>sendFocusEvent:to:clear:
		startpc: 	67
		numArgs: 	0


WorldMorph(PasteUpMorph)>>becomeActiveDuring:
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 
		aBlock: 	[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder ha...etc...
		priorWorld: 	a WorldMorph(511705088) [world]
		priorHand: 	a HandMorph(760479744)
		priorEvent: 	[(848@764) mouseOver red nil nil]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1855@1056)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a NautilusWindow(1020002304) a St...etc...
		fullBounds: 	nil
		color: 	Color white
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil



--- The full stack ---
DIPHPTests(TestAsserter)>>assert:description:
[ :n | 
| testPassed testRule |
testRule := DIModel allRules at: n.
testPassed := testRule hasFailed = (res at: n) not.
self assert: testPassed description: testRule asString , ' -- outcome different from expected' ] in DIPHPTests(DIDSLTests)>>runAndReturnObjWithText:andSuccessResults:onProject:
Interval>>do:
DIPHPTests(DIDSLTests)>>runAndReturnObjWithText:andSuccessResults:onProject:
DIPHPTests class>>DoIt
CompiledMethod>>valueWithReceiver:arguments:
[ v := compiledMethod valueWithReceiver: receiver arguments: #() ] in SmalltalkEditor>>tallySelection
BlockClosure>>ensure:
MessageTally>>spyEvery:on:
TimeProfiler>>runBlock:pollingEvery:
TimeProfiler>>openOnBlock:
TimeProfiler class>>spyOn:
SmalltalkEditor>>tallySelection
SmalltalkEditor>>tallyIt
[ textMorph editor tallyIt ] in PluggableTextMorphWithLimits(PluggableTextMorph)>>tallyIt
[ result := editBlock value ] in PluggableTextMorphWithLimits(PluggableTextMorph)>>handleEdit:
TextMorphForEditView(TextMorph)>>handleEdit:
PluggableTextMorphWithLimits(PluggableTextMorph)>>handleEdit:
PluggableTextMorphWithLimits(PluggableTextMorph)>>tallyIt
PackageTreeNautilusUI(Object)>>perform:orSendTo:
[ 
| selArgCount |
"show cursor in case item opens a new MVC window"
(selArgCount := selector numArgs) = 0
	ifTrue: [ target perform: selector ]
	ifFalse: [ 
		selArgCount = arguments size
			ifTrue: [ target perform: selector withArguments: arguments ]
			ifFalse: [ target perform: selector withArguments: (arguments copyWith: evt) ] ].
self changed ] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
ToggleMenuItemMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
ToggleMenuItemMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
MenuMorph(Morph)>>processEvent:using:
MenuMorph(Morph)>>processEvent:
MenuMorph>>handleFocusEvent:
[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldState>>doOneSubCycleFor:
WorldMorph>>doOneSubCycle
MenuMorph>>invokeModalAt:in:allowKeyboard:
MenuMorph>>invokeModal:
MenuMorph>>invokeModal
PluggableTextMorphWithLimits(PluggableTextMorph)>>yellowButtonActivity:
SmalltalkEditor(TextEditor)>>mouseUp:
[ editor mouseUp: evt ] in TextMorphForEditView(TextMorph)>>mouseUp:
TextMorphForEditView(TextMorph)>>handleInteraction:
TextMorphForEditView>>handleInteraction:
TextMorphForEditView(TextMorph)>>mouseUp:
TextMorphForEditView>>mouseUp:
TextMorphForEditView(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
TextMorphForEditView(Morph)>>handleEvent:
TextMorphForEditView(Morph)>>handleFocusEvent:
[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ 
World doOneCycle.
Processor yield.
false ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
TestFailure: WholeIliasCodebase cannot depend on exitOrDie -- outcome different from expected
18 March 2015 1:30:32.65685 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
NBCogit NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
https://github.com/pharo-project/pharo-vm.git Commit: 4a0d556150d478ff2de3c9624d2f18e6eaa3fa5c Date: 2014-12-18 18:42:53 +0100 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14893

Image: Pharo3.0 [Latest update: #30863]

DIPHPTests(TestAsserter)>>assert:description:
	Receiver: DIPHPTests
	Arguments and temporary variables: 
		aBooleanOrBlock: 	false
		aStringOrBlock: 	'WholeIliasCodebase cannot depend on exitOrDie -- outcome diffe...etc...
		aString: 	'WholeIliasCodebase cannot depend on exitOrDie -- outcome different fr...etc...
	Receiver's instance variables: 
		testSelector: 	nil
		expectedFails: 	nil


[ :n | 
| testPassed testRule |
testRule := DIModel allRules at: n.
testPassed := testRule hasFailed = (res at: n) not.
self assert: testPassed description: testRule asString , ' -- outcome different from expected' ] in DIPHPTests(DIDSLTests)>>runAndReturnObjWithText:andSuccessResults:onProject:
	Receiver: DIPHPTests
	Arguments and temporary variables: 
		dslText: 	'
WholeIliasCodebase = PhpClass with name:"il*"
WholeCodeBase = PhpCla...etc...
		res: 	#(false true true false)
		project: 	'HugeProject'
		dicto: 	a DIDicto
		n: 	2
		testPassed: 	false
		testRule: 	WholeIliasCodebase cannot depend on exitOrDie
	Receiver's instance variables: 
		testSelector: 	nil
		expectedFails: 	nil


Interval>>do:
	Receiver: (1 to: 3)
	Arguments and temporary variables: 
		aBlock: 	[ :n | 
| testPassed testRule |
testRule := DIModel allRules at: n.
tes...etc...
		aValue: 	2
		index: 	2
		size: 	3
	Receiver's instance variables: 
		start: 	1
		stop: 	3
		step: 	1


DIPHPTests(DIDSLTests)>>runAndReturnObjWithText:andSuccessResults:onProject:
	Receiver: DIPHPTests
	Arguments and temporary variables: 
		dslText: 	'
WholeIliasCodebase = PhpClass with name:"il*"
WholeCodeBase = PhpCla...etc...
		res: 	#(false true true false)
		project: 	'HugeProject'
		dicto: 	a DIDicto
	Receiver's instance variables: 
		testSelector: 	nil
		expectedFails: 	nil


DIPHPTests class>>DoIt
	Receiver: DIPHPTests
	Arguments and temporary variables: 
		dsl: 	'
WholeIliasCodebase = PhpClass with name:"il*"
WholeCodeBase = PhpClass w...etc...
		success: 	#(false true true false)
		test: 	DIPHPTests
	Receiver's instance variables: 
		superclass: 	DIDSLTests
		methodDict: 	a MethodDictionary(#testHugePhp->DIPHPTests>>#testHugePhp #testPhp-...etc...
		format: 	134
		layout: 	a FixedLayout
		instanceVariables: 	#()
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#DIPHPTests
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Dicto-var-tests'
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set(#testH...etc...


CompiledMethod>>valueWithReceiver:arguments:
	Receiver: DIPHPTests class>>#DoIt
	Arguments and temporary variables: 
		aReceiver: 	DIPHPTests
		anArray: 	#()
	Receiver's instance variables: 
DIPHPTests class>>#DoIt

[ v := compiledMethod valueWithReceiver: receiver arguments: #() ] in SmalltalkEditor>>tallySelection
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		receiver: 	DIPHPTests
		context: 	nil
		compiledMethod: 	DIPHPTests class>>#DoIt
		profiler: 	nil
		v: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(600571904)
		selectionShowing: 	true
		model: 	a PackageTreeNautilusUI
		editingState: 	a SmalltalkEditingState


BlockClosure>>ensure:
	Receiver: [ v := compiledMethod valueWithReceiver: receiver arguments: #() ]
	Arguments and temporary variables: 
		aBlock: 	[ 
"cancel the probe and return the value"
"Could have already been ter...etc...
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor>>tallySelection
		startpc: 	105
		numArgs: 	0


MessageTally>>spyEvery:on:
	Receiver: nil(SmalltalkEditor) >> tallySelection
	Arguments and temporary variables: 
		observedProcess: 	a Process in nil
		millisecs: 	1
		aBlock: 	[ v := compiledMethod valueWithReceiver: receiver arguments: #() ]
		myDelay: 	a Delay(1 msecs; 1 msecs remaining)
		time0: 	75561140
	Receiver's instance variables: 
		class: 	SmalltalkEditor
		method: 	SmalltalkEditor>>#tallySelection
		process: 	nil
		tally: 	469580
		receivers: 	an Array(nil(CompiledMethod) >> valueWithReceiver:arguments: nil(DID...etc...
		senders: 	nil
		time: 	0
		gcStats: 	#(76271420 76882864 82645376 nil nil 2000 41358 3869600 146997 61739 1...etc...
		maxClassNameSize: 	1000
		maxClassPlusSelectorSize: 	1000
		maxTabs: 	100
		reportOtherProcesses: 	true


TimeProfiler>>runBlock:pollingEvery:
	Receiver: a TimeProfiler
	Arguments and temporary variables: 
		aBlock: 	[ v := compiledMethod valueWithReceiver: receiver arguments: #() ]
		pollPeriod: 	1
	Receiver's instance variables: 
		dependents: 	nil
		selection: 	nil
		announcer: 	nil
		rootItems: 	nil
		autoMultiSelection: 	nil
		headerLabel: 	nil
		multiSelection: 	nil
		wrapBlockOrSelector: 	nil
		isCheckList: 	nil
		enabled: 	nil
		win: 	nil
		rootMessageTally: 	nil(SmalltalkEditor) >> tallySelection
		threshold: 	nil
		minPercentageToExpand: 	nil
		treeMorph: 	nil
		block: 	[ v := compiledMethod valueWithReceiver: receiver arguments: #() ]
		blockCodePane: 	nil
		withBlockCodePane: 	false
		blockSource: 	nil
		reportOtherProcesses: 	nil
		showLeavesOnly: 	nil
		codeTabPane: 	nil
		resultPane: 	nil
		result: 	nil
		withToolBar: 	false


TimeProfiler>>openOnBlock:
	Receiver: a TimeProfiler
	Arguments and temporary variables: 
		aBlock: 	[ v := compiledMethod valueWithReceiver: receiver arguments: #() ]
	Receiver's instance variables: 
		dependents: 	nil
		selection: 	nil
		announcer: 	nil
		rootItems: 	nil
		autoMultiSelection: 	nil
		headerLabel: 	nil
		multiSelection: 	nil
		wrapBlockOrSelector: 	nil
		isCheckList: 	nil
		enabled: 	nil
		win: 	nil
		rootMessageTally: 	nil(SmalltalkEditor) >> tallySelection
		threshold: 	nil
		minPercentageToExpand: 	nil
		treeMorph: 	nil
		block: 	[ v := compiledMethod valueWithReceiver: receiver arguments: #() ]
		blockCodePane: 	nil
		withBlockCodePane: 	false
		blockSource: 	nil
		reportOtherProcesses: 	nil
		showLeavesOnly: 	nil
		codeTabPane: 	nil
		resultPane: 	nil
		result: 	nil
		withToolBar: 	false


TimeProfiler class>>spyOn:
	Receiver: TimeProfiler
	Arguments and temporary variables: 
		aBlock: 	[ v := compiledMethod valueWithReceiver: receiver arguments: #() ]
	Receiver's instance variables: 
		superclass: 	MorphTreeModel
		methodDict: 	a MethodDictionary(#blockCode->TimeProfiler>>#blockCode #blockCode:...etc...
		format: 	180
		layout: 	a FixedLayout
		instanceVariables: 	#(#win #rootMessageTally #threshold #minPercentageToExpand #...etc...
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#TimeProfiler
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Tools-Profilers'
		traitComposition: 	{}
		localSelectors: 	nil


SmalltalkEditor>>tallySelection
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		v: 	nil
		receiver: 	DIPHPTests
		context: 	nil
		compiledMethod: 	DIPHPTests class>>#DoIt
		profiler: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(600571904)
		selectionShowing: 	true
		model: 	a PackageTreeNautilusUI
		editingState: 	a SmalltalkEditingState


SmalltalkEditor>>tallyIt
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 

	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(600571904)
		selectionShowing: 	true
		model: 	a PackageTreeNautilusUI
		editingState: 	a SmalltalkEditingState


[ textMorph editor tallyIt ] in PluggableTextMorphWithLimits(PluggableTextMorph)>>tallyIt
	Receiver: a PluggableTextMorphWithLimits(900202496)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(538.0@569.0) corner: (1354.0@844.0)
		owner: 	a MultipleMethodsEditor(1069547520)
		submorphs: 	an Array(a ScrollBar(941883392) an AlphaImageMorph(560463872) a Tran...etc...
		fullBounds: 	(538@569) corner: (1354@844)
		color: 	Color white
		extension: 	a MorphExtension (579338240) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.784 g: 0.784 b: 0.784 alpha: 1.0)
		model: 	a PackageTreeNautilusUI
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(941883392)
		scroller: 	a TransformMorph(469499904)
		getMenuSelector: 	#sourceCodeMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(897318912)
		textMorph: 	a TextMorphForEditView(600571904)
		getTextSelector: 	#sourceCodeFrom:
		setTextSelector: 	#compileSource:notifying:
		getSelectionSelector: 	#contentsSelectionFrom:
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(13 to: 1456)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil
		doubleClickSelector: 	nil
		setSelectionSelector: 	nil
		alertLimit: 	700
		locked: 	false
		warningLimit: 	350
		method: 	nil
		lockIcon: 	an AlphaImageMorph(560463872)
		canLockChangeSelector: 	#canChangeLockFor:
		lockSelector: 	#lockTextArea:from:


[ result := editBlock value ] in PluggableTextMorphWithLimits(PluggableTextMorph)>>handleEdit:
	Receiver: a PluggableTextMorphWithLimits(900202496)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph editor tallyIt ]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(538.0@569.0) corner: (1354.0@844.0)
		owner: 	a MultipleMethodsEditor(1069547520)
		submorphs: 	an Array(a ScrollBar(941883392) an AlphaImageMorph(560463872) a Tran...etc...
		fullBounds: 	(538@569) corner: (1354@844)
		color: 	Color white
		extension: 	a MorphExtension (579338240) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.784 g: 0.784 b: 0.784 alpha: 1.0)
		model: 	a PackageTreeNautilusUI
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(941883392)
		scroller: 	a TransformMorph(469499904)
		getMenuSelector: 	#sourceCodeMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(897318912)
		textMorph: 	a TextMorphForEditView(600571904)
		getTextSelector: 	#sourceCodeFrom:
		setTextSelector: 	#compileSource:notifying:
		getSelectionSelector: 	#contentsSelectionFrom:
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(13 to: 1456)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil
		doubleClickSelector: 	nil
		setSelectionSelector: 	nil
		alertLimit: 	700
		locked: 	false
		warningLimit: 	350
		method: 	nil
		lockIcon: 	an AlphaImageMorph(560463872)
		canLockChangeSelector: 	#canChangeLockFor:
		lockSelector: 	#lockTextArea:from:


TextMorphForEditView(TextMorph)>>handleEdit:
	Receiver: a TextMorphForEditView(600571904)
	Arguments and temporary variables: 
		editBlock: 	[ result := editBlock value ]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (795@743)
		owner: 	a TransformMorph(469499904)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (795@743)
		color: 	Color black
		extension: 	a MorphExtension (649330688) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Source Code Pro
		text: 	a Text for 'testHugePhp
| dsl success test|
	
dsl := ''
WholeIliasCodebas...etc...
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		defaultColor: 	nil
		editView: 	a PluggableTextMorphWithLimits(900202496)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


PluggableTextMorphWithLimits(PluggableTextMorph)>>handleEdit:
	Receiver: a PluggableTextMorphWithLimits(900202496)
	Arguments and temporary variables: 
		result: 	nil
		editBlock: 	[ textMorph editor tallyIt ]
	Receiver's instance variables: 
		bounds: 	(538.0@569.0) corner: (1354.0@844.0)
		owner: 	a MultipleMethodsEditor(1069547520)
		submorphs: 	an Array(a ScrollBar(941883392) an AlphaImageMorph(560463872) a Tran...etc...
		fullBounds: 	(538@569) corner: (1354@844)
		color: 	Color white
		extension: 	a MorphExtension (579338240) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.784 g: 0.784 b: 0.784 alpha: 1.0)
		model: 	a PackageTreeNautilusUI
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(941883392)
		scroller: 	a TransformMorph(469499904)
		getMenuSelector: 	#sourceCodeMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(897318912)
		textMorph: 	a TextMorphForEditView(600571904)
		getTextSelector: 	#sourceCodeFrom:
		setTextSelector: 	#compileSource:notifying:
		getSelectionSelector: 	#contentsSelectionFrom:
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(13 to: 1456)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil
		doubleClickSelector: 	nil
		setSelectionSelector: 	nil
		alertLimit: 	700
		locked: 	false
		warningLimit: 	350
		method: 	nil
		lockIcon: 	an AlphaImageMorph(560463872)
		canLockChangeSelector: 	#canChangeLockFor:
		lockSelector: 	#lockTextArea:from:


PluggableTextMorphWithLimits(PluggableTextMorph)>>tallyIt
	Receiver: a PluggableTextMorphWithLimits(900202496)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(538.0@569.0) corner: (1354.0@844.0)
		owner: 	a MultipleMethodsEditor(1069547520)
		submorphs: 	an Array(a ScrollBar(941883392) an AlphaImageMorph(560463872) a Tran...etc...
		fullBounds: 	(538@569) corner: (1354@844)
		color: 	Color white
		extension: 	a MorphExtension (579338240) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.784 g: 0.784 b: 0.784 alpha: 1.0)
		model: 	a PackageTreeNautilusUI
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(941883392)
		scroller: 	a TransformMorph(469499904)
		getMenuSelector: 	#sourceCodeMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(897318912)
		textMorph: 	a TextMorphForEditView(600571904)
		getTextSelector: 	#sourceCodeFrom:
		setTextSelector: 	#compileSource:notifying:
		getSelectionSelector: 	#contentsSelectionFrom:
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(13 to: 1456)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil
		doubleClickSelector: 	nil
		setSelectionSelector: 	nil
		alertLimit: 	700
		locked: 	false
		warningLimit: 	350
		method: 	nil
		lockIcon: 	an AlphaImageMorph(560463872)
		canLockChangeSelector: 	#canChangeLockFor:
		lockSelector: 	#lockTextArea:from:


PackageTreeNautilusUI(Object)>>perform:orSendTo:
	Receiver: a PackageTreeNautilusUI
	Arguments and temporary variables: 
		selector: 	#tallyIt
		otherTarget: 	a PluggableTextMorphWithLimits(900202496)
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a CategoryWidget a MethodWidget a NautilusWindow(...etc...
		model: 	a PackageTreeNautilus
		window: 	a NautilusWindow(1020002304)
		hierarchyClass: 	nil
		cachedHierarchy: 	a SortHierarchically
		sourceTextArea: 	a PluggableTextMorphWithLimits(900202496)
		groupsSelection: 	a Dictionary()
		packagesSelection: 	a Dictionary(var-tests->true )
		classesSelection: 	a Dictionary(DIPHPTests->true )
		list: 	a MorphTreeMorph(874250240)
		list2: 	a PluggableIconListMorph(513277952)
		sourceCodePanel: 	a PanelMorph(780664832)
		commentTextArea: 	nil
		currentDisplayChoice: 	#SourceCode
		sourceTextAreaLimit: 	350
		sourceCodeContainer: 	a PanelMorph(306446336)
		list2Elements: 	{DIDSLTests. DIJavaTests. DILangTests. DIPHPTests. DISTTests}
		listElements: 	nil
		shouldUpdateTitle: 	true
		testSemaphore: 	a Semaphore()
		sourceTextAreas: 	an OrderedCollection(a PluggableTextMorphWithLimits(900202496)...etc...
		multipleMethodsEditor: 	a MultipleMethodsEditor(1069547520)
		contentSelection: 	nil
		acceptor: 	a MethodDefinitionAcceptor
		classifier: 	a MethodClassifier
		categoryWidget: 	a CategoryWidget
		methodWidget: 	a MethodWidget
		packagePattern: 	a RxMatcher
		searchWidget: 	a SearchMorph(666894336)


[ 
| selArgCount |
"show cursor in case item opens a new MVC window"
(selArgCount := selector numArgs) = 0
	ifTrue: [ target perform: selector ]
	ifFalse: [ 
		selArgCount = arguments size
			ifTrue: [ target perform: selector withArguments: arguments ]
			ifFalse: [ target perform: selector withArguments: (arguments copyWith: evt) ] ].
self changed ] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(341049344)'Profile it'
	Arguments and temporary variables: 
		evt: 	[(800@765) mouseUp 75561104 nil]
		w: 	a WorldMorph(511705088) [world]
		selArgCount: 	2
	Receiver's instance variables: 
		bounds: 	(739.0@756.0) corner: (910.0@774.0)
		owner: 	a MenuMorph(726401024)
		submorphs: 	#()
		fullBounds: 	(739.0@756.0) corner: (910.0@774.0)
		color: 	Color black
		extension: 	a MorphExtension (364380160)
		font: 	a LogicalFont
 familyName: Source Sans Pro
 emphasis: nil
 pointSize: 10
...etc...
		emphasis: 	0
		contents: 	'Profile it'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a PackageTreeNautilusUI
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#tallyIt a PluggableTextMorphWithLimits(900202496))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


BlockClosure>>ensure:
	Receiver: [ 
| selArgCount |
"show cursor in case item opens a new MVC window"
(selArgCount := selec...etc...
	Arguments and temporary variables: 
		aBlock: 	[ oldcursor show ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
		startpc: 	134
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r100000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[ 
| selArgCount |
"show cursor in case item opens a new MVC window"
(s...etc...
		oldcursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	(-1@ -1)
		maskForm: 	Form(16x16x1)


ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(341049344)'Profile it'
	Arguments and temporary variables: 
		evt: 	[(800@765) mouseUp 75561104 nil]
		w: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		bounds: 	(739.0@756.0) corner: (910.0@774.0)
		owner: 	a MenuMorph(726401024)
		submorphs: 	#()
		fullBounds: 	(739.0@756.0) corner: (910.0@774.0)
		color: 	Color black
		extension: 	a MorphExtension (364380160)
		font: 	a LogicalFont
 familyName: Source Sans Pro
 emphasis: nil
 pointSize: 10
...etc...
		emphasis: 	0
		contents: 	'Profile it'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a PackageTreeNautilusUI
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#tallyIt a PluggableTextMorphWithLimits(900202496))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
	Receiver: a ToggleMenuItemMorph(341049344)'Profile it'
	Arguments and temporary variables: 
		evt: 	[(800@765) mouseUp 75561104 nil]
	Receiver's instance variables: 
		bounds: 	(739.0@756.0) corner: (910.0@774.0)
		owner: 	a MenuMorph(726401024)
		submorphs: 	#()
		fullBounds: 	(739.0@756.0) corner: (910.0@774.0)
		color: 	Color black
		extension: 	a MorphExtension (364380160)
		font: 	a LogicalFont
 familyName: Source Sans Pro
 emphasis: nil
 pointSize: 10
...etc...
		emphasis: 	0
		contents: 	'Profile it'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a PackageTreeNautilusUI
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#tallyIt a PluggableTextMorphWithLimits(900202496))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
	Receiver: a ToggleMenuItemMorph(341049344)'Profile it'
	Arguments and temporary variables: 
		anEvent: 	[(800@765) mouseUp 75561104 nil]
	Receiver's instance variables: 
		bounds: 	(739.0@756.0) corner: (910.0@774.0)
		owner: 	a MenuMorph(726401024)
		submorphs: 	#()
		fullBounds: 	(739.0@756.0) corner: (910.0@774.0)
		color: 	Color black
		extension: 	a MorphExtension (364380160)
		font: 	a LogicalFont
 familyName: Source Sans Pro
 emphasis: nil
 pointSize: 10
...etc...
		emphasis: 	0
		contents: 	'Profile it'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a PackageTreeNautilusUI
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#tallyIt a PluggableTextMorphWithLimits(900202496))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [(800@765) mouseUp 75561104 nil]
	Arguments and temporary variables: 
		anObject: 	a ToggleMenuItemMorph(341049344)'Profile it'
	Receiver's instance variables: 
		timeStamp: 	75561104
		source: 	a HandMorph(760479744)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(800@765)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


ToggleMenuItemMorph(Morph)>>handleEvent:
	Receiver: a ToggleMenuItemMorph(341049344)'Profile it'
	Arguments and temporary variables: 
		anEvent: 	[(800@765) mouseUp 75561104 nil]
	Receiver's instance variables: 
		bounds: 	(739.0@756.0) corner: (910.0@774.0)
		owner: 	a MenuMorph(726401024)
		submorphs: 	#()
		fullBounds: 	(739.0@756.0) corner: (910.0@774.0)
		color: 	Color black
		extension: 	a MorphExtension (364380160)
		font: 	a LogicalFont
 familyName: Source Sans Pro
 emphasis: nil
 pointSize: 10
...etc...
		emphasis: 	0
		contents: 	'Profile it'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a PackageTreeNautilusUI
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#tallyIt a PluggableTextMorphWithLimits(900202496))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(800@765) mouseUp 75561104 nil]
		aMorph: 	a ToggleMenuItemMorph(341049344)'Profile it'
		localEvt: 	nil
		index: 	1
		child: 	nil
		morphs: 	#()
		inside: 	true
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(800@765) mouseUp 75561104 nil]
		aMorph: 	a ToggleMenuItemMorph(341049344)'Profile it'
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


ToggleMenuItemMorph(Morph)>>processEvent:using:
	Receiver: a ToggleMenuItemMorph(341049344)'Profile it'
	Arguments and temporary variables: 
		anEvent: 	[(800@765) mouseUp 75561104 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	(739.0@756.0) corner: (910.0@774.0)
		owner: 	a MenuMorph(726401024)
		submorphs: 	#()
		fullBounds: 	(739.0@756.0) corner: (910.0@774.0)
		color: 	Color black
		extension: 	a MorphExtension (364380160)
		font: 	a LogicalFont
 familyName: Source Sans Pro
 emphasis: nil
 pointSize: 10
...etc...
		emphasis: 	0
		contents: 	'Profile it'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a PackageTreeNautilusUI
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#tallyIt a PluggableTextMorphWithLimits(900202496))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(800@765) mouseUp 75561104 nil]
		aMorph: 	a MenuMorph(726401024)
		localEvt: 	[(800@765) mouseUp 75561104 nil]
		index: 	11
		child: 	a ToggleMenuItemMorph(341049344)'Profile it'
		morphs: 	an Array(a ToggleMenuItemMorph(501481472)'Suggestions' a MenuLineMorph(...etc...
		inside: 	false
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(800@765) mouseUp 75561104 nil]
		aMorph: 	a MenuMorph(726401024)
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MenuMorph(Morph)>>processEvent:using:
	Receiver: a MenuMorph(726401024)
	Arguments and temporary variables: 
		anEvent: 	[(800@765) mouseUp 75561104 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	(734.0@596.0) corner: (915.0@1038.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(501481472)'Suggestions' a MenuLineMor...etc...
		fullBounds: 	(734.0@596.0) corner: (915.0@1038.0)
		color: 	(Color r: 0.894 g: 0.894 b: 0.894 alpha: 1.0)
		extension: 	a MorphExtension (767819776) [other:  (basicColor -> (Color r: 0.823...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.674 g: 0.674 b: 0.674 alpha: 1.0)
		defaultTarget: 	a PackageTreeNautilusUI
		selectedItem: 	a ToggleMenuItemMorph(341049344)'Profile it'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(501481472)'Suggestions' a...etc...


MenuMorph(Morph)>>processEvent:
	Receiver: a MenuMorph(726401024)
	Arguments and temporary variables: 
		anEvent: 	[(800@765) mouseUp 75561104 nil]
	Receiver's instance variables: 
		bounds: 	(734.0@596.0) corner: (915.0@1038.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(501481472)'Suggestions' a MenuLineMor...etc...
		fullBounds: 	(734.0@596.0) corner: (915.0@1038.0)
		color: 	(Color r: 0.894 g: 0.894 b: 0.894 alpha: 1.0)
		extension: 	a MorphExtension (767819776) [other:  (basicColor -> (Color r: 0.823...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.674 g: 0.674 b: 0.674 alpha: 1.0)
		defaultTarget: 	a PackageTreeNautilusUI
		selectedItem: 	a ToggleMenuItemMorph(341049344)'Profile it'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(501481472)'Suggestions' a...etc...


MenuMorph>>handleFocusEvent:
	Receiver: a MenuMorph(726401024)
	Arguments and temporary variables: 
		evt: 	[(800@765) mouseUp 75561104 nil]
	Receiver's instance variables: 
		bounds: 	(734.0@596.0) corner: (915.0@1038.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(501481472)'Suggestions' a MenuLineMor...etc...
		fullBounds: 	(734.0@596.0) corner: (915.0@1038.0)
		color: 	(Color r: 0.894 g: 0.894 b: 0.894 alpha: 1.0)
		extension: 	a MorphExtension (767819776) [other:  (basicColor -> (Color r: 0.823...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.674 g: 0.674 b: 0.674 alpha: 1.0)
		defaultTarget: 	a PackageTreeNautilusUI
		selectedItem: 	a ToggleMenuItemMorph(341049344)'Profile it'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(501481472)'Suggestions' a...etc...


[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[(800@765) mouseUp 75561104 nil]
		focusHolder: 	a MenuMorph(726401024)
		aBlock: 	[ self mouseFocus: nil ]
		w: 	a WorldMorph(511705088) [world]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(816@362.0) corner: (832@378.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(816@362) mouseOver nil nil]
		targetOffset: 	(61.0@9.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 75562779 577 504 0 0 0 1)
		lastKeyScanCode: 	247
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


BlockClosure>>on:do:
	Receiver: [ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (an...etc...
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :ex | 
ActiveWorld := priorWorld.
ActiveEvent := priorEvent.
A...etc...
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	HandMorph>>sendFocusEvent:to:clear:
		startpc: 	67
		numArgs: 	0


WorldMorph(PasteUpMorph)>>becomeActiveDuring:
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 
		aBlock: 	[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder ha...etc...
		priorWorld: 	a WorldMorph(511705088) [world]
		priorHand: 	a HandMorph(760479744)
		priorEvent: 	[(800@765) mouseOver red nil nil]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1855@1056)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a NautilusWindow(1020002304) a St...etc...
		fullBounds: 	nil
		color: 	Color white
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil



--- The full stack ---
DIPHPTests(TestAsserter)>>assert:description:
[ :n | 
| testPassed testRule |
testRule := DIModel allRules at: n.
testPassed := testRule hasFailed = (res at: n) not.
self assert: testPassed description: testRule asString , ' -- outcome different from expected' ] in DIPHPTests(DIDSLTests)>>runAndReturnObjWithText:andSuccessResults:onProject:
Interval>>do:
DIPHPTests(DIDSLTests)>>runAndReturnObjWithText:andSuccessResults:onProject:
DIPHPTests class>>DoIt
CompiledMethod>>valueWithReceiver:arguments:
[ v := compiledMethod valueWithReceiver: receiver arguments: #() ] in SmalltalkEditor>>tallySelection
BlockClosure>>ensure:
MessageTally>>spyEvery:on:
TimeProfiler>>runBlock:pollingEvery:
TimeProfiler>>openOnBlock:
TimeProfiler class>>spyOn:
SmalltalkEditor>>tallySelection
SmalltalkEditor>>tallyIt
[ textMorph editor tallyIt ] in PluggableTextMorphWithLimits(PluggableTextMorph)>>tallyIt
[ result := editBlock value ] in PluggableTextMorphWithLimits(PluggableTextMorph)>>handleEdit:
TextMorphForEditView(TextMorph)>>handleEdit:
PluggableTextMorphWithLimits(PluggableTextMorph)>>handleEdit:
PluggableTextMorphWithLimits(PluggableTextMorph)>>tallyIt
PackageTreeNautilusUI(Object)>>perform:orSendTo:
[ 
| selArgCount |
"show cursor in case item opens a new MVC window"
(selArgCount := selector numArgs) = 0
	ifTrue: [ target perform: selector ]
	ifFalse: [ 
		selArgCount = arguments size
			ifTrue: [ target perform: selector withArguments: arguments ]
			ifFalse: [ target perform: selector withArguments: (arguments copyWith: evt) ] ].
self changed ] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
ToggleMenuItemMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
ToggleMenuItemMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
MenuMorph(Morph)>>processEvent:using:
MenuMorph(Morph)>>processEvent:
MenuMorph>>handleFocusEvent:
[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldState>>doOneSubCycleFor:
WorldMorph>>doOneSubCycle
MenuMorph>>invokeModalAt:in:allowKeyboard:
MenuMorph>>invokeModal:
MenuMorph>>invokeModal
PluggableTextMorphWithLimits(PluggableTextMorph)>>yellowButtonActivity:
SmalltalkEditor(TextEditor)>>mouseUp:
[ editor mouseUp: evt ] in TextMorphForEditView(TextMorph)>>mouseUp:
TextMorphForEditView(TextMorph)>>handleInteraction:
TextMorphForEditView>>handleInteraction:
TextMorphForEditView(TextMorph)>>mouseUp:
TextMorphForEditView>>mouseUp:
TextMorphForEditView(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
TextMorphForEditView(Morph)>>handleEvent:
TextMorphForEditView(Morph)>>handleFocusEvent:
[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ 
World doOneCycle.
Processor yield.
false ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
TestFailure: WholeCodeBase cannot depend on SetErrorHandler -- outcome different from expected
18 March 2015 1:30:36.421771 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
NBCogit NativeBoost-CogPlugin-EstebanLorenzano.21 uuid: 4d9b9bdf-2dfa-4c0b-99eb-5b110dadc697 Feb  5 2015
https://github.com/pharo-project/pharo-vm.git Commit: 4a0d556150d478ff2de3c9624d2f18e6eaa3fa5c Date: 2014-12-18 18:42:53 +0100 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14893

Image: Pharo3.0 [Latest update: #30863]

DIPHPTests(TestAsserter)>>assert:description:
	Receiver: DIPHPTests
	Arguments and temporary variables: 
		aBooleanOrBlock: 	false
		aStringOrBlock: 	'WholeCodeBase cannot depend on SetErrorHandler -- outcome diff...etc...
		aString: 	'WholeCodeBase cannot depend on SetErrorHandler -- outcome different f...etc...
	Receiver's instance variables: 
		testSelector: 	nil
		expectedFails: 	nil


[ :n | 
| testPassed testRule |
testRule := DIModel allRules at: n.
testPassed := testRule hasFailed = (res at: n) not.
self assert: testPassed description: testRule asString , ' -- outcome different from expected' ] in DIPHPTests(DIDSLTests)>>runAndReturnObjWithText:andSuccessResults:onProject:
	Receiver: DIPHPTests
	Arguments and temporary variables: 
		dslText: 	'
WholeIliasCodebase = PhpClass with name:"il*"
WholeCodeBase = PhpCla...etc...
		res: 	#(false true true false)
		project: 	'HugeProject'
		dicto: 	a DIDicto
		n: 	3
		testPassed: 	false
		testRule: 	WholeCodeBase cannot depend on SetErrorHandler
	Receiver's instance variables: 
		testSelector: 	nil
		expectedFails: 	nil


Interval>>do:
	Receiver: (1 to: 3)
	Arguments and temporary variables: 
		aBlock: 	[ :n | 
| testPassed testRule |
testRule := DIModel allRules at: n.
tes...etc...
		aValue: 	3
		index: 	3
		size: 	3
	Receiver's instance variables: 
		start: 	1
		stop: 	3
		step: 	1


DIPHPTests(DIDSLTests)>>runAndReturnObjWithText:andSuccessResults:onProject:
	Receiver: DIPHPTests
	Arguments and temporary variables: 
		dslText: 	'
WholeIliasCodebase = PhpClass with name:"il*"
WholeCodeBase = PhpCla...etc...
		res: 	#(false true true false)
		project: 	'HugeProject'
		dicto: 	a DIDicto
	Receiver's instance variables: 
		testSelector: 	nil
		expectedFails: 	nil


DIPHPTests class>>DoIt
	Receiver: DIPHPTests
	Arguments and temporary variables: 
		dsl: 	'
WholeIliasCodebase = PhpClass with name:"il*"
WholeCodeBase = PhpClass w...etc...
		success: 	#(false true true false)
		test: 	DIPHPTests
	Receiver's instance variables: 
		superclass: 	DIDSLTests
		methodDict: 	a MethodDictionary(#testHugePhp->DIPHPTests>>#testHugePhp #testPhp-...etc...
		format: 	134
		layout: 	a FixedLayout
		instanceVariables: 	#()
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#DIPHPTests
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Dicto-var-tests'
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set(#testH...etc...


CompiledMethod>>valueWithReceiver:arguments:
	Receiver: DIPHPTests class>>#DoIt
	Arguments and temporary variables: 
		aReceiver: 	DIPHPTests
		anArray: 	#()
	Receiver's instance variables: 
DIPHPTests class>>#DoIt

[ v := compiledMethod valueWithReceiver: receiver arguments: #() ] in SmalltalkEditor>>tallySelection
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		receiver: 	DIPHPTests
		context: 	nil
		compiledMethod: 	DIPHPTests class>>#DoIt
		profiler: 	nil
		v: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(600571904)
		selectionShowing: 	true
		model: 	a PackageTreeNautilusUI
		editingState: 	a SmalltalkEditingState


BlockClosure>>ensure:
	Receiver: [ v := compiledMethod valueWithReceiver: receiver arguments: #() ]
	Arguments and temporary variables: 
		aBlock: 	[ 
"cancel the probe and return the value"
"Could have already been ter...etc...
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor>>tallySelection
		startpc: 	105
		numArgs: 	0


MessageTally>>spyEvery:on:
	Receiver: nil(SmalltalkEditor) >> tallySelection
	Arguments and temporary variables: 
		observedProcess: 	a Process in nil
		millisecs: 	1
		aBlock: 	[ v := compiledMethod valueWithReceiver: receiver arguments: #() ]
		myDelay: 	a Delay(1 msecs; 1 msecs remaining)
		time0: 	75561140
	Receiver's instance variables: 
		class: 	SmalltalkEditor
		method: 	SmalltalkEditor>>#tallySelection
		process: 	nil
		tally: 	473330
		receivers: 	an Array(nil(CompiledMethod) >> valueWithReceiver:arguments: nil(DID...etc...
		senders: 	nil
		time: 	0
		gcStats: 	#(76271420 76882864 82645376 nil nil 2000 41358 3869600 146997 61739 1...etc...
		maxClassNameSize: 	1000
		maxClassPlusSelectorSize: 	1000
		maxTabs: 	100
		reportOtherProcesses: 	true


TimeProfiler>>runBlock:pollingEvery:
	Receiver: a TimeProfiler
	Arguments and temporary variables: 
		aBlock: 	[ v := compiledMethod valueWithReceiver: receiver arguments: #() ]
		pollPeriod: 	1
	Receiver's instance variables: 
		dependents: 	nil
		selection: 	nil
		announcer: 	nil
		rootItems: 	nil
		autoMultiSelection: 	nil
		headerLabel: 	nil
		multiSelection: 	nil
		wrapBlockOrSelector: 	nil
		isCheckList: 	nil
		enabled: 	nil
		win: 	nil
		rootMessageTally: 	nil(SmalltalkEditor) >> tallySelection
		threshold: 	nil
		minPercentageToExpand: 	nil
		treeMorph: 	nil
		block: 	[ v := compiledMethod valueWithReceiver: receiver arguments: #() ]
		blockCodePane: 	nil
		withBlockCodePane: 	false
		blockSource: 	nil
		reportOtherProcesses: 	nil
		showLeavesOnly: 	nil
		codeTabPane: 	nil
		resultPane: 	nil
		result: 	nil
		withToolBar: 	false


TimeProfiler>>openOnBlock:
	Receiver: a TimeProfiler
	Arguments and temporary variables: 
		aBlock: 	[ v := compiledMethod valueWithReceiver: receiver arguments: #() ]
	Receiver's instance variables: 
		dependents: 	nil
		selection: 	nil
		announcer: 	nil
		rootItems: 	nil
		autoMultiSelection: 	nil
		headerLabel: 	nil
		multiSelection: 	nil
		wrapBlockOrSelector: 	nil
		isCheckList: 	nil
		enabled: 	nil
		win: 	nil
		rootMessageTally: 	nil(SmalltalkEditor) >> tallySelection
		threshold: 	nil
		minPercentageToExpand: 	nil
		treeMorph: 	nil
		block: 	[ v := compiledMethod valueWithReceiver: receiver arguments: #() ]
		blockCodePane: 	nil
		withBlockCodePane: 	false
		blockSource: 	nil
		reportOtherProcesses: 	nil
		showLeavesOnly: 	nil
		codeTabPane: 	nil
		resultPane: 	nil
		result: 	nil
		withToolBar: 	false


TimeProfiler class>>spyOn:
	Receiver: TimeProfiler
	Arguments and temporary variables: 
		aBlock: 	[ v := compiledMethod valueWithReceiver: receiver arguments: #() ]
	Receiver's instance variables: 
		superclass: 	MorphTreeModel
		methodDict: 	a MethodDictionary(#blockCode->TimeProfiler>>#blockCode #blockCode:...etc...
		format: 	180
		layout: 	a FixedLayout
		instanceVariables: 	#(#win #rootMessageTally #threshold #minPercentageToExpand #...etc...
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#TimeProfiler
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Tools-Profilers'
		traitComposition: 	{}
		localSelectors: 	nil


SmalltalkEditor>>tallySelection
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		v: 	nil
		receiver: 	DIPHPTests
		context: 	nil
		compiledMethod: 	DIPHPTests class>>#DoIt
		profiler: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(600571904)
		selectionShowing: 	true
		model: 	a PackageTreeNautilusUI
		editingState: 	a SmalltalkEditingState


SmalltalkEditor>>tallyIt
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 

	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(600571904)
		selectionShowing: 	true
		model: 	a PackageTreeNautilusUI
		editingState: 	a SmalltalkEditingState


[ textMorph editor tallyIt ] in PluggableTextMorphWithLimits(PluggableTextMorph)>>tallyIt
	Receiver: a PluggableTextMorphWithLimits(900202496)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(538.0@569.0) corner: (1354.0@844.0)
		owner: 	a MultipleMethodsEditor(1069547520)
		submorphs: 	an Array(a ScrollBar(941883392) an AlphaImageMorph(560463872) a Tran...etc...
		fullBounds: 	(538@569) corner: (1354@844)
		color: 	Color white
		extension: 	a MorphExtension (579338240) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.784 g: 0.784 b: 0.784 alpha: 1.0)
		model: 	a PackageTreeNautilusUI
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(941883392)
		scroller: 	a TransformMorph(469499904)
		getMenuSelector: 	#sourceCodeMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(897318912)
		textMorph: 	a TextMorphForEditView(600571904)
		getTextSelector: 	#sourceCodeFrom:
		setTextSelector: 	#compileSource:notifying:
		getSelectionSelector: 	#contentsSelectionFrom:
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(13 to: 1456)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil
		doubleClickSelector: 	nil
		setSelectionSelector: 	nil
		alertLimit: 	700
		locked: 	false
		warningLimit: 	350
		method: 	nil
		lockIcon: 	an AlphaImageMorph(560463872)
		canLockChangeSelector: 	#canChangeLockFor:
		lockSelector: 	#lockTextArea:from:


[ result := editBlock value ] in PluggableTextMorphWithLimits(PluggableTextMorph)>>handleEdit:
	Receiver: a PluggableTextMorphWithLimits(900202496)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph editor tallyIt ]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(538.0@569.0) corner: (1354.0@844.0)
		owner: 	a MultipleMethodsEditor(1069547520)
		submorphs: 	an Array(a ScrollBar(941883392) an AlphaImageMorph(560463872) a Tran...etc...
		fullBounds: 	(538@569) corner: (1354@844)
		color: 	Color white
		extension: 	a MorphExtension (579338240) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.784 g: 0.784 b: 0.784 alpha: 1.0)
		model: 	a PackageTreeNautilusUI
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(941883392)
		scroller: 	a TransformMorph(469499904)
		getMenuSelector: 	#sourceCodeMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(897318912)
		textMorph: 	a TextMorphForEditView(600571904)
		getTextSelector: 	#sourceCodeFrom:
		setTextSelector: 	#compileSource:notifying:
		getSelectionSelector: 	#contentsSelectionFrom:
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(13 to: 1456)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil
		doubleClickSelector: 	nil
		setSelectionSelector: 	nil
		alertLimit: 	700
		locked: 	false
		warningLimit: 	350
		method: 	nil
		lockIcon: 	an AlphaImageMorph(560463872)
		canLockChangeSelector: 	#canChangeLockFor:
		lockSelector: 	#lockTextArea:from:


TextMorphForEditView(TextMorph)>>handleEdit:
	Receiver: a TextMorphForEditView(600571904)
	Arguments and temporary variables: 
		editBlock: 	[ result := editBlock value ]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (795@743)
		owner: 	a TransformMorph(469499904)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (795@743)
		color: 	Color black
		extension: 	a MorphExtension (649330688) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Source Code Pro
		text: 	a Text for 'testHugePhp
| dsl success test|
	
dsl := ''
WholeIliasCodebas...etc...
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		defaultColor: 	nil
		editView: 	a PluggableTextMorphWithLimits(900202496)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


PluggableTextMorphWithLimits(PluggableTextMorph)>>handleEdit:
	Receiver: a PluggableTextMorphWithLimits(900202496)
	Arguments and temporary variables: 
		result: 	nil
		editBlock: 	[ textMorph editor tallyIt ]
	Receiver's instance variables: 
		bounds: 	(538.0@569.0) corner: (1354.0@844.0)
		owner: 	a MultipleMethodsEditor(1069547520)
		submorphs: 	an Array(a ScrollBar(941883392) an AlphaImageMorph(560463872) a Tran...etc...
		fullBounds: 	(538@569) corner: (1354@844)
		color: 	Color white
		extension: 	a MorphExtension (579338240) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.784 g: 0.784 b: 0.784 alpha: 1.0)
		model: 	a PackageTreeNautilusUI
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(941883392)
		scroller: 	a TransformMorph(469499904)
		getMenuSelector: 	#sourceCodeMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(897318912)
		textMorph: 	a TextMorphForEditView(600571904)
		getTextSelector: 	#sourceCodeFrom:
		setTextSelector: 	#compileSource:notifying:
		getSelectionSelector: 	#contentsSelectionFrom:
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(13 to: 1456)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil
		doubleClickSelector: 	nil
		setSelectionSelector: 	nil
		alertLimit: 	700
		locked: 	false
		warningLimit: 	350
		method: 	nil
		lockIcon: 	an AlphaImageMorph(560463872)
		canLockChangeSelector: 	#canChangeLockFor:
		lockSelector: 	#lockTextArea:from:


PluggableTextMorphWithLimits(PluggableTextMorph)>>tallyIt
	Receiver: a PluggableTextMorphWithLimits(900202496)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(538.0@569.0) corner: (1354.0@844.0)
		owner: 	a MultipleMethodsEditor(1069547520)
		submorphs: 	an Array(a ScrollBar(941883392) an AlphaImageMorph(560463872) a Tran...etc...
		fullBounds: 	(538@569) corner: (1354@844)
		color: 	Color white
		extension: 	a MorphExtension (579338240) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.784 g: 0.784 b: 0.784 alpha: 1.0)
		model: 	a PackageTreeNautilusUI
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(941883392)
		scroller: 	a TransformMorph(469499904)
		getMenuSelector: 	#sourceCodeMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(897318912)
		textMorph: 	a TextMorphForEditView(600571904)
		getTextSelector: 	#sourceCodeFrom:
		setTextSelector: 	#compileSource:notifying:
		getSelectionSelector: 	#contentsSelectionFrom:
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(13 to: 1456)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil
		doubleClickSelector: 	nil
		setSelectionSelector: 	nil
		alertLimit: 	700
		locked: 	false
		warningLimit: 	350
		method: 	nil
		lockIcon: 	an AlphaImageMorph(560463872)
		canLockChangeSelector: 	#canChangeLockFor:
		lockSelector: 	#lockTextArea:from:


PackageTreeNautilusUI(Object)>>perform:orSendTo:
	Receiver: a PackageTreeNautilusUI
	Arguments and temporary variables: 
		selector: 	#tallyIt
		otherTarget: 	a PluggableTextMorphWithLimits(900202496)
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a CategoryWidget a MethodWidget a NautilusWindow(...etc...
		model: 	a PackageTreeNautilus
		window: 	a NautilusWindow(1020002304)
		hierarchyClass: 	nil
		cachedHierarchy: 	a SortHierarchically
		sourceTextArea: 	a PluggableTextMorphWithLimits(900202496)
		groupsSelection: 	a Dictionary()
		packagesSelection: 	a Dictionary(var-tests->true )
		classesSelection: 	a Dictionary(DIPHPTests->true )
		list: 	a MorphTreeMorph(874250240)
		list2: 	a PluggableIconListMorph(513277952)
		sourceCodePanel: 	a PanelMorph(780664832)
		commentTextArea: 	nil
		currentDisplayChoice: 	#SourceCode
		sourceTextAreaLimit: 	350
		sourceCodeContainer: 	a PanelMorph(306446336)
		list2Elements: 	{DIDSLTests. DIJavaTests. DILangTests. DIPHPTests. DISTTests}
		listElements: 	nil
		shouldUpdateTitle: 	true
		testSemaphore: 	a Semaphore()
		sourceTextAreas: 	an OrderedCollection(a PluggableTextMorphWithLimits(900202496)...etc...
		multipleMethodsEditor: 	a MultipleMethodsEditor(1069547520)
		contentSelection: 	nil
		acceptor: 	a MethodDefinitionAcceptor
		classifier: 	a MethodClassifier
		categoryWidget: 	a CategoryWidget
		methodWidget: 	a MethodWidget
		packagePattern: 	a RxMatcher
		searchWidget: 	a SearchMorph(666894336)


[ 
| selArgCount |
"show cursor in case item opens a new MVC window"
(selArgCount := selector numArgs) = 0
	ifTrue: [ target perform: selector ]
	ifFalse: [ 
		selArgCount = arguments size
			ifTrue: [ target perform: selector withArguments: arguments ]
			ifFalse: [ target perform: selector withArguments: (arguments copyWith: evt) ] ].
self changed ] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(341049344)'Profile it'
	Arguments and temporary variables: 
		evt: 	[(800@765) mouseUp 75561104 nil]
		w: 	a WorldMorph(511705088) [world]
		selArgCount: 	2
	Receiver's instance variables: 
		bounds: 	(739.0@756.0) corner: (910.0@774.0)
		owner: 	a MenuMorph(726401024)
		submorphs: 	#()
		fullBounds: 	(739.0@756.0) corner: (910.0@774.0)
		color: 	Color black
		extension: 	a MorphExtension (364380160)
		font: 	a LogicalFont
 familyName: Source Sans Pro
 emphasis: nil
 pointSize: 10
...etc...
		emphasis: 	0
		contents: 	'Profile it'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a PackageTreeNautilusUI
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#tallyIt a PluggableTextMorphWithLimits(900202496))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


BlockClosure>>ensure:
	Receiver: [ 
| selArgCount |
"show cursor in case item opens a new MVC window"
(selArgCount := selec...etc...
	Arguments and temporary variables: 
		aBlock: 	[ oldcursor show ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
		startpc: 	134
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r100000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[ 
| selArgCount |
"show cursor in case item opens a new MVC window"
(s...etc...
		oldcursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	(-1@ -1)
		maskForm: 	Form(16x16x1)


ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(341049344)'Profile it'
	Arguments and temporary variables: 
		evt: 	[(800@765) mouseUp 75561104 nil]
		w: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		bounds: 	(739.0@756.0) corner: (910.0@774.0)
		owner: 	a MenuMorph(726401024)
		submorphs: 	#()
		fullBounds: 	(739.0@756.0) corner: (910.0@774.0)
		color: 	Color black
		extension: 	a MorphExtension (364380160)
		font: 	a LogicalFont
 familyName: Source Sans Pro
 emphasis: nil
 pointSize: 10
...etc...
		emphasis: 	0
		contents: 	'Profile it'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a PackageTreeNautilusUI
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#tallyIt a PluggableTextMorphWithLimits(900202496))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
	Receiver: a ToggleMenuItemMorph(341049344)'Profile it'
	Arguments and temporary variables: 
		evt: 	[(800@765) mouseUp 75561104 nil]
	Receiver's instance variables: 
		bounds: 	(739.0@756.0) corner: (910.0@774.0)
		owner: 	a MenuMorph(726401024)
		submorphs: 	#()
		fullBounds: 	(739.0@756.0) corner: (910.0@774.0)
		color: 	Color black
		extension: 	a MorphExtension (364380160)
		font: 	a LogicalFont
 familyName: Source Sans Pro
 emphasis: nil
 pointSize: 10
...etc...
		emphasis: 	0
		contents: 	'Profile it'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a PackageTreeNautilusUI
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#tallyIt a PluggableTextMorphWithLimits(900202496))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
	Receiver: a ToggleMenuItemMorph(341049344)'Profile it'
	Arguments and temporary variables: 
		anEvent: 	[(800@765) mouseUp 75561104 nil]
	Receiver's instance variables: 
		bounds: 	(739.0@756.0) corner: (910.0@774.0)
		owner: 	a MenuMorph(726401024)
		submorphs: 	#()
		fullBounds: 	(739.0@756.0) corner: (910.0@774.0)
		color: 	Color black
		extension: 	a MorphExtension (364380160)
		font: 	a LogicalFont
 familyName: Source Sans Pro
 emphasis: nil
 pointSize: 10
...etc...
		emphasis: 	0
		contents: 	'Profile it'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a PackageTreeNautilusUI
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#tallyIt a PluggableTextMorphWithLimits(900202496))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [(800@765) mouseUp 75561104 nil]
	Arguments and temporary variables: 
		anObject: 	a ToggleMenuItemMorph(341049344)'Profile it'
	Receiver's instance variables: 
		timeStamp: 	75561104
		source: 	a HandMorph(760479744)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(800@765)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


ToggleMenuItemMorph(Morph)>>handleEvent:
	Receiver: a ToggleMenuItemMorph(341049344)'Profile it'
	Arguments and temporary variables: 
		anEvent: 	[(800@765) mouseUp 75561104 nil]
	Receiver's instance variables: 
		bounds: 	(739.0@756.0) corner: (910.0@774.0)
		owner: 	a MenuMorph(726401024)
		submorphs: 	#()
		fullBounds: 	(739.0@756.0) corner: (910.0@774.0)
		color: 	Color black
		extension: 	a MorphExtension (364380160)
		font: 	a LogicalFont
 familyName: Source Sans Pro
 emphasis: nil
 pointSize: 10
...etc...
		emphasis: 	0
		contents: 	'Profile it'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a PackageTreeNautilusUI
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#tallyIt a PluggableTextMorphWithLimits(900202496))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(800@765) mouseUp 75561104 nil]
		aMorph: 	a ToggleMenuItemMorph(341049344)'Profile it'
		localEvt: 	nil
		index: 	1
		child: 	nil
		morphs: 	#()
		inside: 	true
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(800@765) mouseUp 75561104 nil]
		aMorph: 	a ToggleMenuItemMorph(341049344)'Profile it'
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


ToggleMenuItemMorph(Morph)>>processEvent:using:
	Receiver: a ToggleMenuItemMorph(341049344)'Profile it'
	Arguments and temporary variables: 
		anEvent: 	[(800@765) mouseUp 75561104 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	(739.0@756.0) corner: (910.0@774.0)
		owner: 	a MenuMorph(726401024)
		submorphs: 	#()
		fullBounds: 	(739.0@756.0) corner: (910.0@774.0)
		color: 	Color black
		extension: 	a MorphExtension (364380160)
		font: 	a LogicalFont
 familyName: Source Sans Pro
 emphasis: nil
 pointSize: 10
...etc...
		emphasis: 	0
		contents: 	'Profile it'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a PackageTreeNautilusUI
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#tallyIt a PluggableTextMorphWithLimits(900202496))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(800@765) mouseUp 75561104 nil]
		aMorph: 	a MenuMorph(726401024)
		localEvt: 	[(800@765) mouseUp 75561104 nil]
		index: 	11
		child: 	a ToggleMenuItemMorph(341049344)'Profile it'
		morphs: 	an Array(a ToggleMenuItemMorph(501481472)'Suggestions' a MenuLineMorph(...etc...
		inside: 	false
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(800@765) mouseUp 75561104 nil]
		aMorph: 	a MenuMorph(726401024)
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MenuMorph(Morph)>>processEvent:using:
	Receiver: a MenuMorph(726401024)
	Arguments and temporary variables: 
		anEvent: 	[(800@765) mouseUp 75561104 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	(734.0@596.0) corner: (915.0@1038.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(501481472)'Suggestions' a MenuLineMor...etc...
		fullBounds: 	(734.0@596.0) corner: (915.0@1038.0)
		color: 	(Color r: 0.894 g: 0.894 b: 0.894 alpha: 1.0)
		extension: 	a MorphExtension (767819776) [other:  (basicColor -> (Color r: 0.823...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.674 g: 0.674 b: 0.674 alpha: 1.0)
		defaultTarget: 	a PackageTreeNautilusUI
		selectedItem: 	a ToggleMenuItemMorph(341049344)'Profile it'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(501481472)'Suggestions' a...etc...


MenuMorph(Morph)>>processEvent:
	Receiver: a MenuMorph(726401024)
	Arguments and temporary variables: 
		anEvent: 	[(800@765) mouseUp 75561104 nil]
	Receiver's instance variables: 
		bounds: 	(734.0@596.0) corner: (915.0@1038.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(501481472)'Suggestions' a MenuLineMor...etc...
		fullBounds: 	(734.0@596.0) corner: (915.0@1038.0)
		color: 	(Color r: 0.894 g: 0.894 b: 0.894 alpha: 1.0)
		extension: 	a MorphExtension (767819776) [other:  (basicColor -> (Color r: 0.823...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.674 g: 0.674 b: 0.674 alpha: 1.0)
		defaultTarget: 	a PackageTreeNautilusUI
		selectedItem: 	a ToggleMenuItemMorph(341049344)'Profile it'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(501481472)'Suggestions' a...etc...


MenuMorph>>handleFocusEvent:
	Receiver: a MenuMorph(726401024)
	Arguments and temporary variables: 
		evt: 	[(800@765) mouseUp 75561104 nil]
	Receiver's instance variables: 
		bounds: 	(734.0@596.0) corner: (915.0@1038.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(501481472)'Suggestions' a MenuLineMor...etc...
		fullBounds: 	(734.0@596.0) corner: (915.0@1038.0)
		color: 	(Color r: 0.894 g: 0.894 b: 0.894 alpha: 1.0)
		extension: 	a MorphExtension (767819776) [other:  (basicColor -> (Color r: 0.823...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.674 g: 0.674 b: 0.674 alpha: 1.0)
		defaultTarget: 	a PackageTreeNautilusUI
		selectedItem: 	a ToggleMenuItemMorph(341049344)'Profile it'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(501481472)'Suggestions' a...etc...


[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[(800@765) mouseUp 75561104 nil]
		focusHolder: 	a MenuMorph(726401024)
		aBlock: 	[ self mouseFocus: nil ]
		w: 	a WorldMorph(511705088) [world]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(839@234.0) corner: (855@250.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(839@234.0) corner: (855@250.0)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	a PaginatedMorphTreeMorph(50593792)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(839@234) mouseOver nil nil]
		targetOffset: 	(13.0@9.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 76034488 839 234 0 0 0 1)
		lastKeyScanCode: 	247
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


BlockClosure>>on:do:
	Receiver: [ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (an...etc...
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :ex | 
ActiveWorld := priorWorld.
ActiveEvent := priorEvent.
A...etc...
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	HandMorph>>sendFocusEvent:to:clear:
		startpc: 	67
		numArgs: 	0


WorldMorph(PasteUpMorph)>>becomeActiveDuring:
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 
		aBlock: 	[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder ha...etc...
		priorWorld: 	a WorldMorph(511705088) [world]
		priorHand: 	a HandMorph(760479744)
		priorEvent: 	[(800@765) mouseOver red nil nil]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1855@1056)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a NautilusWindow(1020002304) a St...etc...
		fullBounds: 	nil
		color: 	Color white
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil



--- The full stack ---
DIPHPTests(TestAsserter)>>assert:description:
[ :n | 
| testPassed testRule |
testRule := DIModel allRules at: n.
testPassed := testRule hasFailed = (res at: n) not.
self assert: testPassed description: testRule asString , ' -- outcome different from expected' ] in DIPHPTests(DIDSLTests)>>runAndReturnObjWithText:andSuccessResults:onProject:
Interval>>do:
DIPHPTests(DIDSLTests)>>runAndReturnObjWithText:andSuccessResults:onProject:
DIPHPTests class>>DoIt
CompiledMethod>>valueWithReceiver:arguments:
[ v := compiledMethod valueWithReceiver: receiver arguments: #() ] in SmalltalkEditor>>tallySelection
BlockClosure>>ensure:
MessageTally>>spyEvery:on:
TimeProfiler>>runBlock:pollingEvery:
TimeProfiler>>openOnBlock:
TimeProfiler class>>spyOn:
SmalltalkEditor>>tallySelection
SmalltalkEditor>>tallyIt
[ textMorph editor tallyIt ] in PluggableTextMorphWithLimits(PluggableTextMorph)>>tallyIt
[ result := editBlock value ] in PluggableTextMorphWithLimits(PluggableTextMorph)>>handleEdit:
TextMorphForEditView(TextMorph)>>handleEdit:
PluggableTextMorphWithLimits(PluggableTextMorph)>>handleEdit:
PluggableTextMorphWithLimits(PluggableTextMorph)>>tallyIt
PackageTreeNautilusUI(Object)>>perform:orSendTo:
[ 
| selArgCount |
"show cursor in case item opens a new MVC window"
(selArgCount := selector numArgs) = 0
	ifTrue: [ target perform: selector ]
	ifFalse: [ 
		selArgCount = arguments size
			ifTrue: [ target perform: selector withArguments: arguments ]
			ifFalse: [ target perform: selector withArguments: (arguments copyWith: evt) ] ].
self changed ] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
ToggleMenuItemMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
ToggleMenuItemMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
MenuMorph(Morph)>>processEvent:using:
MenuMorph(Morph)>>processEvent:
MenuMorph>>handleFocusEvent:
[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldState>>doOneSubCycleFor:
WorldMorph>>doOneSubCycle
MenuMorph>>invokeModalAt:in:allowKeyboard:
MenuMorph>>invokeModal:
MenuMorph>>invokeModal
PluggableTextMorphWithLimits(PluggableTextMorph)>>yellowButtonActivity:
SmalltalkEditor(TextEditor)>>mouseUp:
[ editor mouseUp: evt ] in TextMorphForEditView(TextMorph)>>mouseUp:
TextMorphForEditView(TextMorph)>>handleInteraction:
TextMorphForEditView>>handleInteraction:
TextMorphForEditView(TextMorph)>>mouseUp:
TextMorphForEditView>>mouseUp:
TextMorphForEditView(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
TextMorphForEditView(Morph)>>handleEvent:
TextMorphForEditView(Morph)>>handleFocusEvent:
[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ 
World doOneCycle.
Processor yield.
false ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

